ld_file path,new_file path,commit SHA,parent commit SHA,commit message,diff_histÂ¹,old_file_MCC,new_file_MCC
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,31715ec98a690ff8f18c9e4bf99766f285906925,a17a57825ebc1da53547fd2d9c67603ac6e3116b,Fix Arrow,"{'added': [(839, '        self.add_subpath(points2)'), (855, '            self.get_start().copy(),'), (856, '            self.get_end().copy(),'), (857, '            path_arc=self.path_arc')], 'deleted': [(839, '        self.append_points(points2)'), (852, '        self.refresh_triangulation()'), (856, '            self.get_start().copy(), self.get_end().copy(), path_arc=self.path_arc')]}",140,140
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,8c435d61819c770706319dbcc72bdce8fff61730,31715ec98a690ff8f18c9e4bf99766f285906925,Default to flat stroke for polygons,"{'added': [(914, '    def __init__('), (915, '        self,'), (916, '        *vertices: Vect3,'), (917, '        flat_stroke: bool = True,'), (918, '        **kwargs'), (919, '    ):'), (920, '        super().__init__(flat_stroke=flat_stroke, **kwargs)')], 'deleted': [(914, '    def __init__(self, *vertices: Vect3, **kwargs):'), (915, '        super().__init__(**kwargs)')]}",140,140
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f04d0ad3507352d99236715532b1ab3686f4ed67,8c435d61819c770706319dbcc72bdce8fff61730,Update add_cubic_bezier_curve,"{'added': [(447, '        self.add_subpath(get_quadratic_approximation_of_cubic('), (449, '        ))')], 'deleted': [(447, '        new_points = get_quadratic_approximation_of_cubic('), (449, '        )'), (450, '        if not self.consider_points_equal(self.get_last_point(), new_points[0]):'), (451, '            self.start_new_path(new_points[0])'), (452, '        self.append_points(new_points[1:])')]}",259,259
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,5a56a2a5ecfd3b205bd1026eb65fbaea0f79eee0,f04d0ad3507352d99236715532b1ab3686f4ed67,Remove bad solution to bevel issue,"{'added': [], 'deleted': [(69, '    // }else if(int(joint_type) == MITER_JOINT || (int(joint_type) == AUTO_JOINT && abs(angle) > 0.95 * PI)){'), (105, '    // This is to prevent weird bevel artifacts for sharp angles'), (106, '    if(abs(angle_from_prev) > 0.5 * PI){'), (107, '        stroke_widths[0] *= sin(angle_from_prev);'), (108, '        stroke_widths[1] = 0.5 * (stroke_widths[0] + stroke_widths[2]);'), (109, '    }'), (110, '    if(abs(angle_to_next) > 0.5 * PI){'), (111, '        stroke_widths[2] *= sin(angle_to_next);'), (112, '        stroke_widths[1] = 0.5 * (stroke_widths[0] + stroke_widths[2]);'), (113, '    }'), (114, '')]}",,
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,bf84b1933bb0976b41be4d44a2f4561eeb55f42f,5a56a2a5ecfd3b205bd1026eb65fbaea0f79eee0,Remove unnecessary flat stroke specification,"{'added': [], 'deleted': [(39, '        flat_stroke: bool = False,'), (47, '        self.flat_stroke = flat_stroke')]}",30,30
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,ed26fdfab83403b81e5973dba4df2d2e8405112e,bf84b1933bb0976b41be4d44a2f4561eeb55f42f,Have Polyline default to flat stroke,"{'added': [(973, '    def __init__('), (974, '        self,'), (975, '        *vertices: Vect3,'), (976, '        flat_stroke: bool = True,'), (977, '        **kwargs'), (978, '    ):'), (979, '        super().__init__(flat_stroke=flat_stroke, **kwargs)')], 'deleted': [(973, '    def __init__(self, *vertices: Vect3, **kwargs):'), (974, '        super().__init__(**kwargs)')]}",140,140
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,1f04ba92fbbdb56dd244a977beeb7fc3b33f661c,ed26fdfab83403b81e5973dba4df2d2e8405112e,Fix Polygon.round_corners,"{'added': [(22, 'from manimlib.utils.space_ops import cross2d'), (939, '            vect1 = normalize(v2 - v1)'), (940, '            vect2 = normalize(v3 - v2)'), (944, '            # Negative radius gives concave curves'), (945, '            sign = float(np.sign(radius * cross2d(vect1, vect2)))'), (947, '                v2 - vect1 * cut_off_length,'), (948, '                v2 + vect2 * cut_off_length,'), (958, '            self.add_subpath(arc1.get_points())'), (959, '            self.add_line_to(arc2.get_start())')], 'deleted': [(938, '            vect1 = v2 - v1'), (939, '            vect2 = v3 - v2'), (940, '            unit_vect1 = normalize(vect1)'), (941, '            unit_vect2 = normalize(vect2)'), (943, '            # Negative radius gives concave curves'), (944, '            angle *= np.sign(radius)'), (947, '            # Determines counterclockwise vs. clockwise'), (948, '            sign = np.sign(np.cross(vect1, vect2)[2])'), (950, '                v2 - unit_vect1 * cut_off_length,'), (951, '                v2 + unit_vect2 * cut_off_length,'), (961, '            self.append_points(arc1.get_points())'), (962, '            line = Line(arc1.get_end(), arc2.get_start())'), (963, '            # Make sure anchors are evenly distributed'), (964, '            len_ratio = line.get_length() / arc1.get_arc_length()'), (965, '            line.insert_n_curves('), (966, '                int(arc1.get_num_curves() * len_ratio)'), (967, '            )'), (968, '            self.append_points(line.get_points())')]}",140,140
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,131e1c2eeb5ef1a9a503f97b22e06f4477d3ff55,1f04ba92fbbdb56dd244a977beeb7fc3b33f661c,"Have corners emitted by stroke geom shader better line up with bezier control points

This is helpful for, say, setting variable stroke width","{'added': [(4, 'layout (triangle_strip, max_vertices = 6) out;'), (82, '// emitted as a triangle fan, with vertices vaguely close'), (83, '// to control points so that the passage of vert data to'), (84, '// frag shaders is most natural.'), (85, 'void get_corners('), (91, '    out vec2 corners[6]'), (109, '    // The order of corners should be for a triangle_strip.'), (112, '    vec2 c2 = p1 - 0.5 * (buff0 * p0_perp + buff2 * p2_perp);'), (113, '    // c3 needs to be defined after c5'), (114, '    vec2 c4 = p2 - buff2 * p2_perp;'), (115, '    vec2 c5 = p2 + buff2 * p2_perp;'), (116, '    vec2 c3 = 0.5 * (c1 + c5);'), (120, '    create_joint(angle_to_next, -v12, buff2, c4, c4, c5, c5);'), (122, '    corners = vec2[6](c0, c1, c2, c3, c4, c5);'), (177, '    vec2 corners[6];'), (178, '    get_corners('), (185, '    for(int i = 0; i < 6; i++){'), (186, '        int vert_index = i / 2;'), (188, '        uv_stroke_width = uv_scale_factor * scaled_strokes[vert_index];'), (190, '        vec3 xyz_coords = vec3(corners[i], verts[vert_index].z);'), (192, '            v_color[vert_index],'), (201, '        gl_Position = get_gl_Position(vec3(corners[i], verts[vert_index].z));')], 'deleted': [(4, 'layout (triangle_strip, max_vertices = 5) out;'), (82, '// emitted as a triangle fan'), (83, 'int get_corners('), (89, '    out vec2 corners[5]'), (109, '    vec2 c2 = p2 + buff2 * p2_perp;'), (110, '    vec2 c3 = p2 - buff2 * p2_perp;'), (114, '    create_joint(angle_to_next, -v12, buff2, c3, c3, c2, c2);'), (116, '    // Linear case is the simplest'), (117, '    if(bool(is_linear)){'), (118, '        // The order of corners should be for a triangle_strip.  Last entry is a dummy'), (119, '        corners = vec2[5](c0, c1, c3, c2, vec2(0.0));'), (120, '        return 4;'), (121, '    }'), (122, '    // Otherwise, form a pentagon around the curve'), (123, '    corners = vec2[5](c0, c1, p1, c2, c3);'), (124, '    corners[2] -= buff0 * p0_perp + buff2 * p2_perp;'), (125, '    return 5;'), (180, '    vec2 corners[5];'), (181, '    int n_corners = get_corners('), (187, '    int index_map[5] = int[5](0, 0, 1, 2, 2);'), (188, '    if(n_corners == 4) index_map[2] = 2;'), (189, ''), (191, '    for(int i = 0; i < n_corners; i++){'), (193, '        uv_stroke_width = uv_scale_factor * scaled_strokes[index_map[i]];'), (195, '        vec3 xyz_coords = vec3(corners[i], verts[index_map[i]].z);'), (197, '            v_color[index_map[i]],'), (206, '        gl_Position = get_gl_Position(vec3(corners[i], verts[index_map[i]].z));')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,ae42f6244e77d858438af6d0483a4088410f9c19,131e1c2eeb5ef1a9a503f97b22e06f4477d3ff55,Don't use an index buffer for stroke,"{'added': [(1162, '        self.stroke_shader_wrapper.vert_data = self.get_stroke_shader_data()[self.get_outer_vert_indices()]')], 'deleted': [(1143, ""            vert_indices=np.zeros(0, dtype='i4'),""), (1163, '        self.stroke_shader_wrapper.vert_data = self.get_stroke_shader_data()'), (1164, '        self.stroke_shader_wrapper.vert_indices = self.get_outer_vert_indices()')]}",259,259
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c0b3c246de2965fc847d953a9fe2f0466b8af6f9,ae42f6244e77d858438af6d0483a4088410f9c19,"Revert ""Revert ""Go back to fill shader tracing vertex index manually""""

This reverts commit 387de61119ea13b63d68c8e56a776717b99f2a8c.","{'added': [(60, ""        ('vert_index', np.float32, (1,)),""), (1216, '        points = self.get_points()'), (1217, '        if len(self.fill_data) != len(points):'), (1218, '            self.fill_data = resize_array(self.fill_data, len(points))'), (1219, '            self.fill_data[""vert_index""][:, 0] = range(len(points))'), (1220, '')], 'deleted': [(1215, '        self.fill_data = resize_array(self.fill_data, len(self.get_points()))')]}",260,260
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,c0b3c246de2965fc847d953a9fe2f0466b8af6f9,ae42f6244e77d858438af6d0483a4088410f9c19,"Revert ""Revert ""Go back to fill shader tracing vertex index manually""""

This reverts commit 387de61119ea13b63d68c8e56a776717b99f2a8c.","{'added': [(8, 'in float vert_index;'), (22, '    v_vert_index = vert_index;')], 'deleted': [(21, '    // Implicit conversion from int to float'), (22, '    v_vert_index = gl_VertexID;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a8fb05a44aa75fe82048da9d87cbd5f6ffdd98c5,c0b3c246de2965fc847d953a9fe2f0466b8af6f9,"Don't use index buffer for fill

It turns out to be strangely slower","{'added': [(1155, '        self.fill_shader_wrapper.vert_indices = self.get_fill_shader_vert_indices()[self.get_triangulation()]')], 'deleted': [(1137, ""            vert_indices=np.zeros(0, dtype='i4'),""), (1156, '        self.fill_shader_wrapper.vert_indices = self.get_fill_shader_vert_indices()'), (1157, '        self.fill_shader_wrapper.vert_data = self.get_fill_shader_data()')]}",260,260
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,1a8e923ef2704bd28413375298f6ba8344cc5086,a8fb05a44aa75fe82048da9d87cbd5f6ffdd98c5,Small speed ups,"{'added': [(137, '    atol = 1e-8'), (138, '    if get_norm(v1 - v2) < atol:'), (140, '    axis = cross(v1, v2)'), (141, '    if get_norm(axis) < atol:'), (143, '        axis = cross(v1, RIGHT)'), (144, '    if get_norm(axis) < atol:'), (146, '        axis = cross(v1, UP)'), (161, '    return math.atan2(vector[1], vector[0])')], 'deleted': [(137, '    if np.isclose(v1, v2).all():'), (139, '    axis = np.cross(v1, v2)'), (140, '    if np.isclose(axis, [0, 0, 0]).all():'), (142, '        axis = np.cross(v1, RIGHT)'), (143, '    if np.isclose(axis, [0, 0, 0]).all():'), (145, '        axis = np.cross(v1, UP)'), (160, '    return np.angle(complex(*vector[:2]))')]}",82,82
manimlib/scene/scene.py,manimlib/scene/scene.py,1708fbd672c76d8b3b952d5b730e1d1bd42f3701,bf5d587204143d036656c2fa64894d5ac1336098,Updated tqdm to support also notebooks,"{'added': [(16, 'from tqdm.auto import tqdm as ProgressDisplay')], 'deleted': [(16, 'from tqdm import tqdm as ProgressDisplay')]}",213,213
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,1708fbd672c76d8b3b952d5b730e1d1bd42f3701,bf5d587204143d036656c2fa64894d5ac1336098,Updated tqdm to support also notebooks,"{'added': [(11, 'from tqdm.auto import tqdm as ProgressDisplay')], 'deleted': [(11, 'from tqdm import tqdm as ProgressDisplay')]}",89,89
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,1708fbd672c76d8b3b952d5b730e1d1bd42f3701,bf5d587204143d036656c2fa64894d5ac1336098,Updated tqdm to support also notebooks,"{'added': [(11, 'from tqdm.auto import tqdm as ProgressDisplay')], 'deleted': [(11, 'from tqdm import tqdm as ProgressDisplay')]}",82,82
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7d90a82317aaaac2b7bf293863d19f4dcb72b069,1a8e923ef2704bd28413375298f6ba8344cc5086,Fix fill shader vert data,"{'added': [(1155, '        self.fill_shader_wrapper.vert_data = self.get_fill_shader_data()[self.get_triangulation()]')], 'deleted': [(1155, '        self.fill_shader_wrapper.vert_indices = self.get_fill_shader_vert_indices()[self.get_triangulation()]')]}",260,260
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,04fd50491e6de07238301e74d97310a5257c4331,7d90a82317aaaac2b7bf293863d19f4dcb72b069,More consistent corners computation for stroke geom shader,"{'added': [(104, '    // Add correction for sharp angles to prevent weird bevel effects'), (105, '    float thresh = 0.8 * PI;'), (106, '    if(angle_from_prev > thresh) buff0 *= sin(angle_from_prev) / sin(thresh);'), (107, '    if(angle_to_next > thresh) buff2 *= sin(angle_to_next) / sin(thresh);'), (108, ''), (109, '    // Peperndicular vectors to the left of the curve'), (110, '    vec2 p0_perp = buff0 * vec2(-v01.y, v01.x);'), (111, '    vec2 p2_perp = buff2 * vec2(-v12.y, v12.x);'), (112, '    vec2 p1_perp = 0.5 * (p0_perp + p2_perp);'), (113, ''), (115, '    vec2 c0 = p0 + p0_perp;'), (116, '    vec2 c1 = p0 - p0_perp;'), (117, '    vec2 c2 = p1 + p1_perp;'), (118, '    vec2 c3 = p1 - p1_perp;'), (119, '    vec2 c4 = p2 + p2_perp;'), (120, '    vec2 c5 = p2 - p2_perp;'), (121, '    float cross_prod = cross2d(v01, v12);'), (122, '    if(cross_prod > 0.0){ // Positive orientation'), (123, '        c2 = 0.5 * (c0 + c4);'), (124, '    }else if(cross_prod < 0.0){'), (125, '        c3 = 0.5 * (c1 + c5);'), (126, '    }'), (129, '    create_joint(angle_from_prev, v01, buff0, c1, c1, c0, c0);'), (130, '    create_joint(angle_to_next, -v12, buff2, c5, c5, c4, c4);')], 'deleted': [(101, '    float cross_prod = cross2d(v01, v12);'), (102, '    float sgn = (cross_prod >= 0.0 || bool(is_linear)) ? 1.0 : -1.0;'), (103, '    vec2 p0_perp = sgn * vec2(-v01.y, v01.x);  // Pointing to the inside of the curve from p0'), (104, '    vec2 p2_perp = sgn * vec2(-v12.y, v12.x);  // Pointing to the inside of the curve from p2'), (105, ''), (110, '    vec2 c0 = p0 - buff0 * p0_perp;'), (111, '    vec2 c1 = p0 + buff0 * p0_perp;'), (112, '    vec2 c2 = p1 - 0.5 * (buff0 * p0_perp + buff2 * p2_perp);'), (113, '    // c3 needs to be defined after c5'), (114, '    vec2 c4 = p2 - buff2 * p2_perp;'), (115, '    vec2 c5 = p2 + buff2 * p2_perp;'), (116, '    vec2 c3 = 0.5 * (c1 + c5);'), (119, '    create_joint(angle_from_prev, v01, buff0, c0, c0, c1, c1);'), (120, '    create_joint(angle_to_next, -v12, buff2, c4, c4, c5, c5);')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xy_to_uv.glsl,f3e91db5818723b1d996439f755e82de3563b821,04fd50491e6de07238301e74d97310a5257c4331,Small comment change,"{'added': [(70, '    // Portions of the parabola y = x^2 where abs(x) exceeds'), (71, '    // this value are treated as straight lines.'), (72, '    float thresh = 2.0;')], 'deleted': [(70, '    // Portions of the parabola y = x^2 where x exceeds this value are just'), (71, '    // treated as straight lines.'), (72, '    float thresh = 2.0;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,ab30f085b42bd9356385d4d4cc417aad054f5ec2,f3e91db5818723b1d996439f755e82de3563b821,Simpler VMobject.get_num_curves,"{'added': [(686, '        return len(self.data[""points""]) // 2')], 'deleted': [(686, '        return max((len(self.get_points()) - 1) // 2, 0)')]}",260,260
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,9320dad45fab8462b3ebcf5df1345368c809f555,ab30f085b42bd9356385d4d4cc417aad054f5ec2,Have get_subpath_end_indices_from_points ask for exact equality between h and a0,"{'added': [(659, '        a0, h, a1 = points[0:-1:2], points[1::2], points[2::2]'), (661, '        is_end = (a0 == h).all(1) & (np.linalg.norm(h - a1, axis=1) > atol)'), (1003, '        indices = np.arange(len(points), dtype=int)')], 'deleted': [(659, '        a0_to_h = points[1::2] - points[0:-1:2]'), (660, '        h_to_a1 = points[2::2] - points[1::2]'), (662, '        is_end = (np.linalg.norm(a0_to_h, axis=1) < atol) & (np.linalg.norm(h_to_a1, axis=1) > atol)'), (985, '        indices = np.arange(len(points), dtype=int)')]}",260,260
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,e676bd957bbf06b92650eed17eee3a5e999ab593,9320dad45fab8462b3ebcf5df1345368c809f555,Do inner joint angle computation in geom shader,"{'added': [(56, '    vec2 quot = complex_div(v2, v1);  // Defined in get_xy_to_uv'), (57, '    return sign(quot.x) * atan(quot.y, quot.x);'), (170, '    float angle = angle_between(flat_verts[1] - flat_verts[0], flat_verts[2] - flat_verts[1]);'), (171, '    is_linear = float(abs(angle) < ANGLE_THRESHOLD);')], 'deleted': [(56, '    float abs_angle = acos(clamp(dot(normalize(v1), normalize(v2)), -1.0, 1.0));'), (57, '    float sgn = sign(cross2d(v1, v2));'), (58, '    return sgn * abs_angle;'), (171, '    is_linear = float(abs(v_joint_angle[1]) < ANGLE_THRESHOLD);')]}",,
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,64578df603e5388b1286bbeeb206daa4a496247e,e676bd957bbf06b92650eed17eee3a5e999ab593,"Don't save SVG Path data to file

It's more trouble than it's worth","{'added': [(26, '    from typing import Tuple'), (27, '    from manimlib.typing import ManimColor, Vect3Array'), (32, 'PATH_TO_POINTS: dict[str, Tuple[Vect3Array, np.ndarray]] = {}'), (310, ""        # will be saved so that future calls for the same pathdon't need to""), (311, '        # retrace the same computation.'), (313, '        if path_string not in PATH_TO_POINTS:'), (321, '            # Save for future use'), (322, '            PATH_TO_POINTS[path_string] = ('), (323, '                self.get_points().copy(),'), (324, '                self.get_triangulation().copy()'), (325, '            )'), (326, '        else:'), (327, '            points, triangulation = PATH_TO_POINTS[path_string]'), (328, '            self.set_points(points)'), (329, '            self.triangulation = triangulation'), (330, '            self.needs_new_triangulation = False'), (331, '')], 'deleted': [(26, '    from manimlib.typing import ManimColor'), (308, '        # will be saved to a file so that future calls for the same path'), (309, ""        # don't need to retrace the same computation.""), (311, '        path_hash = hash_string(path_string)'), (312, '        points_filepath = os.path.join(get_mobject_data_dir(), f""{path_hash}_points.npy"")'), (313, ''), (314, '        if os.path.exists(points_filepath):'), (315, '            self.set_points(np.load(points_filepath))'), (316, '        else:'), (324, '            # Save to a file for future use'), (325, '            np.save(points_filepath, self.get_points())')]}",61,61
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,24afb2a24f97c412fc29b6ff6f67fa741f99aa49,c6d3a9646c933625a8e3429f919f27c4541e5d75,Fix angle_between,"{'added': [(55, 'float atan2(float y, float x){'), (56, '    // Normally atan is undefined for x = 0'), (57, '    if(x == 0) return sign(y) * 0.5 * PI;'), (58, '    return atan(y, x);'), (59, '}'), (60, ''), (61, ''), (64, '    return atan2(quot.y, quot.x);')], 'deleted': [(57, '    return sign(quot.x) * atan(quot.y, quot.x);')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a07701e295f57ebb4d639ca3fa1304f29c39d0c1,24afb2a24f97c412fc29b6ff6f67fa741f99aa49,Use triangle strip for stroke shader,"{'added': [(55, '    stroke_shader_folder: str = ""quadratic_bezier_stroke""'), (68, '    fill_render_primitive: int = moderngl.TRIANGLES'), (69, '    stroke_render_primitive: int = moderngl.TRIANGLE_STRIP'), (1139, '            render_primitive=self.fill_render_primitive,'), (1145, '            render_primitive=self.stroke_render_primitive,'), (1161, '        self.stroke_shader_wrapper.vert_data = self.get_stroke_shader_data()'), (1201, '        # Set data array to be one longer than number of points,'), (1202, '        # with a dummy vertex added at the end. This is to ensure'), (1203, '        # it can be safely stacked onto other stroke data arrays.'), (1205, '        n = len(points)'), (1206, '        size = n + 1 if n > 0 else 0'), (1207, '        if len(self.stroke_data) != size:'), (1208, '            self.stroke_data = resize_array(self.stroke_data, size)'), (1209, '        if n == 0:'), (1210, '            return self.stroke_data'), (1211, ''), (1212, '        self.read_data_to_shader(self.stroke_data[:n], ""point"", ""points"")'), (1213, '        self.read_data_to_shader(self.stroke_data[:n], ""color"", ""stroke_rgba"")'), (1214, '        self.read_data_to_shader(self.stroke_data[:n], ""stroke_width"", ""stroke_width"")'), (1216, '        self.read_data_to_shader(self.stroke_data[:n], ""joint_angle"", ""joint_angle"")'), (1218, '        self.stroke_data[-1] = self.stroke_data[-2]')], 'deleted': [(54, '    stroke_shader_folder: str = ""quadratic_bezier_stroke""'), (68, '    render_primitive: int = moderngl.TRIANGLES'), (1138, '            render_primitive=self.render_primitive,'), (1144, '            render_primitive=self.render_primitive,'), (1160, '        self.stroke_shader_wrapper.vert_data = self.get_stroke_shader_data()[self.get_outer_vert_indices()]'), (1201, '        if len(self.stroke_data) != len(points):'), (1202, '            self.stroke_data = resize_array(self.stroke_data, len(points))'), (1203, ''), (1204, '        self.read_data_to_shader(self.stroke_data, ""point"", ""points"")'), (1205, '        self.read_data_to_shader(self.stroke_data, ""color"", ""stroke_rgba"")'), (1206, '        self.read_data_to_shader(self.stroke_data, ""stroke_width"", ""stroke_width"")'), (1208, '        self.read_data_to_shader(self.stroke_data, ""joint_angle"", ""joint_angle"")')]}",262,262
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a07701e295f57ebb4d639ca3fa1304f29c39d0c1,24afb2a24f97c412fc29b6ff6f67fa741f99aa49,Use triangle strip for stroke shader,"{'added': [(29, 'in float v_vert_index[3];'), (144, '    if (int(v_vert_index[0]) % 2 == 1) return;')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,a07701e295f57ebb4d639ca3fa1304f29c39d0c1,24afb2a24f97c412fc29b6ff6f67fa741f99aa49,Use triangle strip for stroke shader,"{'added': [(17, 'out float v_vert_index;'), (29, '    v_vert_index = gl_VertexID;')], 'deleted': []}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,9464f83d183fdf1c8352ee5c8b2d2e5e1b1f61fe,a07701e295f57ebb4d639ca3fa1304f29c39d0c1,"Track indices for fill shader, but prevent ibo usage at the Camera level","{'added': [(405, '        # Data buffer'), (406, '        vert_data = shader_wrapper.vert_data'), (407, '        indices = shader_wrapper.vert_indices'), (408, '        if indices is not None:'), (409, '            vert_data = vert_data[indices]'), (410, '        vbo = self.ctx.buffer(vert_data.tobytes())'), (411, '        # For the moment, the index buffer is actually not used,'), (412, '        # since it seems to make the actual render calls meaninfully slower'), (413, '        ibo = None')], 'deleted': [(405, '        # Data buffers'), (406, '        vbo = self.ctx.buffer(shader_wrapper.vert_data.tobytes())'), (407, '        if shader_wrapper.vert_indices is None:'), (408, '            ibo = None'), (409, '        else:'), (410, ""            vert_index_data = shader_wrapper.vert_indices.astype('i4').tobytes()""), (411, '            if vert_index_data:'), (412, '                ibo = self.ctx.buffer(vert_index_data)'), (413, '            else:'), (414, '                ibo = None')]}",91,91
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,9464f83d183fdf1c8352ee5c8b2d2e5e1b1f61fe,a07701e295f57ebb4d639ca3fa1304f29c39d0c1,"Track indices for fill shader, but prevent ibo usage at the Camera level","{'added': [(1137, ""            vert_indices=np.zeros(0, dtype='i4'),""), (1156, '        self.fill_shader_wrapper.vert_data = self.get_fill_shader_data()'), (1157, '        self.fill_shader_wrapper.vert_indices = self.get_triangulation()')], 'deleted': [(1155, '        self.fill_shader_wrapper.vert_data = self.get_fill_shader_data()[self.get_triangulation()]')]}",262,262
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,644ea41443253c4ce9183d9d1c43c765ab7039a6,9464f83d183fdf1c8352ee5c8b2d2e5e1b1f61fe,Default to simpler quadratic approximation of cubic beziers,"{'added': [(23, 'from manimlib.utils.bezier import find_intersection'), (91, '        allow_cubic_to_quad_approx: bool = True,'), (106, '        self.allow_cubic_to_quad_approx = allow_cubic_to_quad_approx'), (461, '        anchor: Vect3,'), (467, '        last = self.get_last_point()'), (468, '        # If the two relevant tangents are close in angle to each other,'), (469, '        # then just approximate with a single quadratic bezier curve.'), (470, '        # Otherwise, approximate with two'), (471, '        v1 = handle1 - last'), (472, '        v2 = anchor - handle2'), (473, '        angle = angle_between_vectors(v1, v2)'), (474, '        if self.allow_cubic_to_quad_approx and angle < 45 * DEGREES:'), (475, '            quadratic_approx = [last, find_intersection(last, v1, anchor, -v2), anchor]'), (476, '        else:'), (477, '            quadratic_approx = get_quadratic_approximation_of_cubic('), (478, '                last, handle1, handle2, anchor'), (479, '            )')], 'deleted': [(458, '        anchor: Vect3'), (464, '        quadratic_approx = get_quadratic_approximation_of_cubic('), (465, '            self.get_last_point(), handle1, handle2, anchor'), (466, '        )')]}",264,264
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,9778c3e085394b414a33d78628f22759c03aa6ac,644ea41443253c4ce9183d9d1c43c765ab7039a6,Remove no-longer necessary correction for path ends,"{'added': [], 'deleted': [(332, ''), (349, ''), (350, '        # Get rid of the side effect of trailing ""Z M"" commands.'), (351, '        if self.has_new_path_started():'), (352, '            self.resize_points(self.get_num_points() - 1)')]}",60,60
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,dcdf74a7154c72add83bb08af602e0b59ca4c931,9778c3e085394b414a33d78628f22759c03aa6ac,Clean up stroke geometry shader to better function in 3d,"{'added': [(54, 'void create_joint(float angle, vec3 unit_tan, float buff,'), (55, '                  vec3 static_c0, out vec3 changing_c0,'), (56, '                  vec3 static_c1, out vec3 changing_c1){'), (77, '    // Control points for a bezier curve'), (78, '    vec3 p0,'), (79, '    vec3 p1,'), (80, '    vec3 p2,'), (81, '    // Unit tangent vectors at p0 and p2'), (82, '    vec3 v01,'), (83, '    vec3 v12,'), (84, '    float stroke_width0,'), (85, '    float stroke_width2,'), (86, '    // Unit normal to the whole curve'), (87, '    vec3 normal,'), (88, '    // Anti-alias width'), (89, '    float aaw,'), (92, '    out vec3 corners[6]'), (95, '    float buff0 = 0.5 * stroke_width0 + aaw;'), (96, '    float buff2 = 0.5 * stroke_width2 + aaw;'), (98, '    // Add correction for sharp angles to prevent weird bevel effects (Needed?)'), (99, '    float thresh = 0.5 * PI;'), (100, '    if(angle_from_prev > thresh) buff0 *= sin(angle_from_prev);'), (101, '    if(angle_to_next > thresh) buff2 *= sin(angle_to_next);'), (103, '    // Perpendicular vectors to the left of the curve'), (104, '    vec3 p0_perp = buff0 * normalize(cross(normal, v01));'), (105, '    vec3 p2_perp = buff2 * normalize(cross(normal, v12));'), (106, '    vec3 p1_perp = 0.5 * (p0_perp + p2_perp);'), (109, '    vec3 c0 = p0 + p0_perp;'), (110, '    vec3 c1 = p0 - p0_perp;'), (111, '    vec3 c2 = p1 + p1_perp;'), (112, '    vec3 c3 = p1 - p1_perp;'), (113, '    vec3 c4 = p2 + p2_perp;'), (114, '    vec3 c5 = p2 - p2_perp;'), (115, '    float orientation = dot(normal, cross(v01, v12));'), (116, '    // Move the inner middle control point to make'), (117, '    // room for the curve'), (118, '    if(orientation > 0.0)      c2 = 0.5 * (c0 + c4);'), (119, '    else if(orientation < 0.0) c3 = 0.5 * (c1 + c5);'), (125, '    corners = vec3[6](c0, c1, c2, c3, c4, c5);'), (130, '    // We use the triangle strip primative, but'), (131, '    // actually only need every other strip element'), (134, '    // Curves are marked as eneded when the handle after'), (135, '    // the first anchor is set equal to that anchor'), (136, '    if (verts[0] == verts[1]) return;'), (138, '    // TODO, track true unit normal globally (probably as a uniform)'), (139, '    vec3 unit_normal = vec3(0.0, 0.0, 1.0);'), (140, '    if(bool(flat_stroke)){'), (141, '        unit_normal = camera_rotation * vec3(0.0, 0.0, 1.0);'), (144, '    vec3 p0 = verts[0];'), (145, '    vec3 p1 = verts[1];'), (146, '    vec3 p2 = verts[2];'), (147, '    vec3 v01 = normalize(p1 - p0);'), (148, '    vec3 v12 = normalize(p2 - p1);'), (150, '    float angle = acos(clamp(dot(v01, v12), -1, 1));'), (151, '    is_linear = float(abs(angle) < ANGLE_THRESHOLD);'), (154, '    if (bool(is_linear)) p1 = 0.5 * (p0 + p2);'), (160, '    mat3 xy_to_uv = get_xy_to_uv(vec2[3](p0.xy, p1.xy, p2.xy), is_linear, is_linear);'), (166, '    vec3 corners[6];'), (168, '        p0, p1, p2, v01, v12,'), (169, '        v_stroke_width[0],'), (170, '        v_stroke_width[2],'), (171, '        unit_normal,'), (172, '        scaled_aaw,'), (173, '        v_joint_angle[0],'), (174, '        v_joint_angle[2],'), (181, '        uv_coords = (xy_to_uv * vec3(corners[i].xy, 1)).xy;'), (182, '        uv_stroke_width = uv_scale_factor * v_stroke_width[vert_index];'), (185, '            corners[i],'), (193, '        gl_Position = get_gl_Position(corners[i]);')], 'deleted': [(51, '#INSERT get_unit_normal.glsl'), (53, '#INSERT rotate.glsl'), (56, 'float atan2(float y, float x){'), (57, '    // Normally atan is undefined for x = 0'), (58, '    if(x == 0) return sign(y) * 0.5 * PI;'), (59, '    return atan(y, x);'), (60, '}'), (61, ''), (62, ''), (63, 'float angle_between(vec2 v1, vec2 v2){'), (64, '    vec2 quot = complex_div(v2, v1);  // Defined in get_xy_to_uv'), (65, '    return atan2(quot.y, quot.x);'), (66, '}'), (67, ''), (68, ''), (69, 'void create_joint(float angle, vec2 unit_tan, float buff,'), (70, '                  vec2 static_c0, out vec2 changing_c0,'), (71, '                  vec2 static_c1, out vec2 changing_c1){'), (86, ''), (93, '    vec2 controls[3],'), (94, '    float stroke_widths[3],'), (95, '    float aaw,  // Anti-alias width'), (98, '    out vec2 corners[6]'), (100, '    vec2 p0 = controls[0];'), (101, '    vec2 p1 = controls[1];'), (102, '    vec2 p2 = controls[2];'), (103, ''), (104, '    // Unit vectors for directions between control points'), (105, '    vec2 v01 = normalize(p1 - p0);'), (106, '    vec2 v12 = normalize(p2 - p1);'), (108, '    float buff0 = 0.5 * stroke_widths[0] + aaw;'), (109, '    float buff2 = 0.5 * stroke_widths[2] + aaw;'), (111, '    // Add correction for sharp angles to prevent weird bevel effects'), (112, '    float thresh = 0.8 * PI;'), (113, '    if(angle_from_prev > thresh) buff0 *= sin(angle_from_prev) / sin(thresh);'), (114, '    if(angle_to_next > thresh) buff2 *= sin(angle_to_next) / sin(thresh);'), (116, '    // Peperndicular vectors to the left of the curve'), (117, '    vec2 p0_perp = buff0 * vec2(-v01.y, v01.x);'), (118, '    vec2 p2_perp = buff2 * vec2(-v12.y, v12.x);'), (119, '    vec2 p1_perp = 0.5 * (p0_perp + p2_perp);'), (122, '    vec2 c0 = p0 + p0_perp;'), (123, '    vec2 c1 = p0 - p0_perp;'), (124, '    vec2 c2 = p1 + p1_perp;'), (125, '    vec2 c3 = p1 - p1_perp;'), (126, '    vec2 c4 = p2 + p2_perp;'), (127, '    vec2 c5 = p2 - p2_perp;'), (128, '    float cross_prod = cross2d(v01, v12);'), (129, '    if(cross_prod > 0.0){ // Positive orientation'), (130, '        c2 = 0.5 * (c0 + c4);'), (131, '    }else if(cross_prod < 0.0){'), (132, '        c3 = 0.5 * (c1 + c5);'), (133, '    }'), (139, '    corners = vec2[6](c0, c1, c2, c3, c4, c5);'), (145, '    if (distance(verts[0], verts[1]) == 0 || distance(verts[1], verts[2]) == 0) return;'), (147, '    vec3 unit_normal = camera_rotation * vec3(0.0, 0.0, 1.0); // TODO, track true unit normal globally'), (149, '    float scaled_strokes[3];'), (150, '    for(int i = 0; i < 3; i++){'), (151, '        scaled_strokes[i] = v_stroke_width[i];'), (152, '        if(bool(flat_stroke)){'), (153, '            vec3 to_cam = normalize(vec3(0.0, 0.0, focal_distance) - verts[i]);'), (154, '            scaled_strokes[i] *= abs(dot(unit_normal, to_cam));'), (155, '        }'), (158, '    // Set joint information, potentially recomputing based on perspective'), (159, '    float angle_from_prev = v_joint_angle[0];'), (160, '    float angle_to_next = v_joint_angle[2];'), (161, ''), (162, '    if(angle_from_prev > 0.0 && unit_normal != vec3(0.0, 0.0, 1.0)){'), (163, '        vec3 v01 = verts[1] - verts[0];'), (164, '        vec3 from_prev = rotate(v01, angle_from_prev, unit_normal);'), (165, '        angle_from_prev = angle_between(from_prev.xy, v01.xy);'), (166, '    }'), (167, '    if(angle_to_next > 0.0 && unit_normal != vec3(0.0, 0.0, 1.0)){'), (168, '        vec3 v12 = verts[2] - verts[1];'), (169, '        vec3 to_next = rotate(v12, -angle_to_next, unit_normal);'), (170, '        angle_to_next = angle_between(v12.xy, to_next.xy);'), (171, '    }'), (173, '    // Control points are projected to the xy plane before drawing, which in turn'), (174, '    // gets tranlated to a uv plane.  The z-coordinate information will be remembered'), (175, ""    // by what's sent out to gl_Position, and by how it affects the lighting and stroke width""), (176, '    vec2 flat_verts[3] = vec2[3](verts[0].xy, verts[1].xy, verts[2].xy);'), (179, '    float angle = angle_between(flat_verts[1] - flat_verts[0], flat_verts[2] - flat_verts[1]);'), (180, '    is_linear = float(abs(angle) < ANGLE_THRESHOLD);'), (181, '    if (bool(is_linear)){'), (182, '        flat_verts[1] = 0.5 * (flat_verts[0] + flat_verts[2]);'), (183, '    }'), (189, '    mat3 xy_to_uv = get_xy_to_uv(flat_verts, is_linear, is_linear);'), (195, '    // Corners of a bounding region around curve'), (196, '    vec2 corners[6];'), (198, '        flat_verts, scaled_strokes, scaled_aaw,'), (199, '        angle_from_prev, angle_to_next,'), (206, '        uv_coords = (xy_to_uv * vec3(corners[i], 1.0)).xy;'), (207, '        uv_stroke_width = uv_scale_factor * scaled_strokes[vert_index];'), (208, '        // Apply some lighting to the color before sending out.'), (209, '        vec3 xyz_coords = vec3(corners[i], verts[vert_index].z);'), (212, '            xyz_coords,'), (220, '        gl_Position = get_gl_Position(vec3(corners[i], verts[vert_index].z));')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,db8b0e7bcef89dc71064a9895b51152dcbb50763,dcdf74a7154c72add83bb08af602e0b59ca4c931,Change simple quadratic approximation threshold,"{'added': [(474, '        if self.allow_cubic_to_quad_approx and angle < 30 * DEGREES:')], 'deleted': [(474, '        if self.allow_cubic_to_quad_approx and angle < 45 * DEGREES:')]}",264,264
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a47b95044d1b96440dd8125d509693189c7d52ec,db8b0e7bcef89dc71064a9895b51152dcbb50763,Add assertions to assure VMobject has a valid number of points,"{'added': [(1105, '        assert(len(points) == 0 or len(points) % 2 == 1)'), (1111, '        assert(len(points) % 2 == 0)')], 'deleted': [(1105, '        if len(points) > 0 and len(points) % 2 == 0:'), (1106, '            raise Exception(""Bad points"")'), (1113, '        if len(points) % 2 != 0:'), (1114, '            raise Exception(""Bad points"")')]}",262,262
manimlib/shaders/true_dot/frag.glsl,manimlib/shaders/true_dot/frag.glsl,de5198196b0f18937b7e99a177e2e6545f21c79b,a47b95044d1b96440dd8125d509693189c7d52ec,Fix anti-alias width bug on DotCloud,"{'added': [(16, 'in float scaled_aaw;'), (26, '    if (signed_dist > 0.5 * scaled_aaw){'), (47, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist / scaled_aaw);')], 'deleted': [(25, '    if (signed_dist > 0.5 * anti_alias_width){'), (46, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist / anti_alias_width);')]}",,
manimlib/shaders/true_dot/geom.glsl,manimlib/shaders/true_dot/geom.glsl,de5198196b0f18937b7e99a177e2e6545f21c79b,a47b95044d1b96440dd8125d509693189c7d52ec,Fix anti-alias width bug on DotCloud,"{'added': [(8, 'uniform vec2 pixel_shape;'), (21, 'out float scaled_aaw;'), (30, '    scaled_aaw = (frame_shape.y / pixel_shape.y);'), (32, '    float rpa = radius + scaled_aaw;')], 'deleted': [(29, '    float rpa = radius + anti_alias_width;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,923066db2b68e36a620df42f6ba74e19a2e17a4e,de5198196b0f18937b7e99a177e2e6545f21c79b,Minor style changes to stroke geom shader,"{'added': [(54, 'void create_joint('), (55, '    float angle,'), (56, '    vec3 unit_tan,'), (57, '    float buff,'), (58, '    vec3 static_c0,'), (59, '    out vec3 changing_c0,'), (60, '    vec3 static_c1,'), (61, '    out vec3 changing_c1'), (62, '){'), (64, '    // if(abs(angle) < ANGLE_THRESHOLD || abs(angle) > 0.99 * PI || int(joint_type) == NO_JOINT){'), (65, '    if(abs(angle) < ANGLE_THRESHOLD || int(joint_type) == NO_JOINT){'), (106, '    float thresh = 5 * PI / 6;'), (107, '    if(angle_from_prev > thresh) buff0 *= 2 * sin(angle_from_prev);'), (108, '    if(angle_to_next > thresh) buff2 *= 2 * sin(angle_to_next);')], 'deleted': [(54, 'void create_joint(float angle, vec3 unit_tan, float buff,'), (55, '                  vec3 static_c0, out vec3 changing_c0,'), (56, '                  vec3 static_c1, out vec3 changing_c1){'), (58, '    if(abs(angle) < ANGLE_THRESHOLD || abs(angle) > 0.99 * PI || int(joint_type) == NO_JOINT){'), (99, '    float thresh = 0.5 * PI;'), (100, '    if(angle_from_prev > thresh) buff0 *= sin(angle_from_prev);'), (101, '    if(angle_to_next > thresh) buff2 *= sin(angle_to_next);')]}",,
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,de4a56849ebdf875a861df3f06fd46bb1a334ca5,923066db2b68e36a620df42f6ba74e19a2e17a4e,Add line_intersects_path,"{'added': [(312, 'def line_intersects_path('), (313, '    start: Vect2 | Vect3,'), (314, '    end: Vect2 | Vect3,'), (315, '    path: Vect2Array | Vect3Array,'), (316, ') -> bool:'), (317, '    """"""'), (318, '    Tests whether the line (start, end) intersects'), (319, '    a polygonal path defined by its vertices'), (320, '    """"""'), (321, '    n = len(path)'), (322, '    p1 = np.tile(start[:2], n).reshape((n, 2))'), (323, '    q1 = np.tile(end[:2], n).reshape((n, 2))'), (324, '    p2 = path[:, :2]'), (325, '    q2 = np.vstack([path[1:, :2], path[:1, :2]])'), (326, ''), (327, '    v1 = q1 - p1'), (328, '    v2 = q2 - p2'), (329, ''), (330, '    mis1 = cross2d(v1, p2 - p1) * cross2d(v1, q2 - p1) < 0'), (331, '    mis2 = cross2d(v2, p1 - p2) * cross2d(v2, q1 - p2) < 0'), (332, '    return bool((mis1 * mis2).any())'), (333, ''), (334, '')], 'deleted': []}",83,83
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a2f3758a7aff44e2b5c0c5e3312f8f7f1ce46914,de4a56849ebdf875a861df3f06fd46bb1a334ca5,Add VMobject.subdivide_intersections,"{'added': [(37, 'from manimlib.utils.space_ops import line_intersects_path'), (570, '    def subdivide_sharp_curves('), (571, '        self,'), (572, '        angle_threshold: float = 30 * DEGREES,'), (573, '        recurse: bool = True'), (574, '    ):'), (575, '        def tuple_to_subdivisions(b0, b1, b2):'), (576, '            angle = angle_between_vectors(b1 - b0, b2 - b1)'), (577, '            return int(angle / angle_threshold)'), (578, ''), (579, '        self.subdivide_curves_by_condition(tuple_to_subdivisions, recurse)'), (580, '        return self'), (581, ''), (582, '    def subdivide_intersections(self, recurse: bool = True):'), (583, '        path = self.get_anchors()'), (584, '        def tuple_to_subdivisions(b0, b1, b2):'), (585, '            if line_intersects_path(b0, b1, path):'), (586, '                return 1'), (587, '            return 0'), (588, ''), (589, '        self.subdivide_curves_by_condition(tuple_to_subdivisions, recurse)'), (590, '        return self'), (591, '')], 'deleted': []}",267,267
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,9f1ab09749dd540a2949d1352088c467182c5c81,a2f3758a7aff44e2b5c0c5e3312f8f7f1ce46914,Make usage of simpler quadratic approximations an option for VMobject,"{'added': [(299, '        use_simple_quadratic_approx: bool = True,'), (307, '        super().__init__('), (308, '            use_simple_quadratic_approx=use_simple_quadratic_approx,'), (309, '            **kwargs'), (310, '        )'), (325, ""            # So triangulation doesn't get messed up""), (326, '            self.subdivide_intersections()')], 'deleted': [(306, '        super().__init__(**kwargs)')]}",60,60
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,9f1ab09749dd540a2949d1352088c467182c5c81,a2f3758a7aff44e2b5c0c5e3312f8f7f1ce46914,Make usage of simpler quadratic approximations an option for VMobject,"{'added': [(92, '        use_simple_quadratic_approx: bool = False,'), (107, '        self.use_simple_quadratic_approx = use_simple_quadratic_approx'), (474, '        if self.use_simple_quadratic_approx:'), (546, '    def subdivide_curves_by_condition('), (548, '        tuple_to_subdivisions: Callable,'), (556, '                n_divisions = tuple_to_subdivisions(*tup)'), (557, '                if n_divisions > 0:'), (558, '                    alphas = np.linspace(0, 1, n_divisions + 2)')], 'deleted': [(92, '        allow_cubic_to_quad_approx: bool = True,'), (107, '        self.allow_cubic_to_quad_approx = allow_cubic_to_quad_approx'), (474, '        angle = angle_between_vectors(v1, v2)'), (475, '        if self.allow_cubic_to_quad_approx and angle < 30 * DEGREES:'), (547, '    def subdivide_sharp_curves('), (549, '        angle_threshold: float = 30 * DEGREES,'), (557, '                angle = angle_between_vectors(tup[1] - tup[0], tup[2] - tup[1])'), (558, '                if angle > angle_threshold:'), (559, '                    n = int(np.ceil(angle / angle_threshold))'), (560, '                    alphas = np.linspace(0, 1, n + 1)')]}",266,266
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,f0edc6628b9cf868fe047a6be1fc2ae0a0aaf4ab,9f1ab09749dd540a2949d1352088c467182c5c81,Push default of use_simple_quadratic_approx being True to Text,"{'added': [], 'deleted': [(299, '        use_simple_quadratic_approx: bool = True,'), (308, '            use_simple_quadratic_approx=use_simple_quadratic_approx,')]}",60,60
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,f0edc6628b9cf868fe047a6be1fc2ae0a0aaf4ab,9f1ab09749dd540a2949d1352088c467182c5c81,Push default of use_simple_quadratic_approx being True to Text,"{'added': [(420, '        path_string_config: dict = dict('), (421, '            use_simple_quadratic_approx=True,'), (422, '        ),'), (425, '        super().__init__('), (426, '            text,'), (427, '            isolate=isolate,'), (428, '            use_labelled_svg=use_labelled_svg,'), (429, '            path_string_config=path_string_config,'), (430, '            **kwargs'), (431, '        )')], 'deleted': [(422, '        super().__init__(text, isolate=isolate, use_labelled_svg=use_labelled_svg, **kwargs)')]}",77,77
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,f39fd92e9ecbe726157c8402f75cb28c786cf370,f0edc6628b9cf868fe047a6be1fc2ae0a0aaf4ab,Add condition to account for end of string,"{'added': [(352, ''), (353, '        # Get rid of the side effect of trailing ""Z M"" commands.'), (354, '        if self.has_new_path_started():'), (355, '            self.resize_points(self.get_num_points() - 2)')], 'deleted': []}",61,61
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,190b9e46037db695ab6e9f9c08e66d1a71aafe3c,f39fd92e9ecbe726157c8402f75cb28c786cf370,Tiny tweak,"{'added': [(480, '        if self.consider_points_equal(quadratic_approx[1], last):')], 'deleted': [(480, '        if self.consider_points_equal(quadratic_approx[1], self.get_last_point()):')]}",266,266
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a44fc2e6d57d2d5ba1f6ca135840f955e4737c19,190b9e46037db695ab6e9f9c08e66d1a71aafe3c,Add optional number of subdivision to subdivide_intersections,"{'added': [(580, '    def subdivide_intersections(self, recurse: bool = True, n_subdivisions: int = 2):'), (584, '                return n_subdivisions'), (585, '            alt_b1 = b0 + b2 - b1'), (586, '            if line_intersects_path(b0, alt_b1, path):'), (587, '                return n_subdivisions')], 'deleted': [(580, '    def subdivide_intersections(self, recurse: bool = True):'), (584, '                return 1')]}",267,267
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,2c6e8692cec2c5b3b54dfad25810f7111fdb074e,a44fc2e6d57d2d5ba1f6ca135840f955e4737c19,Add condition for calling subdivide_intersections,"{'added': [(306, '        super().__init__(**kwargs)'), (322, '            if self.use_simple_quadratic_approx:'), (323, '                self.subdivide_intersections()')], 'deleted': [(306, '        super().__init__('), (307, '            **kwargs'), (308, '        )'), (324, '            self.subdivide_intersections()')]}",62,62
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,aa8fba5b02570f10cf4d9e96980957baef8d034f,2c6e8692cec2c5b3b54dfad25810f7111fdb074e,"Change subdivide_intersections default to one subdivision, remove second check","{'added': [(580, '    def subdivide_intersections(self, recurse: bool = True, n_subdivisions: int = 1):')], 'deleted': [(580, '    def subdivide_intersections(self, recurse: bool = True, n_subdivisions: int = 2):'), (585, '            alt_b1 = b0 + b2 - b1'), (586, '            if line_intersects_path(b0, alt_b1, path):'), (587, '                return n_subdivisions')]}",266,266
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a12b5cca6715c917bdfdc12972b980384d44523f,aa8fba5b02570f10cf4d9e96980957baef8d034f,Add angle check in addition to use_simple_quadratic_approx,"{'added': [(474, '        angle = angle_between_vectors(v1, v2)'), (475, '        if self.use_simple_quadratic_approx and angle < 45 * DEGREES:')], 'deleted': [(474, '        if self.use_simple_quadratic_approx:')]}",267,267
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c9a2971433f01771df4833df6e249a1d1dfe4bbf,a12b5cca6715c917bdfdc12972b980384d44523f,Remove stray constant,"{'added': [], 'deleted': [(53, 'DISJOINT_CONST = 404'), (54, '')]}",267,267
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,d2800b6c96d8419f7c869aabe3999333f3c05a7c,c9a2971433f01771df4833df6e249a1d1dfe4bbf,Make sure cross behaves as expected on 2d arrays,"{'added': [(25, 'def cross(v1: Vect3 | List[float], v2: Vect3 | List[float]) -> Vect3 | Vect3Array:'), (26, '    is2d = isinstance(v1, np.ndarray) and len(v1.shape) == 2'), (27, '    if is2d:'), (28, '        x1, y1, z1 = v1[:, 0], v1[:, 1], v1[:, 2]'), (29, '        x2, y2, z2 = v2[:, 0], v2[:, 1], v2[:, 2]'), (30, '    else:'), (31, '        x1, y1, z1 = v1'), (32, '        x2, y2, z2 = v2'), (33, '    result = np.array(['), (34, '        y1 * z2 - z1 * y2,'), (35, '        z1 * x2 - x1 * z2,'), (36, '        x1 * y2 - y1 * x2,'), (38, '    return result.T if is2d else result'), (303, '    numer = cross(v1, p1 - p0)'), (304, '    denom = cross(v1, v0)')], 'deleted': [(25, 'def cross(v1: Vect3 | List[float], v2: Vect3 | List[float]) -> Vect3:'), (26, '    return np.array(['), (27, '        v1[1] * v2[2] - v1[2] * v2[1],'), (28, '        v1[2] * v2[0] - v1[0] * v2[2],'), (29, '        v1[0] * v2[1] - v1[1] * v2[0]'), (295, '    numer = np.cross(v1, p1 - p0)'), (296, '    denom = np.cross(v1, v0)')]}",86,86
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,c8a77a352fba4c4af0e45fcd9a28fe94aed0d9b3,d2800b6c96d8419f7c869aabe3999333f3c05a7c,Fix Piano,"{'added': [(489, '    def __init__('), (490, '        self,'), (491, '        n_white_keys = 52,'), (492, '        black_pattern = [0, 2, 3, 5, 6],'), (493, '        white_keys_per_octave = 7,'), (494, '        white_key_dims = (0.15, 1.0),'), (495, '        black_key_dims = (0.1, 0.66),'), (496, '        key_buff = 0.02,'), (497, '        white_key_color = WHITE,'), (498, '        black_key_color = GREY_E,'), (499, '        total_width = 13,'), (500, '        **kwargs'), (501, '    ):'), (502, '        self.n_white_keys = n_white_keys'), (503, '        self.black_pattern = black_pattern'), (504, '        self.white_keys_per_octave = white_keys_per_octave'), (505, '        self.white_key_dims = white_key_dims'), (506, '        self.black_key_dims = black_key_dims'), (507, '        self.key_buff = key_buff'), (508, '        self.white_key_color = white_key_color'), (509, '        self.black_key_color = black_key_color'), (510, '        self.total_width = total_width'), (578, '                key.set_color(BLACK)')], 'deleted': [(489, '    n_white_keys = 52'), (490, '    black_pattern = [0, 2, 3, 5, 6]'), (491, '    white_keys_per_octave = 7'), (492, '    white_key_dims = (0.15, 1.0)'), (493, '    black_key_dims = (0.1, 0.66)'), (494, '    key_buff = 0.02'), (495, '    white_key_color = WHITE'), (496, '    black_key_color = GREY_E'), (497, '    total_width = 13'), (499, '    def __init__(self, **kwargs):')]}",51,51
manimlib/mobject/boolean_ops.py,manimlib/mobject/boolean_ops.py,e1abae1d96ec6e07788f0cdf3c31630083a9f8c9,c8a77a352fba4c4af0e45fcd9a28fe94aed0d9b3,Fix typo,"{'added': [(21, '        if vmobject.consider_points_equal(subpath[0], subpath[-1]):')], 'deleted': [(21, '        if vmobject.consider_points_equals(subpath[0], subpath[-1]):')]}",22,22
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,108bb3da4482b0241f361faeef2f0dfa98e36498,e1abae1d96ec6e07788f0cdf3c31630083a9f8c9,Have SVGs default to use_simple_quadratic_approx,"{'added': [(299, '        use_simple_quadratic_approx: bool = True,'), (307, '        super().__init__('), (308, '            use_simple_quadratic_approx=use_simple_quadratic_approx,'), (309, '            **kwargs'), (310, '        )')], 'deleted': [(306, '        super().__init__(**kwargs)')]}",62,62
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,108bb3da4482b0241f361faeef2f0dfa98e36498,e1abae1d96ec6e07788f0cdf3c31630083a9f8c9,Have SVGs default to use_simple_quadratic_approx,"{'added': [(420, '        path_string_config: dict = dict(),')], 'deleted': [(420, '        path_string_config: dict = dict('), (421, '            use_simple_quadratic_approx=True,'), (422, '        ),')]}",77,77
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,440138aac5bf7dfdebb0d93ef7c7f5f0210b12d2,108bb3da4482b0241f361faeef2f0dfa98e36498,Allow for tracking which data keys should always have the same size as points,"{'added': [(70, ""    aligned_data_keys = ['points']""), (175, '        for key in self.aligned_data_keys:'), (176, '            self.data[key] = resize_func(self.data[key], new_length)')], 'deleted': [(174, '        if new_length != len(self.data[""points""]):'), (175, '            self.data[""points""] = resize_func(self.data[""points""], new_length)')]}",507,507
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,42d612f25391f94cabeb53ef8937892929a367f9,440138aac5bf7dfdebb0d93ef7c7f5f0210b12d2,Clean up VMobject.get_joint_angles,"{'added': [(70, '    aligned_data_keys = [""points"", ""orientation"", ""joint_angle""]'), (1084, ''), (1085, '        ends = self.get_subpath_end_indices()'), (1086, '        starts = [0, *(e + 2 for e in ends[:-1])]'), (1087, '        for start, end in zip(starts, ends):'), (1088, '            if self.consider_points_equal(points[start], points[end]):'), (1089, '                vect_to_vert[start] = h_to_a1[end // 2 - 1]'), (1090, '                vect_from_vert[end] = a0_to_h[start // 2]'), (1095, '        # Assumes unit normal of (0, 0, 1), but if stroke shader'), (1096, '        # ever stops making that assumption, this should too'), (1236, '        self.get_joint_angles()  # Recomputes, only if refresh is needed')], 'deleted': [(834, '            for mob in (self, vmobject):'), (835, '                mob.get_joint_angles()'), (874, '        for mob in (self, vmobject):'), (875, '            mob.get_joint_angles()'), (931, '        if self.has_stroke():'), (932, '            for mob in (self, mobject1, mobject2):'), (933, '                mob.get_joint_angles()'), (1086, '        vect_to_vert[0] = h_to_a1[-1]'), (1089, ''), (1092, '        vect_from_vert[-1] = a0_to_h[0]'), (1100, '        # If a given anchor point sits at the end of a curve,'), (1101, '        # we set its angle equal to 0'), (1102, '        atol = self.tolerance_for_point_equality'), (1103, '        if get_norm(a1[-1] - a0[0]) > atol:'), (1104, '            self.data[""joint_angle""][0] = 0'), (1105, '            self.data[""joint_angle""][-1] = 0'), (1106, ''), (1107, '        inner_ends = np.linalg.norm(a0_to_h, axis=1) < atol'), (1108, '        self.data[""joint_angle""][0:-1:2][inner_ends] = 0'), (1109, '        self.data[""joint_angle""][2::2][inner_ends] = 0'), (1110, ''), (1120, '                self.get_joint_angles()'), (1248, '        self.get_joint_angles()  # Potentially refreshes')]}",265,265
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,69ac946e6335d00b5f9d09f03ca1fcf95634f547,42d612f25391f94cabeb53ef8937892929a367f9,Simpler get_gl_Position,"{'added': [(9, '    vec2 shape;'), (10, '    if(bool(is_fixed_in_frame)) shape = DEFAULT_FRAME_SHAPE;'), (11, '    else                        shape = frame_shape;'), (12, ''), (14, '    result.x *= 2.0 / shape.x;'), (15, '    result.y *= 2.0 / shape.y;'), (16, '    result.z /= focal_distance;'), (17, '    result.w = 1.0 - result.z;'), (18, '    result.z *= -0.1;  // Flip and prevent premature clipping')], 'deleted': [(8, 'float perspective_scale_factor(float z, float focal_distance){'), (9, '    return max(0.0, focal_distance / (focal_distance - z));'), (10, '}'), (11, ''), (12, ''), (15, '    if(!bool(is_fixed_in_frame)){'), (16, '        result.x *= 2.0 / frame_shape.x;'), (17, '        result.y *= 2.0 / frame_shape.y;'), (18, '        float psf = perspective_scale_factor(result.z, focal_distance);'), (19, '        if (psf > 0){'), (20, '            result.xy *= psf;'), (21, ""            // TODO, what's the better way to do this?""), (22, '            // This is to keep vertices too far out of frame from getting cut.'), (23, '            result.z *= 0.01;'), (24, '        }'), (25, '    } else{'), (26, '        result.x *= 2.0 / DEFAULT_FRAME_SHAPE.x;'), (27, '        result.y *= 2.0 / DEFAULT_FRAME_SHAPE.y;'), (28, '    }'), (29, '    result.z *= -1;')]}",,
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c820cb47750c64a82bfc52be44b53d94c8a1801f,69ac946e6335d00b5f9d09f03ca1fcf95634f547,Don't propagate animating status to full extended family,"{'added': [(831, '        for mob in (*self.get_family(recurse), *self.get_ancestors()):')], 'deleted': [(831, '        for mob in (*self.get_family(recurse), *self.get_ancestors(extended=True)):')]}",507,507
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,73a894c136c63858532ef6316a50ee8c59507448,c820cb47750c64a82bfc52be44b53d94c8a1801f,Set selection animating status after adding mobjects,"{'added': [(307, '        self.selection.set_animating_status(True)')], 'deleted': [(306, '        self.selection.set_animating_status(True)')]}",150,150
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a88b56bb047debacb57a174e22b1a73972adcaf9,73a894c136c63858532ef6316a50ee8c59507448,Be sure get_triangulation is called before orientation data is read in,"{'added': [(1176, '        self.fill_shader_wrapper.vert_data = self.get_fill_shader_data()')], 'deleted': [(1175, '        self.fill_shader_wrapper.vert_data = self.get_fill_shader_data()')]}",265,265
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,da2b13aee914462105fe6e2eeb365c4b012cc17b,a88b56bb047debacb57a174e22b1a73972adcaf9,Fix triangulation issue for Annulus,"{'added': [(451, ""        # Make sure to add enough components that triangulation doesn't fail""), (452, '        kw = dict('), (453, '            n_components=int(max(8, np.ceil(TAU / math.acos(inner_radius / outer_radius))))'), (454, '        )'), (455, '        outer_path = outer_radius * Arc.create_quadratic_bezier_points(TAU, 0, **kw)'), (456, '        inner_path = inner_radius * Arc.create_quadratic_bezier_points(-TAU, 0, **kw)'), (457, '        self.add_subpath(outer_path)'), (458, '        self.add_subpath(inner_path)')], 'deleted': [(451, '        outer_circle = Circle(radius=outer_radius)'), (452, '        inner_circle = Circle(radius=inner_radius)'), (453, '        inner_circle.reverse_points()'), (454, '        self.append_vectorized_mobject(outer_circle)'), (455, '        self.append_vectorized_mobject(inner_circle)')]}",140,140
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,ae99c8cd2e3880985f8fed367650cbafc3138ec7,da2b13aee914462105fe6e2eeb365c4b012cc17b,Go back to use_simple_quadratic_approx being set at the Text level,"{'added': [(306, '        super().__init__(**kwargs)'), (322, '            self.subdivide_intersections()')], 'deleted': [(299, '        use_simple_quadratic_approx: bool = True,'), (307, '        super().__init__('), (308, '            use_simple_quadratic_approx=use_simple_quadratic_approx,'), (309, '            **kwargs'), (310, '        )'), (326, '            if self.use_simple_quadratic_approx:'), (327, '                self.subdivide_intersections()')]}",61,61
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,ae99c8cd2e3880985f8fed367650cbafc3138ec7,da2b13aee914462105fe6e2eeb365c4b012cc17b,Go back to use_simple_quadratic_approx being set at the Text level,"{'added': [(420, '        path_string_config: dict = dict('), (421, '            use_simple_quadratic_approx=True,'), (422, '        ),')], 'deleted': [(420, '        path_string_config: dict = dict(),')]}",77,77
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,cbfe82579ff823a8fa42446f2d7337d6b657679e,ae99c8cd2e3880985f8fed367650cbafc3138ec7,Make sure VMobject.reverse_points works with new path convention,"{'added': [(1125, '        # This will reset which anchors are'), (1126, '        # considered path ends'), (1127, '        if not self.has_points():'), (1128, '            return self'), (1129, '        inner_ends = self.get_subpath_end_indices()[:-1]'), (1130, '        self.data[""points""][inner_ends + 1] = self.data[""points""][inner_ends + 2]')], 'deleted': []}",266,266
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,91f976f7e93a3817bad8172ce1871f819b23ebeb,cbfe82579ff823a8fa42446f2d7337d6b657679e,"Don't include bounding box in Mobject.data

In principle, Mobject.data should just carry information that will pass to shaders","{'added': [(106, '        self.bounding_box: Vect3Array = np.zeros((3, 3))'), (254, '            self.bounding_box[:] = self.compute_bounding_box()'), (256, '        return self.bounding_box'), (1692, '            func = path_func if key == ""points"" else interpolate'), (1705, '        self.bounding_box[:] = path_func('), (1706, '            mobject1.bounding_box, mobject2.bounding_box, alpha'), (1707, '        )')], 'deleted': [(132, '            ""bounding_box"": np.zeros((3, 3)),'), (254, '            self.data[""bounding_box""] = self.compute_bounding_box()'), (256, '        return self.data[""bounding_box""]'), (1692, '            if key in (""points"", ""bounding_box""):'), (1693, '                func = path_func'), (1694, '            else:'), (1695, '                func = interpolate')]}",507,507
manimlib/mobject/types/point_cloud_mobject.py,manimlib/mobject/types/point_cloud_mobject.py,91f976f7e93a3817bad8172ce1871f819b23ebeb,cbfe82579ff823a8fa42446f2d7337d6b657679e,"Don't include bounding box in Mobject.data

In principle, Mobject.data should just carry information that will pass to shaders","{'added': [], 'deleted': [(26, '            if key == ""bounding_box"":'), (27, '                continue'), (85, '                if key == ""bounding_box"":'), (86, '                    continue'), (118, '            if key == ""bounding_box"":'), (119, '                continue')]}",28,28
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,599f74c7495b4d2f90dc979b5300dfcbbbab1997,91f976f7e93a3817bad8172ce1871f819b23ebeb,Refresh bounding boxes after selection,"{'added': [(307, '        for mob in mobs:'), (308, '            mob.set_animating_status(True)'), (315, '                mob.refresh_bounding_box()'), (323, '            mob.refresh_bounding_box()')], 'deleted': [(307, '        self.selection.set_animating_status(True)')]}",151,151
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,937b8948262141f6cb5e022d82f9f10703a48229,599f74c7495b4d2f90dc979b5300dfcbbbab1997,Clean up find_intersection,"{'added': [(283, '    p0: Vect3 | Vect3Array,'), (284, '    v0: Vect3 | Vect3Array,'), (285, '    p1: Vect3 | Vect3Array,'), (286, '    v1: Vect3 | Vect3Array,'), (287, '    threshold: float = 1e-5,'), (293, ''), (297, '    d = len(p0.shape)'), (298, '    if d == 1:'), (299, '        is_3d = any(arr[2] for arr in (p0, v0, p1, v1))'), (300, '    else:'), (301, '        is_3d = any(z for arr in (p0, v0, p1, v1) for z in arr.T[2])'), (302, '    if not is_3d:'), (303, '        numer = np.array(cross2d(v1, p1 - p0))'), (304, '        denom = np.array(cross2d(v1, v0))'), (305, '    else:'), (306, '        cp1 = cross(v1, p1 - p0)'), (307, '        cp2 = cross(v1, v0)'), (308, '        numer = np.array((cp1 * cp1).sum(d - 1))'), (309, '        denom = np.array((cp1 * cp2).sum(d - 1))'), (310, '    denom[abs(denom) < threshold] = np.inf'), (312, '    return p0 + (ratio * v0.T).T')], 'deleted': [(283, '    p0: Vect3,'), (284, '    v0: Vect3,'), (285, '    p1: Vect3,'), (286, '    v1: Vect3,'), (287, '    threshold: float = 1e-5'), (296, '    p0 = np.array(p0, ndmin=2)'), (297, '    v0 = np.array(v0, ndmin=2)'), (298, '    p1 = np.array(p1, ndmin=2)'), (299, '    v1 = np.array(v1, ndmin=2)'), (300, '    m, n = np.shape(p0)'), (301, '    assert(n in [2, 3])'), (302, ''), (303, '    numer = cross(v1, p1 - p0)'), (304, '    denom = cross(v1, v0)'), (305, '    if n == 3:'), (306, '        d = len(np.shape(numer))'), (307, '        new_numer = np.multiply(numer, numer).sum(d - 1)'), (308, '        new_denom = np.multiply(denom, numer).sum(d - 1)'), (309, '        numer, denom = new_numer, new_denom'), (310, ''), (311, '    denom[abs(denom) < threshold] = np.inf  # So that ratio goes to 0 there'), (313, '    ratio = np.repeat(ratio, n).reshape((m, n))'), (314, '    result = p0 + ratio * v0'), (315, '    if m == 1:'), (316, '        return result[0]'), (317, '    return result')]}",89,89
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,31cc2671e5c511690360178581e139b1a9c7b1f7,937b8948262141f6cb5e022d82f9f10703a48229,Have line_intersects_path not assume closed path,"{'added': [(324, '    n = len(path) - 1'), (325, '    p1 = np.empty((n, 2))'), (326, '    q1 = np.empty((n, 2))'), (327, '    p1[:] = start[:2]'), (328, '    q1[:] = end[:2]'), (329, '    p2 = path[:-1, :2]'), (330, '    q2 = path[1:, :2]')], 'deleted': [(324, '    n = len(path)'), (325, '    p1 = np.tile(start[:2], n).reshape((n, 2))'), (326, '    q1 = np.tile(end[:2], n).reshape((n, 2))'), (327, '    p2 = path[:, :2]'), (328, '    q2 = np.vstack([path[1:, :2], path[:1, :2]])')]}",89,89
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e832bb775f8039dfcd2050a0f31bde9c7636b664,31cc2671e5c511690360178581e139b1a9c7b1f7,Fix small bug with null triangles,"{'added': [(1048, '        # Remove null triangles, coming from adjascent points'), (1049, '        iti = inner_tri_indices'), (1050, '        null1 = (iti[0::3] + 1 == iti[1::3]) & (iti[0::3] + 2 == iti[2::3])'), (1051, '        null2 = (iti[0::3] - 1 == iti[1::3]) & (iti[0::3] - 2 == iti[2::3])'), (1052, '        inner_tri_indices = iti[~(null1 | null2).repeat(3)]')], 'deleted': []}",266,266
manimlib/shaders/inserts/get_unit_normal.glsl,manimlib/shaders/inserts/get_unit_normal.glsl,394d87effb99bea1d935a82b730ca2ba3edf9a4b,e832bb775f8039dfcd2050a0f31bde9c7636b664,Small style tweaks to quadratic_bezier_fill/geom,"{'added': [(1, 'vec3 get_unit_normal(vec3 p0, vec3 p1, vec3 p2){'), (3, '    vec3 v1 = normalize(p1 - p0);'), (4, '    vec3 v2 = normalize(p2 - p1);'), (7, ''), (8, '    if(cp_norm > tol) return cp / cp_norm;'), (9, ''), (10, '    // Otherwise, three pionts form a line, so find'), (11, '    // a normal vector to that line in the plane shared'), (12, '    // with the z-axis'), (13, '    vec3 comb = v1 + v2;'), (14, '    cp = cross(cross(comb, vec3(0.0, 0.0, 1.0)), comb);'), (15, '    cp_norm = length(cp);'), (16, '    if(cp_norm > tol) return cp / cp_norm;'), (17, ''), (18, '    // Otherwise, the points line up with the z-axis.'), (19, '    return vec3(0.0, -1.0, 0.0);')], 'deleted': [(1, 'vec3 get_unit_normal(in vec3[3] points){'), (3, '    vec3 v1 = normalize(points[1] - points[0]);'), (4, '    vec3 v2 = normalize(points[2] - points[1]);'), (7, '    if(cp_norm < tol){'), (8, '        // Three points form a line, so find a normal vector'), (9, '        // to that line in the plane shared with the z-axis'), (10, '        vec3 k_hat = vec3(0.0, 0.0, 1.0);'), (11, '        vec3 comb = v1 + v2;'), (12, '        vec3 new_cp = cross(cross(comb, k_hat), comb);'), (13, '        float new_cp_norm = length(new_cp);'), (14, '        if(new_cp_norm < tol){'), (15, '            // We only come here if all three points line up'), (16, '            // on the z-axis.'), (17, '            return vec3(0.0, -1.0, 0.0);'), (18, '        }'), (19, '        return new_cp / new_cp_norm;'), (20, '    }'), (21, '    return cp / cp_norm;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,394d87effb99bea1d935a82b730ca2ba3edf9a4b,e832bb775f8039dfcd2050a0f31bde9c7636b664,Small style tweaks to quadratic_bezier_fill/geom,"{'added': [(20, 'in vec3 verts[3];'), (64, '        emit_vertex_wrapper(verts[i], i);'), (70, 'void emit_pentagon(vec3 p0, vec3 p1, vec3 p2, vec3 normal){'), (124, '    vec3 p0 = verts[0];'), (125, '    vec3 p1 = verts[1];'), (126, '    vec3 p2 = verts[2];'), (127, '    unit_normal = get_unit_normal(p0, p1, p2);'), (130, '    emit_pentagon(p0, p1, p2, unit_normal);')], 'deleted': [(20, 'in vec3 bp[3];'), (64, '        emit_vertex_wrapper(bp[i], i);'), (70, 'void emit_pentagon(vec3[3] points, vec3 normal){'), (71, '    vec3 p0 = points[0];'), (72, '    vec3 p1 = points[1];'), (73, '    vec3 p2 = points[2];'), (74, ''), (128, '    vec3[3] verts = vec3[3](bp[0], bp[1], bp[2]);'), (129, '    unit_normal = get_unit_normal(verts);'), (132, '    emit_pentagon(verts, unit_normal);')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,394d87effb99bea1d935a82b730ca2ba3edf9a4b,e832bb775f8039dfcd2050a0f31bde9c7636b664,Small style tweaks to quadratic_bezier_fill/geom,"{'added': [(10, 'out vec3 verts;  // Bezier control point'), (19, '    verts = position_point_into_frame(point);')], 'deleted': [(10, 'out vec3 bp;  // Bezier control point'), (19, '    bp = position_point_into_frame(point);')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xy_to_uv.glsl,e534206eb60dd5ab7d7b356a1c6d24c4d7f70106,394d87effb99bea1d935a82b730ca2ba3edf9a4b,Small style change to get_xy_to_uv,"{'added': [(11, 'vec2 xs_on_clean_parabola(vec2 b0, vec2 b1, vec2 b2){'), (58, 'mat3 get_xy_to_uv(vec2 b0, vec2 b1, vec2 b2, float temp_is_linear, out float is_linear){'), (64, '    vec2 dest0;'), (65, '    vec2 dest1;'), (71, '        vec2 xs = xs_on_clean_parabola(b0, b1, b2);'), (77, '            dest0 = vec2(x0, x0 * x0);'), (78, '            dest1 = vec2(x2, x2 * x2);'), (83, '        dest0 = vec2(0, 0);'), (84, '        dest1 = vec2(1, 0);'), (87, '    return map_point_pairs(b0, b2, dest0, dest1);')], 'deleted': [(11, 'vec2 xs_on_clean_parabola(vec2 controls[3]){'), (20, '    vec2 b0 = controls[0];'), (21, '    vec2 b1 = controls[1];'), (22, '    vec2 b2 = controls[2];'), (23, ''), (62, 'mat3 get_xy_to_uv(vec2 controls[3], float temp_is_linear, out float is_linear){'), (68, '    vec2[2] dest;'), (74, '        vec2 xs = xs_on_clean_parabola(controls);'), (80, '            dest[0] = vec2(x0, x0 * x0);'), (81, '            dest[1] = vec2(x2, x2 * x2);'), (86, '        dest[0] = vec2(0, 0);'), (87, '        dest[1] = vec2(1, 0);'), (90, '    return map_point_pairs('), (91, '        controls[0], controls[2], dest[0], dest[1]'), (92, '    );')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,e534206eb60dd5ab7d7b356a1c6d24c4d7f70106,394d87effb99bea1d935a82b730ca2ba3edf9a4b,Small style change to get_xy_to_uv,"{'added': [(99, '    mat3 xy_to_uv = get_xy_to_uv(p0.xy, p1.xy, p2.xy, is_linear, is_linear);')], 'deleted': [(99, '    mat3 xy_to_uv = get_xy_to_uv(vec2[3](p0.xy, p1.xy, p2.xy), is_linear, is_linear);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,e534206eb60dd5ab7d7b356a1c6d24c4d7f70106,394d87effb99bea1d935a82b730ca2ba3edf9a4b,Small style change to get_xy_to_uv,"{'added': [(167, '    mat3 xy_to_uv = get_xy_to_uv(p0.xy, p1.xy, p2.xy, is_linear, is_linear);')], 'deleted': [(167, '    mat3 xy_to_uv = get_xy_to_uv(vec2[3](p0.xy, p1.xy, p2.xy), is_linear, is_linear);')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,2aa2eedbbde8f548c4d0d0205addf0f1a55a4c7c,e534206eb60dd5ab7d7b356a1c6d24c4d7f70106,Calculate unit normal more directly,"{'added': [(69, 'void emit_pentagon('), (70, '    // Triangle vertices'), (71, '    vec3 p0,'), (72, '    vec3 p1,'), (73, '    vec3 p2,'), (74, '    // Unit tangent vector'), (75, '    vec3 t01,'), (76, '    vec3 t12,'), (77, '    // Unit normal'), (78, '    vec3 normal'), (79, '){'), (80, '    // Vectors perpendicular to the curve in the plane of the curve'), (81, '    // pointing outside the curve'), (133, '    vec3 t01 = normalize(p1 - p0);'), (134, '    vec3 t12 = normalize(p2 - p1);'), (135, '    unit_normal = normalize(cross(t01, t12));'), (138, '    emit_pentagon(p0, p1, p2, t01, t12, unit_normal);')], 'deleted': [(42, '#INSERT get_unit_normal.glsl'), (70, 'void emit_pentagon(vec3 p0, vec3 p1, vec3 p2, vec3 normal){'), (71, '    // Tangent vectors'), (72, '    vec3 t01 = normalize(p1 - p0);'), (73, '    vec3 t12 = normalize(p2 - p1);'), (74, ''), (75, '    // Vectors perpendicular to the curve in the plane of the curve pointing outside the curve'), (127, '    unit_normal = get_unit_normal(p0, p1, p2);'), (130, '    emit_pentagon(p0, p1, p2, unit_normal);')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,071e7f1a742797d416ad27f5bc0bc3e32e214991,2aa2eedbbde8f548c4d0d0205addf0f1a55a4c7c,Small tweak for get_joint_angles,"{'added': [(1097, '        # Compute angles, and read them into'), (1098, '        # the joint_angles array'), (1099, '        result = self.data[""joint_angle""][:, 0]'), (1101, '        np.arccos(dots, out=result)'), (1102, '        result[np.isnan(result)] = 0'), (1103, '        # Assumes unit normal in the positive z direction'), (1104, '        result *= np.sign(cross2d(vect_to_vert, vect_from_vert))'), (1105, '        return result')], 'deleted': [(1097, '        # Compute angles'), (1099, '        angle = np.arccos(arr_clip(dots, -1, 1))'), (1100, '        # Assumes unit normal of (0, 0, 1), but if stroke shader'), (1101, '        # ever stops making that assumption, this should too'), (1102, '        sgn = np.sign(cross2d(vect_to_vert, vect_from_vert))'), (1103, '        self.data[""joint_angle""][:, 0] = sgn * angle'), (1104, ''), (1105, '        return self.data[""joint_angle""]')]}",266,266
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,42909a94ac95d6bccef882c8af66aff925e625ff,071e7f1a742797d416ad27f5bc0bc3e32e214991,No need for np.repeat in normalize_along_axis,"{'added': [(196, '    return (array.T / norms).T')], 'deleted': [(196, '    buffed_norms = np.repeat(norms, array.shape[axis]).reshape(array.shape)'), (197, '    return array / buffed_norms')]}",89,89
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,12c3af9647de4e4ef82edbc3cdb4717a149a7457,42909a94ac95d6bccef882c8af66aff925e625ff,Update to get_subpath_end_indices_from_points,"{'added': [(694, '        a0, h, a1 = points[0:-1:2], points[1::2], points[2::2]'), (695, '        # An anchor point is considered the end of a path'), (696, '        # if its following handle is sitting on top of it.'), (697, '        # To disambiguate this from cases with many null'), (698, '        # curves in a row, we also check that the following'), (699, '        # anchor is genuinely distinct'), (700, '        is_end = (a0 == h).all(1) & (abs(h - a1) > atol).any(1)'), (701, '        inner_ends = (2 * n for n, end in enumerate(is_end) if end)'), (702, '        return np.array([*inner_ends, len(points) - 1])')], 'deleted': [(693, '        # Find internal end points'), (694, '        a0, h, a1 = points[0:-1:2], points[1::2], points[2::2]'), (696, '        is_end = (a0 == h).all(1) & (np.linalg.norm(h - a1, axis=1) > atol)'), (697, '        # Mark the final point as an end'), (698, '        is_end = np.hstack([is_end, [True]])'), (699, '        return np.arange(0, len(points), 2)[is_end]')]}",268,268
manimlib/shaders/inserts/finalize_color.glsl,manimlib/shaders/inserts/finalize_color.glsl,28d5baeeff716886eb60994c5bf91ee7c64e7754,51efe0d18ed4ef47dc28a7db4f3b99534e8316cf,Small stylistic tweaks,"{'added': [(12, 'vec4 add_light('), (13, '    vec4 color,'), (14, '    vec3 point,'), (15, '    vec3 unit_normal,'), (16, '    vec3 light_coords,'), (17, '    vec3 cam_coords,'), (18, '    float reflectiveness,'), (19, '    float gloss,'), (20, '    float shadow'), (21, '){'), (50, 'vec4 finalize_color('), (51, '    vec4 color,'), (52, '    vec3 point,'), (53, '    vec3 unit_normal,'), (54, '    vec3 light_coords,'), (55, '    vec3 cam_coords,'), (56, '    float reflectiveness,'), (57, '    float gloss,'), (58, '    float shadow'), (59, '){')], 'deleted': [(12, 'vec4 add_light(vec4 color,'), (13, '               vec3 point,'), (14, '               vec3 unit_normal,'), (15, '               vec3 light_coords,'), (16, '               vec3 cam_coords,'), (17, '               float reflectiveness,'), (18, '               float gloss,'), (19, '               float shadow){'), (45, '    // float darkening = mix(1, max(light_to_normal, 0), shadow);'), (46, '    // return vec4('), (47, '    //     darkening * mix(color.rgb, vec3(1.0), shine),'), (48, '    //     color.a'), (49, '    // );'), (53, 'vec4 finalize_color(vec4 color,'), (54, '                    vec3 point,'), (55, '                    vec3 unit_normal,'), (56, '                    vec3 light_coords,'), (57, '                    vec3 cam_coords,'), (58, '                    float reflectiveness,'), (59, '                    float gloss,'), (60, '                    float shadow){')]}",,
manimlib/shaders/surface/frag.glsl,manimlib/shaders/surface/frag.glsl,1c1325ff8d9d527911ca4ce411dd4ed12374f8d2,28d5baeeff716886eb60994c5bf91ee7c64e7754,More coloring work of Surface to vert shader,"{'added': [(7, '    frag_color = v_color;')], 'deleted': [(3, 'uniform vec3 light_source_position;'), (4, 'uniform vec3 camera_position;'), (5, 'uniform float reflectiveness;'), (6, 'uniform float gloss;'), (7, 'uniform float shadow;'), (8, 'uniform float focal_distance;'), (9, ''), (10, 'in vec3 xyz_coords;'), (11, 'in vec3 v_normal;'), (13, ''), (16, '#INSERT finalize_color.glsl'), (17, ''), (19, '    frag_color = finalize_color('), (20, '        v_color,'), (21, '        xyz_coords,'), (22, '        normalize(v_normal),'), (23, '        light_source_position,'), (24, '        camera_position,'), (25, '        reflectiveness,'), (26, '        gloss,'), (27, '        shadow'), (28, '    );')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,1c1325ff8d9d527911ca4ce411dd4ed12374f8d2,28d5baeeff716886eb60994c5bf91ee7c64e7754,More coloring work of Surface to vert shader,"{'added': [(5, 'uniform vec3 light_source_position;'), (6, 'uniform vec3 camera_position;'), (7, 'uniform float reflectiveness;'), (8, 'uniform float gloss;'), (9, 'uniform float shadow;'), (10, ''), (23, '#INSERT finalize_color.glsl'), (30, ''), (31, '    v_color = finalize_color('), (32, '        color,'), (33, '        xyz_coords,'), (34, '        v_normal,'), (35, '        light_source_position,'), (36, '        camera_position,'), (37, '        reflectiveness,'), (38, '        gloss,'), (39, '        shadow'), (40, '    );')], 'deleted': []}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,dae51abc175d6ffa7e7c938a933fae7059f7465c,1c1325ff8d9d527911ca4ce411dd4ed12374f8d2,Allow for a clip plane with Surface,"{'added': [(253, '    def set_ctx_clip_distance(self, enable: bool = True) -> None:'), (254, '        if enable:'), (255, '            gl.glEnable(gl.GL_CLIP_DISTANCE0)'), (256, '        else:'), (257, '            gl.glDisable(gl.GL_CLIP_DISTANCE0)'), (258, ''), (386, '        self.set_ctx_clip_distance(shader_wrapper.use_clip_plane)')], 'deleted': []}",93,93
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,dae51abc175d6ffa7e7c938a933fae7059f7465c,1c1325ff8d9d527911ca4ce411dd4ed12374f8d2,Allow for a clip plane with Surface,"{'added': [(69, '    def init_uniforms(self):'), (70, '        super().init_uniforms()'), (71, '        self.uniforms[""clip_plane""] = np.zeros(4)'), (72, ''), (214, '    def set_clip_plane('), (215, '        self,'), (216, '        vect: Vect3 | None = None,'), (217, '        threshold: float | None = None'), (218, '    ):'), (219, '        if vect is not None:'), (220, '            self.uniforms[""clip_plane""][:3] = vect'), (221, '        if threshold is not None:'), (222, '            self.uniforms[""clip_plane""][3] = threshold'), (223, '        self.shader_wrapper.use_clip_plane = True'), (224, '        return self'), (225, ''), (226, '    def deactivate_clip_plane(self):'), (227, '        self.uniforms[""clip_plane""][:] = 0'), (228, '        self.shader_wrapper.use_clip_plane = False'), (229, '        return self'), (230, '')], 'deleted': []}",54,54
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,dae51abc175d6ffa7e7c938a933fae7059f7465c,1c1325ff8d9d527911ca4ce411dd4ed12374f8d2,Allow for a clip plane with Surface,"{'added': [(38, '        use_clip_plane: bool = False,'), (48, '        self.use_clip_plane = use_clip_plane')], 'deleted': []}",41,41
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,dae51abc175d6ffa7e7c938a933fae7059f7465c,1c1325ff8d9d527911ca4ce411dd4ed12374f8d2,Allow for a clip plane with Surface,"{'added': [(10, 'uniform vec4 clip_plane;'), (32, '    if(clip_plane.xyz != vec3(0.0, 0.0, 0.0)){'), (33, '        gl_ClipDistance[0] = dot(vec4(point, 1.0), clip_plane);'), (34, '    }'), (35, '')], 'deleted': []}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3555936c4d36904bcebbae7e6df496c924f72028,dae51abc175d6ffa7e7c938a933fae7059f7465c,Check for valid inputs to arccos,"{'added': [(1104, '        np.arccos(dots, out=result, where=((dots <= 1) & (dots >= -1)))')], 'deleted': [(1104, '        np.arccos(dots, out=result)'), (1105, '        result[np.isnan(result)] = 0')]}",268,268
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,fa81d9f6ea2422d41eb4d59faf93408786836625,3555936c4d36904bcebbae7e6df496c924f72028,Move comment,"{'added': [(18, '    // Flip and scale to prevent premature clipping'), (19, '    result.z *= -0.1;')], 'deleted': [(18, '    result.z *= -0.1;  // Flip and prevent premature clipping')]}",,
manimlib/shaders/image/vert.glsl,manimlib/shaders/image/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (16, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/inserts/camera_uniform_declarations.glsl,,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(1, 'uniform vec2 frame_shape;'), (2, 'uniform vec2 pixel_shape;'), (3, 'uniform vec3 camera_offset;'), (4, 'uniform mat3 camera_rotation;'), (5, 'uniform float is_fixed_in_frame;'), (6, 'uniform float focal_distance;')]}",,
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [(1, 'uniform float is_fixed_in_frame;'), (2, 'uniform vec3 camera_offset;'), (3, 'uniform mat3 camera_rotation;'), (4, 'uniform vec2 frame_shape;'), (5, 'uniform vec2 pixel_shape;  // Move this'), (6, 'uniform float focal_distance;'), (23, '}'), (24, ''), (25, ''), (26, 'vec3 rotate_point_into_frame(vec3 point){'), (27, '    if(bool(is_fixed_in_frame)){'), (28, '        return point;'), (29, '    }'), (30, '    return camera_rotation * point;'), (31, '}'), (32, ''), (33, ''), (34, 'vec3 position_point_into_frame(vec3 point){'), (35, '    if(bool(is_fixed_in_frame)){'), (36, '        return point;'), (37, '    }'), (38, '    return rotate_point_into_frame(point - camera_offset);'), (39, '}')], 'deleted': [(1, '// Assumes the following uniforms exist in the surrounding context:'), (2, '// uniform vec2 frame_shape;'), (3, '// uniform float focal_distance;'), (4, '// uniform float is_fixed_in_frame;'), (21, '}')]}",,
manimlib/shaders/inserts/position_point_into_frame.glsl,,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(1, '// Assumes the following uniforms exist in the surrounding context:'), (2, '// uniform float is_fixed_in_frame;'), (3, '// uniform vec3 camera_offset;'), (4, '// uniform mat3 camera_rotation;'), (5, ''), (6, 'vec3 rotate_point_into_frame(vec3 point){'), (7, '    if(bool(is_fixed_in_frame)){'), (8, '        return point;'), (9, '    }'), (10, '    return camera_rotation * point;'), (11, '}'), (12, ''), (13, ''), (14, 'vec3 position_point_into_frame(vec3 point){'), (15, '    if(bool(is_fixed_in_frame)){'), (16, '        return point;'), (17, '    }'), (18, '    return rotate_point_into_frame(point - camera_offset);'), (19, '}')]}",,
manimlib/shaders/mandelbrot_fractal/vert.glsl,manimlib/shaders/mandelbrot_fractal/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (11, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/newton_fractal/vert.glsl,manimlib/shaders/newton_fractal/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (11, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, '')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [(36, '#INSERT get_xy_to_uv.glsl')], 'deleted': [(8, '// Needed for get_gl_Position'), (9, 'uniform vec2 frame_shape;'), (10, 'uniform vec2 pixel_shape;'), (11, 'uniform float focal_distance;'), (12, 'uniform float is_fixed_in_frame;'), (40, '#INSERT get_xy_to_uv.glsl')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [(14, '#INSERT get_gl_Position.glsl')], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (16, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, '')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [(43, '#INSERT get_xy_to_uv.glsl')], 'deleted': [(6, '// Needed for get_gl_Position'), (7, 'uniform vec2 frame_shape;'), (8, 'uniform vec2 pixel_shape;'), (9, 'uniform float focal_distance;'), (10, 'uniform float is_fixed_in_frame;'), (11, ''), (14, 'uniform mat3 camera_rotation;'), (49, '#INSERT get_xy_to_uv.glsl')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [(19, '#INSERT get_gl_Position.glsl')], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (21, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/simple_vert.glsl,manimlib/shaders/simple_vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (7, '// Analog of import for manim only'), (9, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (21, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/textured_surface/vert.glsl,manimlib/shaders/textured_surface/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (16, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/true_dot/geom.glsl,manimlib/shaders/true_dot/geom.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [], 'deleted': [(6, '// Needed for get_gl_Position'), (7, 'uniform vec2 frame_shape;'), (8, 'uniform vec2 pixel_shape;'), (9, 'uniform float focal_distance;'), (10, 'uniform float is_fixed_in_frame;')]}",,
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,a004c88e023f8bdd933559324260bae5bbf1e29b,fa81d9f6ea2422d41eb4d59faf93408786836625,Consolidate functions associated with computing gl_Position,"{'added': [(11, '#INSERT get_gl_Position.glsl')], 'deleted': [(3, '#INSERT camera_uniform_declarations.glsl'), (4, ''), (13, '#INSERT position_point_into_frame.glsl')]}",,
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,a004c88e023f8bdd933559324260bae5bbf1e29b,Move uniform pixel_shape declaration outside of get_gl_Position,"{'added': [], 'deleted': [(5, 'uniform vec2 pixel_shape;  // Move this')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,a004c88e023f8bdd933559324260bae5bbf1e29b,Move uniform pixel_shape declaration outside of get_gl_Position,"{'added': [(7, 'uniform vec2 pixel_shape;')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,a004c88e023f8bdd933559324260bae5bbf1e29b,Move uniform pixel_shape declaration outside of get_gl_Position,"{'added': [(8, 'uniform vec2 pixel_shape;')], 'deleted': []}",,
manimlib/shaders/true_dot/geom.glsl,manimlib/shaders/true_dot/geom.glsl,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,a004c88e023f8bdd933559324260bae5bbf1e29b,Move uniform pixel_shape declaration outside of get_gl_Position,"{'added': [(7, 'uniform vec2 pixel_shape;')], 'deleted': []}",,
manimlib/shaders/inserts/finalize_color.glsl,manimlib/shaders/inserts/finalize_color.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [(1, 'uniform vec3 light_source_position;'), (2, 'uniform vec3 camera_position;'), (3, 'uniform float reflectiveness;'), (4, 'uniform float gloss;'), (5, 'uniform float shadow;'), (6, '')], 'deleted': []}",,
manimlib/shaders/mandelbrot_fractal/frag.glsl,manimlib/shaders/mandelbrot_fractal/frag.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [], 'deleted': [(3, 'uniform vec3 light_source_position;'), (4, 'uniform vec3 camera_position;'), (5, 'uniform float reflectiveness;'), (6, 'uniform float gloss;'), (7, 'uniform float shadow;'), (8, 'uniform float focal_distance;'), (9, '')]}",,
manimlib/shaders/newton_fractal/frag.glsl,manimlib/shaders/newton_fractal/frag.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [], 'deleted': [(3, 'uniform vec3 light_source_position;'), (4, 'uniform vec3 camera_position;'), (5, 'uniform float reflectiveness;'), (6, 'uniform float gloss;'), (7, 'uniform float shadow;'), (8, 'uniform float focal_distance;'), (9, '')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [], 'deleted': [(9, '// Needed for finalize_color'), (10, 'uniform vec3 light_source_position;'), (11, 'uniform vec3 camera_position;'), (12, 'uniform float reflectiveness;'), (13, 'uniform float gloss;'), (14, 'uniform float shadow;'), (15, '')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [], 'deleted': [(9, ''), (10, '//Needed for lighting'), (11, 'uniform vec3 light_source_position;'), (12, 'uniform vec3 camera_position;'), (14, 'uniform float reflectiveness;'), (15, 'uniform float gloss;'), (16, 'uniform float shadow;')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [], 'deleted': [(3, 'uniform vec3 light_source_position;'), (4, 'uniform vec3 camera_position;'), (5, 'uniform float reflectiveness;'), (6, 'uniform float gloss;'), (7, 'uniform float shadow;')]}",,
manimlib/shaders/textured_surface/frag.glsl,manimlib/shaders/textured_surface/frag.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [], 'deleted': [(6, 'uniform vec3 light_source_position;'), (7, 'uniform vec3 camera_position;'), (8, 'uniform float reflectiveness;'), (9, 'uniform float gloss;'), (10, 'uniform float shadow;'), (11, 'uniform float focal_distance;')]}",,
manimlib/shaders/true_dot/frag.glsl,manimlib/shaders/true_dot/frag.glsl,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,d19b244ee18e79f1c7b1b9f8035c7a9739cddd6e,Consolidate lighting uniforms,"{'added': [], 'deleted': [(3, 'uniform vec3 light_source_position;'), (4, 'uniform vec3 camera_position;'), (5, 'uniform float reflectiveness;'), (6, 'uniform float gloss;'), (7, 'uniform float shadow;'), (9, 'uniform float focal_distance;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,19a772166188f86f3e92bf9795fa22684147b418,c8238f6b39ccfa34f11c8343c5ca147f662fe3b4,Fix unit normal issue with bezier fill,"{'added': [(32, 'void emit_vertex_wrapper(vec3 point, int index, vec3 unit_normal){'), (48, 'void emit_simple_triangle(vec3 unit_normal){'), (50, '        emit_vertex_wrapper(verts[i], i, unit_normal);'), (64, '    vec3 unit_normal'), (68, '    vec3 p0_perp = cross(t01, unit_normal);'), (69, '    vec3 p2_perp = cross(t12, unit_normal);'), (98, '        emit_vertex_wrapper(corner, j, unit_normal);'), (114, '    vec3 t01 = p1 - p0;'), (115, '    vec3 t12 = p2 - p1;'), (116, '    vec3 unit_normal = normalize(cross(t01, t12));'), (117, ''), (118, '    if(bool(fill_all)){'), (119, '        emit_simple_triangle(unit_normal);'), (120, '        return;'), (121, '    }'), (124, '    emit_pentagon('), (125, '        p0, p1, p2,'), (126, '        normalize(t01),'), (127, '        normalize(t12),'), (128, '        unit_normal'), (129, '    );')], 'deleted': [(23, 'vec3 unit_normal;'), (24, ''), (34, 'void emit_vertex_wrapper(vec3 point, int index){'), (50, 'void emit_simple_triangle(){'), (52, '        emit_vertex_wrapper(verts[i], i);'), (66, '    // Unit normal'), (67, '    vec3 normal'), (71, '    vec3 p0_perp = cross(t01, normal);'), (72, '    vec3 p2_perp = cross(t12, normal);'), (101, '        emit_vertex_wrapper(corner, j);'), (114, '    if(bool(fill_all)){'), (115, '        emit_simple_triangle();'), (116, '        return;'), (117, '    }'), (118, ''), (122, '    vec3 t01 = normalize(p1 - p0);'), (123, '    vec3 t12 = normalize(p2 - p1);'), (124, '    unit_normal = normalize(cross(t01, t12));'), (127, '    emit_pentagon(p0, p1, p2, t01, t12, unit_normal);')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,c9ba32b56803fab1bf54aea056ada77cf97aea1e,19a772166188f86f3e92bf9795fa22684147b418,No need to call tobytes,"{'added': [(417, '        vbo = self.ctx.buffer(vert_data)')], 'deleted': [(417, '        vbo = self.ctx.buffer(vert_data.tobytes())')]}",93,93
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,702bb2776c728f269a412f2a4e7e16ea78831e91,c9ba32b56803fab1bf54aea056ada77cf97aea1e,Remove (no-longer needed) filename_to_code_map,"{'added': [], 'deleted': [(163, '# For caching'), (164, 'filename_to_code_map: dict[str, str] = {}'), (165, ''), (170, '    if filename in filename_to_code_map:'), (171, '        return filename_to_code_map[filename]'), (195, '    filename_to_code_map[filename] = result')]}",40,40
manimlib/camera/camera.py,manimlib/camera/camera.py,5b8fb1828f46a1784902c1b15e0de296bc82c573,702bb2776c728f269a412f2a4e7e16ea78831e91,Use ibo for single use render groups,"{'added': [(415, '        if indices is None:'), (416, '            ibo = None'), (417, '        elif single_use:'), (418, '            ibo = self.ctx.buffer(indices)'), (419, '        else:'), (420, '            # The vao.render call is strangely longer'), (421, '            # when an index buffer is used, so if the'), (422, '            # mobject is not changing, meaning only its'), (423, '            # uniforms are being updated, just create'), (424, '            # a larger data array based on the indices'), (425, ""            # and don't bother with the ibo""), (427, '            ibo = None')], 'deleted': [(415, '        if indices is not None:'), (418, '        # For the moment, the index buffer is actually not used,'), (419, '        # since it seems to make the actual render calls meaninfully slower'), (420, '        ibo = None')]}",94,94
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,4582f5d3316ceb246309006c282e9d732f2b02ca,5b8fb1828f46a1784902c1b15e0de296bc82c573,Clean up sort_faces_back_to_front,"{'added': [(199, '        dots = (points[tri_is[::3]] * vect).sum(1)'), (200, '        indices = np.argsort(dots)')], 'deleted': [(197, '        indices = list(range(len(tri_is) // 3))'), (200, '        def index_dot(index):'), (201, '            return np.dot(points[tri_is[3 * index]], vect)'), (202, ''), (203, '        indices.sort(key=index_dot)')]}",53,53
example_scenes.py,example_scenes.py,bf726667a8ad9253b45bfc70c15aff82336cf720,4582f5d3316ceb246309006c282e9d732f2b02ca,Don't make TexAndNumbersExample an InteractiveScene by default,"{'added': [(489, 'class TexAndNumbersExample(Scene):')], 'deleted': [(489, 'class TexAndNumbersExample(InteractiveScene):')]}",21,21
manimlib/mobject/functions.py,manimlib/mobject/functions.py,51a508609322571df53927599daa3c9270bf68ee,bf726667a8ad9253b45bfc70c15aff82336cf720,Don't default to smoothing for implicit curves,"{'added': [(95, '        use_smoothing: bool = False,'), (113, '            np.pad(curve, [(0, 0), (0, 1)])'), (114, '            for curve in curves'), (115, '            if curve != []')], 'deleted': [(95, '        use_smoothing: bool = True,'), (113, '            np.pad(curve, [(0, 0), (0, 1)]) for curve in curves if curve != []')]}",20,20
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,ea943de5575ace555fdb633848fd1ebdc73defcc,8e1b23ee98fb60581f33cc9bd4fedf9fff65b505,Store font size in uniforms not data,"{'added': [(114, '    def init_uniforms(self) -> None:'), (115, '        super().init_uniforms()'), (116, '        self.uniforms[""font_size""] = self.font_size'), (119, '        return int(self.uniforms[""font_size""])'), (170, '        self.uniforms[""font_size""] *= scale_factor')], 'deleted': [(114, '    def init_data(self) -> None:'), (115, '        super().init_data()'), (116, '        self.data[""font_size""] = np.array([self.font_size], dtype=float)'), (119, '        return int(self.data[""font_size""][0])'), (170, '        self.data[""font_size""] *= scale_factor')]}",31,31
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,da15eb4ad20064f96a633d119ae8118c09910c77,ea943de5575ace555fdb633848fd1ebdc73defcc,"Remove a few direct references to data[""points""]","{'added': [(241, '        return len(self.get_points())'), (250, '        return len(self.get_points()) > 0')], 'deleted': [(241, '        return len(self.data[""points""])'), (250, '        return self.data[""points""].size > 0')]}",507,507
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,da15eb4ad20064f96a633d119ae8118c09910c77,ea943de5575ace555fdb633848fd1ebdc73defcc,"Remove a few direct references to data[""points""]","{'added': [(723, '        return self.get_num_points() // 2')], 'deleted': [(723, '        return len(self.data[""points""]) // 2')]}",268,268
manimlib/mobject/value_tracker.py,manimlib/mobject/value_tracker.py,f2e91ef66f8202655937de2dd3c688e487676b34,da15eb4ad20064f96a633d119ae8118c09910c77,Use uniform for ValueTracker value instead of data,"{'added': [(26, '    def init_uniforms(self) -> None:'), (27, '        super().init_uniforms()'), (28, '        self.uniforms[""value""] = np.array('), (33, '    def get_value(self) -> float | complex | np.ndarray:'), (34, '        result = self.uniforms[""value""]'), (39, '    def set_value(self, value: float | complex | np.ndarray):'), (40, '        self.uniforms[""value""][:] = value')], 'deleted': [(26, '    def init_data(self) -> None:'), (27, '        super().init_data()'), (28, '        self.data[""value""] = np.array('), (30, '            ndmin=2,'), (34, '    def get_value(self) -> float | complex:'), (35, '        result = self.data[""value""][0, :]'), (40, '    def set_value(self, value: float | complex):'), (41, '        self.data[""value""][0, :] = value')]}",8,8
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,286b8fb6c3565d5acafa0eef718b14a9628e2101,f2e91ef66f8202655937de2dd3c688e487676b34,Set the stage for data to be treated as a structure numpy array,"{'added': [(109, '        self._data_defaults = {'), (110, '            key: np.zeros((1, self.data[key].shape[1]))'), (111, '            for key in self.data'), (112, '        }'), (137, '            ""rgbas"": np.zeros((0, 4)),'), (179, '        if new_length == 0:'), (180, '            for key in self.data:'), (181, '                if len(self.data[key]) > 0:'), (182, '                    self._data_defaults[key][:1] = self.data[key][:1]'), (183, '        elif self.get_num_points() == 0:'), (184, '            for key in self.data:'), (185, '                self.data[key] = self._data_defaults[key].copy()'), (186, ''), (187, '        for key in self.data:'), (1230, '            data = mob.data if mob.get_num_points() > 0 else mob._data_defaults'), (1231, '            data[name][:] = rgba_array'), (1269, '            data = mob.data if mob.has_points() > 0 else mob._data_defaults'), (1271, '                rgbs = np.array([color_to_rgb(c) for c in listify(color)])'), (1272, '                data[name][:, :3] = resize_with_interpolation(rgbs, len(data[name]))'), (1274, '                opacities = np.array(listify(opacity))'), (1275, '                data[name][:, 3] = resize_with_interpolation(opacities, len(data[name]))'), (1877, '    def check_data_alignment(self, array: np.ndarray, data_key: str):'), (1903, '        self.check_data_alignment(shader_data, data_key)  # TODO, make sure this can be removed')], 'deleted': [(133, '            ""rgbas"": np.zeros((1, 4)),'), (175, '        for key in self.aligned_data_keys:'), (1218, '            mob.data[name] = np.array(rgba_array)'), (1255, '        max_len = 0'), (1256, '        if color is not None:'), (1257, '            rgbs = np.array([color_to_rgb(c) for c in listify(color)])'), (1258, '            max_len = len(rgbs)'), (1259, '        if opacity is not None:'), (1260, '            opacities = np.array(listify(opacity))'), (1261, '            max_len = max(max_len, len(opacities))'), (1262, ''), (1264, '            if max_len > len(mob.data[name]):'), (1265, '                mob.data[name] = resize_array(mob.data[name], max_len)'), (1266, '            size = len(mob.data[name])'), (1268, '                mob.data[name][:, :3] = resize_array(rgbs, size)'), (1270, '                mob.data[name][:, 3] = resize_array(opacities, size)'), (1872, '    def check_data_alignment(self, array: Iterable, data_key: str):'), (1898, '        self.check_data_alignment(shader_data, data_key)')]}",512,512
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,286b8fb6c3565d5acafa0eef718b14a9628e2101,f2e91ef66f8202655937de2dd3c688e487676b34,Set the stage for data to be treated as a structure numpy array,"{'added': [(9, 'from manimlib.utils.iterables import resize_with_interpolation'), (104, '        self.data[""radii""][:] = resize_with_interpolation(radii, n_points)')], 'deleted': [(9, 'from manimlib.utils.iterables import resize_preserving_order'), (104, '        self.data[""radii""] = resize_preserving_order(radii, n_points)')]}",22,22
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,286b8fb6c3565d5acafa0eef718b14a9628e2101,f2e91ef66f8202655937de2dd3c688e487676b34,Set the stage for data to be treated as a structure numpy array,"{'added': [(11, 'from manimlib.utils.iterables import resize_with_interpolation'), (43, '            ""opacity"": self.opacity * np.ones((4, 1)),'), (52, '        op_arr = np.array([[o] for o in listify(opacity)])'), (54, '            mob.data[""opacity""][:] = resize_with_interpolation(op_arr, mob.get_num_points())')], 'deleted': [(42, '            ""opacity"": np.array([[self.opacity]], dtype=np.float32),'), (52, '            mob.data[""opacity""] = np.array([[o] for o in listify(opacity)])')]}",11,11
manimlib/mobject/types/point_cloud_mobject.py,manimlib/mobject/types/point_cloud_mobject.py,286b8fb6c3565d5acafa0eef718b14a9628e2101,f2e91ef66f8202655937de2dd3c688e487676b34,Set the stage for data to be treated as a structure numpy array,"{'added': [(56, '        self.data[""rgbas""][:] = np.array(list(map('), (84, '                mob.data[key][:] = mob.data[key][indices]')], 'deleted': [(19, '    def resize_points('), (20, '        self,'), (21, '        size: int,'), (22, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (23, '    ):'), (24, '        # TODO'), (25, '        for key in self.data:'), (26, '            if len(self.data[key]) != size:'), (27, '                self.data[key] = resize_func(self.data[key], size)'), (28, '        return self'), (29, ''), (67, '        self.data[""rgbas""] = np.array(list(map('), (95, '                mob.data[key] = mob.data[key][indices]')]}",25,25
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,286b8fb6c3565d5acafa0eef718b14a9628e2101,f2e91ef66f8202655937de2dd3c688e487676b34,Set the stage for data to be treated as a structure numpy array,"{'added': [(13, 'from manimlib.utils.iterables import resize_with_interpolation'), (340, '        op_arr = np.array([[o] for o in listify(opacity)])'), (342, '            mob.data[""opacity""][:] = resize_with_interpolation(op_arr, len(mob.data[""opacity""]))')], 'deleted': [(340, '            mob.data[""opacity""] = np.array([[o] for o in listify(opacity)])')]}",53,53
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,286b8fb6c3565d5acafa0eef718b14a9628e2101,f2e91ef66f8202655937de2dd3c688e487676b34,Set the stage for data to be treated as a structure numpy array,"{'added': [(32, 'from manimlib.utils.iterables import arrays_match'), (213, '                data = mob.data if mob.get_num_points() > 0 else mob._data_defaults'), (214, ""                data['stroke_width'][:, 0] = resize_with_interpolation(""), (215, '                    np.array(listify(width)).flatten(),'), (216, ""                    len(data['stroke_width'])""), (217, '                )'), (256, ""                mob.data['fill_rgba'][:] = resize_with_interpolation(fill_rgba, len(mob.data['fill_rgba']))""), (265, ""                mob.data['stroke_rgba'][:] = resize_with_interpolation(stroke_rgba, len(mob.data['stroke_rgba']))""), (930, '            if not arrays_match(tri1, tri2):')], 'deleted': [(212, '                if isinstance(width, np.ndarray):'), (213, '                    arr = width.reshape((len(width), 1))'), (214, '                else:'), (215, '                    arr = np.array([[w] for w in listify(width)], dtype=float)'), (216, ""                mob.data['stroke_width'] = arr""), (255, ""                mob.data['fill_rgba'] = resize_with_interpolation(fill_rgba, len(fill_rgba))""), (264, ""                mob.data['stroke_rgba'] = resize_with_interpolation(stroke_rgba, len(stroke_rgba))""), (929, '            if len(tri1) != len(tri2) or not (tri1 == tri2).all():'), (994, '            mob.data[""orientation""] = resize_array('), (995, '                mob.data[""orientation""],'), (996, '                mob.get_num_points()'), (997, '            )'), (1026, '        self.data[""orientation""] = resize_array(self.data[""orientation""], len(points))'), (1075, '        self.data[""joint_angle""] = resize_array(self.data[""joint_angle""], len(points))')]}",266,266
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,2815f606169ab1a63b258e730d0d4bf290b5d5e2,286b8fb6c3565d5acafa0eef718b14a9628e2101,"First pass at changing data to structure numpy array

This doesn't yet tackle Surface","{'added': [(69, ""        ('rgba', np.float32, (4,)),""), (71, '    data_dtype: np.dtype = np.dtype(['), (72, ""        ('points', '<f4', (3,)),""), (73, ""        ('rgbas', '<f4', (4,)),""), (74, '    ])'), (114, '        self._data_defaults = np.ones(1, dtype=self.data.dtype)'), (136, '    def init_data(self, length: int = 0):'), (137, '        self.data = np.zeros(length, dtype=self.data_dtype)'), (154, '    def set_data(self, data: np.ndarray):'), (155, '        assert(data.dtype == self.data.dtype)'), (156, '        self.data = data'), (179, '            if len(self.data) > 0:'), (180, '                self._data_defaults[:1] = self.data[:1]'), (182, '            self.data = self._data_defaults.copy()'), (184, '        self.data = resize_func(self.data, new_length)'), (202, '            mob.data = mob.data[::-1]'), (582, '        result.data = self.data.copy()'), (673, '            if m1.get_num_points() != m2.get_num_points():'), (674, '                return False'), (675, '            if not m1.data.dtype == m2.data.dtype:'), (676, '                return False'), (677, '            for key in m1.data.dtype.names:'), (678, '                if not np.isclose(m1.data[key], m2.data[key]).all():'), (679, '                    return False'), (680, '            if set(m1.uniforms).difference(m2.uniforms):'), (681, '                return False'), (682, '            for key in m1.uniforms:'), (683, '                value1 = m1.uniforms[key]'), (684, '                value2 = m2.uniforms[key]'), (685, '                if isinstance(value1, np.ndarray) and isinstance(value2, np.ndarray) and not value1.size == value2.size:'), (686, '                    return False'), (687, '                if not np.isclose(value1, value2).all():'), (1676, '        for key in self.data.dtype.names:'), (1727, '            if not (sm.data.dtype == sm1.data.dtype == sm2.data.dtype):'), (1728, '                sm.lock_data(['), (1729, '                    key for key in sm.data.dtype.names'), (1730, '                    if arrays_match(sm1.data[key], sm2.data[key])'), (1731, '                ])')], 'deleted': [(109, '        self._data_defaults = {'), (110, '            key: np.zeros((1, self.data[key].shape[1]))'), (111, '            for key in self.data'), (112, '        }'), (134, '    def init_data(self):'), (135, '        self.data: dict[str, np.ndarray] = {'), (136, '            ""points"": np.zeros((0, 3)),'), (137, '            ""rgbas"": np.zeros((0, 4)),'), (138, '        }'), (155, '    def set_data(self, data: dict):'), (156, '        for key in data:'), (157, '            self.data[key] = data[key].copy()'), (180, '            for key in self.data:'), (181, '                if len(self.data[key]) > 0:'), (182, '                    self._data_defaults[key][:1] = self.data[key][:1]'), (184, '            for key in self.data:'), (185, '                self.data[key] = self._data_defaults[key].copy()'), (187, '        for key in self.data:'), (188, '            self.data[key] = resize_func(self.data[key], new_length)'), (206, '            for key in mob.data:'), (207, '                mob.data[key] = mob.data[key][::-1]'), (587, '        result.data = {'), (588, '            key: np.array(value)'), (589, '            for key, value in self.data.items()'), (590, '        }'), (681, '            for d1, d2 in [(m1.data, m2.data), (m1.uniforms, m2.uniforms)]:'), (682, '                if set(d1).difference(d2):'), (684, '                for key in d1:'), (685, '                    if isinstance(d1[key], np.ndarray) and isinstance(d2[key], np.ndarray):'), (686, '                        if not d1[key].size == d2[key].size:'), (687, '                            return False'), (688, '                    if not np.isclose(d1[key], d2[key]).all():'), (689, '                        return False'), (1607, ''), (1609, '            for key in mob1.data.keys() & mob2.data.keys():'), (1610, '                if key == ""points"":'), (1611, '                    # Separate out how points are treated so that subclasses'), (1612, '                    # can handle that case differently if they choose'), (1613, '                    continue'), (1614, '                arr1 = mob1.data[key]'), (1615, '                arr2 = mob2.data[key]'), (1616, '                if len(arr2) > len(arr1):'), (1617, '                    mob1.data[key] = resize_preserving_order(arr1, len(arr2))'), (1618, '                elif len(arr1) > len(arr2):'), (1619, '                    mob2.data[key] = resize_preserving_order(arr2, len(arr1))'), (1689, '        for key in self.data:'), (1694, '            if key not in mobject1.data or key not in mobject2.data:'), (1695, '                continue'), (1742, '            keys = sm.data.keys() & sm1.data.keys() & sm2.data.keys()'), (1743, '            sm.lock_data(list(filter('), (1744, '                lambda key: arrays_match(sm1.data[key], sm2.data[key]),'), (1745, '                keys,'), (1746, '            )))')]}",505,505
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,2815f606169ab1a63b258e730d0d4bf290b5d5e2,286b8fb6c3565d5acafa0eef718b14a9628e2101,"First pass at changing data to structure numpy array

This doesn't yet tackle Surface","{'added': [(32, '    data_dtype: np.dtype = np.dtype(['), (33, ""        ('points', np.float32, (3,)),""), (34, ""        ('radii', np.float32, (1,)),""), (35, ""        ('rgbas', np.float32, (4,)),""), (36, '    ])')], 'deleted': [(32, ''), (58, '        self.data[""radii""] = np.zeros((1, 1))')]}",22,22
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,2815f606169ab1a63b258e730d0d4bf290b5d5e2,286b8fb6c3565d5acafa0eef718b14a9628e2101,"First pass at changing data to structure numpy array

This doesn't yet tackle Surface","{'added': [(27, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (28, ""        ('points', np.float32, (3,)),""), (29, ""        ('im_coords', np.float32, (2,)),""), (30, ""        ('opacity', np.float32, (1,)),""), (31, '    ]'), (45, '        super().init_data(length=4)'), (46, '        self.data[""points""][:] = [UL, DL, UR, DR]'), (47, '        self.data[""im_coords""][:] = [(0, 0), (0, 1), (1, 0), (1, 1)]'), (48, '        self.data[""opacity""][:] = self.opacity'), (56, '        self.data[""opacity""][:, 0] = resize_with_interpolation('), (57, '            np.array(listify(opacity)),'), (58, '            self.get_num_points()'), (59, '        )')], 'deleted': [(40, '        self.data = {'), (41, '            ""points"": np.array([UL, DL, UR, DR]),'), (42, '            ""im_coords"": np.array([(0, 0), (0, 1), (1, 0), (1, 1)]),'), (43, '            ""opacity"": self.opacity * np.ones((4, 1)),'), (44, '        }'), (52, '        op_arr = np.array([[o] for o in listify(opacity)])'), (53, '        for mob in self.get_family(recurse):'), (54, '            mob.data[""opacity""][:] = resize_with_interpolation(op_arr, mob.get_num_points())')]}",9,9
manimlib/mobject/types/point_cloud_mobject.py,manimlib/mobject/types/point_cloud_mobject.py,2815f606169ab1a63b258e730d0d4bf290b5d5e2,286b8fb6c3565d5acafa0eef718b14a9628e2101,"First pass at changing data to structure numpy array

This doesn't yet tackle Surface","{'added': [(70, '            mob.data = mob.data[~np.apply_along_axis(condition, 1, mob.get_points())]'), (81, '            mob.data[:] = mob.data[indices]'), (85, '        self.data = np.vstack(['), (86, '            sm.data for sm in self.get_family()'), (87, '        ])'), (97, '        self.data = pmobject.data[lower_index:upper_index].copy()')], 'deleted': [(70, '            to_keep = ~np.apply_along_axis(condition, 1, mob.get_points())'), (71, '            for key in mob.data:'), (72, '                mob.data[key] = mob.data[key][to_keep]'), (83, '            for key in mob.data:'), (84, '                mob.data[key][:] = mob.data[key][indices]'), (88, '        for key in self.data:'), (89, '            self.data[key] = np.vstack(['), (90, '                sm.data[key]'), (91, '                for sm in self.get_family()'), (92, '            ])'), (102, '        for key in self.data:'), (103, '            self.data[key] = pmobject.data[key][lower_index:upper_index].copy()')]}",21,21
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2815f606169ab1a63b258e730d0d4bf290b5d5e2,286b8fb6c3565d5acafa0eef718b14a9628e2101,"First pass at changing data to structure numpy array

This doesn't yet tackle Surface","{'added': [(69, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (70, '        (""points"", np.float32, (3,)),'), (71, ""        ('fill_rgba', np.float32, (4,)),""), (72, '        (""stroke_rgba"", np.float32, (4,)),'), (73, '        (""joint_angle"", np.float32, (1,)),'), (74, '        (""stroke_width"", np.float32, (1,)),'), (75, ""        ('orientation', np.float32, (1,)),""), (76, '    ]'), (370, '        data = self.data if self.has_points() else self._data_defaults'), (371, '        return rgb_to_hex(data[""fill_rgba""][0, :3])'), (378, '        data = self.data if self.has_points() else self._data_defaults'), (379, '        return data[""fill_rgba""][0, 3]'), (382, '        data = self.data if self.has_points() else self._data_defaults'), (383, '        return rgb_to_hex(data[""stroke_rgba""][0, :3])'), (386, '        data = self.data if self.has_points() else self._data_defaults'), (387, '        return data[""stroke_width""][0, 0]'), (390, '        data = self.data if self.has_points() else self._data_defaults'), (391, '        return data[""stroke_rgba""][0, 3]'), (1138, '    def set_data(self, data: np.ndarray):')], 'deleted': [(71, '    aligned_data_keys = [""points"", ""orientation"", ""joint_angle""]'), (120, '    def init_data(self):'), (121, '        super().init_data()'), (122, '        self.data.pop(""rgbas"")'), (123, '        self.data.update({'), (124, '            ""fill_rgba"": np.zeros((1, 4)),'), (125, '            ""stroke_rgba"": np.zeros((1, 4)),'), (126, '            ""stroke_width"": np.zeros((1, 1)),'), (127, '            ""orientation"": np.ones((1, 1)),'), (128, '            ""joint_angle"": np.zeros((0, 1)),'), (129, '        })'), (130, ''), (374, '        return self.get_fill_colors()[0]'), (381, '        return self.get_fill_opacities()[0]'), (384, '        return self.get_stroke_colors()[0]'), (387, '        return self.get_stroke_widths()[0]'), (390, '        return self.get_stroke_opacities()[0]'), (1137, '    def set_data(self, data: dict):')]}",270,270
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f4c50f61b819eec728e41c756f6a44ab1d489549,2815f606169ab1a63b258e730d0d4bf290b5d5e2,Change rgbas -> rgba,"{'added': [(73, ""        ('rgba', '<f4', (4,)),""), (1225, '        name: str = ""rgba"",'), (1264, '        name: str = ""rgba"",'), (1303, '        return rgb_to_hex(self.data[""rgba""][0, :3])'), (1306, '        return self.data[""rgba""][0, 3]')], 'deleted': [(73, ""        ('rgbas', '<f4', (4,)),""), (1225, '        name: str = ""rgbas"",'), (1264, '        name: str = ""rgbas"",'), (1303, '        return rgb_to_hex(self.data[""rgbas""][0, :3])'), (1306, '        return self.data[""rgbas""][0, 3]')]}",505,505
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,f4c50f61b819eec728e41c756f6a44ab1d489549,2815f606169ab1a63b258e730d0d4bf290b5d5e2,Change rgbas -> rgba,"{'added': [(34, ""        ('radius', np.float32, (1,)),""), (35, ""        ('rgba', np.float32, (4,)),""), (107, '        self.data[""radius""][:] = resize_with_interpolation(radii, n_points)'), (112, '        return self.data[""radius""]'), (115, '        self.data[""radius""][:] = radius'), (154, '        self.read_data_to_shader(shader_data, ""radius"", ""radius"")'), (155, '        self.read_data_to_shader(shader_data, ""color"", ""rgba"")')], 'deleted': [(34, ""        ('radii', np.float32, (1,)),""), (35, ""        ('rgbas', np.float32, (4,)),""), (107, '        self.data[""radii""][:] = resize_with_interpolation(radii, n_points)'), (112, '        return self.data[""radii""]'), (115, '        self.data[""radii""][:] = radius'), (154, '        self.read_data_to_shader(shader_data, ""radius"", ""radii"")'), (155, '        self.read_data_to_shader(shader_data, ""color"", ""rgbas"")')]}",22,22
manimlib/mobject/types/point_cloud_mobject.py,manimlib/mobject/types/point_cloud_mobject.py,f4c50f61b819eec728e41c756f6a44ab1d489549,2815f606169ab1a63b258e730d0d4bf290b5d5e2,Change rgbas -> rgba,"{'added': [(40, '                opacity = self.data[""rgba""][-1, 3]'), (47, '            self.data[""rgba""][-len(rgbas):] = rgbas'), (56, '        self.data[""rgba""][:] = np.array(list(map('), (63, '        self.data[""rgba""][:] = resize_with_interpolation('), (64, '            pmobject.data[""rgba""], self.get_num_points()')], 'deleted': [(40, '                opacity = self.data[""rgbas""][-1, 3]'), (47, '            self.data[""rgbas""][-len(rgbas):] = rgbas'), (56, '        self.data[""rgbas""][:] = np.array(list(map('), (63, '        self.data[""rgbas""][:] = resize_with_interpolation('), (64, '            pmobject.data[""rgbas""], self.get_num_points()')]}",21,21
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,801f449ca0ba6d6eae56110d79fd9e5499787c94,f4c50f61b819eec728e41c756f6a44ab1d489549,Fix lock_matching_data,"{'added': [(1727, '            if sm.data.dtype == sm1.data.dtype == sm2.data.dtype:')], 'deleted': [(1727, '            if not (sm.data.dtype == sm1.data.dtype == sm2.data.dtype):')]}",505,505
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,2dafcb3e63bcae742839ce87e4eed6093883f76c,801f449ca0ba6d6eae56110d79fd9e5499787c94,Remove check_data_alignment,"{'added': [], 'deleted': [(1862, '    def check_data_alignment(self, array: np.ndarray, data_key: str):'), (1863, '        # Makes sure that self.data[key] can be broadcast into'), (1864, '        # the given array, meaning its length has to be either 1'), (1865, '        # or the length of the array'), (1866, '        d_len = len(self.data[data_key])'), (1867, '        if d_len != 1 and d_len != len(array):'), (1868, '            self.data[data_key] = resize_with_interpolation('), (1869, '                self.data[data_key], len(array)'), (1870, '            )'), (1871, '        return self'), (1872, ''), (1888, '        self.check_data_alignment(shader_data, data_key)  # TODO, make sure this can be removed')]}",502,502
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e37b667c8b726f4896dd993ce5fa7b68183f1206,2dafcb3e63bcae742839ce87e4eed6093883f76c,Modify Mobject.interpolate,"{'added': [(1676, '        keys = [k for k in self.data.dtype.names if k not in self.locked_data_keys]'), (1677, ""        if 'points' in keys and path_func not in [straight_path, interpolate]:""), (1678, ""            keys.remove('points')""), (1679, ""            self.data['points'] = path_func(""), (1680, ""                mobject1.data['points'],""), (1681, ""                mobject2.data['points'],""), (1682, '                alpha'), (1683, '            )'), (1684, '        for key in keys:'), (1685, '            self.data[key] = interpolate('), (1690, '')], 'deleted': [(1676, '        for key in self.data.dtype.names:'), (1677, '            if key in self.locked_data_keys:'), (1678, '                continue'), (1679, '            if len(self.data[key]) == 0:'), (1680, '                continue'), (1681, ''), (1682, '            func = path_func if key == ""points"" else interpolate'), (1683, ''), (1684, '            self.data[key][:] = func(')]}",503,503
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,d868f685dc8b86dd8c1a677fcfd0c3bccd7d6d77,e37b667c8b726f4896dd993ce5fa7b68183f1206,Account for case of setting stroke width with null array,"{'added': [(210, '                width_arr = np.array(listify(width)).flatten()'), (211, '                if len(width_arr) == 0:'), (212, '                    continue'), (213, ""                data['stroke_width'][:, 0] = resize_with_interpolation(width_arr, len(data))"")], 'deleted': [(210, ""                data['stroke_width'][:, 0] = resize_with_interpolation(""), (211, '                    np.array(listify(width)).flatten(),'), (212, ""                    len(data['stroke_width'])""), (213, '                )')]}",271,271
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e55434925e9da94efbb82be36c29899a366397bc,d868f685dc8b86dd8c1a677fcfd0c3bccd7d6d77,Fix get_style for null point case,"{'added': [(285, '        data = self.data if self.get_num_points() > 0 else self._data_defaults'), (287, '            ""fill_rgba"": data[\'fill_rgba\'].copy(),'), (288, '            ""stroke_rgba"": data[\'stroke_rgba\'].copy(),'), (289, '            ""stroke_width"": data[\'stroke_width\'].copy(),')], 'deleted': [(286, '            ""fill_rgba"": self.data[\'fill_rgba\'].copy(),'), (287, '            ""stroke_rgba"": self.data[\'stroke_rgba\'].copy(),'), (288, '            ""stroke_width"": self.data[\'stroke_width\'].copy(),')]}",272,272
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,7e45558c55e869c06e0ba4506bda276ed9b82f4f,e55434925e9da94efbb82be36c29899a366397bc,Allow Mobject subclasses to specify which parts of data should act like points,"{'added': [(76, ""    pointlike_data_keys = ['points']""), (209, '        about_point: Vect3 | None = None,'), (219, '                for key in mob.pointlike_data_keys:'), (220, '                    arrs.append(mob.data[key])')], 'deleted': [(208, '        about_point: Vect3 = None,'), (218, '                arrs.append(mob.get_points())')]}",504,504
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,ca5e119425b121f0e454cb1cf36246e876831991,7e45558c55e869c06e0ba4506bda276ed9b82f4f,Use _data_defaults for DotCloud radius,"{'added': [(56, '        self.set_radius(self.radius)'), (102, '        n_points = self.get_num_points()'), (112, '        data = self.data if self.get_num_points() > 0 else self._data_defaults'), (113, '        data[""radius""][:] = radius')], 'deleted': [(60, '    def init_data(self) -> None:'), (61, '        super().init_data()'), (62, '        self.set_radius(self.radius)'), (63, ''), (105, '        n_points = len(self.get_points())'), (115, '        self.data[""radius""][:] = radius')]}",22,22
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,d267c007610232dc459e0aa40ba12c5c6ac41f0c,ca5e119425b121f0e454cb1cf36246e876831991,Update Surface to have a data array,"{'added': [(8, 'from manimlib.constants import ORIGIN'), (35, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (36, ""        ('points', np.float32, (3,)),""), (37, ""        ('du_point', np.float32, (3,)),""), (38, ""        ('dv_point', np.float32, (3,)),""), (39, ""        ('rgba', np.float32, (4,)),""), (40, '    ]'), (41, ""    pointlike_data_keys = ['points', 'du_point', 'dv_point']""), (96, '        uv_grid = np.array([[[u, v] for v in v_range] for u in u_range])'), (97, '        uv_plus_du = uv_grid.copy()'), (98, '        uv_plus_du[:, :, 0] += self.epsilon'), (99, '        uv_plus_dv = uv_grid.copy()'), (100, '        uv_plus_dv[:, :, 1] += self.epsilon'), (101, ''), (102, '        points, du_points, dv_points = ['), (103, '            np.apply_along_axis('), (104, '                lambda p: self.uv_func(*p), 2, grid'), (105, '            ).reshape((nu * nv, dim))'), (106, '            for grid in (uv_grid, uv_plus_du, uv_plus_dv)'), (107, '        ]'), (108, '        self.set_points(points)'), (109, '        self.data[""du_point""][:] = du_points'), (110, '        self.data[""dv_point""][:] = dv_points'), (133, '    def get_surface_points_and_nudged_points(self) -> tuple[Vect3Array, Vect3Array, Vect3Array]:'), (134, ""        return (self.data['points'], self.data['du_point'], self.data['dv_point'])""), (159, ""        for key in ['points', 'du_point', 'dv_point']:""), (160, '            self.data[key][:] = self.get_partial_points_array('), (161, '                self.data[key], a, b,'), (162, '                (nu, nv, 3),'), (163, '                axis=axis'), (164, '            )'), (252, '        self.read_data_to_shader(shader_data, ""color"", ""rgba"")')], 'deleted': [(88, '        point_lists = []'), (89, '        for (du, dv) in [(0, 0), (self.epsilon, 0), (0, self.epsilon)]:'), (90, '            uv_grid = np.array([[[u + du, v + dv] for v in v_range] for u in u_range])'), (91, '            point_grid = np.apply_along_axis(lambda p: self.uv_func(*p), 2, uv_grid)'), (92, '            point_lists.append(point_grid.reshape((nu * nv, dim)))'), (93, '        # Rather than tracking normal vectors, the points list will hold on to the'), (94, '        # infinitesimal nudged values alongside the original values.  This way, one'), (95, ""        # can perform all the manipulations they'd like to the surface, and normals""), (96, '        # are still easily recoverable.'), (97, '        self.set_points(np.vstack(point_lists))'), (120, '    def get_surface_points_and_nudged_points('), (121, '        self'), (122, '    ) -> tuple[Vect3Array, Vect3Array, Vect3Array]:'), (123, '        points = self.get_points()'), (124, '        k = len(points) // 3'), (125, '        return points[:k], points[k:2 * k], points[2 * k:]'), (150, '        self.set_points(np.vstack(['), (151, '            self.get_partial_points_array(arr.copy(), a, b, (nu, nv, 3), axis=axis)'), (152, '            for arr in smobject.get_surface_points_and_nudged_points()'), (153, '        ]))'), (241, '        self.read_data_to_shader(shader_data, ""color"", ""rgbas"")')]}",53,53
manimlib/animation/rotation.py,manimlib/animation/rotation.py,9704f063c93cc2f0f1f0d9489f9755898fe7d646,d267c007610232dc459e0aa40ba12c5c6ac41f0c,Use pointlike_data_keys for interpolation and rotation,"{'added': [(48, '            for key in sm1.pointlike_data_keys:'), (49, '                sm1.data[key][:] = sm2.data[key]')], 'deleted': [(48, '            sm1.data[""points""][:] = sm2.data[""points""]')]}",5,5
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,9704f063c93cc2f0f1f0d9489f9755898fe7d646,d267c007610232dc459e0aa40ba12c5c6ac41f0c,Use pointlike_data_keys for interpolation and rotation,"{'added': [(1680, '            func = path_func if key in self.pointlike_data_keys else interpolate'), (1681, '            self.data[key] = func(')], 'deleted': [(1679, ""        if 'points' in keys and path_func not in [straight_path, interpolate]:""), (1680, ""            keys.remove('points')""), (1681, ""            self.data['points'] = path_func(""), (1682, ""                mobject1.data['points'],""), (1683, ""                mobject2.data['points'],""), (1684, '                alpha'), (1685, '            )'), (1687, '            self.data[key] = interpolate(')]}",503,503
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,408890e0d9bdb125f6c6c6653902a684e8aad5c9,9704f063c93cc2f0f1f0d9489f9755898fe7d646,Update TexturedSurface for using a data array,"{'added': [(296, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (297, ""        ('points', np.float32, (3,)),""), (298, ""        ('du_point', np.float32, (3,)),""), (299, ""        ('dv_point', np.float32, (3,)),""), (300, ""        ('im_coords', np.float32, (2,)),""), (301, ""        ('opacity', np.float32, (1,)),""), (302, '    ]'), (337, '        surf = self.uv_surface'), (338, '        nu, nv = surf.resolution'), (339, '        self.resize_points(surf.get_num_points())'), (340, ""        for key in ['points', 'du_point', 'dv_point']:""), (341, '            self.data[key][:] = surf.data[key]'), (342, '        self.data[\'opacity\'][:, 0] = surf.data[""rgba""][:, 3]'), (353, '    def set_opacity(self, opacity: float | Iterable[float]):'), (354, '        op_arr = np.array(listify(opacity))'), (355, '        self.data[""opacity""][:, 0] = resize_with_interpolation(op_arr, len(self.data))'), (356, '        return self'), (358, '    def set_color('), (359, '        self,'), (360, '        color: ManimColor | Iterable[ManimColor] | None,'), (361, '        opacity: float | Iterable[float] | None = None,'), (362, '        recurse: bool = True'), (363, '    ):'), (364, '        if opacity is not None:'), (365, '            self.set_opacity(opacity)')], 'deleted': [(329, '    def init_data(self):'), (330, '        super().init_data()'), (331, '        self.data[""im_coords""] = np.zeros((0, 2))'), (332, '        self.data[""opacity""] = np.zeros((0, 1))'), (333, ''), (335, '        nu, nv = self.uv_surface.resolution'), (336, '        self.set_points(self.uv_surface.get_points())'), (347, '    def init_colors(self):'), (348, '        self.data[""opacity""] = np.array([self.uv_surface.data[""rgbas""][:, 3]])'), (350, '    def set_opacity(self, opacity: float, recurse: bool = True):'), (351, '        op_arr = np.array([[o] for o in listify(opacity)])'), (352, '        for mob in self.get_family(recurse):'), (353, '            mob.data[""opacity""][:] = resize_with_interpolation(op_arr, len(mob.data[""opacity""]))')]}",52,52
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3ba5237f9b060eabe96a9803fcb9137f4640d122,408890e0d9bdb125f6c6c6653902a684e8aad5c9,Account for edge case with end of loop near end,"{'added': [(1093, '            if start > len(a0_to_h):'), (1094, '                continue')], 'deleted': []}",273,273
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,90ac1fc0bf6e58c8427362f0580b140cf9852770,3ba5237f9b060eabe96a9803fcb9137f4640d122,Rename 'points' -> 'point',"{'added': [(1020, '            self.data[""point""][4] += np.array([0.6 * length, 0, 0])')], 'deleted': [(1020, '            self.data[""points""][4] += np.array([0.6 * length, 0, 0])')]}",140,140
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,90ac1fc0bf6e58c8427362f0580b140cf9852770,3ba5237f9b060eabe96a9803fcb9137f4640d122,Rename 'points' -> 'point',"{'added': [(72, ""        ('point', np.float32, (3,)),""), (73, ""        ('rgba', np.float32, (4,)),""), (75, ""    aligned_data_keys = ['point']""), (76, ""    pointlike_data_keys = ['point']""), (191, '        self.data[""point""][:] = points'), (197, '        self.data[""point""][n:] = new_points'), (244, '        return self.data[""point""]'), (1879, '        self.read_data_to_shader(shader_data, ""point"", ""point"")')], 'deleted': [(72, ""        ('points', '<f4', (3,)),""), (73, ""        ('rgba', '<f4', (4,)),""), (75, ""    aligned_data_keys = ['points']""), (76, ""    pointlike_data_keys = ['points']""), (191, '        self.data[""points""][:] = points'), (197, '        self.data[""points""][n:] = new_points'), (244, '        return self.data[""points""]'), (1879, '        self.read_data_to_shader(shader_data, ""point"", ""points"")')]}",503,503
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,90ac1fc0bf6e58c8427362f0580b140cf9852770,3ba5237f9b060eabe96a9803fcb9137f4640d122,Rename 'points' -> 'point',"{'added': [(33, ""        ('point', np.float32, (3,)),"")], 'deleted': [(33, ""        ('points', np.float32, (3,)),"")]}",22,22
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,90ac1fc0bf6e58c8427362f0580b140cf9852770,3ba5237f9b060eabe96a9803fcb9137f4640d122,Rename 'points' -> 'point',"{'added': [(28, ""        ('point', np.float32, (3,)),""), (46, '        self.data[""point""][:] = [UL, DL, UR, DR]')], 'deleted': [(28, ""        ('points', np.float32, (3,)),""), (46, '        self.data[""points""][:] = [UL, DL, UR, DR]')]}",9,9
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,90ac1fc0bf6e58c8427362f0580b140cf9852770,3ba5237f9b060eabe96a9803fcb9137f4640d122,Rename 'points' -> 'point',"{'added': [(36, ""        ('point', np.float32, (3,)),""), (41, ""    pointlike_data_keys = ['point', 'du_point', 'dv_point']""), (134, ""        return (self.data['point'], self.data['du_point'], self.data['dv_point'])""), (159, ""        for key in ['point', 'du_point', 'dv_point']:""), (244, '        if ""point"" not in self.locked_data_keys:'), (297, ""        ('point', np.float32, (3,)),""), (340, ""        for key in ['point', 'du_point', 'dv_point']:"")], 'deleted': [(36, ""        ('points', np.float32, (3,)),""), (41, ""    pointlike_data_keys = ['points', 'du_point', 'dv_point']""), (134, ""        return (self.data['points'], self.data['du_point'], self.data['dv_point'])""), (159, ""        for key in ['points', 'du_point', 'dv_point']:""), (244, '        if ""points"" not in self.locked_data_keys:'), (297, ""        ('points', np.float32, (3,)),""), (340, ""        for key in ['points', 'du_point', 'dv_point']:"")]}",52,52
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,90ac1fc0bf6e58c8427362f0580b140cf9852770,3ba5237f9b060eabe96a9803fcb9137f4640d122,Rename 'points' -> 'point',"{'added': [(70, '        (""point"", np.float32, (3,)),'), (1136, '        self.data[""point""][inner_ends + 1] = self.data[""point""][inner_ends + 2]'), (1245, '        self.read_data_to_shader(self.stroke_data[:n], ""point"", ""point"")'), (1260, '        self.read_data_to_shader(self.fill_data, ""point"", ""point"")')], 'deleted': [(70, '        (""points"", np.float32, (3,)),'), (1136, '        self.data[""points""][inner_ends + 1] = self.data[""points""][inner_ends + 2]'), (1245, '        self.read_data_to_shader(self.stroke_data[:n], ""point"", ""points"")'), (1260, '        self.read_data_to_shader(self.fill_data, ""point"", ""points"")')]}",273,273
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3f2fd5b1424a13ad47e048d76511e8bb54c05949,90ac1fc0bf6e58c8427362f0580b140cf9852770,Update calculation of path ends to not include adjacent pairs,"{'added': [(703, '        is_end = np.empty(len(points) // 2 + 1, dtype=bool)'), (704, '        is_end[:-1] = (a0 == h).all(1) & (abs(h - a1) > atol).any(1)'), (705, '        is_end[-1] = True'), (706, '        # If the curve immediately after an end marker is also an'), (707, ""        # end marker, don't mark the second one""), (708, '        is_end[:-1] = is_end[:-1] & ~is_end[1:]'), (709, '        return np.array([2 * n for n, end in enumerate(is_end) if end])')], 'deleted': [(703, '        is_end = (a0 == h).all(1) & (abs(h - a1) > atol).any(1)'), (704, '        inner_ends = (2 * n for n, end in enumerate(is_end) if end)'), (705, '        return np.array([*inner_ends, len(points) - 1])')]}",273,273
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(67, '    shader_dtype: np.dtype = np.dtype(['), (134, '        self.data = np.zeros(length, dtype=self.shader_dtype)')], 'deleted': [(67, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (68, ""        ('point', np.float32, (3,)),""), (69, ""        ('rgba', np.float32, (4,)),""), (70, '    ]'), (71, '    data_dtype: np.dtype = np.dtype(['), (138, '        self.data = np.zeros(length, dtype=self.data_dtype)')]}",503,503
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(31, '    ]'), (32, ''), (149, '        self.read_data_to_shader(shader_data, ""rgba"", ""rgba"")')], 'deleted': [(28, ""        ('point', np.float32, (3,)),""), (29, ""        ('radius', np.float32, (1,)),""), (30, ""        ('color', np.float32, (4,)),""), (31, '    ]'), (32, '    data_dtype: np.dtype = np.dtype(['), (36, '    ])'), (153, '        self.read_data_to_shader(shader_data, ""color"", ""rgba"")')]}",22,22
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [], 'deleted': [(27, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (28, ""        ('point', np.float32, (3,)),""), (29, ""        ('im_coords', np.float32, (2,)),""), (30, ""        ('opacity', np.float32, (1,)),""), (31, '    ]')]}",9,9
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(246, '        self.read_data_to_shader(shader_data, ""rgba"", ""rgba"")')], 'deleted': [(30, ""        ('point', np.float32, (3,)),""), (31, ""        ('du_point', np.float32, (3,)),""), (32, ""        ('dv_point', np.float32, (3,)),""), (33, ""        ('color', np.float32, (4,)),""), (34, '    ]'), (35, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (252, '        self.read_data_to_shader(shader_data, ""color"", ""rgba"")'), (296, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (297, ""        ('point', np.float32, (3,)),""), (298, ""        ('du_point', np.float32, (3,)),""), (299, ""        ('dv_point', np.float32, (3,)),""), (300, ""        ('im_coords', np.float32, (2,)),""), (301, ""        ('opacity', np.float32, (1,)),""), (302, '    ]')]}",52,52
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(57, '    shader_dtype: np.dtype = np.dtype(['), (59, ""        ('stroke_rgba', np.float32, (4,)),""), (60, ""        ('stroke_width', np.float32, (1,)),""), (61, ""        ('joint_angle', np.float32, (1,)),""), (62, ""        ('fill_rgba', np.float32, (4,)),""), (65, '    ])'), (66, '    fill_dtype: np.dtype = np.dtype(['), (67, ""        ('point', np.float32, (3,)),""), (70, ""        ('vert_index', np.float32, (1,)),""), (71, '    ])'), (72, '    stroke_dtype: np.dtype = np.dtype(['), (73, ""        ('point', np.float32, (3,)),""), (74, ""        ('stroke_rgba', np.float32, (4,)),""), (75, ""        ('stroke_width', np.float32, (1,)),""), (76, ""        ('joint_angle', np.float32, (1,)),""), (77, '    ])'), (78, ''), (1151, '    def resize_points('), (1152, '        self,'), (1153, '        new_length: int,'), (1154, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1155, '    ):'), (1156, '        super().resize_points(new_length, resize_func)'), (1157, '        self.data[""vert_index""][:, 0] = np.arange(new_length)'), (1158, ''), (1260, '        self.read_data_to_shader(self.stroke_data[:n], ""stroke_rgba"", ""stroke_rgba"")'), (1275, '        self.read_data_to_shader(self.fill_data, ""fill_rgba"", ""fill_rgba"")')], 'deleted': [(57, '    fill_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (60, ""        ('color', np.float32, (4,)),""), (62, '    ]'), (63, '    stroke_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (64, '        (""point"", np.float32, (3,)),'), (65, '        (""joint_angle"", np.float32, (1,)),'), (66, '        (""stroke_width"", np.float32, (1,)),'), (67, '        (""color"", np.float32, (4,)),'), (68, '    ]'), (69, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (70, '        (""point"", np.float32, (3,)),'), (72, '        (""stroke_rgba"", np.float32, (4,)),'), (73, '        (""joint_angle"", np.float32, (1,)),'), (74, '        (""stroke_width"", np.float32, (1,)),'), (76, '    ]'), (1250, '        self.read_data_to_shader(self.stroke_data[:n], ""color"", ""stroke_rgba"")'), (1265, '        self.read_data_to_shader(self.fill_data, ""color"", ""fill_rgba"")')]}",274,274
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(4, 'in vec4 fill_rgba;'), (19, '    v_color = fill_rgba;')], 'deleted': [(5, 'in vec4 color;'), (19, '    v_color = color;')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(4, 'in vec4 stroke_rgba;'), (6, 'in float joint_angle;'), (25, '    v_color = stroke_rgba;')], 'deleted': [(4, ''), (5, 'in float joint_angle;'), (7, 'in vec4 color;'), (26, '    v_color = color;')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(8, 'in vec4 rgba;'), (21, '    v_color = rgba;'), (29, '        rgba,')], 'deleted': [(8, 'in vec4 color;'), (21, '    v_color = color;'), (29, '        color,')]}",,
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,6f9f83fb1bcf6022877d31ed69e1028a754951d8,3f2fd5b1424a13ad47e048d76511e8bb54c05949,Unify shader_dtype and data_dtype,"{'added': [(5, 'in vec4 rgba;'), (16, '    v_color = rgba;')], 'deleted': [(5, 'in vec4 color;'), (16, '    v_color = color;')]}",,
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f63331eb2467f650825cda1219942855cdf43564,6f9f83fb1bcf6022877d31ed69e1028a754951d8,"Use Mobject.data in place of shader_data, remove read_data_into_shader","{'added': [(1820, '            vert_data=self.data,'), (1834, '        self.shader_wrapper.uniforms = self.get_uniforms()'), (1856, '        return self.data'), (1859, '        pass'), (1861, '    def get_uniforms(self):')], 'deleted': [(1818, '        self.shader_data = np.zeros(len(self.get_points()), dtype=self.shader_dtype)'), (1821, '            vert_data=self.shader_data,'), (1835, '        self.shader_wrapper.uniforms = self.get_shader_uniforms()'), (1856, '    def get_resized_shader_data_array(self, length: int) -> np.ndarray:'), (1857, '        # If possible, try to populate an existing array, rather'), (1858, '        # than recreating it each frame'), (1859, '        if len(self.shader_data) != length:'), (1860, '            self.shader_data = resize_array(self.shader_data, length)'), (1861, '        return self.shader_data'), (1862, ''), (1863, '    def read_data_to_shader('), (1864, '        self,'), (1865, '        shader_data: np.ndarray,'), (1866, '        shader_data_key: str,'), (1867, '        data_key: str'), (1868, '    ):'), (1869, '        if data_key in self.locked_data_keys:'), (1870, '            return'), (1871, '        shader_data[shader_data_key] = self.data[data_key]'), (1872, ''), (1874, '        shader_data = self.get_resized_shader_data_array(self.get_num_points())'), (1875, '        self.read_data_to_shader(shader_data, ""point"", ""point"")'), (1876, '        return shader_data'), (1879, '        self.get_shader_data()'), (1881, '    def get_shader_uniforms(self):')]}",499,499
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,f63331eb2467f650825cda1219942855cdf43564,6f9f83fb1bcf6022877d31ed69e1028a754951d8,"Use Mobject.data in place of shader_data, remove read_data_into_shader","{'added': [], 'deleted': [(146, '    def get_shader_data(self) -> np.ndarray:'), (147, '        shader_data = super().get_shader_data()'), (148, '        self.read_data_to_shader(shader_data, ""radius"", ""radius"")'), (149, '        self.read_data_to_shader(shader_data, ""rgba"", ""rgba"")'), (150, '        return shader_data'), (151, '')]}",21,21
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,f63331eb2467f650825cda1219942855cdf43564,6f9f83fb1bcf6022877d31ed69e1028a754951d8,"Use Mobject.data in place of shader_data, remove read_data_into_shader","{'added': [], 'deleted': [(75, ''), (76, '    def get_shader_data(self) -> np.ndarray:'), (77, '        shader_data = super().get_shader_data()'), (78, '        self.read_data_to_shader(shader_data, ""im_coords"", ""im_coords"")'), (79, '        self.read_data_to_shader(shader_data, ""opacity"", ""opacity"")'), (80, '        return shader_data')]}",8,8
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,f63331eb2467f650825cda1219942855cdf43564,6f9f83fb1bcf6022877d31ed69e1028a754951d8,"Use Mobject.data in place of shader_data, remove read_data_into_shader","{'added': [], 'deleted': [(234, '    # For shaders'), (235, '    def get_shader_data(self) -> np.ndarray:'), (236, '        s_points, du_points, dv_points = self.get_surface_points_and_nudged_points()'), (237, '        shader_data = self.get_resized_shader_data_array(len(s_points))'), (238, '        if ""point"" not in self.locked_data_keys:'), (239, '            shader_data[""point""] = s_points'), (240, '            shader_data[""du_point""] = du_points'), (241, '            shader_data[""dv_point""] = dv_points'), (242, '        self.fill_in_shader_color_info(shader_data)'), (243, '        return shader_data'), (244, ''), (245, '    def fill_in_shader_color_info(self, shader_data: np.ndarray) -> np.ndarray:'), (246, '        self.read_data_to_shader(shader_data, ""rgba"", ""rgba"")'), (247, '        return shader_data'), (248, ''), (372, ''), (373, '    def fill_in_shader_color_info(self, shader_data: np.ndarray) -> np.ndarray:'), (374, '        self.read_data_to_shader(shader_data, ""opacity"", ""opacity"")'), (375, '        self.read_data_to_shader(shader_data, ""im_coords"", ""im_coords"")'), (376, '        return shader_data')]}",48,48
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f63331eb2467f650825cda1219942855cdf43564,6f9f83fb1bcf6022877d31ed69e1028a754951d8,"Use Mobject.data in place of shader_data, remove read_data_into_shader","{'added': [(1203, '        self.fill_shader_wrapper.uniforms = self.get_uniforms()'), (1209, '        self.stroke_shader_wrapper.uniforms = self.get_uniforms()'), (1251, '        n = len(self.data)'), (1253, '        self.stroke_data = resize_array(self.stroke_data, size)'), (1258, '        for key in self.stroke_data.dtype.names:'), (1259, '            self.stroke_data[key][:n] = self.data[key]'), (1264, '        self.fill_data = resize_array(self.fill_data, len(self.data))'), (1265, '        for key in self.fill_data.dtype.names:'), (1266, '            self.fill_data[key][:] = self.data[key]')], 'deleted': [(1203, '        self.fill_shader_wrapper.uniforms = self.get_shader_uniforms()'), (1209, '        self.stroke_shader_wrapper.uniforms = self.get_shader_uniforms()'), (1251, '        points = self.get_points()'), (1252, '        n = len(points)'), (1254, '        if len(self.stroke_data) != size:'), (1255, '            self.stroke_data = resize_array(self.stroke_data, size)'), (1259, '        self.read_data_to_shader(self.stroke_data[:n], ""point"", ""point"")'), (1260, '        self.read_data_to_shader(self.stroke_data[:n], ""stroke_rgba"", ""stroke_rgba"")'), (1261, '        self.read_data_to_shader(self.stroke_data[:n], ""stroke_width"", ""stroke_width"")'), (1263, '        self.read_data_to_shader(self.stroke_data[:n], ""joint_angle"", ""joint_angle"")'), (1264, ''), (1269, '        points = self.get_points()'), (1270, '        if len(self.fill_data) != len(points):'), (1271, '            self.fill_data = resize_array(self.fill_data, len(points))'), (1272, '            self.fill_data[""vert_index""][:, 0] = range(len(points))'), (1273, ''), (1274, '        self.read_data_to_shader(self.fill_data, ""point"", ""point"")'), (1275, '        self.read_data_to_shader(self.fill_data, ""fill_rgba"", ""fill_rgba"")'), (1276, '        self.read_data_to_shader(self.fill_data, ""orientation"", ""orientation"")'), (1277, '')]}",274,274
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,ba9f61b50ba162ce5629f3bbca286763f2cd1f7d,f63331eb2467f650825cda1219942855cdf43564,Have ShaderWrapper read in data rather than other shader wrappers,"{'added': [(1215, '        fill_submobs = []'), (1216, '        stroke_submobs = []'), (1217, '        bstroke_submobs = []'), (1220, '                fill_submobs.append(submob)'), (1222, '                if submob.draw_stroke_behind_fill:'), (1223, '                    bstroke_submobs.append(submob)'), (1224, '                else:'), (1225, '                    stroke_submobs.append(submob)'), (1226, ''), (1227, '        fill_names = list(self.fill_data.dtype.names)'), (1228, '        self.fill_shader_wrapper.read_in('), (1229, '            [sm.data[fill_names] for sm in fill_submobs],'), (1230, '            [sm.get_fill_shader_vert_indices() for sm in fill_submobs],'), (1231, '        )'), (1232, '        self.stroke_shader_wrapper.read_in('), (1233, '            [sm.get_stroke_shader_data() for sm in stroke_submobs],'), (1234, '        )'), (1235, '        self.back_stroke_shader_wrapper.read_in('), (1236, '            [sm.get_stroke_shader_data() for sm in bstroke_submobs],'), (1237, '        )'), (1239, ''), (1240, '        shader_wrappers = ['), (1245, '        for sw in shader_wrappers:'), (1246, '            # TODO, handle depth test and uniforms...'), (1247, '            pass'), (1248, '        return [sw for sw in shader_wrappers if len(sw.vert_data) > 0]'), (1261, '')], 'deleted': [(1215, '        fill_sws = []'), (1216, '        stroke_sws = []'), (1217, '        bstroke_sws = []'), (1220, '                fill_sws.append(submob.get_fill_shader_wrapper())'), (1222, '                lst = bstroke_sws if submob.draw_stroke_behind_fill else stroke_sws'), (1223, '                lst.append(submob.get_stroke_shader_wrapper())'), (1225, '        self_sws = ['), (1230, '        sw_lists = ['), (1231, '            bstroke_sws,'), (1232, '            fill_sws,'), (1233, '            stroke_sws'), (1234, '        ]'), (1235, '        for sw, sw_list in zip(self_sws, sw_lists):'), (1236, '            if not sw_list:'), (1237, '                sw.vert_data = resize_array(sw.vert_data, 0)'), (1238, '                continue'), (1239, '            if sw is sw_list[0]:'), (1240, '                sw.combine_with(*sw_list[1:])'), (1241, '            else:'), (1242, '                sw.read_in(*sw_list)'), (1243, '            sw.depth_test = any(sw.depth_test for sw in sw_list)'), (1244, '            sw.uniforms.update(sw_list[0].uniforms)'), (1245, '        return [sw for sw in self_sws if len(sw.vert_data) > 0]')]}",275,275
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,ba9f61b50ba162ce5629f3bbca286763f2cd1f7d,f63331eb2467f650825cda1219942855cdf43564,Have ShaderWrapper read in data rather than other shader wrappers,"{'added': [(19, '    from typing import Iterable, List'), (139, '            data_list = [self.vert_data, *(sw.vert_data for sw in shader_wrappers)]'), (140, '            if self.vert_indices is not None:'), (141, '                indices_list = [self.vert_indices, *(sw.vert_indices for sw in shader_wrappers)]'), (142, '            else:'), (143, '                indices_list = None'), (144, '            self.read_in(data_list, indices_list)'), (147, '    def read_in('), (148, '        self,'), (149, '        vert_data_list: List[np.ndarray],'), (150, '        vert_indices_list: List[np.ndarray] | None = None'), (151, '    ) -> ShaderWrapper:'), (153, '        total_len = sum(len(data) for data in vert_data_list)'), (155, '        if total_len == 0:'), (156, '            return self'), (157, ''), (158, '        if vert_indices_list is not None and self.vert_indices is not None:'), (159, '            total_verts = sum(len(vi) for vi in vert_indices_list)'), (164, '        for k, data in enumerate(vert_data_list):'), (165, '            new_n_points = n_points + len(data)'), (166, '            self.vert_data[n_points:new_n_points] = data'), (167, '            if self.vert_indices is not None and vert_indices_list is not None:'), (168, '                vert_indices = vert_indices_list[k]'), (169, '                new_n_verts = n_verts + len(vert_indices)'), (170, '                self.vert_indices[n_verts:new_n_verts] = vert_indices + n_points')], 'deleted': [(19, '    from typing import Iterable'), (139, '            self.read_in(self.copy(), *shader_wrappers)'), (142, '    def read_in(self, *shader_wrappers: ShaderWrapper) -> ShaderWrapper:'), (144, '        total_len = sum(len(sw.vert_data) for sw in shader_wrappers)'), (146, '        if self.vert_indices is not None:'), (147, '            total_verts = sum(len(sw.vert_indices) for sw in shader_wrappers)'), (152, '        for sw in shader_wrappers:'), (153, '            new_n_points = n_points + len(sw.vert_data)'), (154, '            self.vert_data[n_points:new_n_points] = sw.vert_data'), (155, '            if self.vert_indices is not None and sw.vert_indices is not None:'), (156, '                new_n_verts = n_verts + len(sw.vert_indices)'), (157, '                self.vert_indices[n_verts:new_n_verts] = sw.vert_indices + n_points')]}",45,45
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,29f51a7c6af200dce09f7e8db75b76a3ad731490,ba9f61b50ba162ce5629f3bbca286763f2cd1f7d,Check if joint_angles are in locked_data_keys before computing,"{'added': [(1075, '        if ""joint_angle"" in self.locked_data_keys:'), (1076, '            return self.data[""joint_angle""]')], 'deleted': []}",276,276
manimlib/camera/camera.py,manimlib/camera/camera.py,77a398468386d40a3ab2f3cb35b32535af9d966d,da15eb4ad20064f96a633d119ae8118c09910c77,Fix index buffer bug,"{'added': [(418, '            ibo = self.ctx.buffer(indices.astype(np.uint32))')], 'deleted': [(418, '            ibo = self.ctx.buffer(indices)')]}",94,94
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,eba86be35b08d5d3198f1f97de905051a7de4e97,2ca884800723e0c433a9e9338541340f1042163b,Use resize_preserving_order in aligning VMobjects,"{'added': [(32, 'from manimlib.utils.iterables import resize_preserving_order'), (884, ''), (885, '        for mob, paths in [(self, new_subpaths1), (vmobject, new_subpaths2)]:'), (886, '            new_points = np.vstack(paths)'), (887, '            mob.resize_points(len(new_points), resize_func=resize_preserving_order)'), (888, '            mob.set_points(new_points)')], 'deleted': [(883, '        self.set_points(np.vstack(new_subpaths1))'), (884, '        vmobject.set_points(np.vstack(new_subpaths2))')]}",277,277
manimlib/animation/indication.py,manimlib/animation/indication.py,5a95bfa70fd7d8465f94141238a583a52965f977,eba86be35b08d5d3198f1f97de905051a7de4e97,Delete align_stroke_width_data_to_points,"{'added': [(264, '        n_inserted_curves: int = 100,')], 'deleted': [(218, '        self.mobject.align_stroke_width_data_to_points()'), (265, '        n_inserted_curves: int = 20,')]}",44,44
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,5a95bfa70fd7d8465f94141238a583a52965f977,eba86be35b08d5d3198f1f97de905051a7de4e97,Delete align_stroke_width_data_to_points,"{'added': [], 'deleted': [(232, '    def align_stroke_width_data_to_points(self, recurse: bool = True) -> None:'), (233, '        for mob in self.get_family(recurse):'), (234, '            mob.data[""stroke_width""] = resize_with_interpolation('), (235, '                mob.data[""stroke_width""], len(mob.get_points())'), (236, '            )'), (237, '')]}",275,275
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,74b42a6eb5478e4891e3ff5d11268a6e605144f8,5a95bfa70fd7d8465f94141238a583a52965f977,Small renaming,"{'added': [(149, '        data_list: List[np.ndarray],'), (150, '        indices_list: List[np.ndarray] | None = None'), (153, '        total_len = sum(len(data) for data in data_list)'), (158, '        if indices_list is not None and self.vert_indices is not None:'), (159, '            total_verts = sum(len(vi) for vi in indices_list)'), (164, '        for k, data in enumerate(data_list):'), (167, '            if self.vert_indices is not None and indices_list is not None:'), (168, '                vert_indices = indices_list[k]')], 'deleted': [(149, '        vert_data_list: List[np.ndarray],'), (150, '        vert_indices_list: List[np.ndarray] | None = None'), (153, '        total_len = sum(len(data) for data in vert_data_list)'), (158, '        if vert_indices_list is not None and self.vert_indices is not None:'), (159, '            total_verts = sum(len(vi) for vi in vert_indices_list)'), (164, '        for k, data in enumerate(vert_data_list):'), (167, '            if self.vert_indices is not None and vert_indices_list is not None:'), (168, '                vert_indices = vert_indices_list[k]')]}",45,45
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bdcfbc39ec58cbc847f9f6946de0fdef528b2c14,74b42a6eb5478e4891e3ff5d11268a6e605144f8,"Cleanup VMobject shader wrapper methods

Deleting those which are no longer needed","{'added': [(67, ""    fill_data_names = ['point', 'fill_rgba', 'orientation', 'vert_index']""), (68, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_angle']""), (1168, '        dtype = self.shader_dtype'), (1169, '        fill_dtype, stroke_dtype = ('), (1170, '            np.dtype(['), (1171, '                (name, dtype[name].base, dtype[name].shape)'), (1172, '                for name in names'), (1173, '            ])'), (1174, '            for names in [self.fill_data_names, self.stroke_data_names]'), (1175, '        )'), (1176, '        fill_data = np.zeros(0, dtype=fill_dtype)'), (1177, '        stroke_data = np.zeros(0, dtype=stroke_dtype)'), (1179, '            vert_data=fill_data,'), (1186, '            vert_data=stroke_data,'), (1194, '        for wrapper in self.get_shader_wrapper_list():'), (1199, '        family = self.family_members_with_points()'), (1200, '        fill_names = self.fill_data_names'), (1201, '        stroke_names = self.stroke_data_names'), (1202, ''), (1204, '        fill_datas = []'), (1205, '        fill_indices = []'), (1206, '        stroke_datas = []'), (1207, '        back_stroke_data = []'), (1208, '        for submob in family:'), (1210, '                fill_datas.append(submob.data[fill_names])'), (1211, '                fill_indices.append(submob.get_triangulation())'), (1214, '                    lst = back_stroke_data'), (1216, '                    lst = stroke_datas'), (1217, '                lst.append(submob.data[stroke_names])'), (1218, '                # Set data array to be one longer than number of points,'), (1219, '                # with a dummy vertex added at the end. This is to ensure'), (1220, '                # it can be safely stacked onto other stroke data arrays.'), (1221, '                lst.append(submob.data[stroke_names][-1:])'), (1224, '            self.back_stroke_shader_wrapper.read_in(back_stroke_data),'), (1225, '            self.fill_shader_wrapper.read_in(fill_datas, fill_indices),'), (1226, '            self.stroke_shader_wrapper.read_in(stroke_datas),'), (1228, ''), (1230, '            # Assume uniforms of the first family member'), (1231, '            sw.uniforms = family[0].get_uniforms()'), (1232, '            sw.depth_test = family[0].depth_test'), (1236, '        for submob in self.get_family():'), (1237, '            submob.get_joint_angles()'), (1238, '        self.get_shader_wrapper_list()')], 'deleted': [(67, '    fill_dtype: np.dtype = np.dtype(['), (68, ""        ('point', np.float32, (3,)),""), (69, ""        ('fill_rgba', np.float32, (4,)),""), (70, ""        ('orientation', np.float32, (1,)),""), (71, ""        ('vert_index', np.float32, (1,)),""), (72, '    ])'), (73, '    stroke_dtype: np.dtype = np.dtype(['), (74, ""        ('point', np.float32, (3,)),""), (75, ""        ('stroke_rgba', np.float32, (4,)),""), (76, ""        ('stroke_width', np.float32, (1,)),""), (77, ""        ('joint_angle', np.float32, (1,)),""), (78, '    ])'), (1178, '        self.fill_data = np.zeros(0, dtype=self.fill_dtype)'), (1179, '        self.stroke_data = np.zeros(0, dtype=self.stroke_dtype)'), (1181, '            vert_data=self.fill_data,'), (1188, '            vert_data=self.stroke_data,'), (1196, '        for wrapper in [self.fill_shader_wrapper, self.stroke_shader_wrapper]:'), (1200, '    def get_fill_shader_wrapper(self) -> ShaderWrapper:'), (1201, '        self.fill_shader_wrapper.vert_indices = self.get_triangulation()'), (1202, '        self.fill_shader_wrapper.vert_data = self.get_fill_shader_data()'), (1203, '        self.fill_shader_wrapper.uniforms = self.get_uniforms()'), (1204, '        self.fill_shader_wrapper.depth_test = self.depth_test'), (1205, '        return self.fill_shader_wrapper'), (1206, ''), (1207, '    def get_stroke_shader_wrapper(self) -> ShaderWrapper:'), (1208, '        self.stroke_shader_wrapper.vert_data = self.get_stroke_shader_data()'), (1209, '        self.stroke_shader_wrapper.uniforms = self.get_uniforms()'), (1210, '        self.stroke_shader_wrapper.depth_test = self.depth_test'), (1211, '        return self.stroke_shader_wrapper'), (1212, ''), (1215, '        fill_submobs = []'), (1216, '        stroke_submobs = []'), (1217, '        bstroke_submobs = []'), (1218, '        for submob in self.family_members_with_points():'), (1220, '                fill_submobs.append(submob)'), (1223, '                    bstroke_submobs.append(submob)'), (1225, '                    stroke_submobs.append(submob)'), (1226, ''), (1227, '        fill_names = list(self.fill_data.dtype.names)'), (1228, '        self.fill_shader_wrapper.read_in('), (1229, '            [sm.data[fill_names] for sm in fill_submobs],'), (1230, '            [sm.get_fill_shader_vert_indices() for sm in fill_submobs],'), (1231, '        )'), (1232, '        self.stroke_shader_wrapper.read_in('), (1233, '            [sm.get_stroke_shader_data() for sm in stroke_submobs],'), (1234, '        )'), (1235, '        self.back_stroke_shader_wrapper.read_in('), (1236, '            [sm.get_stroke_shader_data() for sm in bstroke_submobs],'), (1237, '        )'), (1238, ''), (1241, '            self.back_stroke_shader_wrapper,'), (1242, '            self.fill_shader_wrapper,'), (1243, '            self.stroke_shader_wrapper'), (1246, '            # TODO, handle depth test and uniforms...'), (1247, '            pass'), (1250, '    def get_stroke_shader_data(self) -> np.ndarray:'), (1251, '        # Set data array to be one longer than number of points,'), (1252, '        # with a dummy vertex added at the end. This is to ensure'), (1253, '        # it can be safely stacked onto other stroke data arrays.'), (1254, '        n = len(self.data)'), (1255, '        size = n + 1 if n > 0 else 0'), (1256, '        self.stroke_data = resize_array(self.stroke_data, size)'), (1257, '        if n == 0:'), (1258, '            return self.stroke_data'), (1259, ''), (1260, '        self.get_joint_angles()  # Recomputes, only if refresh is needed'), (1261, ''), (1262, '        for key in self.stroke_data.dtype.names:'), (1263, '            self.stroke_data[key][:n] = self.data[key]'), (1264, '        self.stroke_data[-1] = self.stroke_data[-2]'), (1265, '        return self.stroke_data'), (1266, ''), (1267, '    def get_fill_shader_data(self) -> np.ndarray:'), (1268, '        self.fill_data = resize_array(self.fill_data, len(self.data))'), (1269, '        for key in self.fill_data.dtype.names:'), (1270, '            self.fill_data[key][:] = self.data[key]'), (1271, '        return self.fill_data'), (1272, ''), (1274, '        self.get_fill_shader_data()'), (1275, '        self.get_stroke_shader_data()'), (1276, ''), (1277, '    def get_fill_shader_vert_indices(self) -> np.ndarray:'), (1278, '        return self.get_triangulation()')]}",265,265
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,3a09acd28c0007ecdc07340dd3dfa376a3d2fa05,bdcfbc39ec58cbc847f9f6946de0fdef528b2c14,Update type hint for ShaderWrapper.uniforms,"{'added': [(35, '        uniforms: dict[str, float | np.ndarray] | None = None,  # A dictionary mapping names of uniform variables')], 'deleted': [(35, '        uniforms: dict[str, float] | None = None,  # A dictionary mapping names of uniform variables')]}",45,45
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3f8c86197303bc622bdfb91276071fe6a60d8b92,3a09acd28c0007ecdc07340dd3dfa376a3d2fa05,Rename draw_stroke_behind_fill -> stroke_behind,"{'added': [(86, '        stroke_behind: bool = False,'), (102, '        self.stroke_behind = stroke_behind'), (159, '            background=self.stroke_behind,'), (210, '                mob.stroke_behind = background'), (277, '            ""stroke_background"": self.stroke_behind,'), (1213, '                if submob.stroke_behind:')], 'deleted': [(86, '        draw_stroke_behind_fill: bool = False,'), (102, '        self.draw_stroke_behind_fill = draw_stroke_behind_fill'), (159, '            background=self.draw_stroke_behind_fill,'), (210, '                mob.draw_stroke_behind_fill = background'), (277, '            ""stroke_background"": self.draw_stroke_behind_fill,'), (1213, '                if submob.draw_stroke_behind_fill:')]}",265,265
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f5480d02ff1d76a45513cd6d0769f9ddac899667,3f8c86197303bc622bdfb91276071fe6a60d8b92,Tidy up ShaderWrapper.read_in,"{'added': [(158, '        # Stack the data'), (159, '        np.concatenate(data_list, out=self.vert_data)'), (161, '        if indices_list is None or self.vert_indices is None:'), (162, '            return self'), (163, ''), (164, '        total_verts = sum(len(vi) for vi in indices_list)'), (165, '        self.vert_indices = resize_array(self.vert_indices, total_verts)'), (166, ''), (167, '        # Stack vert_indices, but adding the appropriate offset'), (168, '        # alogn the way'), (171, '        for data, indices in zip(data_list, indices_list):'), (172, '            new_n_verts = n_verts + len(indices)'), (173, '            self.vert_indices[n_verts:new_n_verts] = indices + n_points'), (174, '            n_verts = new_n_verts'), (175, '            n_points += len(data)')], 'deleted': [(158, '        if indices_list is not None and self.vert_indices is not None:'), (159, '            total_verts = sum(len(vi) for vi in indices_list)'), (160, '            self.vert_indices = resize_array(self.vert_indices, total_verts)'), (164, '        for k, data in enumerate(data_list):'), (165, '            new_n_points = n_points + len(data)'), (166, '            self.vert_data[n_points:new_n_points] = data'), (167, '            if self.vert_indices is not None and indices_list is not None:'), (168, '                vert_indices = indices_list[k]'), (169, '                new_n_verts = n_verts + len(vert_indices)'), (170, '                self.vert_indices[n_verts:new_n_verts] = vert_indices + n_points'), (171, '                n_verts = new_n_verts'), (172, '            n_points = new_n_points')]}",43,43
manimlib/utils/iterables.py,manimlib/utils/iterables.py,db45d9e646ae0345218fe56cefe1d5ab6196fa35,f5480d02ff1d76a45513cd6d0769f9ddac899667,Add array_is_constant,"{'added': [(133, 'def array_is_constant(arr: np.ndarray) -> bool:'), (134, '    return len(arr) > 0 and not (arr - arr[0]).any()'), (135, '')], 'deleted': []}",40,40
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c23f020d9ae44dc0766cc776899d4648ec85c609,db45d9e646ae0345218fe56cefe1d5ab6196fa35,Add Mobject.const_data_keys so that interpolations can be faster,"{'added': [(33, 'from manimlib.utils.iterables import array_is_constant'), (105, '        self.const_data_keys: set[str] = set()'), (1679, '            md1 = mobject1.data[key]'), (1680, '            md2 = mobject2.data[key]'), (1681, '            if key in self.const_data_keys:'), (1682, '                md1 = md1[0]'), (1683, '                md2 = md2[0]'), (1684, '            self.data[key] = func(md1, md2, alpha)'), (1725, '                names = sm.data.dtype.names'), (1726, '                sm.lock_data(filter('), (1727, '                    lambda name: arrays_match(sm1.data[name], sm2.data[name]),'), (1728, '                    names,'), (1729, '                ))'), (1730, '                sm.const_data_keys = set(filter('), (1731, '                    lambda name: all('), (1732, '                        array_is_constant(mob.data[name])'), (1733, '                        for mob in (sm, sm1, sm2)'), (1734, '                    ),'), (1735, '                    names'), (1736, '                ))'), (1737, ''), (1743, '            mob.const_data_keys = set()')], 'deleted': [(1677, '            self.data[key] = func('), (1678, '                mobject1.data[key],'), (1679, '                mobject2.data[key],'), (1680, '                alpha'), (1681, '            )'), (1722, '                sm.lock_data(['), (1723, '                    key for key in sm.data.dtype.names'), (1724, '                    if arrays_match(sm1.data[key], sm2.data[key])'), (1725, '                ])')]}",499,499
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ae50748717f54f64de978eaa64810bbb5188f932,c23f020d9ae44dc0766cc776899d4648ec85c609,Default to resizing_preserving_order in set_points,"{'added': [(188, '        self.resize_points(len(points), resize_func=resize_preserving_order)')], 'deleted': [(188, '        self.resize_points(len(points))')]}",499,499
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,3b40ccc9878663b75600457d0168d7d4c305e5ac,ae50748717f54f64de978eaa64810bbb5188f932,"In Mobject.append_points, have most data default to the last value","{'added': [(195, '        # Have most data default to the last value'), (196, '        self.data[n:] = self.data[n - 1]'), (197, '        # Then read in new points')], 'deleted': []}",499,499
manimlib/utils/iterables.py,manimlib/utils/iterables.py,a46e580fa4d2e3fc0614d0c356e30f91b2af90b8,3b40ccc9878663b75600457d0168d7d4c305e5ac,Make sure resize_preserving_order preserves data type,"{'added': [(94, '        return np.resize(nparray, length)')], 'deleted': [(94, '        return np.zeros((length, *nparray.shape[1:]))')]}",40,40
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,8ef93b0f9d649cd92cb362d6bb4eb28d25ee63c4,a46e580fa4d2e3fc0614d0c356e30f91b2af90b8,Treat font_size as a float,"{'added': [(35, '        font_size: float = 48,'), (118, '    def get_font_size(self) -> float:'), (119, '        return float(self.uniforms[""font_size""])'), (170, '        self.uniforms[""font_size""] = scale_factor * self.uniforms[""font_size""]')], 'deleted': [(35, '        font_size: int = 48,'), (118, '    def get_font_size(self) -> int:'), (119, '        return int(self.uniforms[""font_size""])'), (170, '        self.uniforms[""font_size""] *= scale_factor')]}",31,31
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1a15756330660f2988fc67c6e7a8a4ac30b47eda,8ef93b0f9d649cd92cb362d6bb4eb28d25ee63c4,Make sure Mobject.become works with bounding_box,"{'added': [(657, '            sm1.bounding_box[:] = sm2.bounding_box')], 'deleted': []}",499,499
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,dd0e91015c4aefb47258cc539b878c882e2e0ccb,1a15756330660f2988fc67c6e7a8a4ac30b47eda,Account for null family case,"{'added': [(1200, '        if not family:'), (1201, '            return []')], 'deleted': []}",266,266
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,bd2d45ebc6e7a5150d167e0b7206b6c21fb802e2,dd0e91015c4aefb47258cc539b878c882e2e0ccb,Handle edge case of low ring end,"{'added': [(435, '        if len(i) < 2:'), (436, '            continue')], 'deleted': []}",90,90
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,7050c7e7b00a271e794adce247fb6361432c88b7,161bf7377d6fbebe78ffe1c90bb71edd90478066,Change type for Surface.shader_dtype,"{'added': [(28, '    shader_dtype: np.dtype = np.dtype(['), (33, '    ])')], 'deleted': [(8, 'from manimlib.constants import ORIGIN'), (29, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = ['), (34, '    ]')]}",48,48
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f15ac811311dd10224b86d179206ec0ab03036c4,7050c7e7b00a271e794adce247fb6361432c88b7,Pull out helper functions from shader_wrapper.py,"{'added': [(11, 'from manimlib.utils.shaders import get_shader_code_from_file'), (16, '    from typing import List')], 'deleted': [(10, 'from functools import lru_cache'), (11, ''), (12, 'from manimlib.utils.directories import get_shader_dir'), (13, 'from manimlib.utils.file_ops import find_file'), (19, '    from typing import Iterable, List'), (177, ''), (178, ''), (179, '@lru_cache(maxsize=12)'), (180, 'def get_shader_code_from_file(filename: str) -> str | None:'), (181, '    if not filename:'), (182, '        return None'), (183, ''), (184, '    try:'), (185, '        filepath = find_file('), (186, '            filename,'), (187, '            directories=[get_shader_dir(), ""/""],'), (188, '            extensions=[],'), (189, '        )'), (190, '    except IOError:'), (191, '        return None'), (192, ''), (193, '    with open(filepath, ""r"") as f:'), (194, '        result = f.read()'), (195, ''), (196, '    # To share functionality between shaders, some functions are read in'), (197, '    # from other files an inserted into the relevant strings before'), (198, '    # passing to ctx.program for compiling'), (199, '    # Replace ""#INSERT "" lines with relevant code'), (200, '    insertions = re.findall(r""^#INSERT .*\\.glsl$"", result, flags=re.MULTILINE)'), (201, '    for line in insertions:'), (202, '        inserted_code = get_shader_code_from_file('), (203, '            os.path.join(""inserts"", line.replace(""#INSERT "", """"))'), (204, '        )'), (205, '        result = result.replace(line, inserted_code)'), (206, '    return result'), (207, ''), (208, ''), (209, 'def get_colormap_code(rgb_list: Iterable[float]) -> str:'), (210, '    data = "","".join('), (211, '        ""vec3({}, {}, {})"".format(*rgb)'), (212, '        for rgb in rgb_list'), (213, '    )'), (214, '    return f""vec3[{len(rgb_list)}]({data})""')]}",37,37
,manimlib/utils/shaders.py,f15ac811311dd10224b86d179206ec0ab03036c4,7050c7e7b00a271e794adce247fb6361432c88b7,Pull out helper functions from shader_wrapper.py,"{'added': [(1, 'from __future__ import annotations'), (2, ''), (3, 'import os'), (4, 'import re'), (5, 'from functools import lru_cache'), (6, ''), (7, 'from manimlib.utils.directories import get_shader_dir'), (8, 'from manimlib.utils.file_ops import find_file'), (9, ''), (10, 'from typing import TYPE_CHECKING'), (11, ''), (12, 'if TYPE_CHECKING:'), (13, '    from typing import Sequence'), (14, ''), (15, ''), (16, '@lru_cache(maxsize=12)'), (17, 'def get_shader_code_from_file(filename: str) -> str | None:'), (18, '    if not filename:'), (19, '        return None'), (20, ''), (21, '    try:'), (22, '        filepath = find_file('), (23, '            filename,'), (24, '            directories=[get_shader_dir(), ""/""],'), (25, '            extensions=[],'), (26, '        )'), (27, '    except IOError:'), (28, '        return None'), (29, ''), (30, '    with open(filepath, ""r"") as f:'), (31, '        result = f.read()'), (32, ''), (33, '    # To share functionality between shaders, some functions are read in'), (34, '    # from other files an inserted into the relevant strings before'), (35, '    # passing to ctx.program for compiling'), (36, '    # Replace ""#INSERT "" lines with relevant code'), (37, '    insertions = re.findall(r""^#INSERT .*\\.glsl$"", result, flags=re.MULTILINE)'), (38, '    for line in insertions:'), (39, '        inserted_code = get_shader_code_from_file('), (40, '            os.path.join(""inserts"", line.replace(""#INSERT "", """"))'), (41, '        )'), (42, '        result = result.replace(line, inserted_code)'), (43, '    return result'), (44, ''), (45, ''), (46, 'def get_colormap_code(rgb_list: Sequence[float]) -> str:'), (47, '    data = "","".join('), (48, '        ""vec3({}, {}, {})"".format(*rgb)'), (49, '        for rgb in rgb_list'), (50, '    )'), (51, '    return f""vec3[{len(rgb_list)}]({data})""')], 'deleted': []}",,6
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,20222bc7e970fc197d6cbacc6b301a1f46e5a021,f15ac811311dd10224b86d179206ec0ab03036c4,Update imports,"{'added': [(43, 'from manimlib.utils.shaders import get_colormap_code')], 'deleted': [(26, 'from manimlib.shader_wrapper import get_colormap_code')]}",499,499
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,20222bc7e970fc197d6cbacc6b301a1f46e5a021,Be sure joint_angles are updated immediately before being read into a shader wrapper,"{'added': [(1098, '        result[:] = 0'), (1216, '                submob.get_joint_angles()')], 'deleted': [(1238, '        for submob in self.get_family():'), (1239, '            submob.get_joint_angles()')]}",265,265
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [], 'deleted': [(507, '        gloss: float = 0.5,')]}",106,106
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(51, '    from typing import Callable, Iterable, Union, Tuple'), (79, '        shading: Tuple[float, float, float] = (0.0, 0.0, 0.0),'), (88, '        self.shading = shading'), (134, '            ""shading"": np.array(self.shading, dtype=float),'), (1327, '    def get_shading(self) -> np.ndarray:'), (1328, '        return self.uniforms[""shading""]'), (1330, '    def set_shading('), (1331, '        self,'), (1332, '        reflectiveness: float | None = None,'), (1333, '        gloss: float | None = None,'), (1334, '        shadow: float | None = None,'), (1335, '        recurse: bool = True'), (1336, '    ):'), (1337, '        """"""'), (1338, '        Larger reflectiveness makes things brighter when facing the light'), (1339, '        Larger shadow makes faces opposite the light darker'), (1340, '        Makes parts bright where light gets reflected toward the camera'), (1341, '        """"""'), (1343, '            for i, value in enumerate([reflectiveness, gloss, shadow]):'), (1344, '                if value is not None:'), (1345, '                    mob.uniforms[""shading""][i] = value'), (1348, '    def get_reflectiveness(self) -> float:'), (1349, '        return self.get_shading()[0]'), (1350, ''), (1351, '    def get_gloss(self) -> float:'), (1352, '        return self.get_shading()[1]'), (1353, ''), (1355, '        return self.get_shading()[2]'), (1357, '    def set_reflectiveness(self, reflectiveness: float, recurse: bool = True):'), (1358, '        self.set_shading(reflectiveness=reflectiveness, recurse=recurse)'), (1362, '        self.set_shading(gloss=gloss, recurse=recurse)'), (1363, '        return self'), (1364, ''), (1365, '    def set_shadow(self, shadow: float, recurse: bool = True):'), (1366, '        self.set_shading(shadow=shadow, recurse=recurse)')], 'deleted': [(51, '    from typing import Callable, Iterable, Sequence, Union, Tuple'), (79, '        # Larger reflectiveness makes things brighter when facing the light'), (80, '        reflectiveness: float = 0.0,'), (81, '        # Larger shadow makes faces opposite the light darker'), (82, '        shadow: float = 0.0,'), (83, '        # Makes parts bright where light gets reflected toward the camera'), (84, '        gloss: float = 0.0,'), (93, '        self.reflectiveness = reflectiveness'), (94, '        self.shadow = shadow'), (95, '        self.gloss = gloss'), (141, '            ""gloss"": self.gloss,'), (142, '            ""shadow"": self.shadow,'), (143, '            ""reflectiveness"": self.reflectiveness,'), (1336, '    def get_reflectiveness(self) -> float:'), (1337, '        return self.uniforms[""reflectiveness""]'), (1339, '    def set_reflectiveness(self, reflectiveness: float, recurse: bool = True):'), (1341, '            mob.uniforms[""reflectiveness""] = reflectiveness'), (1345, '        return self.uniforms[""shadow""]'), (1347, '    def set_shadow(self, shadow: float, recurse: bool = True):'), (1348, '        for mob in self.get_family(recurse):'), (1349, '            mob.uniforms[""shadow""] = shadow'), (1352, '    def get_gloss(self) -> float:'), (1353, '        return self.uniforms[""gloss""]'), (1354, ''), (1356, '        for mob in self.get_family(recurse):'), (1357, '            mob.uniforms[""gloss""] = gloss')]}",501,501
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(555, '        shading: Tuple[float, float, float] = (1.0, 0.2, 0.2),'), (572, '        self.set_shading(*shading)')], 'deleted': [(555, '        reflectiveness: float = 1.0,')]}",51,51
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(26, '    from manimlib.typing import ManimColor, Vect3, Sequence'), (255, '        shading: Tuple[float, float, float] = (0.1, 0.5, 0.1),'), (265, '            shading=shading,'), (267, '        super().__init__(*square_to_cube_faces(face), **kwargs)'), (288, '        shading: Tuple[float, float, float] = (0.2, 0.2, 0.2),'), (293, '        self.set_shading(*shading)'), (338, '        shading: Tuple[float, float, float] = (0.2, 0.2, 0.2),'), (346, '            shading=shading,')], 'deleted': [(26, '    from manimlib.typing import ManimColor, Vect3'), (255, '        gloss: float = 0.5,'), (266, '        super().__init__('), (267, '            *square_to_cube_faces(face),'), (268, '            gloss=gloss,'), (269, '            **kwargs'), (270, '        )'), (291, '        gloss: float = 0.2,'), (292, '        shadow: float = 0.2,'), (293, '        reflectiveness: float = 0.2,'), (298, '        self.set_gloss(gloss)'), (299, '        self.set_shadow(shadow)'), (300, '        self.set_reflectiveness(reflectiveness)'), (345, '        reflectiveness: float = 0.2,'), (353, '            reflectiveness=reflectiveness,')]}",30,30
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(140, '    def make_3d('), (141, '        self,'), (142, '        reflectiveness: float = 0.5,'), (143, '        gloss: float = 0.1,'), (144, '        shadow: float = 0.2'), (145, '    ):'), (146, '        self.set_shading(reflectiveness, gloss, shadow)')], 'deleted': [(140, '    def make_3d(self, reflectiveness: float = 0.5, shadow: float = 0.2):'), (141, '        self.set_reflectiveness(reflectiveness)'), (142, '        self.set_shadow(shadow)')]}",21,21
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(39, '        shading: Tuple[float, float, float] = (0.3, 0.2, 0.4),'), (62, '            shading=shading,'), (299, '            shading=tuple(uv_surface.shading),')], 'deleted': [(39, '        reflectiveness: float = 0.3,'), (40, '        gloss: float = 0.1,'), (41, '        shadow: float = 0.4,'), (64, '            reflectiveness=reflectiveness,'), (65, '            gloss=gloss,'), (66, '            shadow=shadow,'), (303, '            gloss=uv_surface.gloss,')]}",48,48
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(161, '        self.set_shading(*self.shading)'), (232, '        shading: Tuple[float, float, float] | None = None,'), (261, '            if shading is not None:'), (262, '                mob.set_shading(*shading, recurse=False)'), (272, '            ""shading"": self.get_shading(),'), (1155, '    def apply_points_function(self, *args, **kwargs):')], 'deleted': [(161, '        self.set_gloss(self.gloss)'), (232, '        reflectiveness: float | None = None,'), (233, '        gloss: float | None = None,'), (234, '        shadow: float | None = None,'), (263, '            if reflectiveness is not None:'), (264, '                mob.set_reflectiveness(reflectiveness, recurse=False)'), (265, '            if gloss is not None:'), (266, '                mob.set_gloss(gloss, recurse=False)'), (267, '            if shadow is not None:'), (268, '                mob.set_shadow(shadow, recurse=False)'), (278, '            ""reflectiveness"": self.get_reflectiveness(),'), (279, '            ""gloss"": self.get_gloss(),'), (280, '            ""shadow"": self.get_shadow(),'), (1163, '    def apply_points_function(self, *args, **kwargs,):')]}",263,263
manimlib/shaders/inserts/finalize_color.glsl,manimlib/shaders/inserts/finalize_color.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(3, 'uniform vec3 shading;'), (16, 'vec4 add_light(vec4 color, vec3 point, vec3 unit_normal){'), (17, '    if(shading == vec3(0.0)) return color;'), (18, ''), (19, '    float reflectiveness = shading.x;'), (20, '    float gloss = shading.y;'), (21, '    float shadow = shading.z;'), (24, '    vec3 to_camera = normalize(camera_position - point);'), (25, '    vec3 to_light = normalize(light_position - point);'), (42, '        result.rgb = mix('), (43, '            result.rgb,'), (44, '            vec3(0.0),'), (45, '            max(-light_to_normal, 0) * shadow'), (46, '        );'), (51, 'vec4 finalize_color(vec4 color, vec3 point, vec3 unit_normal){'), (55, '    return add_light(color, point, unit_normal);')], 'deleted': [(3, 'uniform float reflectiveness;'), (4, 'uniform float gloss;'), (5, 'uniform float shadow;'), (18, 'vec4 add_light('), (19, '    vec4 color,'), (20, '    vec3 point,'), (21, '    vec3 unit_normal,'), (22, '    vec3 light_coords,'), (23, '    vec3 cam_coords,'), (24, '    float reflectiveness,'), (25, '    float gloss,'), (26, '    float shadow'), (27, '){'), (28, '    if(reflectiveness == 0.0 && gloss == 0.0 && shadow == 0.0) return color;'), (31, '    // Assume everything has already been rotated such that camera is in the z-direction'), (32, '    // cam_coords = vec3(0, 0, focal_distance);'), (33, '    vec3 to_camera = normalize(cam_coords - point);'), (34, '    vec3 to_light = normalize(light_coords - point);'), (51, '        result.rgb = mix(result.rgb, vec3(0.0), -light_to_normal * shadow);'), (56, 'vec4 finalize_color('), (57, '    vec4 color,'), (58, '    vec3 point,'), (59, '    vec3 unit_normal,'), (60, '    vec3 light_coords,'), (61, '    vec3 cam_coords,'), (62, '    float reflectiveness,'), (63, '    float gloss,'), (64, '    float shadow'), (65, '){'), (69, '    return add_light('), (70, '        color, point, unit_normal, light_coords, cam_coords,'), (71, '        reflectiveness, gloss, shadow'), (72, '    );')]}",,
manimlib/shaders/mandelbrot_fractal/frag.glsl,manimlib/shaders/mandelbrot_fractal/frag.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(67, '        vec3(0.0, 0.0, 1.0)')], 'deleted': [(67, '        vec3(0.0, 0.0, 1.0),'), (68, '        light_source_position,'), (69, '        camera_position,'), (70, '        reflectiveness,'), (71, '        gloss,'), (72, '        shadow')]}",,
manimlib/shaders/newton_fractal/frag.glsl,manimlib/shaders/newton_fractal/frag.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(147, '        vec3(0.0, 0.0, 1.0)')], 'deleted': [(147, '        vec3(0.0, 0.0, 1.0),'), (148, '        light_source_position,'), (149, '        camera_position,'), (150, '        reflectiveness,'), (151, '        gloss,'), (152, '        shadow')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(36, '        unit_normal'), (38, '    gl_Position = get_gl_Position(position_point_into_frame(point));')], 'deleted': [(36, '        unit_normal,'), (37, '        light_source_position,'), (38, '        camera_position,'), (39, '        reflectiveness,'), (40, '        gloss,'), (41, '        shadow'), (43, '    gl_Position = get_gl_Position(point);')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(14, '    verts = point;')], 'deleted': [(13, '// Analog of import for manim only'), (14, '#INSERT get_gl_Position.glsl'), (15, ''), (17, '    verts = position_point_into_frame(point);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(180, '            unit_normal'), (182, '        gl_Position = get_gl_Position(position_point_into_frame(corners[i]));')], 'deleted': [(180, '            unit_normal,'), (181, '            light_source_position,'), (182, '            camera_position,'), (183, '            reflectiveness,'), (184, '            gloss,'), (185, '            shadow'), (187, '        gl_Position = get_gl_Position(corners[i]);')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(3, 'uniform vec2 frame_shape;'), (4, ''), (21, '    verts = point;')], 'deleted': [(18, '#INSERT get_gl_Position.glsl'), (19, ''), (21, '    verts = position_point_into_frame(point);'), (22, '')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(13, '#INSERT get_unit_normal.glsl'), (17, '    gl_Position = get_gl_Position(position_point_into_frame(point));'), (18, '    vec3 normal = get_unit_normal(point, du_point, dv_point);'), (19, '    v_color = finalize_color(rgba, point, normal);')], 'deleted': [(10, 'out vec3 xyz_coords;'), (11, 'out vec3 v_normal;'), (15, '#INSERT get_rotated_surface_unit_normal_vector.glsl'), (19, '    xyz_coords = position_point_into_frame(point);'), (20, '    v_normal = get_rotated_surface_unit_normal_vector(point, du_point, dv_point);'), (21, '    v_color = rgba;'), (22, '    gl_Position = get_gl_Position(xyz_coords);'), (27, ''), (28, '    v_color = finalize_color('), (29, '        rgba,'), (30, '        xyz_coords,'), (31, '        v_normal,'), (32, '        light_source_position,'), (33, '        camera_position,'), (34, '        reflectiveness,'), (35, '        gloss,'), (36, '        shadow'), (37, '    );')]}",,
manimlib/shaders/textured_surface/frag.glsl,manimlib/shaders/textured_surface/frag.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(7, 'in vec3 v_point;'), (23, '            normalize(light_source_position - v_point),'), (32, '        v_point,'), (33, '        normalize(v_normal)')], 'deleted': [(7, 'in vec3 xyz_coords;'), (23, '            normalize(light_source_position - xyz_coords),'), (32, '        xyz_coords,'), (33, '        normalize(v_normal),'), (34, '        light_source_position,'), (35, '        camera_position,'), (36, '        reflectiveness,'), (37, '        gloss,'), (38, '        shadow')]}",,
manimlib/shaders/textured_surface/vert.glsl,manimlib/shaders/textured_surface/vert.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(9, 'out vec3 v_point;'), (15, '#INSERT get_unit_normal.glsl'), (18, '    v_point = point;'), (19, '    v_normal = get_unit_normal(point, du_point, dv_point);'), (22, '    gl_Position = get_gl_Position(position_point_into_frame(point));')], 'deleted': [(9, 'out vec3 xyz_coords;'), (15, '#INSERT get_rotated_surface_unit_normal_vector.glsl'), (18, '    xyz_coords = position_point_into_frame(point);'), (19, '    v_normal = get_rotated_surface_unit_normal_vector(point, du_point, dv_point);'), (22, '    gl_Position = get_gl_Position(xyz_coords);')]}",,
manimlib/shaders/true_dot/frag.glsl,manimlib/shaders/true_dot/frag.glsl,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,6e6a30c95a2f870cb3ac985e52102c4675ba6c55,"Package reflectiveness, gloss and shadow into a single uniform ""shading""","{'added': [(14, '// This include a delaration of'), (15, '// uniform vec3 shading'), (16, '// uniform vec3 camera_position'), (17, '// uniform vec3 light_position'), (28, '    if(shading != vec3(0.0)){'), (33, '            normal')], 'deleted': [(24, '    if(gloss > 0 || shadow > 0){'), (29, '            normal,'), (30, '            light_source_position,'), (31, '            camera_position,'), (32, '            reflectiveness,'), (33, '            gloss,'), (34, '            shadow')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,1f613953d6d0beaf9ee6d6ff9def60d3d0fea5c6,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,Don't pre-rotate light source,"{'added': [(493, '        light_pos = self.light_source.get_location()'), (502, '            ""light_position"": tuple(light_pos),')], 'deleted': [(493, '        light_pos = np.dot('), (494, '            rotation, self.light_source.get_location() + offset'), (495, '        )'), (504, '            ""light_source_position"": tuple(light_pos),')]}",94,94
manimlib/shaders/inserts/finalize_color.glsl,manimlib/shaders/inserts/finalize_color.glsl,1f613953d6d0beaf9ee6d6ff9def60d3d0fea5c6,c3cd64f68cf764c14505cc2cc96b8bf1fb3ca858,Don't pre-rotate light source,"{'added': [(1, 'uniform vec3 light_position;')], 'deleted': [(1, 'uniform vec3 light_source_position;')]}",,
manimlib/shaders/inserts/get_unit_normal.glsl,manimlib/shaders/inserts/get_unit_normal.glsl,8ac0aa484bdb7341a235ef6b2ad70c04b0efeb42,1f613953d6d0beaf9ee6d6ff9def60d3d0fea5c6,Slight tweak to get_unit_normal,"{'added': [(4, '    vec3 v2 = normalize(p2 - p0);')], 'deleted': [(4, '    vec3 v2 = normalize(p2 - p1);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,8d277af47c8d3c514f34360e463e71975e5af4b0,8ac0aa484bdb7341a235ef6b2ad70c04b0efeb42,Go back the convention of positioning stroke vertices in space before geom shader,"{'added': [(182, '        gl_Position = get_gl_Position(corners[i]);')], 'deleted': [(182, '        gl_Position = get_gl_Position(position_point_into_frame(corners[i]));')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,8d277af47c8d3c514f34360e463e71975e5af4b0,8ac0aa484bdb7341a235ef6b2ad70c04b0efeb42,Go back the convention of positioning stroke vertices in space before geom shader,"{'added': [(6, 'in vec3 joint_normal;'), (19, '#INSERT get_gl_Position.glsl'), (20, ''), (22, '    verts = position_point_into_frame(point);')], 'deleted': [(3, 'uniform vec2 frame_shape;'), (4, ''), (21, '    verts = point;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,ed2dbfd9b92ebb10a984c233a3676e10f3269908,8d277af47c8d3c514f34360e463e71975e5af4b0,Remove unused imports,"{'added': [(9, 'from manimlib.constants import BLACK'), (13, 'from manimlib.constants import ORIGIN, OUT'), (47, '    from typing import Callable, Iterable, Tuple')], 'deleted': [(9, 'from manimlib.constants import BLACK, WHITE'), (13, 'from manimlib.constants import ORIGIN, OUT, UP'), (21, 'from manimlib.utils.bezier import interpolate'), (43, 'from manimlib.utils.simple_functions import arr_clip'), (49, '    from typing import Callable, Iterable, Sequence, Tuple')]}",263,263
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,4de0d098ead1c06e404bf316ae6ee09d5afcf359,ed2dbfd9b92ebb10a984c233a3676e10f3269908,Allow cross to take an 'out' array,"{'added': [(25, 'def cross('), (26, '    v1: Vect3 | List[float],'), (27, '    v2: Vect3 | List[float],'), (28, '    out: np.ndarray | None = None'), (29, ') -> Vect3 | Vect3Array:'), (37, '    if out is None:'), (38, '        out = np.empty(np.shape(v1))'), (39, '    out.T[:] = ['), (43, '    ]'), (44, '    return out')], 'deleted': [(25, 'def cross(v1: Vect3 | List[float], v2: Vect3 | List[float]) -> Vect3 | Vect3Array:'), (33, '    result = np.array(['), (37, '    ])'), (38, '    return result.T if is2d else result')]}",90,90
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,abbe131e8dede299c66f1489a30294271a9911e4,4de0d098ead1c06e404bf316ae6ee09d5afcf359,"Track full cross product and dot product of tangent vectors at joints

And alter the convention of what flat_stroke means to be more sensible in 3d","{'added': [(34, 'from manimlib.utils.space_ops import cross'), (61, ""        ('joint_product', np.float32, (4,)),""), (67, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']""), (90, '        flat_stroke: bool = True,'), (111, '        self.needs_new_joint_products = True'), (1046, '    def refresh_joint_products(self):'), (1048, '            mob.needs_new_joint_products = True'), (1051, '    def recompute_joint_products(self, refresh: bool = False):'), (1052, '        """"""'), (1053, ""        The 'joint product' is a 4-vector holding the cross and dot""), (1054, '        product between tangent vectors at a joint'), (1055, '        """"""'), (1056, '        if not self.needs_new_joint_products and not refresh:'), (1057, '            return self.data[""joint_product""]'), (1059, '        if ""joint_product"" in self.locked_data_keys:'), (1060, '            return self.data[""joint_product""]'), (1061, ''), (1062, '        self.needs_new_joint_products = False'), (1067, '            return self.data[""joint_product""]'), (1069, '        # Find all the unit tangent vectors at each joint'), (1082, '        # Joint up closed loops, or mark unclosed paths as such'), (1087, '                vect_to_vert[start] = vect_from_vert[end - 1]'), (1088, '                vect_from_vert[end] = vect_to_vert[start + 1]'), (1089, '            else:'), (1090, '                vect_to_vert[start] = vect_from_vert[start]'), (1091, '                vect_from_vert[end] = vect_to_vert[end]'), (1092, ''), (1093, '        # Compute dot and cross products'), (1094, '        cross('), (1095, '            vect_to_vert, vect_from_vert,'), (1096, '            out=self.data[""joint_product""][:, :3]'), (1097, '        )'), (1098, '        self.data[""joint_product""][:, 3] = (vect_to_vert * vect_from_vert).sum(1)'), (1099, '        return self.data[""joint_product""]'), (1107, '                self.refresh_joint_products()'), (1161, '        self.refresh_joint_products()'), (1212, '                submob.recompute_joint_products()')], 'deleted': [(60, ""        ('joint_angle', np.float32, (1,)),""), (66, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_angle']""), (89, '        flat_stroke: bool = False,'), (110, '        self.needs_new_joint_angles = True'), (1045, '    def refresh_joint_angles(self):'), (1047, '            mob.needs_new_joint_angles = True'), (1050, '    def get_joint_angles(self, refresh: bool = False):'), (1051, '        if not self.needs_new_joint_angles and not refresh:'), (1052, '            return self.data[""joint_angle""]'), (1053, '        if ""joint_angle"" in self.locked_data_keys:'), (1054, '            return self.data[""joint_angle""]'), (1056, '        self.needs_new_joint_angles = False'), (1061, '            return self.data[""joint_angle""]'), (1063, '        # Unit tangent vectors'), (1079, '            if start > len(a0_to_h):'), (1080, '                continue'), (1082, '                vect_to_vert[start] = h_to_a1[end // 2 - 1]'), (1083, '                vect_from_vert[end] = a0_to_h[start // 2]'), (1084, ''), (1085, '        # Compute angles, and read them into'), (1086, '        # the joint_angles array'), (1087, '        result = self.data[""joint_angle""][:, 0]'), (1088, '        result[:] = 0'), (1089, '        dots = (vect_to_vert * vect_from_vert).sum(1)'), (1090, '        np.arccos(dots, out=result, where=((dots <= 1) & (dots >= -1)))'), (1091, '        # Assumes unit normal in the positive z direction'), (1092, '        result *= np.sign(cross2d(vect_to_vert, vect_from_vert))'), (1093, '        return result'), (1101, '                self.refresh_joint_angles()'), (1155, '        self.refresh_joint_angles()'), (1206, '                submob.get_joint_angles()')]}",262,262
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,abbe131e8dede299c66f1489a30294271a9911e4,4de0d098ead1c06e404bf316ae6ee09d5afcf359,"Track full cross product and dot product of tangent vectors at joints

And alter the convention of what flat_stroke means to be more sensible in 3d","{'added': [(13, 'in vec4 v_joint_product[3];'), (41, 'vec3 get_joint_normal(vec4 joint_product){'), (42, '    vec3 result = joint_product.xyz;'), (43, '    float norm = length(result);'), (44, '    if(norm < 1e-8){'), (45, ""        // If it's too short, use the middle joint angle""), (46, '        result = v_joint_product[1].xyz;'), (47, '        norm = length(result);'), (48, '    }'), (49, '    if(norm < 1e-8){'), (50, ""        // If that's also to short, just return unit z vector""), (51, '        return vec3(0.0, 0.0, 1.0);'), (52, '    }'), (53, '    return result / norm;'), (54, '}'), (55, ''), (56, ''), (58, '    float cos_angle,'), (66, '    if(cos_angle > (1.0 - ANGLE_THRESHOLD) || int(joint_type) == NO_JOINT){'), (68, '        changing_c0 = static_c0;'), (69, '        changing_c1 = static_c1;'), (70, '        return;'), (71, '    }'), (72, ''), (73, '    float shift;'), (74, '    float sin_angle = sqrt(1.0 - cos_angle * cos_angle);'), (75, '    if(int(joint_type) == MITER_JOINT){'), (76, '        shift = buff * (-1.0 - cos_angle) / sin_angle;'), (79, '        shift = buff * (1.0 - cos_angle) / sin_angle;'), (103, '    float buff0 = 0.5 * v_stroke_width[0] + aaw;'), (104, '    float buff2 = 0.5 * v_stroke_width[2] + aaw;'), (106, '    // Add correction for sharp angles to prevent weird bevel effects'), (107, '    if(v_joint_product[0].w < -0.5) buff0 *= -2 * v_joint_product[0].w;'), (108, '    if(v_joint_product[2].w < -0.5) buff2 *= -2 * v_joint_product[0].w;'), (109, ''), (110, '    // Unit normal and joint angles'), (111, '    vec3 normal0 = get_joint_normal(v_joint_product[0]);'), (112, '    vec3 normal2 = get_joint_normal(v_joint_product[2]);'), (113, '    // Chose the normal in the positive z direction'), (114, '    normal0 *= sign(normal0.z);'), (115, '    normal2 *= sign(normal2.z);'), (118, '    vec3 p0_perp;'), (119, '    vec3 p2_perp;'), (120, '    if(bool(flat_stroke)){'), (121, '        p0_perp = buff0 * normalize(cross(normal0, v01));'), (122, '        p2_perp = buff2 * normalize(cross(normal2, v12));'), (123, '    }else{'), (124, '        p0_perp = buff0 * normal0;'), (125, '        p2_perp = buff2 * normal2;'), (126, '    }'), (138, '    float orientation = dot(normal0, cross(v01, v12));'), (139, '    if(orientation >= 0.0)     c2 = 0.5 * (c0 + c4);'), (143, '    create_joint(v_joint_product[0].w, v01, buff0, c1, c1, c0, c0);'), (144, '    create_joint(v_joint_product[2].w, -v12, buff2, c5, c5, c4, c4);'), (167, ''), (182, '    get_corners(p0, p1, p2, v01, v12, scaled_aaw, corners);'), (192, '            vec3(0.0, 0.0, 1.0) // TODO'), (194, '        gl_Position = get_gl_Position(position_point_into_frame(corners[i]));')], 'deleted': [(13, 'in float v_joint_angle[3];'), (42, '    float angle,'), (50, '    float shift;'), (51, '    // if(abs(angle) < ANGLE_THRESHOLD || abs(angle) > 0.99 * PI || int(joint_type) == NO_JOINT){'), (52, '    if(abs(angle) < ANGLE_THRESHOLD || int(joint_type) == NO_JOINT){'), (54, '        shift = 0;'), (55, '    }else if(int(joint_type) == MITER_JOINT){'), (56, '        shift = buff * (-1.0 - cos(angle)) / sin(angle);'), (59, '        shift = buff * (1.0 - cos(angle)) / sin(angle);'), (78, '    float stroke_width0,'), (79, '    float stroke_width2,'), (80, '    // Unit normal to the whole curve'), (81, '    vec3 normal,'), (84, '    float angle_from_prev,'), (85, '    float angle_to_next,'), (89, '    float buff0 = 0.5 * stroke_width0 + aaw;'), (90, '    float buff2 = 0.5 * stroke_width2 + aaw;'), (92, '    // Add correction for sharp angles to prevent weird bevel effects (Needed?)'), (93, '    float thresh = 5 * PI / 6;'), (94, '    if(angle_from_prev > thresh) buff0 *= 2 * sin(angle_from_prev);'), (95, '    if(angle_to_next > thresh) buff2 *= 2 * sin(angle_to_next);'), (98, '    vec3 p0_perp = buff0 * normalize(cross(normal, v01));'), (99, '    vec3 p2_perp = buff2 * normalize(cross(normal, v12));'), (109, '    float orientation = dot(normal, cross(v01, v12));'), (112, '    if(orientation > 0.0)      c2 = 0.5 * (c0 + c4);'), (116, '    create_joint(angle_from_prev, v01, buff0, c1, c1, c0, c0);'), (117, '    create_joint(angle_to_next, -v12, buff2, c5, c5, c4, c4);'), (122, ''), (132, '    // TODO, track true unit normal globally (probably as a uniform)'), (133, '    vec3 unit_normal = vec3(0.0, 0.0, 1.0);'), (134, '    if(bool(flat_stroke)){'), (135, '        unit_normal = camera_rotation * vec3(0.0, 0.0, 1.0);'), (136, '    }'), (137, ''), (161, '    get_corners('), (162, '        p0, p1, p2, v01, v12,'), (163, '        v_stroke_width[0],'), (164, '        v_stroke_width[2],'), (165, '        unit_normal,'), (166, '        scaled_aaw,'), (167, '        v_joint_angle[0],'), (168, '        v_joint_angle[2],'), (169, '        corners'), (170, '    );'), (180, '            unit_normal'), (182, '        gl_Position = get_gl_Position(corners[i]);')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,abbe131e8dede299c66f1489a30294271a9911e4,4de0d098ead1c06e404bf316ae6ee09d5afcf359,"Track full cross product and dot product of tangent vectors at joints

And alter the convention of what flat_stroke means to be more sensible in 3d","{'added': [(3, 'uniform vec2 frame_shape;'), (4, ''), (9, 'in vec4 joint_product;'), (14, 'out vec4 v_joint_product;'), (22, '    verts = point;'), (24, '    v_joint_product = joint_product;')], 'deleted': [(7, 'in float joint_angle;'), (12, 'out float v_joint_angle;'), (19, '#INSERT get_gl_Position.glsl'), (20, ''), (22, '    verts = position_point_into_frame(point);'), (24, '    v_joint_angle = joint_angle;')]}",,
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,b16f0981f6e922fdbcecd5f938ef3a42cd067c4f,abbe131e8dede299c66f1489a30294271a9911e4,No need to set flat stroke defaults in Polygon/Polyline,"{'added': [(923, '        super().__init__(**kwargs)'), (971, '        super().__init__(**kwargs)')], 'deleted': [(921, '        flat_stroke: bool = True,'), (924, '        super().__init__(flat_stroke=flat_stroke, **kwargs)'), (970, '        flat_stroke: bool = True,'), (973, '        super().__init__(flat_stroke=flat_stroke, **kwargs)')]}",140,140
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,1b3bc7a27c4f56e460826fe6aa5a350c334fda10,b16f0981f6e922fdbcecd5f938ef3a42cd067c4f,"For linearity, check cosine of angle instead of angle","{'added': [(32, '// When the cosine of the angle between'), (33, '// two vectors is larger than this, we'), (34, '// consider them aligned'), (35, 'const float COS_THRESHOLD = 0.999;'), (68, '    if(cos_angle > COS_THRESHOLD || int(joint_type) == NO_JOINT){'), (166, '    float cos_angle = v_joint_product[1].w;'), (167, '    is_linear = float(cos_angle > COS_THRESHOLD);')], 'deleted': [(32, 'const float PI = 3.141592653;'), (33, 'const float ANGLE_THRESHOLD = 1e-3;'), (66, '    if(cos_angle > (1.0 - ANGLE_THRESHOLD) || int(joint_type) == NO_JOINT){'), (164, '    float angle = acos(clamp(dot(v01, v12), -1, 1));'), (165, '    is_linear = float(abs(angle) < ANGLE_THRESHOLD);'), (166, '')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,7fe84d926309176c3df1c43ffb3c34257cbdabc9,1b3bc7a27c4f56e460826fe6aa5a350c334fda10,"Don't recompute cross(v01, v12)","{'added': [(140, '    float orientation = dot(normal0, v_joint_product[1].xyz);'), (141, '    if(orientation >= 0.0)     c2 = 0.5 * (c0 + c4);'), (145, '    if(bool(flat_stroke)){'), (146, '        create_joint(v_joint_product[0].w, v01, buff0, c1, c1, c0, c0);'), (147, '        create_joint(v_joint_product[2].w, -v12, buff2, c5, c5, c4, c4);'), (148, '    }')], 'deleted': [(140, '    float orientation = dot(normal0, cross(v01, v12));'), (141, '    if(orientation >= 0.0)     c2 = 0.5 * (c0 + c4);'), (145, '    create_joint(v_joint_product[0].w, v01, buff0, c1, c1, c0, c0);'), (146, '    create_joint(v_joint_product[2].w, -v12, buff2, c5, c5, c4, c4);')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xy_to_uv.glsl,870e88f8c9ef95af11c70011006aae39d89f2b89,7fe84d926309176c3df1c43ffb3c34257cbdabc9,First attempt at finding uv coords from 3d space instead of 2d,"{'added': [(30, 'vec2 xs_on_clean_parabola(vec3 b0, vec3 b1, vec3 b2){'), (31, '    /*'), (32, '    Given three control points for a quadratic bezier,'), (33, '    this returns the two values (x0, x2) such that the'), (34, '    section of the parabola y = x^2 between those values'), (35, '    is isometric to the given quadratic bezier.'), (36, ''), (37, '    Adapated from https://raphlinus.github.io/graphics/curves/2019/12/23/flatten-quadbez.html'), (38, '    */'), (39, '    vec3 dd = 2 * b1 - b0 - b2;'), (40, ''), (41, '    float u0 = dot(b1 - b0, dd);'), (42, '    float u2 = dot(b2 - b1, dd);'), (43, '    vec3 cp = cross(b2 - b0, dd);'), (44, '    float sgn = sign(cp.z);'), (45, '    float denom = sgn * length(cp);'), (46, ''), (47, '    return vec2(u0 / denom, u2 / denom);'), (48, '}'), (49, ''), (50, ''), (79, 'mat4 map_triangles(vec3 src0, vec3 src1, vec3 src2, vec3 dst0, vec3 dst1, vec3 dst2){'), (80, '    /*'), (81, '    Return an affine transform which maps the triangle (src0, src1, src2)'), (82, '    onto the triangle (dst0, dst1, dst2)'), (83, '    */'), (84, '    mat4 src_mat = mat4('), (85, '        src0.x, src0.y, src0.z, 1.0,'), (86, '        src1.x, src1.y, src1.z, 1.0,'), (87, '        src2.x, src2.y, src2.z, 1.0,'), (88, '        1.0, 1.0, 1.0, 1.0'), (89, '    );'), (90, '    mat4 dst_mat = mat4('), (91, '        dst0.x, dst0.y, dst0.z, 1.0,'), (92, '        dst1.x, dst1.y, dst1.z, 1.0,'), (93, '        dst2.x, dst2.y, dst2.z, 1.0,'), (94, '        1.0, 1.0, 1.0, 1.0'), (95, '    );'), (96, '    return dst_mat * inverse(src_mat);'), (97, '}'), (98, ''), (99, ''), (100, 'mat4 map_point_pairs(vec3 src0, vec3 src1, vec3 dest0, vec3 dest1){'), (101, '    /*'), (102, '    Returns an orthogonal matrix which will map'), (103, '    src0 onto dest0 and src1 onto dest1.'), (104, '    */'), (105, '    mat4 shift1 = mat4('), (106, '        1.0, 0.0, 0.0, 0.0,'), (107, '        0.0, 1.0, 0.0, 0.0,'), (108, '        0.0, 0.0, 1.0, 0.0,'), (109, '        -src0.x, -src0.y, -src0.z, 1.0'), (110, '    );'), (111, '    mat4 shift2 = mat4('), (112, '        1.0, 0.0, 0.0, 0.0,'), (113, '        0.0, 1.0, 0.0, 0.0,'), (114, '        0.0, 0.0, 1.0, 0.0,'), (115, '        dest0.x, dest0.y, dest0.z, 1.0'), (116, '    );'), (117, ''), (118, '    // Find rotation matrix between unit vectors in each direction'), (119, '    vec3 src_v = src1 - src0;'), (120, '    vec3 dst_v = dest1 - dest0;'), (121, '    float src_len = length(src_v);'), (122, '    float dst_len = length(dst_v);'), (123, '    float scale = dst_len / src_len;'), (124, '    src_v /= src_len;'), (125, '    dst_v /= dst_len;'), (126, ''), (127, '    vec3 cp = cross(src_v, dst_v);'), (128, '    float dp = dot(src_v, dst_v);'), (129, ''), (130, '    float s = length(cp); // Sine of the angle between them'), (131, '    float c = dp;         // Cosine of the angle between them'), (132, ''), (133, '    if(s < 1e-8){'), (134, '        // No rotation needed'), (135, '        return shift2 * shift1;'), (136, '    }'), (137, ''), (138, '    vec3 axis = cp / s;   // Axis of rotation'), (139, '    float oc = 1.0 - c;'), (140, '    float ax = axis.x;'), (141, '    float ay = axis.y;'), (142, '    float az = axis.z;'), (143, ''), (144, '    // Rotation matrix about axis, with a given angle corresponding to s and c.'), (145, '    mat4 rotate = scale * mat4('), (146, '        oc * ax * ax + c,      oc * ax * ay + az * s, oc * az * ax - ay * s, 0.0,'), (147, '        oc * ax * ay - az * s, oc * ay * ay + c,      oc * ay * az + ax * s, 0.0,'), (148, '        oc * az * ax + ay * s, oc * ay * az - ax * s, oc * az * az + c,      0.0,'), (149, '        0.0, 0.0, 0.0, 1.0 / scale'), (150, '    );'), (151, ''), (152, '    return shift2 * rotate * shift1;'), (153, '}'), (154, ''), (155, ''), (156, 'mat4 get_xyz_to_uv(vec3 b0, vec3 b1, vec3 b2, float temp_is_linear, out float is_linear){'), (157, '    /*'), (158, '    Returns a matrix for an affine transformation which maps a set of quadratic'), (159, '    bezier controls points into a new coordinate system such that the bezier curve'), (160, ""    coincides with y = x^2, or in the case of a linear curve, it's mapped to the x-axis.""), (161, '    */'), (162, '    vec3 dest0;'), (163, '    vec3 dest1;'), (164, '    vec3 dest2;'), (165, '    vec3 src1;'), (166, '    is_linear = temp_is_linear;'), (167, '    // Portions of the parabola y = x^2 where abs(x) exceeds'), (168, '    // this value are treated as straight lines.'), (169, '    float thresh = 2.0;'), (170, '    if (!bool(is_linear)){'), (171, '        vec2 xs = xs_on_clean_parabola(b0, b1, b2);'), (172, '        float x0 = xs.x;'), (173, '        float x2 = xs.y;'), (174, '        if((x0 > thresh && x2 > thresh) || (x0 < -thresh && x2 < -thresh)){'), (175, '            is_linear = 1.0;'), (176, '        }else{'), (177, '            dest0 = vec3(x0, x0 * x0, 0.0);'), (178, '            dest1 = vec3(0.5 * (x0 + x2), x0 * x2, 0.0);'), (179, '            dest2 = vec3(x2, x2 * x2, 0.0);'), (180, '            src1 = b1;'), (181, '        }'), (182, '    }'), (183, '    // Check if is_linear status changed above'), (184, '    if (bool(is_linear)){'), (185, '        dest0 = vec3(0.0, 0.0, 0.0);'), (186, '        dest1 = vec3(0.0, 1.0, 0.0);'), (187, '        dest2 = vec3(1.0, 0.0, 0.0);'), (188, '        vec3 v = b2 - b0;'), (189, '        src1 = b0 + length(v) * normalize(cross(v, vec3(0, 0, 1)));'), (190, '    }'), (191, ''), (192, '    // return map_point_pairs(b0, b2, dest0, dest1);'), (193, '    return map_triangles(b0, src1, b2, dest0, dest1, dest2);'), (194, '}'), (195, ''), (196, '')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,870e88f8c9ef95af11c70011006aae39d89f2b89,7fe84d926309176c3df1c43ffb3c34257cbdabc9,First attempt at finding uv coords from 3d space instead of 2d,"{'added': [(115, ''), (116, '    // Make sure normals point in the same direction'), (117, '    if(dot(normal0, normal2) < 0) normal2 *= -1;'), (128, '        // vec3 to_cam = transpose(camera_rotation)[2];'), (129, '        // p0_perp = buff0 * to_cam;'), (130, '        // p2_perp = buff2 * to_cam;'), (181, '    // mat3 xy_to_uv = get_xy_to_uv(p0.xy, p1.xy, p2.xy, is_linear, is_linear);'), (182, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, is_linear, is_linear);'), (184, '    float uv_scale_factor = length(xyz_to_uv[0].xyz);'), (194, '        // uv_coords = (xy_to_uv * vec3(corners[i].xy, 1)).xy;'), (195, '        uv_coords = (xyz_to_uv * vec4(corners[i], 1)).xy;')], 'deleted': [(115, '    // Chose the normal in the positive z direction'), (116, '    normal0 *= sign(normal0.z);'), (117, '    normal2 *= sign(normal2.z);'), (178, '    mat3 xy_to_uv = get_xy_to_uv(p0.xy, p1.xy, p2.xy, is_linear, is_linear);'), (180, '    float uv_scale_factor = length(xy_to_uv[0].xy);'), (190, '        uv_coords = (xy_to_uv * vec3(corners[i].xy, 1)).xy;')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xy_to_uv.glsl,c563ec20366ce8fea1e9df195d593ba2c3eb9443,870e88f8c9ef95af11c70011006aae39d89f2b89,Simplifications,"{'added': [(44, '    float denom = length(cp);'), (84, '        src0, 1.0,'), (85, '        src1, 1.0,'), (86, '        src2, 1.0,'), (87, '        vec4(1.0)'), (90, '        dst0, 1.0,'), (91, '        dst1, 1.0,'), (92, '        dst2, 1.0,'), (93, '        vec4(1.0)'), (184, '        return map_point_pairs(b0, b2, dest0, dest2);'), (188, '    return map_triangles(b0, b1, b2, dest0, dest1, dest2);')], 'deleted': [(44, '    float sgn = sign(cp.z);'), (45, '    float denom = sgn * length(cp);'), (85, '        src0.x, src0.y, src0.z, 1.0,'), (86, '        src1.x, src1.y, src1.z, 1.0,'), (87, '        src2.x, src2.y, src2.z, 1.0,'), (88, '        1.0, 1.0, 1.0, 1.0'), (91, '        dst0.x, dst0.y, dst0.z, 1.0,'), (92, '        dst1.x, dst1.y, dst1.z, 1.0,'), (93, '        dst2.x, dst2.y, dst2.z, 1.0,'), (94, '        1.0, 1.0, 1.0, 1.0'), (165, '    vec3 src1;'), (180, '            src1 = b1;'), (186, '        dest1 = vec3(0.0, 1.0, 0.0);'), (188, '        vec3 v = b2 - b0;'), (189, '        src1 = b0 + length(v) * normalize(cross(v, vec3(0, 0, 1)));'), (193, '    return map_triangles(b0, src1, b2, dest0, dest1, dest2);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c2587de691db07c6733d83b738b4a0651c7c22d4,c563ec20366ce8fea1e9df195d593ba2c3eb9443,Apply xyz_to_uv to pre-positioned points,"{'added': [(182, '    mat4 xyz_to_uv = get_xyz_to_uv('), (183, '        position_point_into_frame(p0),'), (184, '        position_point_into_frame(p1),'), (185, '        position_point_into_frame(p2),'), (186, '        is_linear, is_linear'), (187, '    );'), (199, '        vec3 pos = corners[i];'), (200, '        uv_coords = (xyz_to_uv * vec4(pos, 1)).xy;'), (207, '        gl_Position = get_gl_Position(pos);')], 'deleted': [(182, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, is_linear, is_linear);'), (194, '        // uv_coords = (xy_to_uv * vec3(corners[i].xy, 1)).xy;'), (195, '        uv_coords = (xyz_to_uv * vec4(corners[i], 1)).xy;'), (202, '        gl_Position = get_gl_Position(position_point_into_frame(corners[i]));')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,b7831ef3f1479c16e75a71f7f5ef0dc61f7175d4,c2587de691db07c6733d83b738b4a0651c7c22d4,Go back to computing xyz-to-uv before repositioning,"{'added': [(182, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, is_linear, is_linear);'), (194, '        uv_coords = (xyz_to_uv * vec4(corners[i], 1)).xy;'), (201, '        gl_Position = get_gl_Position(position_point_into_frame(corners[i]));')], 'deleted': [(182, '    mat4 xyz_to_uv = get_xyz_to_uv('), (183, '        position_point_into_frame(p0),'), (184, '        position_point_into_frame(p1),'), (185, '        position_point_into_frame(p2),'), (186, '        is_linear, is_linear'), (187, '    );'), (199, '        vec3 pos = corners[i];'), (200, '        uv_coords = (xyz_to_uv * vec4(pos, 1)).xy;'), (207, '        gl_Position = get_gl_Position(pos);')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xy_to_uv.glsl,9ed8dd5439f259113407b3c07621b9e6e87217b6,b7831ef3f1479c16e75a71f7f5ef0dc61f7175d4,Clean up,"{'added': [(50, 'mat3 map_point_pairs(vec2 src0, vec2 src1, vec2 dst0, vec2 dst1){'), (53, '    src0 onto dst0 and src1 onto dst1.'), (63, '        dst0.x, dst0.y, 1.0'), (67, '    vec2 complex_rot = complex_div(dst1 - dst0, src1 - src0);'), (99, 'mat4 map_point_pairs(vec3 src0, vec3 src1, vec3 dst0, vec3 dst1){'), (102, '    src0 onto dst0 and src1 onto dst1.'), (104, '    mat4 shift1 = mat4(1.0);'), (105, '    shift1[3].xyz = -src0;'), (106, '    mat4 shift2 = mat4(1.0);'), (107, '    shift2[3].xzy = dst0;'), (111, '    vec3 dst_v = dst1 - dst0;'), (153, '    vec3 dst0;'), (154, '    vec3 dst1;'), (155, '    vec3 dst2;'), (167, '            dst0 = vec3(x0, x0 * x0, 0.0);'), (168, '            dst1 = vec3(0.5 * (x0 + x2), x0 * x2, 0.0);'), (169, '            dst2 = vec3(x2, x2 * x2, 0.0);'), (174, '        dst0 = vec3(0.0, 0.0, 0.0);'), (175, '        dst2 = vec3(1.0, 0.0, 0.0);'), (176, '        return map_point_pairs(b0, b2, dst0, dst2);'), (179, '    // return map_point_pairs(b0, b2, dst0, dst1);'), (180, '    return map_triangles(b0, b1, b2, dst0, dst1, dst2);'), (190, '    vec2 dst0;'), (191, '    vec2 dst1;'), (203, '            dst0 = vec2(x0, x0 * x0);'), (204, '            dst1 = vec2(x2, x2 * x2);'), (209, '        dst0 = vec2(0, 0);'), (210, '        dst1 = vec2(1, 0);'), (213, '    return map_point_pairs(b0, b2, dst0, dst1);')], 'deleted': [(50, 'mat3 map_point_pairs(vec2 src0, vec2 src1, vec2 dest0, vec2 dest1){'), (53, '    src0 onto dest0 and src1 onto dest1.'), (63, '        dest0.x, dest0.y, 1.0'), (67, '    vec2 complex_rot = complex_div(dest1 - dest0, src1 - src0);'), (99, 'mat4 map_point_pairs(vec3 src0, vec3 src1, vec3 dest0, vec3 dest1){'), (102, '    src0 onto dest0 and src1 onto dest1.'), (104, '    mat4 shift1 = mat4('), (105, '        1.0, 0.0, 0.0, 0.0,'), (106, '        0.0, 1.0, 0.0, 0.0,'), (107, '        0.0, 0.0, 1.0, 0.0,'), (108, '        -src0.x, -src0.y, -src0.z, 1.0'), (109, '    );'), (110, '    mat4 shift2 = mat4('), (111, '        1.0, 0.0, 0.0, 0.0,'), (112, '        0.0, 1.0, 0.0, 0.0,'), (113, '        0.0, 0.0, 1.0, 0.0,'), (114, '        dest0.x, dest0.y, dest0.z, 1.0'), (115, '    );'), (119, '    vec3 dst_v = dest1 - dest0;'), (161, '    vec3 dest0;'), (162, '    vec3 dest1;'), (163, '    vec3 dest2;'), (175, '            dest0 = vec3(x0, x0 * x0, 0.0);'), (176, '            dest1 = vec3(0.5 * (x0 + x2), x0 * x2, 0.0);'), (177, '            dest2 = vec3(x2, x2 * x2, 0.0);'), (182, '        dest0 = vec3(0.0, 0.0, 0.0);'), (183, '        dest2 = vec3(1.0, 0.0, 0.0);'), (184, '        return map_point_pairs(b0, b2, dest0, dest2);'), (187, '    // return map_point_pairs(b0, b2, dest0, dest1);'), (188, '    return map_triangles(b0, b1, b2, dest0, dest1, dest2);'), (198, '    vec2 dest0;'), (199, '    vec2 dest1;'), (211, '            dest0 = vec2(x0, x0 * x0);'), (212, '            dest1 = vec2(x2, x2 * x2);'), (217, '        dest0 = vec2(0, 0);'), (218, '        dest1 = vec2(1, 0);'), (221, '    return map_point_pairs(b0, b2, dest0, dest1);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,9ed8dd5439f259113407b3c07621b9e6e87217b6,b7831ef3f1479c16e75a71f7f5ef0dc61f7175d4,Clean up,"{'added': [], 'deleted': [(181, '    // mat3 xy_to_uv = get_xy_to_uv(p0.xy, p1.xy, p2.xy, is_linear, is_linear);')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,5e1a02d2ce86a0e3760e79d59ae17e3597b48c3c,9ed8dd5439f259113407b3c07621b9e6e87217b6,Use xyz-to-uv matrix for fill,"{'added': [(86, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, is_linear, is_linear);'), (87, '    uv_anti_alias_width = aaw * length(xyz_to_uv[0].xyz);'), (92, '        uv_coords = (xyz_to_uv * vec4(corner, 1.0)).xy;')], 'deleted': [(86, '    mat3 xy_to_uv = get_xy_to_uv(p0.xy, p1.xy, p2.xy, is_linear, is_linear);'), (87, '    uv_anti_alias_width = aaw * length(xy_to_uv[0].xy);'), (92, '        uv_coords = (xy_to_uv * vec3(corner.xy, 1.0)).xy;')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xy_to_uv.glsl,c7e32e847d60c56f098cf64f8c679372ef18d9af,5e1a02d2ce86a0e3760e79d59ae17e3597b48c3c,Delete no-longer used functions,"{'added': [], 'deleted': [(1, 'float cross2d(vec2 v, vec2 w){'), (2, '    return v.x * w.y - w.x * v.y;'), (3, '}'), (4, ''), (5, ''), (6, 'vec2 complex_div(vec2 v, vec2 w){'), (7, '    return vec2(dot(v, w), cross2d(w, v)) / dot(w, w);'), (8, '}'), (9, ''), (10, ''), (11, 'vec2 xs_on_clean_parabola(vec2 b0, vec2 b1, vec2 b2){'), (12, '    /*'), (13, '    Given three control points for a quadratic bezier,'), (14, '    this returns the two values (x0, x2) such that the'), (15, '    section of the parabola y = x^2 between those values'), (16, '    is isometric to the given quadratic bezier.'), (17, ''), (18, '    Adapated from https://github.com/raphlinus/raphlinus.github.io/blob/master/_posts/2019-12-23-flatten-quadbez.md'), (19, '    */'), (20, '    vec2 dd = normalize(2 * b1 - b0 - b2);'), (21, ''), (22, '    float u0 = dot(b1 - b0, dd);'), (23, '    float u2 = dot(b2 - b1, dd);'), (24, '    float cp = cross2d(b2 - b0, dd);'), (25, ''), (26, '    return vec2(u0 / cp, u2 / cp);'), (27, '}'), (28, ''), (29, ''), (50, 'mat3 map_point_pairs(vec2 src0, vec2 src1, vec2 dst0, vec2 dst1){'), (51, '    /*'), (52, '    Returns an orthogonal matrix which will map'), (53, '    src0 onto dst0 and src1 onto dst1.'), (54, '    */'), (55, '    mat3 shift1 = mat3('), (56, '        1.0, 0.0, 0.0,'), (57, '        0.0, 1.0, 0.0,'), (58, '        -src0.x, -src0.y, 1.0'), (59, '    );'), (60, '    mat3 shift2 = mat3('), (61, '        1.0, 0.0, 0.0,'), (62, '        0.0, 1.0, 0.0,'), (63, '        dst0.x, dst0.y, 1.0'), (64, '    );'), (65, ''), (66, '    // Compute complex division dest_vect / src_vect to determine rotation'), (67, '    vec2 complex_rot = complex_div(dst1 - dst0, src1 - src0);'), (68, '    mat3 rotate = mat3('), (69, '        complex_rot.x, complex_rot.y, 0.0,'), (70, '        -complex_rot.y, complex_rot.x, 0.0,'), (71, '        0.0, 0.0, 1.0'), (72, '    );'), (73, ''), (74, '    return shift2 * rotate * shift1;'), (75, '}'), (76, ''), (77, ''), (182, ''), (183, ''), (184, 'mat3 get_xy_to_uv(vec2 b0, vec2 b1, vec2 b2, float temp_is_linear, out float is_linear){'), (185, '    /*'), (186, '    Returns a matrix for an affine transformation which maps a set of quadratic'), (187, '    bezier controls points into a new coordinate system such that the bezier curve'), (188, ""    coincides with y = x^2, or in the case of a linear curve, it's mapped to the x-axis.""), (189, '    */'), (190, '    vec2 dst0;'), (191, '    vec2 dst1;'), (192, '    is_linear = temp_is_linear;'), (193, '    // Portions of the parabola y = x^2 where abs(x) exceeds'), (194, '    // this value are treated as straight lines.'), (195, '    float thresh = 2.0;'), (196, '    if (!bool(is_linear)){'), (197, '        vec2 xs = xs_on_clean_parabola(b0, b1, b2);'), (198, '        float x0 = xs.x;'), (199, '        float x2 = xs.y;'), (200, '        if((x0 > thresh && x2 > thresh) || (x0 < -thresh && x2 < -thresh)){'), (201, '            is_linear = 1.0;'), (202, '        }else{'), (203, '            dst0 = vec2(x0, x0 * x0);'), (204, '            dst1 = vec2(x2, x2 * x2);'), (205, '        }'), (206, '    }'), (207, '    // Check if is_linear status changed above'), (208, '    if (bool(is_linear)){'), (209, '        dst0 = vec2(0, 0);'), (210, '        dst1 = vec2(1, 0);'), (211, '    }'), (212, ''), (213, '    return map_point_pairs(b0, b2, dst0, dst1);'), (214, '}')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,0b72bc5d08a46f64688d7e1f51acdab6841b3a44,c7e32e847d60c56f098cf64f8c679372ef18d9af,Fix joint normal issue,"{'added': [(43, 'vec3 get_joint_unit_normal(vec4 joint_product){'), (44, '    vec3 result;'), (45, '    if(joint_product.w < COS_THRESHOLD){'), (46, '        result = joint_product.xyz;'), (47, '    }else{'), (50, '    float norm = length(result);'), (51, '    return (norm > 1e-10) ? result / norm : vec3(0.0, 0.0, 1.0);'), (56, '    vec4 joint_product,'), (64, '    float cos_angle = joint_product.w;'), (73, '    float sin_angle = length(joint_product.xyz) * sign(joint_product.z);'), (106, '    if(v_joint_product[0].w < -0.5) buff0 *= 2 * (v_joint_product[0].w + 1.0);'), (107, '    if(v_joint_product[2].w < -0.5) buff2 *= 2 * (v_joint_product[0].w + 1.0);'), (110, '    vec3 normal0 = get_joint_unit_normal(v_joint_product[0]);'), (111, '    vec3 normal2 = get_joint_unit_normal(v_joint_product[2]);'), (114, '    if(dot(normal0, normal2) < 0) buff2 *= -1;'), (119, '        // Perpendicular vectors to the left of the curve'), (143, '        create_joint(v_joint_product[0], v01, buff0, c1, c1, c0, c0);'), (144, '        create_joint(v_joint_product[2], -v12, buff2, c5, c5, c4, c4);')], 'deleted': [(43, 'vec3 get_joint_normal(vec4 joint_product){'), (44, '    vec3 result = joint_product.xyz;'), (45, '    float norm = length(result);'), (46, '    if(norm < 1e-8){'), (47, ""        // If it's too short, use the middle joint angle""), (49, '        norm = length(result);'), (51, '    if(norm < 1e-8){'), (52, ""        // If that's also to short, just return unit z vector""), (53, '        return vec3(0.0, 0.0, 1.0);'), (54, '    }'), (55, '    return result / norm;'), (60, '    float cos_angle,'), (76, '    float sin_angle = sqrt(1.0 - cos_angle * cos_angle);'), (109, '    if(v_joint_product[0].w < -0.5) buff0 *= -2 * v_joint_product[0].w;'), (110, '    if(v_joint_product[2].w < -0.5) buff2 *= -2 * v_joint_product[0].w;'), (113, '    vec3 normal0 = get_joint_normal(v_joint_product[0]);'), (114, '    vec3 normal2 = get_joint_normal(v_joint_product[2]);'), (117, '    if(dot(normal0, normal2) < 0) normal2 *= -1;'), (119, '    // Perpendicular vectors to the left of the curve'), (128, '        // vec3 to_cam = transpose(camera_rotation)[2];'), (129, '        // p0_perp = buff0 * to_cam;'), (130, '        // p2_perp = buff2 * to_cam;'), (149, '        create_joint(v_joint_product[0].w, v01, buff0, c1, c1, c0, c0);'), (150, '        create_joint(v_joint_product[2].w, -v12, buff2, c5, c5, c4, c4);')]}",,
manimlib/shaders/textured_surface/frag.glsl,manimlib/shaders/textured_surface/frag.glsl,874906bedfc224338a62a2538b975148aeb2fbde,0b72bc5d08a46f64688d7e1f51acdab6841b3a44,Replace 'light_source_position' with 'light_position',"{'added': [(23, '            normalize(light_position - v_point),')], 'deleted': [(23, '            normalize(light_source_position - v_point),')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xy_to_uv.glsl,1a663943c9fd95a5b2823d5af0383b8852c684b9,874906bedfc224338a62a2538b975148aeb2fbde,Simpler xyz-to-uv map for linear case,"{'added': [(42, 'mat4 map_onto_x_axis(vec3 src0, vec3 src1){'), (43, '    mat4 shift = mat4(1.0);'), (44, '    shift[3].xyz = -src0;'), (47, '    vec3 vect = normalize(src1 - src0);'), (48, '    // This is the same as cross(vect, vec3(1, 0, 0))'), (49, '    vec3 axis = vec3(0.0, vect.z, -vect.y);'), (51, '    float s = length(axis); // Sine of the angle between them'), (52, '    float c = vect.x;       // Cosine of the angle between them'), (54, '    // No rotation needed'), (55, '    if(s < 1e-8) return shift;'), (57, '    axis = axis / s;   // Axis of rotation'), (64, '    mat4 rotate = mat4('), (68, '        0.0, 0.0, 0.0, 1.0'), (71, '    return rotate * shift;'), (92, '            // This triangle on the xy plane should be isometric'), (93, '            // to (b0, b1, b2), and it should define a quadratic'), (94, '            // bezier segment aligned with y = x^2'), (95, '            vec3 dst0 = vec3(x0, x0 * x0, 0.0);'), (96, '            vec3 dst1 = vec3(0.5 * (x0 + x2), x0 * x2, 0.0);'), (97, '            vec3 dst2 = vec3(x2, x2 * x2, 0.0);'), (98, '            return map_triangles(b0, b1, b2, dst0, dst1, dst2);'), (101, '    // Only lands here if is_linear is 1.0'), (102, '    return map_onto_x_axis(b0, b2);')], 'deleted': [(42, 'mat4 map_point_pairs(vec3 src0, vec3 src1, vec3 dst0, vec3 dst1){'), (43, '    /*'), (44, '    Returns an orthogonal matrix which will map'), (45, '    src0 onto dst0 and src1 onto dst1.'), (46, '    */'), (47, '    mat4 shift1 = mat4(1.0);'), (48, '    shift1[3].xyz = -src0;'), (49, '    mat4 shift2 = mat4(1.0);'), (50, '    shift2[3].xzy = dst0;'), (53, '    vec3 src_v = src1 - src0;'), (54, '    vec3 dst_v = dst1 - dst0;'), (55, '    float src_len = length(src_v);'), (56, '    float dst_len = length(dst_v);'), (57, '    float scale = dst_len / src_len;'), (58, '    src_v /= src_len;'), (59, '    dst_v /= dst_len;'), (60, ''), (61, '    vec3 cp = cross(src_v, dst_v);'), (62, '    float dp = dot(src_v, dst_v);'), (64, '    float s = length(cp); // Sine of the angle between them'), (65, '    float c = dp;         // Cosine of the angle between them'), (67, '    if(s < 1e-8){'), (68, '        // No rotation needed'), (69, '        return shift2 * shift1;'), (70, '    }'), (72, '    vec3 axis = cp / s;   // Axis of rotation'), (79, '    mat4 rotate = scale * mat4('), (83, '        0.0, 0.0, 0.0, 1.0 / scale'), (86, '    return shift2 * rotate * shift1;'), (96, '    vec3 dst0;'), (97, '    vec3 dst1;'), (98, '    vec3 dst2;'), (110, '            dst0 = vec3(x0, x0 * x0, 0.0);'), (111, '            dst1 = vec3(0.5 * (x0 + x2), x0 * x2, 0.0);'), (112, '            dst2 = vec3(x2, x2 * x2, 0.0);'), (115, '    // Check if is_linear status changed above'), (116, '    if (bool(is_linear)){'), (117, '        dst0 = vec3(0.0, 0.0, 0.0);'), (118, '        dst2 = vec3(1.0, 0.0, 0.0);'), (119, '        return map_point_pairs(b0, b2, dst0, dst2);'), (120, '    }'), (121, ''), (122, '    // return map_point_pairs(b0, b2, dst0, dst1);'), (123, '    return map_triangles(b0, b1, b2, dst0, dst1, dst2);')]}",,
manimlib/shaders/inserts/get_xy_to_uv.glsl,manimlib/shaders/inserts/get_xyz_to_uv.glsl,72e5bde274523251572e02168e7c3f9d1848cc61,1a663943c9fd95a5b2823d5af0383b8852c684b9,Rename xy-to-uv -> xyz-to-uv,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,72e5bde274523251572e02168e7c3f9d1848cc61,1a663943c9fd95a5b2823d5af0383b8852c684b9,Rename xy-to-uv -> xyz-to-uv,"{'added': [(28, '#INSERT get_xyz_to_uv.glsl')], 'deleted': [(28, '#INSERT get_xy_to_uv.glsl')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,72e5bde274523251572e02168e7c3f9d1848cc61,1a663943c9fd95a5b2823d5af0383b8852c684b9,Rename xy-to-uv -> xyz-to-uv,"{'added': [(37, 'vec3 unit_normal = vec3(0.0, 0.0, 1.0);'), (40, '#INSERT get_xyz_to_uv.glsl'), (113, '    // Set global unit normal'), (114, '    unit_normal = normal0;'), (126, '        // p0_perp = buff0 * normal0;'), (127, '        // p2_perp = buff2 * normal2;'), (128, '        p0_perp = buff0 * normalize(cross(camera_position - p0, v01));'), (129, '        p2_perp = buff2 * normalize(cross(camera_position - p2, v12));'), (179, '    // the x-axis'), (194, '        color = finalize_color(v_color[vert_index], corners[i], unit_normal);')], 'deleted': [(39, '#INSERT get_xy_to_uv.glsl'), (123, '        p0_perp = buff0 * normal0;'), (124, '        p2_perp = buff2 * normal2;'), (174, '    // the segment from (0, 0) to (1, 0)'), (189, '        color = finalize_color('), (190, '            v_color[vert_index],'), (191, '            corners[i],'), (192, '            vec3(0.0, 0.0, 1.0) // TODO'), (193, '        );')]}",,
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,44e5f15ae94fd91e9d8e46ff66b1b33c2d864a54,72e5bde274523251572e02168e7c3f9d1848cc61,Default to non-flat stroke for meshes,"{'added': [(41, '        flat_stroke: bool = False,'), (55, '        self.set_flat_stroke(flat_stroke)')], 'deleted': []}",30,30
manimlib/shaders/inserts/get_xyz_to_uv.glsl,manimlib/shaders/inserts/get_xyz_to_uv.glsl,40436d63709598cb1d7d8b3af644eb9cf54e50dc,44e5f15ae94fd91e9d8e46ff66b1b33c2d864a54,Slightly cleaner xs_on_clean_parabola,"{'added': [(14, '    float cp = length(cross(b2 - b0, dd));'), (16, '    return vec2(u0 / cp, u2 / cp);')], 'deleted': [(14, '    vec3 cp = cross(b2 - b0, dd);'), (15, '    float denom = length(cp);'), (17, '    return vec2(u0 / denom, u2 / denom);')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,96b0ec909421e6d956c37072a8ecec349dacc297,40436d63709598cb1d7d8b3af644eb9cf54e50dc,Use fontTools.cu2qu.cu2qu import curve_to_quadratic,"{'added': [(4, 'from fontTools.cu2qu.cu2qu import curve_to_quadratic'), (450, '        # Not, this assumes all points are on the xy-plane'), (451, '        approx_2d = curve_to_quadratic('), (452, '            [last[:2], handle1[:2], handle2[:2], anchor[:2]],'), (453, '            1.0  # High tolerance for error'), (454, '        )'), (455, '        approx_3d = np.zeros((len(approx_2d), 3))'), (456, '        approx_3d[:, :2] = approx_2d'), (457, '        if self.consider_points_equal(approx_3d[1], last):'), (459, '            approx_3d[1] = midpoint(*approx_3d[1:3])'), (460, '        self.append_points(approx_3d[1:])')], 'deleted': [(449, '        # If the two relevant tangents are close in angle to each other,'), (450, '        # then just approximate with a single quadratic bezier curve.'), (451, '        # Otherwise, approximate with two'), (452, '        v1 = handle1 - last'), (453, '        v2 = anchor - handle2'), (454, '        angle = angle_between_vectors(v1, v2)'), (455, '        if self.use_simple_quadratic_approx and angle < 45 * DEGREES:'), (456, '            quadratic_approx = [last, find_intersection(last, v1, anchor, -v2), anchor]'), (457, '        else:'), (458, '            quadratic_approx = get_quadratic_approximation_of_cubic('), (459, '                last, handle1, handle2, anchor'), (460, '            )'), (461, '        if self.consider_points_equal(quadratic_approx[1], last):'), (463, '            quadratic_approx[1] = midpoint(*quadratic_approx[1:3])'), (464, '        self.append_points(quadratic_approx[1:])')]}",260,260
requirements.txt,requirements.txt,96b0ec909421e6d956c37072a8ecec349dacc297,40436d63709598cb1d7d8b3af644eb9cf54e50dc,Use fontTools.cu2qu.cu2qu import curve_to_quadratic,"{'added': [(4, 'fontTools')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,d39fea0d4dffd793ce48cc79fd77206f361fd0fb,96b0ec909421e6d956c37072a8ecec349dacc297,A few small fixes,"{'added': [(66, '    if(abs(cos_angle) > COS_THRESHOLD || int(joint_type) == NO_JOINT){'), (108, '    if(v_joint_product[2].w < -0.5) buff2 *= 2 * (v_joint_product[2].w + 1.0);'), (116, '    // Choose the ""outward"" normal direction'), (117, '    normal0 *= sign(normal0.z);'), (118, '    normal2 *= sign(normal2.z);')], 'deleted': [(66, '    if(cos_angle > COS_THRESHOLD || int(joint_type) == NO_JOINT){'), (108, '    if(v_joint_product[2].w < -0.5) buff2 *= 2 * (v_joint_product[0].w + 1.0);'), (116, '    // Make sure normals point in the same direction'), (117, '    if(dot(normal0, normal2) < 0) buff2 *= -1;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,8b3aa8f5c6c1af482278d3519b5df722bb251a2d,d39fea0d4dffd793ce48cc79fd77206f361fd0fb,Account for edge cases on curve_to_quadratic,"{'added': [(434, '        self.start_new_path(anchor1)'), (435, '        self.add_cubic_bezier_curve_to(handle1, handle2, anchor2)'), (449, '        # Note, this assumes all points are on the xy-plane'), (452, '            0.1 * get_norm(anchor - last)'), (454, '        if approx_2d is not None and len(approx_2d) % 2 == 1:'), (455, '            approx_3d = np.zeros((len(approx_2d), 3))'), (456, '            approx_3d[:, :2] = approx_2d'), (457, '        else:'), (458, '            approx_3d = get_quadratic_approximation_of_cubic('), (459, '                last, handle1, handle2, anchor'), (460, '            )'), (461, '')], 'deleted': [(434, '        self.add_subpath(get_quadratic_approximation_of_cubic('), (435, '            anchor1, handle1, handle2, anchor2'), (436, '        ))'), (450, '        # Not, this assumes all points are on the xy-plane'), (453, '            1.0  # High tolerance for error'), (455, '        approx_3d = np.zeros((len(approx_2d), 3))'), (456, '        approx_3d[:, :2] = approx_2d')]}",262,262
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e20efda3dff67e9ca7c8f92b73b691275b2375f8,8b3aa8f5c6c1af482278d3519b5df722bb251a2d,Revert away from using curve_to_quadratic,"{'added': [(449, '        v1 = handle1 - last'), (450, '        v2 = anchor - handle2'), (451, '        angle = angle_between_vectors(v1, v2)'), (452, '        if self.use_simple_quadratic_approx and angle < 45 * DEGREES:'), (453, '            quad_approx = [last, find_intersection(last, v1, anchor, -v2), anchor]'), (455, '            quad_approx = get_quadratic_approximation_of_cubic('), (458, '        if self.consider_points_equal(quad_approx[1], last):'), (460, '            quad_approx[1] = midpoint(*quad_approx[1:3])'), (461, '        self.append_points(quad_approx[1:])')], 'deleted': [(4, 'from fontTools.cu2qu.cu2qu import curve_to_quadratic'), (450, '        approx_2d = curve_to_quadratic('), (451, '            [last[:2], handle1[:2], handle2[:2], anchor[:2]],'), (452, '            0.1 * get_norm(anchor - last)'), (453, '        )'), (454, '        if approx_2d is not None and len(approx_2d) % 2 == 1:'), (455, '            approx_3d = np.zeros((len(approx_2d), 3))'), (456, '            approx_3d[:, :2] = approx_2d'), (458, '            approx_3d = get_quadratic_approximation_of_cubic('), (461, ''), (462, '        if self.consider_points_equal(approx_3d[1], last):'), (464, '            approx_3d[1] = midpoint(*approx_3d[1:3])'), (465, '        self.append_points(approx_3d[1:])')]}",262,262
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,13c41be17f97539ed029f91a8b89477119de0ffe,e20efda3dff67e9ca7c8f92b73b691275b2375f8,Small clean up,"{'added': [(15, 'float dist_to_curve(){'), (16, '    // Returns distance from uv_coords to the curve v = u^2'), (17, '    float x0 = uv_coords.x;'), (18, '    float y0 = uv_coords.y;'), (19, ''), (22, '    if(bool(is_linear)) return abs(y0);'), (29, '        return abs((y0 - x0 * x0) / sqrt(1 + 4 * x0 * x0));'), (56, '    // sdf for the region around the curve we wish to color.'), (57, '    float signed_dist = dist_to_curve() - 0.5 * uv_stroke_width;')], 'deleted': [(15, '// Distance from (x0, y0) to the curve y = x^2'), (16, 'float dist_to_curve(float x0, float y0){'), (19, '    if(bool(is_linear)) return y0;'), (26, '        return (y0 - x0 * x0) / sqrt(1 + 4 * x0 * x0);'), (53, '    // Compute sdf for the region around the curve we wish to color.'), (54, '    float dist = dist_to_curve(uv_coords.x, uv_coords.y);'), (55, '    float signed_dist = abs(dist) - 0.5 * uv_stroke_width;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,13c41be17f97539ed029f91a8b89477119de0ffe,Increase threshold for bevel tweaking,"{'added': [(107, '    if(v_joint_product[0].w < -0.75) buff0 *= 4 * (v_joint_product[0].w + 1.0);'), (108, '    if(v_joint_product[2].w < -0.75) buff2 *= 4 * (v_joint_product[2].w + 1.0);')], 'deleted': [(107, '    if(v_joint_product[0].w < -0.5) buff0 *= 2 * (v_joint_product[0].w + 1.0);'), (108, '    if(v_joint_product[2].w < -0.5) buff2 *= 2 * (v_joint_product[2].w + 1.0);')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(42, '        self.perspective_transform = np.identity(4)'), (86, '    def get_perspective_transform(self):'), (87, '        self.perspective_transform[:3, :3] = self.get_inverse_camera_rotation_matrix()'), (88, '        self.perspective_transform[:3, 3] = -self.get_center()'), (89, '        return self.perspective_transform'), (90, ''), (497, '        perspective_transform = frame.get_perspective_transform()'), (499, '        cam_pos = self.frame.get_implied_camera_location()'), (504, '            ""perspective"": tuple(perspective_transform.T.flatten()),')], 'deleted': [(491, '        rotation = frame.get_inverse_camera_rotation_matrix()'), (492, '        offset = frame.get_center()'), (494, '        cam_pos = self.frame.get_implied_camera_location()  # TODO'), (499, '            ""camera_offset"": tuple(offset),'), (500, '            ""camera_rotation"": tuple(np.array(rotation).T.flatten()),')]}",95,95
manimlib/shaders/image/vert.glsl,manimlib/shaders/image/vert.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(18, '    gl_Position = get_gl_Position(point);')], 'deleted': [(18, '    gl_Position = get_gl_Position(position_point_into_frame(point));')]}",,
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(2, 'uniform mat4 perspective;'), (10, '    vec2 shape = DEFAULT_FRAME_SHAPE;'), (11, '    if(!bool(is_fixed_in_frame)){'), (12, '        result = perspective * result;'), (13, '        shape = frame_shape;'), (14, '    }'), (15, '')], 'deleted': [(2, 'uniform vec3 camera_offset;'), (3, 'uniform mat3 camera_rotation;'), (10, '    vec2 shape;'), (11, '    if(bool(is_fixed_in_frame)) shape = DEFAULT_FRAME_SHAPE;'), (12, '    else                        shape = frame_shape;'), (13, ''), (23, ''), (24, ''), (25, 'vec3 rotate_point_into_frame(vec3 point){'), (26, '    if(bool(is_fixed_in_frame)){'), (27, '        return point;'), (28, '    }'), (29, '    return camera_rotation * point;'), (30, '}'), (31, ''), (32, ''), (33, 'vec3 position_point_into_frame(vec3 point){'), (34, '    if(bool(is_fixed_in_frame)){'), (35, '        return point;'), (36, '    }'), (37, '    return rotate_point_into_frame(point - camera_offset);'), (38, '}')]}",,
manimlib/shaders/inserts/get_rotated_surface_unit_normal_vector.glsl,,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [], 'deleted': [(1, '// Assumes the following uniforms exist in the surrounding context:'), (2, '// uniform vec3 camera_offset;'), (3, '// uniform mat3 camera_rotation;'), (4, ''), (5, 'vec3 get_rotated_surface_unit_normal_vector(vec3 point, vec3 du_point, vec3 dv_point){'), (6, '    vec3 cp = cross('), (7, '        (du_point - point),'), (8, '        (dv_point - point)'), (9, '    );'), (10, '    if(length(cp) == 0){'), (11, '        // Instead choose a normal to just dv_point - point in the direction of point'), (12, '        vec3 v2 = dv_point - point;'), (13, '        cp = cross(cross(v2, point), v2);'), (14, '    }'), (15, '    return normalize(rotate_point_into_frame(cp));'), (16, '}')]}",,
manimlib/shaders/mandelbrot_fractal/vert.glsl,manimlib/shaders/mandelbrot_fractal/vert.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(13, '    gl_Position = get_gl_Position(point);')], 'deleted': [(13, '    gl_Position = get_gl_Position(position_point_into_frame(point));')]}",,
manimlib/shaders/newton_fractal/vert.glsl,manimlib/shaders/newton_fractal/vert.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(13, '    gl_Position = get_gl_Position(point);')], 'deleted': [(13, '    gl_Position = get_gl_Position(position_point_into_frame(point));')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(33, '    color = finalize_color(v_color[index], point, unit_normal);'), (34, '    gl_Position = get_gl_Position(point);')], 'deleted': [(33, '    color = finalize_color('), (34, '        v_color[index],'), (35, '        point,'), (36, '        unit_normal'), (37, '    );'), (38, '    gl_Position = get_gl_Position(position_point_into_frame(point));')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(196, '        gl_Position = get_gl_Position(corners[i]);')], 'deleted': [(196, '        gl_Position = get_gl_Position(position_point_into_frame(corners[i]));')]}",,
manimlib/shaders/simple_vert.glsl,manimlib/shaders/simple_vert.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(8, '    gl_Position = get_gl_Position(point);')], 'deleted': [(8, '    gl_Position = get_gl_Position(position_point_into_frame(point));')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(17, '    gl_Position = get_gl_Position(point);')], 'deleted': [(17, '    gl_Position = get_gl_Position(position_point_into_frame(point));')]}",,
manimlib/shaders/textured_surface/vert.glsl,manimlib/shaders/textured_surface/vert.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(22, '    gl_Position = get_gl_Position(point);')], 'deleted': [(22, '    gl_Position = get_gl_Position(position_point_into_frame(point));')]}",,
manimlib/shaders/true_dot/geom.glsl,manimlib/shaders/true_dot/geom.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(8, 'uniform vec3 camera_position;'), (31, '    vec3 to_cam = camera_position - v_point[0];'), (32, '')], 'deleted': []}",,
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,b667d89e9be220668e921513e240619de82b3449,fa525b494c9d9f0cfc4c6be1959ad5bfffd786e4,Simplify get_gl_Position,"{'added': [(12, '    v_point = point;')], 'deleted': [(11, '#INSERT get_gl_Position.glsl'), (12, ''), (14, '    v_point = position_point_into_frame(point);')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,6c2544098bb609ff98f88ee0abf078db42ce6c79,b667d89e9be220668e921513e240619de82b3449,Store pixel_size instead of pixel_shape,"{'added': [(500, '        frame_shape = frame.get_shape()'), (503, '            ""frame_shape"": frame_shape,'), (504, '            ""pixel_size"": frame_shape[0] / self.get_pixel_shape()[0],')], 'deleted': [(502, '            ""frame_shape"": frame.get_shape(),'), (503, '            ""pixel_shape"": self.get_pixel_shape(),')]}",95,95
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,6c2544098bb609ff98f88ee0abf078db42ce6c79,b667d89e9be220668e921513e240619de82b3449,Store pixel_size instead of pixel_shape,"{'added': [(7, 'uniform float pixel_size;'), (66, '    float aaw = anti_alias_width * pixel_size;')], 'deleted': [(7, 'uniform vec2 pixel_shape;'), (66, '    float aaw = anti_alias_width * frame_shape.y / pixel_shape.y;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,6c2544098bb609ff98f88ee0abf078db42ce6c79,b667d89e9be220668e921513e240619de82b3449,Store pixel_size instead of pixel_shape,"{'added': [(8, 'uniform float pixel_size;'), (184, '    float scaled_aaw = anti_alias_width * pixel_size;')], 'deleted': [(8, 'uniform vec2 pixel_shape;'), (184, '    float scaled_aaw = anti_alias_width * (frame_shape.y / pixel_shape.y);')]}",,
manimlib/shaders/true_dot/geom.glsl,manimlib/shaders/true_dot/geom.glsl,6c2544098bb609ff98f88ee0abf078db42ce6c79,b667d89e9be220668e921513e240619de82b3449,Store pixel_size instead of pixel_shape,"{'added': [(7, 'uniform float pixel_size;'), (27, '    scaled_aaw = anti_alias_width * pixel_size;')], 'deleted': [(7, 'uniform vec2 pixel_shape;'), (27, '    scaled_aaw = (frame_shape.y / pixel_shape.y);')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,cd3c5031fa7978e72868ea2555375dba1339c6b5,6c2544098bb609ff98f88ee0abf078db42ce6c79,Fix get_perspective_transform to shift before rotation,"{'added': [(87, '        """"""'), (88, '        Returns a 4x4 for the affine transformation mapping a point'), (89, ""        into the camera's internal coordinate system""), (90, '        """"""'), (91, '        result = self.perspective_transform'), (92, '        result[:] = np.identity(4)'), (93, '        result[:3, 3] = -self.get_center()'), (94, '        rotation = np.identity(4)'), (95, '        rotation[:3, :3] = self.get_inverse_camera_rotation_matrix()'), (96, '        result[:] = np.dot(rotation, result)'), (97, '        return result'), (226, '        self.perspective_uniforms = dict()'), (511, '        self.perspective_uniforms.update('), (512, '            frame_shape=frame_shape,'), (513, '            pixel_size=frame_shape[0] / self.get_pixel_shape()[0],'), (514, '            perspective=tuple(perspective_transform.T.flatten()),'), (515, '            camera_position=tuple(cam_pos),'), (516, '            light_position=tuple(light_pos),'), (517, '            focal_distance=frame.get_focal_distance(),'), (518, '        )')], 'deleted': [(87, '        self.perspective_transform[:3, :3] = self.get_inverse_camera_rotation_matrix()'), (88, '        self.perspective_transform[:3, 3] = -self.get_center()'), (89, '        return self.perspective_transform'), (502, '        self.perspective_uniforms = {'), (503, '            ""frame_shape"": frame_shape,'), (504, '            ""pixel_size"": frame_shape[0] / self.get_pixel_shape()[0],'), (505, '            ""perspective"": tuple(perspective_transform.T.flatten()),'), (506, '            ""camera_position"": tuple(cam_pos),'), (507, '            ""light_position"": tuple(light_pos),'), (508, '            ""focal_distance"": frame.get_focal_distance(),'), (509, '        }')]}",95,95
manimlib/camera/camera.py,manimlib/camera/camera.py,8e2cf04b715512915617746102d4a64126f92b73,cd3c5031fa7978e72868ea2555375dba1339c6b5,Simplify true_dot shaders,"{'added': [(251, '        self.ctx.enable(moderngl.PROGRAM_POINT_SIZE)'), (252, '')], 'deleted': []}",95,95
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,8e2cf04b715512915617746102d4a64126f92b73,cd3c5031fa7978e72868ea2555375dba1339c6b5,Simplify true_dot shaders,"{'added': [(40, '        anti_alias_width: float = 2.0,')], 'deleted': [(40, '        anti_alias_width: float = 1.0,')]}",21,21
manimlib/shaders/true_dot/frag.glsl,manimlib/shaders/true_dot/frag.glsl,8e2cf04b715512915617746102d4a64126f92b73,cd3c5031fa7978e72868ea2555375dba1339c6b5,Simplify true_dot shaders,"{'added': [(4, 'uniform mat4 perspective;'), (8, 'in vec3 v_point;'), (12, '// This include a delaration of uniform vec3 shading'), (16, '    vec2 vect = 2.0 * gl_PointCoord.xy - vec2(1.0);'), (17, '    float r = length(vect);'), (18, '    if(r > 1.0 + scaled_aaw) discard;'), (19, ''), (21, ''), (23, '        frag_color.a *= pow(1 - r, glow_factor);'), (24, '    }'), (25, ''), (26, '    if(shading != vec3(0.0)){'), (27, '        vec3 normal = vec3(vect, sqrt(1 - r * r));'), (28, '        normal = (perspective * vec4(normal, 0.0)).xyz;'), (29, '        frag_color = finalize_color(frag_color, v_point, normal);'), (32, '    frag_color.a *= smoothstep(1.0, 1.0 - scaled_aaw, r);')], 'deleted': [(3, 'uniform float anti_alias_width;'), (7, 'in float radius;'), (8, 'in vec2 center;'), (9, 'in vec2 point;'), (14, '// This include a delaration of'), (15, '// uniform vec3 shading'), (16, '// uniform vec3 camera_position'), (17, '// uniform vec3 light_position'), (21, '    vec2 diff = point - center;'), (22, '    float dist = length(diff);'), (23, '    float signed_dist = dist - radius;'), (24, '    if (signed_dist > 0.5 * scaled_aaw){'), (25, '        discard;'), (26, '    }'), (28, '    if(shading != vec3(0.0)){'), (29, '        vec3 normal = vec3(diff / radius, sqrt(1 - (dist * dist) / (radius * radius)));'), (30, '        frag_color = finalize_color('), (31, '            frag_color,'), (32, '            vec3(point.xy, 0.0),'), (33, '            normal'), (34, '        );'), (35, '    }'), (37, '        frag_color.a *= pow(1 - dist / radius, glow_factor);'), (40, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist / scaled_aaw);')]}",,
manimlib/shaders/true_dot/geom.glsl,,8e2cf04b715512915617746102d4a64126f92b73,cd3c5031fa7978e72868ea2555375dba1339c6b5,Simplify true_dot shaders,"{'added': [], 'deleted': [(1, '#version 330'), (2, ''), (3, 'layout (points) in;'), (4, 'layout (triangle_strip, max_vertices = 4) out;'), (5, ''), (6, 'uniform float anti_alias_width;'), (7, 'uniform float pixel_size;'), (8, 'uniform vec3 camera_position;'), (9, ''), (10, 'in vec3 v_point[1];'), (11, 'in float v_radius[1];'), (12, 'in vec4 v_color[1];'), (13, ''), (14, 'out vec4 color;'), (15, 'out float radius;'), (16, 'out vec2 center;'), (17, 'out vec2 point;'), (18, 'out float scaled_aaw;'), (19, ''), (20, '#INSERT get_gl_Position.glsl'), (21, ''), (22, 'void main() {'), (23, '    color = v_color[0];'), (24, '    radius = v_radius[0];'), (25, '    center = v_point[0].xy;'), (26, ''), (27, '    scaled_aaw = anti_alias_width * pixel_size;'), (28, '    radius = v_radius[0] / max(1.0 - v_point[0].z / focal_distance / frame_shape.y, 0.0);'), (29, '    float rpa = radius + scaled_aaw;'), (30, ''), (31, '    vec3 to_cam = camera_position - v_point[0];'), (32, ''), (33, '    for(int i = 0; i < 4; i++){'), (34, '        // To account for perspective'), (35, ''), (36, '        int x_index = 2 * (i % 2) - 1;'), (37, '        int y_index = 2 * (i / 2) - 1;'), (38, '        vec3 corner = v_point[0] + vec3(x_index * rpa, y_index * rpa, 0.0);'), (39, ''), (40, '        gl_Position = get_gl_Position(corner);'), (41, '        point = corner.xy;'), (42, '        EmitVertex();'), (43, '    }'), (44, '    EndPrimitive();'), (45, '}')]}",,
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,8e2cf04b715512915617746102d4a64126f92b73,cd3c5031fa7978e72868ea2555375dba1339c6b5,Simplify true_dot shaders,"{'added': [(3, 'uniform float pixel_size;'), (4, 'uniform float anti_alias_width;'), (5, ''), (10, 'out vec4 color;'), (11, 'out float scaled_aaw;'), (13, 'out vec3 light_pos;'), (14, ''), (15, '#INSERT get_gl_Position.glsl'), (19, '    color = rgba;'), (20, '    scaled_aaw = (anti_alias_width * pixel_size) / radius;'), (21, ''), (22, '    gl_Position = get_gl_Position(point);'), (23, '    float z = -10 * gl_Position.z;'), (24, '    float scaled_radius = radius * 1.0 / (1.0 - z);'), (25, '    gl_PointSize = (scaled_radius / pixel_size) + anti_alias_width;')], 'deleted': [(8, 'out float v_radius;'), (9, 'out vec4 v_color;'), (13, '    v_radius = radius;'), (14, '    v_color = rgba;')]}",,
manimlib/utils/bezier.py,manimlib/utils/bezier.py,3820e098c05bbc02f9eb6a745b32d3329a10b6d1,8e2cf04b715512915617746102d4a64126f92b73,Tweak to type hints,"{'added': [(25, '    points: Sequence[float | FloatArray] | VectNArray'), (26, ') -> Callable[[float], float | FloatArray]:'), (32, '    def result(t: float) -> float | FloatArray:')], 'deleted': [(25, '    points: Sequence[Scalable] | VectNArray'), (26, ') -> Callable[[float], Scalable]:'), (32, '    def result(t: float) -> Scalable:')]}",40,40
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,22d2819ecf4ef7f88e6d871f4a4c88a30c27cbde,781e0a980564a8ad04f01b8a66cd306cb6b7844e,Improvements to make_smooth,"{'added': [(18, 'from manimlib.utils.bezier import approx_smooth_quadratic_bezier_handles'), (19, 'from manimlib.utils.bezier import smooth_quadratic_path'), (591, '    def is_smooth(self) -> bool:'), (592, '        dots = self.get_joint_products()[::2, 3]'), (593, '        return bool((dots > 1 - 1e-3).all())'), (594, ''), (597, '        subpaths = self.get_subpaths()'), (598, '        self.clear_points()'), (599, '        for subpath in subpaths:'), (600, '            anchors = subpath[::2]'), (601, '            if mode == ""jagged"":'), (602, '                new_subpath = np.array(subpath)'), (603, '                new_subpath[1::2] = 0.5 * (anchors[:-1] + anchors[1:])'), (604, '            elif mode == ""approx_smooth"":'), (606, '                new_subpath[1::2] = approx_smooth_quadratic_bezier_handles(anchors)'), (607, '            elif mode == ""true_smooth"":'), (608, '                new_subpath = smooth_quadratic_path(anchors)'), (609, '            self.add_subpath(new_subpath)'), (612, '    def make_smooth(self, recurse=True):'), (614, '        Edits the path so as to pass smoothly through all'), (615, '        the current anchor points.'), (616, ''), (617, '        This may increase the total number of points.'), (619, '        for submob in self.get_family(recurse):'), (620, '            if submob.is_smooth():'), (621, '                continue'), (622, '            submob.change_anchor_mode(""true_smooth"")'), (625, '    def make_approximately_smooth(self, recurse=True):'), (633, '        for submob in self.get_family(recurse):'), (634, '            if submob.is_smooth():'), (635, '                continue'), (636, '            submob.change_anchor_mode(""approx_smooth"")'), (639, '    def make_jagged(self, recurse=True):'), (640, '        for submob in self.get_family(recurse):'), (641, '            submob.change_anchor_mode(""jagged"")'), (690, '        if len(points) == 0:'), (691, '            return []'), (1050, '    def get_joint_products(self, refresh: bool = False):'), (1211, '                submob.get_joint_products()')], 'deleted': [(18, 'from manimlib.utils.bezier import get_smooth_cubic_bezier_handle_points'), (19, 'from manimlib.utils.bezier import get_smooth_quadratic_bezier_handle_points'), (593, '        for submob in self.family_members_with_points():'), (594, '            subpaths = submob.get_subpaths()'), (595, '            new_points = []'), (596, '            for subpath in subpaths:'), (597, '                anchors = subpath[::2]'), (599, '                if mode == ""approx_smooth"":'), (600, '                    new_subpath[1::2] = get_smooth_quadratic_bezier_handle_points(anchors)'), (601, '                elif mode == ""true_smooth"":'), (602, '                    h1, h2 = get_smooth_cubic_bezier_handle_points(anchors)'), (603, '                    # The format here is that each successive group of 5 points'), (604, '                    # represents two quadratic bezier curves. We assume the end'), (605, '                    # of one is the start of the next, so eliminate elements 5, 10, 15, etc.'), (606, '                    quads = get_quadratic_approximation_of_cubic(anchors[:-1], h1, h2, anchors[1:])'), (607, '                    is_start = (np.arange(len(quads)) % 5 == 0)'), (608, '                    new_subpath = np.array([quads[0], *quads[~is_start]])'), (609, '                elif mode == ""jagged"":'), (610, '                    new_subpath[1::2] = 0.5 * (anchors[:-1] + anchors[1:])'), (611, '                if new_points:'), (612, '                    # Close previous path'), (613, '                    new_points.append(new_points[-1][-1])'), (614, '                new_points.append(new_subpath)'), (615, '            submob.set_points(np.vstack(new_points))'), (616, '            submob.refresh_triangulation()'), (619, '    def make_smooth(self):'), (621, '        This will double the number of points in the mobject,'), (622, '        so should not be called repeatedly.  It also means'), (623, '        transforming between states before and after calling'), (624, '        this might have strange artifacts'), (626, '        self.change_anchor_mode(""true_smooth"")'), (629, '    def make_approximately_smooth(self):'), (637, '        self.change_anchor_mode(""approx_smooth"")'), (640, '    def make_jagged(self):'), (641, '        self.change_anchor_mode(""jagged"")'), (1048, '    def recompute_joint_products(self, refresh: bool = False):'), (1209, '                submob.recompute_joint_products()')]}",267,267
manimlib/utils/bezier.py,manimlib/utils/bezier.py,22d2819ecf4ef7f88e6d871f4a4c88a30c27cbde,781e0a980564a8ad04f01b8a66cd306cb6b7844e,Improvements to make_smooth,"{'added': [(5, 'from fontTools.cu2qu.cu2qu import curve_to_quadratic'), (10, 'from manimlib.utils.space_ops import cross'), (13, 'from manimlib.utils.space_ops import get_norm'), (14, 'from manimlib.utils.space_ops import z_to_vector'), (20, '    from manimlib.typing import VectN, FloatArray, VectNArray, Vect3Array'), (174, 'def approx_smooth_quadratic_bezier_handles('), (208, 'def smooth_quadratic_path(anchors: Vect3Array) -> Vect3Array:'), (209, '    """"""'), (210, '    Returns a path defining a smooth quadratic bezier spline'), (211, '    through anchors.'), (212, '    """"""'), (213, '    if len(anchors) < 2:'), (214, '        return anchors'), (215, '    elif len(anchors) == 2:'), (216, '        return np.array([anchors[0], anchors.mean(1), anchors[2]])'), (217, ''), (218, '    is_flat = (anchors[:, 2] == 0).all()'), (219, '    if not is_flat:'), (220, '        normal = cross(anchors[2] - anchors[1], anchors[1] - anchors[0])'), (221, '        rot = z_to_vector(normal)'), (222, '        anchors = np.dot(anchors, rot)'), (223, '        shift = anchors[0, 2]'), (224, '        anchors[:, 2] -= shift'), (225, '    h1s, h2s = get_smooth_cubic_bezier_handle_points(anchors)'), (226, '    quads = [anchors[0, :2]]'), (227, '    for cub_bs in zip(anchors[:-1], h1s, h2s, anchors[1:]):'), (228, '        # Try to use fontTools curve_to_quadratic'), (229, '        new_quads = curve_to_quadratic('), (230, '            [b[:2] for b in cub_bs],'), (231, '            max_err=0.1 * get_norm(cub_bs[3] - cub_bs[0])'), (232, '        )'), (233, '        # Otherwise fall back on home baked solution'), (234, '        if new_quads is None or len(new_quads) % 2 == 0:'), (235, '            new_quads = get_quadratic_approximation_of_cubic(*cub_bs)[:, :2]'), (236, '        quads.extend(new_quads[1:])'), (237, '    new_path = np.zeros((len(quads), 3))'), (238, '    new_path[:, :2] = quads'), (239, '    if not is_flat:'), (240, '        new_path[:, 2] += shift'), (241, '        new_path = np.dot(new_path, rot.T)'), (242, '    return new_path'), (243, ''), (244, '')], 'deleted': [(16, '    from manimlib.typing import VectN, FloatArray, VectNArray'), (170, 'def get_smooth_quadratic_bezier_handle_points(')]}",49,49
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,981fe009e53d920ae463b4e639d1be4e47a1941a,22d2819ecf4ef7f88e6d871f4a4c88a30c27cbde,Fix radius on dots,"{'added': [(25, '    gl_PointSize = 2 * ((scaled_radius / pixel_size) + anti_alias_width);')], 'deleted': [(25, '    gl_PointSize = (scaled_radius / pixel_size) + anti_alias_width;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,148898f9836e5d1ce4484259636a1ffd2856b909,981fe009e53d920ae463b4e639d1be4e47a1941a,Fix insert_n_curves,"{'added': [(878, '        norms = ['), (881, '        ]'), (883, '        ipc = np.zeros(len(bezier_tuples), dtype=int)'), (884, '        for _ in range(n):'), (885, '            index = np.argmax(norms)'), (886, '            ipc[index] += 1'), (887, '            norms[index] *= ipc[index] / (ipc[index] + 1)')], 'deleted': [(878, '        norms = np.array(['), (881, '        ])'), (882, '        total_norm = sum(norms)'), (884, '        if total_norm < 1e-6:'), (885, '            ipc = [n] + [0] * (len(bezier_tuples) - 1)'), (886, '        else:'), (887, '            ipc = np.round(n * norms / sum(norms)).astype(int)'), (888, ''), (889, '        diff = n - sum(ipc)'), (890, '        for x in range(diff):'), (891, '            ipc[np.argmin(ipc)] += 1'), (892, '        for x in range(-diff):'), (893, '            ipc[np.argmax(ipc)] -= 1')]}",265,265
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,e6abff4299365daf4b3b48d5762106acf14f014c,148898f9836e5d1ce4484259636a1ffd2856b909,Speed up bind_graph_to_func,"{'added': [(57, '        num_sampled_graph_points_per_tick: int = 5,'), (244, '        x_values = np.array([self.x_axis.p2n(p) for p in graph.get_points()])'), (246, '        def get_graph_points():'), (247, '            xs = x_values'), (252, '                xs[:] = sorted([*x_values, *added_xs])[:len(x_values)]'), (253, '            return self.c2p(xs, func(xs))'), (255, '        graph.add_updater(lambda g: g.set_points_as_corners('), (256, '            get_graph_points()'), (257, '        ))')], 'deleted': [(57, '        num_sampled_graph_points_per_tick: int = 20,'), (244, '        x_values = [self.x_axis.p2n(p) for p in graph.get_points()]'), (246, '        def get_x_values():'), (251, '                return sorted([*x_values, *added_xs])[:len(x_values)]'), (252, '            else:'), (253, '                return x_values'), (255, '        graph.add_updater(lambda g: g.set_points_as_corners(['), (256, '            self.c2p(x, func(x))'), (257, '            for x in get_x_values()'), (258, '        ]))')]}",105,105
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,1367e31439c22a758845a7eeb44382ca7502f309,e6abff4299365daf4b3b48d5762106acf14f014c,Fix bug with polygon start angle = 0,"{'added': [(984, '        if start_angle is None:'), (985, '            start_angle = (n % 2) * 90 * DEGREES')], 'deleted': [(984, '        start_angle = start_angle or (n % 2) * 90 * DEGREES')]}",140,140
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,763967281f5ed5ff05b1f2ae915fc43e69a6c90f,1367e31439c22a758845a7eeb44382ca7502f309,Don't use resize_with_interpolation by default,"{'added': [(1265, '                if isinstance(color, list):'), (1266, '                    rgbs = np.array(list(map(color_to_rgb, color)))'), (1267, '                    resize_with_interpolation(rgbs, len(data))'), (1268, '                else:'), (1269, '                    rgbs = color_to_rgb(color)'), (1270, '                data[name][:, :3] = rgbs'), (1272, '                if isinstance(opacity, list):'), (1273, '                    opacity = resize_with_interpolation(np.array(opacity), len(data))'), (1274, '                data[name][:, 3] = opacity')], 'deleted': [(1265, '                rgbs = np.array([color_to_rgb(c) for c in listify(color)])'), (1266, '                data[name][:, :3] = resize_with_interpolation(rgbs, len(data[name]))'), (1268, '                opacities = np.array(listify(opacity))'), (1269, '                data[name][:, 3] = resize_with_interpolation(opacities, len(data[name]))')]}",502,502
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,93f3c6535f8d55d69dd94e163e3556589794e8e5,763967281f5ed5ff05b1f2ae915fc43e69a6c90f,Have DecimalMobject save pre-generated characters,"{'added': [(49, '        self.char_to_mob_map = dict()'), (66, '        self.add(*map(self.char_to_mob, num_string))'), (70, '            dots = self.char_to_mob(""..."")'), (112, '    def char_to_mob(self, char: str) -> Tex | Text:'), (113, '        if char not in self.char_to_mob_map:'), (114, '            self.char_to_mob_map[char] = Text(char, **self.text_config)'), (115, '        result = self.char_to_mob_map[char].copy()'), (116, '        result.scale(self.get_font_size() / result.font_size)'), (117, '        return result'), (118, '')], 'deleted': [(65, '        self.add(*('), (66, '            Text(ns, **self.text_config)'), (67, '            for ns in num_string'), (68, '        ))'), (72, '            dots = Text(""..."", **self.text_config)')]}",32,32
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,dbeef4260096b175a7131081edb46ce4b31fb356,93f3c6535f8d55d69dd94e163e3556589794e8e5,"In VMobject.set_stroke, Don't use resize_with_interpolation for non-list args","{'added': [(202, '                if not isinstance(width, float | int):'), (203, '                    width = resize_with_interpolation(np.array(width), len(data)).flatten()'), (204, ""                data['stroke_width'][:, 0] = width"")], 'deleted': [(202, '                width_arr = np.array(listify(width)).flatten()'), (203, '                if len(width_arr) == 0:'), (204, '                    continue'), (205, ""                data['stroke_width'][:, 0] = resize_with_interpolation(width_arr, len(data))"")]}",265,265
manimlib/utils/iterables.py,manimlib/utils/iterables.py,1eae7c06ba15722306886dab4d9b21300bc8e700,dbeef4260096b175a7131081edb46ce4b31fb356,Add conditions for resize_with_interpolation,"{'added': [(104, '    if len(nparray) == 1 or array_is_constant(nparray):'), (105, '        return nparray[:1].repeat(length, axis=0)'), (138, '')], 'deleted': []}",42,42
manimlib/shaders/inserts/get_xyz_to_uv.glsl,manimlib/shaders/inserts/get_xyz_to_uv.glsl,c873d073e29704c90efef1d6952475c5ccd83e3c,1eae7c06ba15722306886dab4d9b21300bc8e700,Factor out rotation matrix,"{'added': [(41, 'mat4 rotation(vec3 axis, float cos_angle){'), (42, '    float c = cos_angle;'), (43, '    float s = sqrt(1 - c * c);  // Sine of the angle'), (49, '    return mat4('), (55, '}'), (56, ''), (57, ''), (58, 'mat4 map_onto_x_axis(vec3 src0, vec3 src1){'), (59, '    mat4 shift = mat4(1.0);'), (60, '    shift[3].xyz = -src0;'), (62, '    // Find rotation matrix between unit vectors in each direction'), (63, '    vec3 vect = normalize(src1 - src0);'), (64, '    // No rotation needed'), (65, '    if(vect.x > 1 - 1e-6) return shift;'), (66, ''), (67, '    // Equivalent to cross(vect, vec3(1, 0, 0))'), (68, '    vec3 axis = vec3(0.0, vect.z, -vect.y);'), (69, '    mat4 rotate = rotation(normalize(axis), vect.x);')], 'deleted': [(41, 'mat4 map_onto_x_axis(vec3 src0, vec3 src1){'), (42, '    mat4 shift = mat4(1.0);'), (43, '    shift[3].xyz = -src0;'), (44, ''), (45, '    // Find rotation matrix between unit vectors in each direction'), (46, '    vec3 vect = normalize(src1 - src0);'), (47, '    // This is the same as cross(vect, vec3(1, 0, 0))'), (48, '    vec3 axis = vec3(0.0, vect.z, -vect.y);'), (49, ''), (50, '    float s = length(axis); // Sine of the angle between them'), (51, '    float c = vect.x;       // Cosine of the angle between them'), (52, ''), (53, '    // No rotation needed'), (54, '    if(s < 1e-8) return shift;'), (55, ''), (56, '    axis = axis / s;   // Axis of rotation'), (62, '    // Rotation matrix about axis, with a given angle corresponding to s and c.'), (63, '    mat4 rotate = mat4(')]}",,
manimlib/shaders/inserts/NOTE.md,manimlib/shaders/inserts/NOTE.md,6839de9a310194ee18e3388f7d6c519744d3d7e7,c873d073e29704c90efef1d6952475c5ccd83e3c,Remove rotate.glsl,"{'added': [(7, 'The functions in this file may include declarations of uniforms, so one should not re-declare those in the surrounding context.')], 'deleted': [(7, 'The functions in this file often include reference to uniforms which are assumed to be part of the surrounding context into which they are inserted.')]}",,
manimlib/shaders/inserts/rotate.glsl,,6839de9a310194ee18e3388f7d6c519744d3d7e7,c873d073e29704c90efef1d6952475c5ccd83e3c,Remove rotate.glsl,"{'added': [], 'deleted': [(1, 'mat3 rotationMatrix(vec3 axis, float angle) {'), (2, '    axis = normalize(axis);'), (3, '    float s = sin(angle);'), (4, '    float c = cos(angle);'), (5, '    float oc = 1.0 - c;'), (6, '    float ax = axis.x;'), (7, '    float ay = axis.y;'), (8, '    float az = axis.z;'), (9, ''), (10, '    return mat3('), (11, '        oc * ax * ax + c,      oc * ax * ay - az * s, oc * az * ax + ay * s,'), (12, '        oc * ax * ay + az * s, oc * ay * ay + c,      oc * ay * az - ax * s,'), (13, '        oc * az * ax - ay * s, oc * ay * az + ax * s, oc * az * az + c'), (14, '    );'), (15, '}'), (16, ''), (17, 'vec3 rotate(vec3 vect, float angle, vec3 axis){'), (18, '    return rotationMatrix(axis, angle) * vect;'), (19, '}')]}",,
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,1c2ec03f7d3e778986ca28557569744e742fb585,6839de9a310194ee18e3388f7d6c519744d3d7e7,Replace VMobject.make_approximately_smooth with VMobject.make_smooth(approx=True),"{'added': [(255, '        graph.add_updater('), (256, '            lambda g: g.set_points_as_corners(get_graph_points())'), (257, '        )'), (259, '            graph.add_updater(lambda g: g.make_smooth(approx=True))')], 'deleted': [(255, '        graph.add_updater(lambda g: g.set_points_as_corners('), (256, '            get_graph_points()'), (257, '        ))'), (259, '            graph.add_updater(lambda g: g.make_approximately_smooth())')]}",105,105
manimlib/mobject/functions.py,manimlib/mobject/functions.py,1c2ec03f7d3e778986ca28557569744e742fb585,6839de9a310194ee18e3388f7d6c519744d3d7e7,Replace VMobject.make_approximately_smooth with VMobject.make_smooth(approx=True),"{'added': [(51, '            self.make_smooth(approx=True)')], 'deleted': [(51, '            self.make_approximately_smooth()')]}",20,20
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1c2ec03f7d3e778986ca28557569744e742fb585,6839de9a310194ee18e3388f7d6c519744d3d7e7,Replace VMobject.make_approximately_smooth with VMobject.make_smooth(approx=True),"{'added': [(581, '        approx: bool = False'), (584, '        self.make_smooth(approx=approx)'), (608, '    def make_smooth(self, approx=False, recurse=True):'), (613, '        If approx is False, this may increase the total'), (614, '        number of points.'), (616, '        mode = ""approx_smooth"" if approx else ""true_smooth""'), (620, '            submob.change_anchor_mode(mode)'), (624, '        self.make_smooth(approx=True, recurse=recurse)'), (1136, '            self.make_smooth(approx=True)')], 'deleted': [(581, '        true_smooth: bool = False'), (584, '        if true_smooth:'), (585, '            self.make_smooth()'), (586, '        else:'), (587, '            self.make_approximately_smooth()'), (611, '    def make_smooth(self, recurse=True):'), (616, '        This may increase the total number of points.'), (621, '            submob.change_anchor_mode(""true_smooth"")'), (625, '        """"""'), (626, '        Unlike make_smooth, this will not change the number of'), (627, '        points, but it also does not result in a perfectly smooth'), (628, ""        curve.  It's most useful when the points have been""), (629, '        sampled at a not-too-low rate from a continuous function,'), (630, '        as in the case of ParametricCurve'), (631, '        """"""'), (632, '        for submob in self.get_family(recurse):'), (633, '            if submob.is_smooth():'), (634, '                continue'), (635, '            submob.change_anchor_mode(""approx_smooth"")'), (636, '        return self'), (1148, '            self.make_approximately_smooth()')]}",263,263
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,1c2ec03f7d3e778986ca28557569744e742fb585,6839de9a310194ee18e3388f7d6c519744d3d7e7,Replace VMobject.make_approximately_smooth with VMobject.make_smooth(approx=True),"{'added': [(253, '            line.make_smooth(approx=True)')], 'deleted': [(253, '            line.make_approximately_smooth()')]}",37,37
manimlib/shaders/inserts/get_xyz_to_uv.glsl,manimlib/shaders/inserts/get_xyz_to_uv.glsl,909e515a2f6a562a4890e87fd900a6b82d4e3bca,1c2ec03f7d3e778986ca28557569744e742fb585,Only compute xyz-to-uv matrix in non-linear case,"{'added': [(68, '    vec3 axis = normalize(vec3(0.0, vect.z, -vect.y));'), (69, '    mat4 rotate = rotation(axis, vect.x);'), (74, 'mat4 get_xyz_to_uv('), (75, '    vec3 b0, vec3 b1, vec3 b2,'), (76, '    float threshold,'), (77, '    out bool exceeds_threshold'), (78, '){'), (80, '    Populates the matrix `result` with an affine transformation which maps a set of'), (81, '    quadratic bezier controls points into a new coordinate system such that the bezier'), (82, '    curve coincides with y = x^2.'), (83, ''), (84, '    If the x-range under this part of the curve exceeds `threshold`, this returns false'), (85, '    and populates result a matrix mapping b0 and b2 onto the x-axis'), (87, '    vec2 xs = xs_on_clean_parabola(b0, b1, b2);'), (88, '    float x0 = xs[0];'), (89, '    float x1 = 0.5 * (xs[0] + xs[1]);'), (90, '    float x2 = xs[1];'), (93, '    exceeds_threshold = (min(x0, x2) > threshold || max(x0, x2) < -threshold);'), (94, '    if(exceeds_threshold){'), (95, '        return map_onto_x_axis(b0, b2);'), (97, '    // This triangle on the xy plane should be isometric'), (98, '    // to (b0, b1, b2), and it should define a quadratic'), (99, '    // bezier segment aligned with y = x^2'), (100, '    vec3 dst0 = vec3(x0, x0 * x0, 0.0);'), (101, '    vec3 dst1 = vec3(x1, x0 * x2, 0.0);'), (102, '    vec3 dst2 = vec3(x2, x2 * x2, 0.0);'), (103, '    return map_triangles(b0, b1, b2, dst0, dst1, dst2);')], 'deleted': [(68, '    vec3 axis = vec3(0.0, vect.z, -vect.y);'), (69, '    mat4 rotate = rotation(normalize(axis), vect.x);'), (74, 'mat4 get_xyz_to_uv(vec3 b0, vec3 b1, vec3 b2, float temp_is_linear, out float is_linear){'), (76, '    Returns a matrix for an affine transformation which maps a set of quadratic'), (77, '    bezier controls points into a new coordinate system such that the bezier curve'), (78, ""    coincides with y = x^2, or in the case of a linear curve, it's mapped to the x-axis.""), (80, '    is_linear = temp_is_linear;'), (83, '    float thresh = 2.0;'), (84, '    if (!bool(is_linear)){'), (85, '        vec2 xs = xs_on_clean_parabola(b0, b1, b2);'), (86, '        float x0 = xs.x;'), (87, '        float x2 = xs.y;'), (88, '        if((x0 > thresh && x2 > thresh) || (x0 < -thresh && x2 < -thresh)){'), (89, '            is_linear = 1.0;'), (90, '        }else{'), (91, '            // This triangle on the xy plane should be isometric'), (92, '            // to (b0, b1, b2), and it should define a quadratic'), (93, '            // bezier segment aligned with y = x^2'), (94, '            vec3 dst0 = vec3(x0, x0 * x0, 0.0);'), (95, '            vec3 dst1 = vec3(0.5 * (x0 + x2), x0 * x2, 0.0);'), (96, '            vec3 dst2 = vec3(x2, x2 * x2, 0.0);'), (97, '            return map_triangles(b0, b1, b2, dst0, dst1, dst2);'), (98, '        }'), (100, '    // Only lands here if is_linear is 1.0'), (101, '    return map_onto_x_axis(b0, b2);')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,909e515a2f6a562a4890e87fd900a6b82d4e3bca,1c2ec03f7d3e778986ca28557569744e742fb585,Only compute xyz-to-uv matrix in non-linear case,"{'added': [(82, '    bool too_steep;'), (83, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, 10.0, too_steep);'), (84, '    if(too_steep) is_linear = 1.0;'), (88, '        int j = int[5](0, 0, 1, 2, 2)[i];')], 'deleted': [(82, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, is_linear, is_linear);'), (86, '        int j = int(sign(i - 1) + 1);  // Maps i = [0, 1, 2, 3, 4] onto j = [0, 0, 1, 2, 2]')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,909e515a2f6a562a4890e87fd900a6b82d4e3bca,1c2ec03f7d3e778986ca28557569744e742fb585,Only compute xyz-to-uv matrix in non-linear case,"{'added': [(52, '    return (norm > 1e-5) ? result / norm : vec3(0.0, 0.0, 1.0);'), (176, '    // the case of a linear curve just put it on the x-axis'), (177, '    mat4 xyz_to_uv;'), (178, '    float uv_scale_factor;'), (179, '    if(!bool(is_linear)){'), (180, '        bool too_steep;'), (181, '        xyz_to_uv = get_xyz_to_uv(p0, p1, p2, 2.0, too_steep);'), (182, '        if(too_steep) is_linear = 1.0;'), (183, '        uv_scale_factor = length(xyz_to_uv[0].xyz);'), (184, '    }'), (192, '        float stroke_width = v_stroke_width[i / 2];'), (193, ''), (194, '        if(bool(is_linear)){'), (195, '            float sign = vec2(-1, 1)[i % 2];'), (196, '            // In this case, we only really care about'), (197, '            // the v coordinate'), (198, '            uv_coords = vec2(0, sign * (0.5 * stroke_width + scaled_aaw));'), (199, '            uv_anti_alias_width = scaled_aaw;'), (200, '            uv_stroke_width = stroke_width;'), (201, '        }else{'), (202, '            uv_coords = (xyz_to_uv * vec4(corners[i], 1.0)).xy;'), (203, '            uv_stroke_width = uv_scale_factor * stroke_width;'), (204, '            uv_anti_alias_width = uv_scale_factor * scaled_aaw;'), (205, '        }'), (206, ''), (207, '        color = finalize_color(v_color[i / 2], corners[i], unit_normal);')], 'deleted': [(52, '    return (norm > 1e-10) ? result / norm : vec3(0.0, 0.0, 1.0);'), (174, '    // If the curve is flat, put the middle control in the midpoint'), (175, '    if (bool(is_linear)) p1 = 0.5 * (p0 + p2);'), (176, ''), (179, '    // the case of a linear curve (bezier degree 1), just put it on'), (180, '    // the x-axis'), (181, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, is_linear, is_linear);'), (183, '    float uv_scale_factor = length(xyz_to_uv[0].xyz);'), (185, '    uv_anti_alias_width = uv_scale_factor * scaled_aaw;'), (186, ''), (192, '        int vert_index = i / 2;'), (193, '        uv_coords = (xyz_to_uv * vec4(corners[i], 1)).xy;'), (194, '        uv_stroke_width = uv_scale_factor * v_stroke_width[vert_index];'), (195, '        color = finalize_color(v_color[vert_index], corners[i], unit_normal);')]}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,debc68a3b42279b60f4093e0e1eb1673203bd46e,909e515a2f6a562a4890e87fd900a6b82d4e3bca,Just moving some lines around,"{'added': [(18, '    if(bool(is_linear)) return abs(uv_coords.y);'), (20, '    // Returns distance from uv_coords to the curve v = u^2'), (21, '    float x0 = uv_coords.x;'), (22, '    float y0 = uv_coords.y;'), (48, '    return distance(vec2(x0, y0), vec2(x, x * x));')], 'deleted': [(16, '    // Returns distance from uv_coords to the curve v = u^2'), (17, '    float x0 = uv_coords.x;'), (18, '    float y0 = uv_coords.y;'), (19, ''), (22, '    if(bool(is_linear)) return abs(y0);'), (49, '    return distance(uv_coords, vec2(x, x * x));')]}",,
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,2290f810ca955a15bdd468de771008e8d0771782,debc68a3b42279b60f4093e0e1eb1673203bd46e,Small tweaks to number_to_point,"{'added': [(122, '        start = self.get_points()[0]'), (123, '        end = self.get_points()[-1]'), (125, '        return outer_interpolate(start, end, alpha)'), (128, '        start = self.get_points()[0]'), (129, '        end = self.get_points()[-1]')], 'deleted': [(123, '        return outer_interpolate(self.get_start(), self.get_end(), alpha)'), (126, '        points = self.get_points()'), (127, '        start = points[0]'), (128, '        end = points[-1]')]}",34,34
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,fe7dc3c4596ce548aed9d5315410e6aa2a1f1ae3,2290f810ca955a15bdd468de771008e8d0771782,Tiny cleanup,"{'added': [(13, 'float sdf(){'), (14, '    float x0 = uv_coords.x;'), (15, '    float y0 = uv_coords.y;'), (29, '    frag_color.a *= smoothstep(1, 0, sdf() / uv_anti_alias_width);')], 'deleted': [(13, 'float sdf(float x0, float y0){'), (27, '    float dist = sdf(uv_coords.x, uv_coords.y);'), (28, '    frag_color.a *= smoothstep(1, 0, dist / uv_anti_alias_width);')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7df6efb55f375e4cd702b26c1f68a2fa0a38ecb1,fe7dc3c4596ce548aed9d5315410e6aa2a1f1ae3,Handle edge case of false endpoints in make_smooth,"{'added': [(581, '        approx: bool = True'), (597, '            new_subpath = np.array(subpath)'), (604, '            # Shift any handles which ended up on top of'), (605, '            # the previous anchor'), (606, '            a0 = new_subpath[0:-1:2]'), (607, '            h = new_subpath[1::2]'), (608, '            a1 = new_subpath[2::2]'), (609, '            false_ends = np.equal(a0, h).all(1)'), (610, '            h[false_ends] = 0.5 * (a0[false_ends] + a1[false_ends])')], 'deleted': [(581, '        approx: bool = False'), (598, '                new_subpath = np.array(subpath)'), (601, '                new_subpath = np.array(subpath)')]}",263,263
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,b7ea24f9ea6d795d9c1d467e943988a5c6c98fec,7df6efb55f375e4cd702b26c1f68a2fa0a38ecb1,Tweak stroke frag,"{'added': [(13, 'const float QUICK_DIST_WIDTH = 0.4;'), (23, '    // This is a quick approximation for computing'), (24, '    // the distance to the curve.'), (25, '    // Evaluate F(x, y) = y - x^2'), (26, ""    // divide by its gradient's magnitude""), (27, '    float Fxy = y0 - x0 * x0;'), (28, '    float grad_sq = 1 + 4 * x0 * x0;'), (29, '    float approx_dist = abs(Fxy) / sqrt(grad_sq);'), (30, '    if(approx_dist < QUICK_DIST_WIDTH) return approx_dist;'), (31, ''), (42, '    float x = x0 + 2 * x0 * Fxy / grad_sq;  // Seed with a step along the gradient vector'), (50, '    return distance(uv_coords, vec2(x, x * x));')], 'deleted': [(13, 'const float QUICK_DIST_WIDTH = 0.2;'), (23, '    if(uv_stroke_width < QUICK_DIST_WIDTH){'), (24, '        // This is a quick approximation for computing'), (25, '        // the distance to the curve.'), (26, '        // Evaluate F(x, y) = y - x^2'), (27, ""        // divide by its gradient's magnitude""), (28, '        return abs((y0 - x0 * x0) / sqrt(1 + 4 * x0 * x0));'), (29, '    }'), (40, '    float x = x0;'), (48, '    return distance(vec2(x0, y0), vec2(x, x * x));')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,6c262f63b1f6f516b12cb7999e3bb9a87edfab7d,b7ea24f9ea6d795d9c1d467e943988a5c6c98fec,Reduce is_linear threshold,"{'added': [(35, 'const float COS_THRESHOLD = 0.99;'), (182, '        is_linear = float(too_steep);')], 'deleted': [(35, 'const float COS_THRESHOLD = 0.999;'), (182, '        if(too_steep) is_linear = 1.0;')]}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,23b4e3e03b95a5929d491e31108736e18016e815,6c262f63b1f6f516b12cb7999e3bb9a87edfab7d,Use cubic formula in stroke frag for large stroke width case,"{'added': [(13, 'const float QUICK_DIST_WIDTH = 0.2;'), (20, '    // Otherwise, find the distance from uv_coords to the curve y = x^2'), (23, ''), (29, '    float approx_dist = abs(Fxy) / sqrt(1.0 + 4 * x0 * x0);'), (41, '    // Adapted from https://www.shadertoy.com/view/ws3GD7'), (42, '    x0 = abs(x0);'), (43, ""    float p = (0.5 - y0) / 3.0;  // p / 3 in usual Cardano's formula notation""), (44, ""    float q = 0.25 * x0;         // -q / 2 in usual Cardano's formula notation""), (45, '    float disc = q*q + p*p*p;'), (46, '    float r = sqrt(abs(disc));'), (47, ''), (48, '    float x = (disc > 0.0) ?'), (49, '        // 1 root'), (50, '        pow(q + r, 1.0 / 3.0) + pow(abs(q - r), 1.0 / 3.0) * sign(-p) :'), (51, '        // 3 roots'), (52, '        2.0 * cos(atan(r, q) / 3.0) * sqrt(-p);'), (53, ''), (54, '    return length(vec2(x0 - x, y0 - x * x));'), (60, '    frag_color = color;')], 'deleted': [(13, 'const float QUICK_DIST_WIDTH = 0.4;'), (20, '    // Returns distance from uv_coords to the curve v = u^2'), (28, '    float grad_sq = 1 + 4 * x0 * x0;'), (29, '    float approx_dist = abs(Fxy) / sqrt(grad_sq);'), (41, ""    // Use two rounds of Newton's method""), (42, '    float x = x0 + 2 * x0 * Fxy / grad_sq;  // Seed with a step along the gradient vector'), (43, '    float p = (0.5 - y0);'), (44, '    float q = -0.5 * x0;'), (45, '    for(int i = 0; i < 2; i++){'), (46, '        float fx = x * x * x + p * x + q;'), (47, '        float dfx = 3 * x * x + p;'), (48, '        x = x - fx / dfx;'), (49, '    }'), (50, '    return distance(uv_coords, vec2(x, x * x));'), (60, '    frag_color = color;')]}",,
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,92494331445cae8951b548dc4ecf458c60e87d1d,23b4e3e03b95a5929d491e31108736e18016e815,Don't pass uv_func from SGroup,"{'added': [(254, '        super().__init__(resolution=(0, 0), **kwargs)')], 'deleted': [(254, '        super().__init__(uv_func=None, resolution=(0, 0), **kwargs)')]}",48,48
manimlib/scene/scene.py,manimlib/scene/scene.py,66d12a1687a11a26ced715b50e32d7d6ccfbd68e,92494331445cae8951b548dc4ecf458c60e87d1d,"Specify number of samples at the scene level, and be sure it works for Window as well","{'added': [(65, '    samples = 0'), (96, '        for config in self.camera_config, self.window_config:'), (97, '            config[""samples""] = self.samples')], 'deleted': []}",214,214
manimlib/window.py,manimlib/window.py,66d12a1687a11a26ced715b50e32d7d6ccfbd68e,92494331445cae8951b548dc4ecf458c60e87d1d,"Specify number of samples at the scene level, and be sure it works for Window as well","{'added': [(29, '        samples = 0'), (31, '        super().__init__(size=size, samples=samples)')], 'deleted': [(30, '        super().__init__(size=size)')]}",17,17
manimlib/camera/camera.py,manimlib/camera/camera.py,d08a16a5fb9086b269d5d8cdca62cd55fdbffb95,66d12a1687a11a26ced715b50e32d7d6ccfbd68e,"Make Camera.fbo the entity rendered to, with a separate fbo for emitted frames","{'added': [(244, '            fbo = self.get_fbo(ctx, self.samples)'), (249, '        self.fbo.use()'), (254, ""        # This is the frame buffer we'll draw into when emitting frames""), (255, '        self.draw_fbo = self.get_fbo(ctx, 0)'), (307, '        # Copy blocks from fbo into draw_fbo using Blit'), (309, '        gl.glBindFramebuffer(gl.GL_READ_FRAMEBUFFER, self.fbo.glo)'), (310, '        gl.glBindFramebuffer(gl.GL_DRAW_FRAMEBUFFER, self.draw_fbo.glo)'), (312, '        return self.draw_fbo.read('), (313, '            viewport=self.draw_fbo.viewport,')], 'deleted': [(244, '            fbo = self.get_fbo(ctx, 0)'), (253, '        # For multisample antialiasing'), (254, '        fbo_msaa = self.get_fbo(ctx, self.samples)'), (255, '        fbo_msaa.use()'), (256, '        self.fbo_msaa = fbo_msaa'), (301, '        self.fbo_msaa.clear(*self.background_rgba)'), (309, '        # Copy blocks from the fbo_msaa to the drawn fbo using Blit'), (311, '        gl.glBindFramebuffer(gl.GL_READ_FRAMEBUFFER, self.fbo_msaa.glo)'), (312, '        gl.glBindFramebuffer(gl.GL_DRAW_FRAMEBUFFER, self.fbo.glo)'), (314, '        return self.fbo.read('), (315, '            viewport=self.fbo.viewport,')]}",95,95
example_scenes.py,example_scenes.py,f2d4313bcfe726c69824cbd2e82de08ebb501810,d08a16a5fb9086b269d5d8cdca62cd55fdbffb95,Update SurfaceExample to specify samples at scene level,"{'added': [(558, '    samples = 4')], 'deleted': [(558, '    default_camera_config = dict(samples=4)')]}",21,21
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,8fee4d1a6642079ecd1936423d7da5e551a16213,f2d4313bcfe726c69824cbd2e82de08ebb501810,Fix straight line fill anti-alias issue,"{'added': [(65, '    if(bool(is_linear)){'), (66, '        // Cross with unit z vector'), (67, '        p0_perp = normalize(vec3(-t01.y, t01.x, 0));'), (68, '        p2_perp = p0_perp;'), (69, '    }'), (70, ''), (80, '    } else{')], 'deleted': [(74, '    }'), (75, '    if(!fill_inside || bool(is_linear)){')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,917481cb2310856e41dd727146197a4c7e05eead,8fee4d1a6642079ecd1936423d7da5e551a16213,Always refresh in pointwise_become_partial,"{'added': [(944, '        self.set_points(new_points)')], 'deleted': [(944, '        self.set_points(new_points, refresh=False)'), (945, '        if self.has_fill():'), (946, '            self.refresh_triangulation()')]}",262,262
manimlib/animation/creation.py,manimlib/animation/creation.py,2e2e8dfee2178e31455d8be0f74253e9e12d3e88,917481cb2310856e41dd727146197a4c7e05eead,Fix the fact that Write messes up joint_products,"{'added': [(122, '        self.mobject.refresh_joint_products()')], 'deleted': []}",39,39
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,0d66981ac770f9ec3cc9af624b6899682f5f88b4,2e2e8dfee2178e31455d8be0f74253e9e12d3e88,Fix issue with variable stroke width,"{'added': [(191, '    float max_sw = max(v_stroke_width[0], v_stroke_width[2]);'), (199, '            uv_coords = vec2(0, sign * (0.5 * max_sw + scaled_aaw));')], 'deleted': [(198, '            uv_coords = vec2(0, sign * (0.5 * stroke_width + scaled_aaw));')]}",,
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,8e1fdd5a79c668552d58c31e26cc57e37da08b0a,0d66981ac770f9ec3cc9af624b6899682f5f88b4,Change crosshair style,"{'added': [(89, '    crosshair_style = dict('), (90, '        stroke_color=GREY_A,'), (91, '        stroke_width=[3, 0, 3],'), (92, '    )'), (171, '        crosshair.set_style(**self.crosshair_style)')], 'deleted': [(89, '    crosshair_color = GREY_A'), (168, '        crosshair.set_stroke(self.crosshair_color, width=[2, 0, 2])'), (169, '        crosshair.insert_n_curves(1)')]}",151,151
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,9e02796c9ac3f5c3e6b83ed7bfbed435af55b0ef,8e1fdd5a79c668552d58c31e26cc57e37da08b0a,Fix set_width for variable stroke width,"{'added': [(202, '                if isinstance(width, float | int):'), (203, ""                    data['stroke_width'][:, 0] = width""), (204, '                else:'), (205, ""                    data['stroke_width'][:, 0] = resize_with_interpolation(""), (206, '                        np.array(width), len(data)'), (207, '                    ).flatten()')], 'deleted': [(202, '                if not isinstance(width, float | int):'), (203, '                    width = resize_with_interpolation(np.array(width), len(data)).flatten()'), (204, ""                data['stroke_width'][:, 0] = width"")]}",262,262
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,24864a3d61e1218214cb8ab01b56bbe8bc76b216,9e02796c9ac3f5c3e6b83ed7bfbed435af55b0ef,Small tweak,"{'added': [(131, '            p1, np.array([p2[0], p1[1], 0]),'), (132, '            p2, np.array([p1[0], p2[1], 0]),')], 'deleted': [(131, '            p1, [p2[0], p1[1], 0],'), (132, '            p2, [p1[0], p2[1], 0],')]}",151,151
manimlib/camera/camera.py,manimlib/camera/camera.py,39cda62b66a1941461e2b240d3d83f2d860db5b0,24864a3d61e1218214cb8ab01b56bbe8bc76b216,Remove texture_id == 15 hack,"{'added': [], 'deleted': [(528, '            if self.n_textures == 15:  # I have no clue why this is needed'), (529, '                self.n_textures += 1')]}",94,94
manimlib/camera/camera.py,manimlib/camera/camera.py,8b786311afc161db8140a421084b698893c64db8,39cda62b66a1941461e2b240d3d83f2d860db5b0,Rename set_ctx_clip_distance -> set_ctx_clip_plane,"{'added': [(269, '    def set_ctx_clip_plane(self, enable: bool = True) -> None:'), (401, '        self.set_ctx_clip_plane(shader_wrapper.use_clip_plane)')], 'deleted': [(269, '    def set_ctx_clip_distance(self, enable: bool = True) -> None:'), (401, '        self.set_ctx_clip_distance(shader_wrapper.use_clip_plane)')]}",94,94
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,847c27ad234c9528146576fa3cc46d23a95743ca,8b786311afc161db8140a421084b698893c64db8,Remove stray import,"{'added': [], 'deleted': [(27, 'from manimlib.utils.iterables import listify')]}",262,262
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b934ee5f5066e799c9ee13bc8392970852de5f4a,ba1b43df1aee10e26f35422fefd800c818d66185,Make isinstance check work for python 3.7-3.9 (#1969),"{'added': [(201, '                if isinstance(width, (float, int)):')], 'deleted': [(201, '                if isinstance(width, float | int):')]}",262,262
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,8ce5dc7e84b09e5f90f3358a90ce8230c7571647,847c27ad234c9528146576fa3cc46d23a95743ca,Add DieFace to drawings.py,"{'added': [(33, 'from manimlib.constants import UL'), (34, 'from manimlib.constants import UR'), (35, 'from manimlib.constants import DL'), (36, 'from manimlib.constants import DR'), (42, 'from manimlib.mobject.geometry import Dot'), (583, ''), (584, ''), (585, ''), (586, 'class DieFace(VGroup):'), (587, '    def __init__('), (588, '        self,'), (589, '        value: int,'), (590, '        side_length: float = 1.0,'), (591, '        corner_radius: float = 0.15,'), (592, '        stroke_color: ManimColor = WHITE,'), (593, '        stroke_width: float = 2.0,'), (594, '        fill_color: ManimColor = GREY_E,'), (595, '        dot_radius: float = 0.08,'), (596, '        dot_color: ManimColor = BLUE_B,'), (597, '        dot_coalesce_factor: float = 0.5'), (598, '    ):'), (599, '        dot = Dot(radius=dot_radius, fill_color=dot_color)'), (600, '        square = Square('), (601, '            side_length=side_length,'), (602, '            stroke_color=stroke_color,'), (603, '            stroke_width=stroke_width,'), (604, '            fill_color=fill_color,'), (605, '            fill_opacity=1.0,'), (606, '        )'), (607, '        square.round_corners(corner_radius)'), (608, ''), (609, '        if not (1 <= value <= 6):'), (610, '            raise Exception(""DieFace only accepts integer inputs between 1 and 6"")'), (611, ''), (612, '        edge_group = ['), (613, '            (ORIGIN,),'), (614, '            (UL, DR),'), (615, '            (UL, ORIGIN, DR),'), (616, '            (UL, UR, DL, DR),'), (617, '            (UL, UR, ORIGIN, DL, DR),'), (618, '            (UL, UR, LEFT, RIGHT, DL, DR),'), (619, '        ][value - 1]'), (620, ''), (621, '        arrangement = VGroup(*('), (622, '            dot.copy().move_to(square.get_bounding_box_point(vect))'), (623, '            for vect in edge_group'), (624, '        ))'), (625, '        arrangement.space_out_submobjects(dot_coalesce_factor)'), (626, ''), (627, '        super().__init__(square, arrangement)'), (628, '        self.value = value'), (629, '        self.index = value')], 'deleted': [(30, 'from manimlib.constants import RIGHT'), (34, 'from manimlib.constants import UP')]}",54,54
manimlib/camera/camera.py,manimlib/camera/camera.py,1d4fcf020b324015678a8b26a28120ebfce06396,8ce5dc7e84b09e5f90f3358a90ce8230c7571647,Refer directly to fbo viewports in get_raw_fbo_data,"{'added': [(310, '        gl.glBlitFramebuffer('), (311, '            *self.fbo.viewport,'), (312, '            *self.draw_fbo.viewport,'), (313, '            gl.GL_COLOR_BUFFER_BIT, gl.GL_LINEAR'), (314, '        )')], 'deleted': [(308, '        pw, ph = (self.pixel_width, self.pixel_height)'), (311, '        gl.glBlitFramebuffer(0, 0, pw, ph, 0, 0, pw, ph, gl.GL_COLOR_BUFFER_BIT, gl.GL_LINEAR)')]}",94,94
manimlib/camera/camera.py,manimlib/camera/camera.py,e8b75941e0fc98d47061269b8f32b161f3cca245,1d4fcf020b324015678a8b26a28120ebfce06396,Get rid of pixel_width and pixel_height attrs on Camera,"{'added': [(212, '        self.default_pixel_shape = (pixel_width, pixel_height)'), (285, '                self.default_pixel_shape,'), (290, '                self.default_pixel_shape,'), (340, '    def get_pixel_size(self):'), (341, '        return self.frame.get_shape()[0] / self.get_pixel_shape()[0]'), (342, '')], 'deleted': [(212, '        self.pixel_width = pixel_width'), (213, '        self.pixel_height = pixel_height'), (284, '        pw = self.pixel_width'), (285, '        ph = self.pixel_height'), (288, '                (pw, ph),'), (293, '                (pw, ph),'), (301, '    def reset_pixel_shape(self, new_width: int, new_height: int) -> None:'), (302, '        self.pixel_width = new_width'), (303, '        self.pixel_height = new_height'), (304, '        self.refresh_perspective_uniforms()'), (305, ''), (350, '        # return (self.pixel_width, self.pixel_height)')]}",94,94
manimlib/scene/scene.py,manimlib/scene/scene.py,e8b75941e0fc98d47061269b8f32b161f3cca245,1d4fcf020b324015678a8b26a28120ebfce06396,Get rid of pixel_width and pixel_height attrs on Camera,"{'added': [(904, '        pass')], 'deleted': [(904, '        self.camera.reset_pixel_shape(width, height)')]}",214,214
manimlib/camera/camera.py,manimlib/camera/camera.py,8d729eef5a3f943511daec7ef7457f67ddd804fe,e8b75941e0fc98d47061269b8f32b161f3cca245,Rename perspective to view_matrix,"{'added': [(42, '        self.view_matrix = np.identity(4)'), (86, '    def get_view_matrix(self):'), (91, '        result = self.view_matrix'), (502, '        view_matrix = frame.get_view_matrix()'), (510, '            view=tuple(view_matrix.T.flatten()),')], 'deleted': [(42, '        self.perspective_transform = np.identity(4)'), (86, '    def get_perspective_transform(self):'), (91, '        result = self.perspective_transform'), (502, '        # Orient light'), (503, '        perspective_transform = frame.get_perspective_transform()'), (511, '            perspective=tuple(perspective_transform.T.flatten()),')]}",94,94
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,8d729eef5a3f943511daec7ef7457f67ddd804fe,e8b75941e0fc98d47061269b8f32b161f3cca245,Rename perspective to view_matrix,"{'added': [(2, 'uniform mat4 view;'), (12, '        result = view * result;')], 'deleted': [(2, 'uniform mat4 perspective;'), (12, '        result = perspective * result;')]}",,
manimlib/config.py,manimlib/config.py,03080a10a77bb30747ce97c997d0ee1bb5061b72,8d729eef5a3f943511daec7ef7457f67ddd804fe,Small style tweaks,"{'added': [(417, '    return dict('), (418, '        size=(window_width, window_height),'), (419, '    )')], 'deleted': [(417, '    return {'), (418, '        ""size"": (window_width, window_height),'), (419, '    }')]}",71,71
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,03080a10a77bb30747ce97c997d0ee1bb5061b72,8d729eef5a3f943511daec7ef7457f67ddd804fe,Small style tweaks,"{'added': [(9, '    bool is_fixed = bool(is_fixed_in_frame);'), (11, '    if(!is_fixed){'), (15, '    vec2 shape = is_fixed ? DEFAULT_FRAME_SHAPE : frame_shape;')], 'deleted': [(10, '    vec2 shape = DEFAULT_FRAME_SHAPE;'), (11, '    if(!bool(is_fixed_in_frame)){'), (13, '        shape = frame_shape;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,03080a10a77bb30747ce97c997d0ee1bb5061b72,8d729eef5a3f943511daec7ef7457f67ddd804fe,Small style tweaks,"{'added': [(45, '    vec3 result = (joint_product.w < COS_THRESHOLD) ?'), (46, '        joint_product.xyz : v_joint_product[1].xyz;')], 'deleted': [(45, '    vec3 result;'), (46, '    if(joint_product.w < COS_THRESHOLD){'), (47, '        result = joint_product.xyz;'), (48, '    }else{'), (49, '        result = v_joint_product[1].xyz;'), (50, '    }')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,c13495deeb548cd72c975aa1fc161bcdde235abc,03080a10a77bb30747ce97c997d0ee1bb5061b72,"Blit based on window's viewport, when in preview mode","{'added': [(29, '    from manimlib.window import Window'), (191, '        window: Window | None = None,'), (213, '        self.window = window'), (229, '        self.init_context(window)'), (242, '    def init_context(self, window: Window | None = None) -> None:'), (243, '        if window is None:'), (247, '            ctx = window.ctx'), (305, '        if self.window is not None:'), (306, '            src_viewport = self.window.viewport'), (307, '        else:'), (308, '            src_viewport = self.fbo.viewport'), (310, '            *src_viewport,')], 'deleted': [(190, '        ctx: moderngl.Context | None = None,'), (227, '        self.init_context(ctx)'), (240, '    def init_context(self, ctx: moderngl.Context | None = None) -> None:'), (241, '        if ctx is None:'), (303, '            *self.fbo.viewport,')]}",95,95
manimlib/scene/scene.py,manimlib/scene/scene.py,c13495deeb548cd72c975aa1fc161bcdde235abc,03080a10a77bb30747ce97c997d0ee1bb5061b72,"Blit based on window's viewport, when in preview mode","{'added': [(104, '            self.camera_config[""window""] = self.window')], 'deleted': [(104, '            self.camera_config[""ctx""] = self.window.ctx')]}",214,214
manimlib/camera/camera.py,manimlib/camera/camera.py,b0cca9e4b633408af4d467ac8c2d3c2a9a10eab9,c13495deeb548cd72c975aa1fc161bcdde235abc,Camera pixel_shape should reflect the drawn fbo,"{'added': [(351, '        return self.draw_fbo.size')], 'deleted': [(351, '        return self.fbo.viewport[2:4]')]}",95,95
manimlib/camera/camera.py,manimlib/camera/camera.py,e2421a650cacd5cc1df8b741bd8430cbe8298204,b0cca9e4b633408af4d467ac8c2d3c2a9a10eab9,Don't disable clip plane,"{'added': [], 'deleted': [(274, '        else:'), (275, '            gl.glDisable(gl.GL_CLIP_DISTANCE0)')]}",95,95
manimlib/camera/camera.py,manimlib/camera/camera.py,8a6deb40680ec38f939260d929f92a65636754e8,e2421a650cacd5cc1df8b741bd8430cbe8298204,Enable recording during a Scene embed,"{'added': [(512, '            frame_shape=frame.get_shape(),'), (513, '            pixel_size=self.get_pixel_size(),')], 'deleted': [(510, '        frame_shape = frame.get_shape()'), (513, '            frame_shape=frame_shape,'), (514, '            pixel_size=frame_shape[0] / self.get_pixel_shape()[0],')]}",95,95
manimlib/config.py,manimlib/config.py,8a6deb40680ec38f939260d929f92a65636754e8,e2421a650cacd5cc1df8b741bd8430cbe8298204,Enable recording during a Scene embed,"{'added': [(418, '        full_size=(camera_config[""pixel_width""], camera_config[""pixel_height""]),')], 'deleted': []}",71,71
manimlib/scene/scene.py,manimlib/scene/scene.py,8a6deb40680ec38f939260d929f92a65636754e8,e2421a650cacd5cc1df8b741bd8430cbe8298204,Enable recording during a Scene embed,"{'added': [(714, '    def checkpoint_paste(self, skip: bool = False, record: bool = False):'), (724, '        if shell is None or self.window is None:'), (741, '        if record:'), (742, '            # Resize window so rendering happens at the appropriate size'), (743, '            self.window.size = self.camera.get_pixel_shape()'), (744, '            self.window.swap_buffers()'), (745, '            self.update_frame()'), (746, '            self.file_writer.begin_insert()'), (747, ''), (750, '        if record:'), (751, '            self.file_writer.end_insert()'), (752, '            # Put window back to how it started'), (753, '            self.window.to_default_position()'), (754, '')], 'deleted': [(714, '    def checkpoint_paste(self, skip: bool = False):'), (724, '        if shell is None:')]}",217,217
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,8a6deb40680ec38f939260d929f92a65636754e8,e2421a650cacd5cc1df8b741bd8430cbe8298204,Enable recording during a Scene embed,"{'added': [(291, '    def begin_insert(self):'), (292, '        # Begin writing process'), (293, '        self.write_to_movie = True'), (294, '        self.init_output_directories()'), (295, '        movie_path = self.get_movie_file_path()'), (296, '        folder, file = os.path.split(movie_path)'), (297, '        scene_name, ext = file.split(""."")'), (298, '        n_inserts = len(list(filter('), (299, '            lambda f: f.startswith(scene_name + ""_insert""),'), (300, '            os.listdir(folder)'), (301, '        )))'), (302, '        self.inserted_file_path = movie_path.replace(""."", f""_insert_{n_inserts}."")'), (303, '        self.open_movie_pipe(self.inserted_file_path)'), (304, ''), (305, '    def end_insert(self):'), (306, '        self.close_movie_pipe()'), (307, '        self.write_to_movie = False'), (308, '        self.print_file_ready_message(self.inserted_file_path)'), (309, '')], 'deleted': []}",91,91
manimlib/window.py,manimlib/window.py,8a6deb40680ec38f939260d929f92a65636754e8,e2421a650cacd5cc1df8b741bd8430cbe8298204,Enable recording during a Scene embed,"{'added': [(29, '        full_size: tuple[int, int] = (1920, 1080),'), (32, '        super().__init__(size=full_size, samples=samples)'), (34, '        self.full_size = full_size'), (35, '        self.default_size = size'), (36, '        self.default_position = self.find_initial_position(size)'), (47, '        self.to_default_position()'), (48, ''), (49, '    def to_default_position(self):'), (50, '        self.size = self.default_size'), (51, '        self.position = self.default_position')], 'deleted': [(31, '        super().__init__(size=size, samples=samples)'), (43, '        # No idea why, but when self.position is set once'), (44, ""        # it sometimes doesn't actually change the position""), (45, '        # to the specified tuple on the rhs, but doing it'), (46, '        # twice seems to make it work.  Â¯\\_(ã)_/Â¯'), (47, '        initial_position = self.find_initial_position(size)'), (48, '        self.position = initial_position'), (49, '        self.position = initial_position')]}",18,18
manimlib/camera/camera.py,manimlib/camera/camera.py,1dda706335f758c040a8f5fe73e444d2d65c20fa,8a6deb40680ec38f939260d929f92a65636754e8,Small cleanup,"{'added': [(244, '            self.ctx = moderngl.create_standalone_context()'), (245, '            self.fbo = self.get_fbo(self.samples)'), (247, '            self.ctx = window.ctx'), (248, '            self.fbo = self.ctx.detect_framebuffer()'), (255, '        self.draw_fbo = self.get_fbo(samples=0)'), (281, '        return self.ctx.framebuffer('), (282, '            color_attachments=self.ctx.texture('), (287, '            depth_attachment=self.ctx.depth_renderbuffer('), (326, '        arr = flat_arr.reshape([*reversed(self.draw_fbo.size), self.n_channels])'), (342, '    def get_pixel_size(self) -> float:'), (354, '    def get_aspect_ratio(self):'), (355, '        pw, ph = self.get_pixel_shape()'), (356, '        return pw / ph'), (357, ''), (382, '        aspect_ratio = self.get_aspect_ratio()'), (387, '        self.frame.set_height(frame_height, stretch=true)'), (388, '        self.frame.set_width(frame_width, stretch=true)'), (448, '        attributes = shader_wrapper.vert_attributes'), (451, '            content=[(vbo, vert_format, *attributes)],')], 'deleted': [(244, '            ctx = moderngl.create_standalone_context()'), (245, '            fbo = self.get_fbo(ctx, self.samples)'), (247, '            ctx = window.ctx'), (248, '            fbo = ctx.detect_framebuffer()'), (249, '        self.ctx = ctx'), (250, '        self.fbo = fbo'), (257, '        self.draw_fbo = self.get_fbo(ctx, 0)'), (281, '        ctx: moderngl.Context,'), (284, '        return ctx.framebuffer('), (285, '            color_attachments=ctx.texture('), (290, '            depth_attachment=ctx.depth_renderbuffer('), (329, '        arr = flat_arr.reshape([*reversed(self.fbo.size), self.n_channels])'), (345, '    def get_pixel_size(self):'), (379, '        pixel_height = self.get_pixel_height()'), (380, '        pixel_width = self.get_pixel_width()'), (383, '        aspect_ratio = fdiv(pixel_width, pixel_height)'), (388, '        self.frame.set_height(frame_height)'), (389, '        self.frame.set_width(frame_width)'), (451, '            content=[(vbo, vert_format, *shader_wrapper.vert_attributes)],')]}",96,96
manimlib/scene/scene.py,manimlib/scene/scene.py,b99b88fd2577e67d6d6106827f2d5d9d866831eb,1dda706335f758c040a8f5fe73e444d2d65c20fa,Update Scene.get_image to resize window if needed,"{'added': [(292, '        if self.window is not None:'), (293, '            self.window.size = self.camera.get_pixel_shape()'), (294, '            self.window.swap_buffers()'), (295, '            self.update_frame()'), (296, '            self.window.swap_buffers()'), (297, '        image = self.camera.get_image()'), (298, '        if self.window is not None:'), (299, '            self.window.to_default_position()'), (300, '        return image')], 'deleted': [(292, '        return self.camera.get_image()')]}",219,219
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,b1f0270316ccab479e28c31f7b8854f76b26316d,b99b88fd2577e67d6d6106827f2d5d9d866831eb,Change threshold for bevel reduction,"{'added': [(103, '    if(v_joint_product[0].w < -0.9) buff0 *= 10 * (v_joint_product[0].w + 1.0);'), (104, '    if(v_joint_product[2].w < -0.9) buff2 *= 10 * (v_joint_product[2].w + 1.0);')], 'deleted': [(103, '    if(v_joint_product[0].w < -0.75) buff0 *= 4 * (v_joint_product[0].w + 1.0);'), (104, '    if(v_joint_product[2].w < -0.75) buff2 *= 4 * (v_joint_product[2].w + 1.0);')]}",,
manimlib/window.py,manimlib/window.py,97789fff35d43048ce776bf56bb57c6f3d6e1be1,b1f0270316ccab479e28c31f7b8854f76b26316d,Swap buffers when resetting to default position,"{'added': [(52, '        self.swap_buffers()')], 'deleted': []}",18,18
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d01658bc5b89cf950e5087909014c90cafbea124,97789fff35d43048ce776bf56bb57c6f3d6e1be1,Fix multi-color setting,"{'added': [(1267, '                    rgbs = resize_with_interpolation(rgbs, len(data))')], 'deleted': [(1267, '                    resize_with_interpolation(rgbs, len(data))')]}",502,502
manimlib/camera/camera.py,manimlib/camera/camera.py,4774d2bc3b34792c7f551bfaebb4230e9b6df779,d01658bc5b89cf950e5087909014c90cafbea124,First pass at a winding-based fill approach,"{'added': [(234, '        self.init_fill_fbo()  # Experimental'), (258, '    def init_fill_fbo(self):'), (259, '        # Experimental'), (260, '        self.fill_texture = self.ctx.texture('), (261, '            size=self.get_pixel_shape(),'), (262, '            components=4,'), (263, '            samples=self.samples,'), (264, '        )'), (265, '        fill_depth = self.ctx.depth_renderbuffer(self.get_pixel_shape(), samples=self.samples)'), (266, '        self.fill_fbo = self.ctx.framebuffer(self.fill_texture, fill_depth)'), (267, '        self.fill_prog = self.ctx.program('), (268, ""            vertex_shader='''""), (269, '                #version 330'), (270, ''), (271, '                in vec2 texcoord;'), (272, '                out vec2 v_textcoord;'), (273, ''), (274, '                void main() {'), (275, '                    gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (276, '                    v_textcoord = texcoord;'), (277, '                }'), (278, ""            ''',""), (279, ""            fragment_shader='''""), (280, '                #version 330'), (281, ''), (282, '                uniform sampler2D Texture;'), (283, ''), (284, '                in vec2 v_textcoord;'), (285, '                out vec4 frag_color;'), (286, ''), (287, '                void main() {'), (288, '                    vec4 color = texture(Texture, v_textcoord);'), (289, '                    if(color.a == 0) discard;'), (290, '                    frag_color = color;'), (291, '                    // frag_color = vec4(1, 0, 0, 0.2);'), (292, '                }'), (293, ""            ''',""), (294, '        )'), (295, '        tid = self.n_textures'), (296, '        self.fill_texture.use(tid)'), (297, ""        self.fill_prog['Texture'].value = tid""), (298, '        self.n_textures += 1'), (299, '        verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (300, '        self.fill_vao = self.ctx.simple_vertex_array('), (301, '            self.fill_prog,'), (302, ""            self.ctx.buffer(verts.astype('f4').tobytes()),""), (303, ""            'texcoord',""), (304, '        )'), (305, ''), (452, ''), (453, '        # TODO'), (454, '        if shader_wrapper.render_to_texture:'), (455, '            self.fill_fbo.clear(0.0, 0.0, 0.0, 0.0)'), (456, '            self.fill_fbo.use()'), (457, '            self.ctx.enable(moderngl.BLEND)'), (458, '            self.ctx.blend_func = moderngl.ONE, moderngl.ONE'), (459, '            self.ctx.blend_equation = moderngl.FUNC_SUBTRACT'), (460, '            render_group[""vao""].render(int(shader_wrapper.render_primitive))'), (461, '            self.ctx.blend_func = moderngl.DEFAULT_BLENDING'), (462, '            self.ctx.blend_equation = moderngl.FUNC_ADD'), (463, '            self.fbo.use()'), (464, '            self.fill_texture.use(0)'), (465, ""            self.fill_prog['Texture'].value = 0""), (466, '            self.fill_vao.render(moderngl.TRIANGLE_STRIP)'), (467, '        else:'), (468, '            render_group[""vao""].render(int(shader_wrapper.render_primitive))'), (469, '')], 'deleted': [(403, '        render_group[""vao""].render(int(shader_wrapper.render_primitive))')]}",98,98
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,4774d2bc3b34792c7f551bfaebb4230e9b6df779,d01658bc5b89cf950e5087909014c90cafbea124,First pass at a winding-based fill approach,"{'added': [(62, ""        ('base_point', np.float32, (3,)),""), (64, ""    fill_data_names = ['point', 'fill_rgba', 'base_point']""), (67, '    fill_render_primitive: int = moderngl.TRIANGLE_STRIP'), (994, '        # # Reset orientation data'), (995, '        # self.data[""orientation""][1::2, 0] = curve_orientations'), (996, '        # if ""orientation"" in self.locked_data_keys:'), (997, '        #     self.locked_data_keys.remove(""orientation"")'), (1157, '            render_to_texture=True,'), (1185, '                submob.data[""base_point""][:] = submob.data[""point""][0]'), (1186, '                # submob.data[""base_color""][:] = submob.data[""fill_color""][0]'), (1188, '                # Add dummy'), (1189, '                fill_datas.append(submob.data[fill_names][-1:])'), (1204, '            self.fill_shader_wrapper.read_in(fill_datas),')], 'deleted': [(62, ""        ('orientation', np.float32, (1,)),""), (63, ""        ('vert_index', np.float32, (1,)),""), (65, ""    fill_data_names = ['point', 'fill_rgba', 'orientation', 'vert_index']""), (68, '    fill_render_primitive: int = moderngl.TRIANGLES'), (995, '        # Reset orientation data'), (996, '        self.data[""orientation""][1::2, 0] = curve_orientations'), (997, '        if ""orientation"" in self.locked_data_keys:'), (998, '            self.locked_data_keys.remove(""orientation"")'), (1124, '    def resize_points('), (1125, '        self,'), (1126, '        new_length: int,'), (1127, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1128, '    ):'), (1129, '        super().resize_points(new_length, resize_func)'), (1130, '        self.data[""vert_index""][:, 0] = np.arange(new_length)'), (1131, ''), (1163, ""            vert_indices=np.zeros(0, dtype='i4'),""), (1190, '        fill_indices = []'), (1196, '                fill_indices.append(submob.get_triangulation())'), (1211, '            self.fill_shader_wrapper.read_in(fill_datas, fill_indices),')]}",260,260
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4774d2bc3b34792c7f551bfaebb4230e9b6df779,d01658bc5b89cf950e5087909014c90cafbea124,First pass at a winding-based fill approach,"{'added': [(37, '        render_to_texture: bool = False,'), (48, '        self.render_to_texture = render_to_texture')], 'deleted': []}",37,37
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,4774d2bc3b34792c7f551bfaebb4230e9b6df779,d01658bc5b89cf950e5087909014c90cafbea124,First pass at a winding-based fill approach,"{'added': [(11, 'void main() {'), (12, '    if (color.a == 0) discard;'), (13, '    frag_color = color;'), (14, '    if (orientation == 0) return;'), (15, ''), (19, '    if(orientation * Fxy < 0) discard;')], 'deleted': [(5, 'in float uv_anti_alias_width;'), (9, 'in float is_linear;'), (13, 'float sdf(){'), (16, '    if(bool(is_linear)) return abs(y0);'), (17, ''), (19, '    if(orientation * Fxy >= 0) return 0.0;'), (21, '    return abs(Fxy) / sqrt(1 + 4 * x0 * x0);'), (22, '}'), (23, ''), (24, ''), (25, 'void main() {'), (26, '    if (color.a == 0) discard;'), (27, '    frag_color = color;'), (28, '    if (bool(fill_all)) return;'), (29, '    frag_color.a *= smoothstep(1, 0, sdf() / uv_anti_alias_width);')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,4774d2bc3b34792c7f551bfaebb4230e9b6df779,d01658bc5b89cf950e5087909014c90cafbea124,First pass at a winding-based fill approach,"{'added': [(4, 'layout (triangle_strip, max_vertices = 7) out;'), (8, 'uniform vec3 corner;'), (12, 'in vec3 v_base_point[3];'), (15, ''), (25, '#INSERT get_unit_normal.glsl'), (29, 'void emit_vertex_wrapper(vec3 point, vec4 v_color, vec3 unit_normal){'), (30, '    color = finalize_color(v_color, point, unit_normal);'), (37, '    // We use the triangle strip primative, but'), (38, '    // actually only need every other strip element'), (39, '    if (int(v_vert_index[0]) % 2 == 1) return;'), (40, ''), (41, '    // Curves are marked as eneded when the handle after'), (42, '    // the first anchor is set equal to that anchor'), (43, '    if (verts[0] == verts[1]) return;'), (44, ''), (45, '    vec3 unit_normal = get_unit_normal(verts[0], verts[1], verts[2]);'), (46, ''), (47, '    // Emit main triangle'), (48, '    orientation = 0.0;'), (49, '    uv_coords = vec2(0.0);'), (50, '    emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (51, '    emit_vertex_wrapper(v_base_point[0], v_color[1], unit_normal);'), (52, '    emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (53, ''), (54, '    // Emit edge triangle'), (55, '    orientation = 1.0;'), (56, '    uv_coords = vec2(0, 0);'), (57, '    // Two dummies'), (58, '    emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (59, '    emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (60, '    // Inner corner'), (61, '    uv_coords = vec2(0.5, 0);'), (62, '    emit_vertex_wrapper(verts[1], v_color[1], unit_normal);'), (63, '    // Last corner'), (64, '    uv_coords = vec2(1.0, 1.0);'), (65, '    emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (66, '    EndPrimitive();')], 'deleted': [(4, 'layout (triangle_strip, max_vertices = 5) out;'), (10, 'in float v_orientation[3];'), (15, 'out float fill_all;'), (16, 'out float uv_anti_alias_width;'), (21, 'out float is_linear;'), (22, ''), (23, 'const float ANGLE_THRESHOLD = 1e-3;'), (28, '#INSERT get_xyz_to_uv.glsl'), (32, 'void emit_vertex_wrapper(vec3 point, int index, vec3 unit_normal){'), (33, '    color = finalize_color(v_color[index], point, unit_normal);'), (39, 'void emit_simple_triangle(vec3 unit_normal){'), (40, '    for(int i = 0; i < 3; i++){'), (41, '        emit_vertex_wrapper(verts[i], i, unit_normal);'), (42, '    }'), (43, '    EndPrimitive();'), (44, '}'), (45, ''), (46, ''), (47, 'void emit_pentagon('), (48, '    // Triangle vertices'), (49, '    vec3 p0,'), (50, '    vec3 p1,'), (51, '    vec3 p2,'), (52, '    // Unit tangent vector'), (53, '    vec3 t01,'), (54, '    vec3 t12,'), (55, '    vec3 unit_normal'), (56, '){'), (57, '    // Vectors perpendicular to the curve in the plane of the curve'), (58, '    // pointing outside the curve'), (59, '    vec3 p0_perp = cross(t01, unit_normal);'), (60, '    vec3 p2_perp = cross(t12, unit_normal);'), (61, ''), (62, '    float angle = acos(clamp(dot(t01, t12), -1, 1));'), (63, '    is_linear = float(angle < ANGLE_THRESHOLD);'), (64, ''), (65, '    if(bool(is_linear)){'), (66, '        // Cross with unit z vector'), (67, '        p0_perp = normalize(vec3(-t01.y, t01.x, 0));'), (68, '        p2_perp = p0_perp;'), (69, '    }'), (70, ''), (71, '    bool fill_inside = orientation > 0.0;'), (72, '    float aaw = anti_alias_width * pixel_size;'), (73, '    vec3 corners[5] = vec3[5](p0, p0, p1, p2, p2);'), (74, ''), (75, '    if(fill_inside || bool(is_linear)){'), (76, '        // Add buffer outside the curve'), (77, '        corners[0] += aaw * p0_perp;'), (78, '        corners[2] += 0.5 * aaw * (p0_perp + p2_perp);'), (79, '        corners[4] += aaw * p2_perp;'), (80, '    } else{'), (81, '        // Add buffer inside the curve'), (82, '        corners[1] -= aaw * p0_perp;'), (83, '        corners[3] -= aaw * p2_perp;'), (84, '    }'), (85, ''), (86, '    // Compute xy_to_uv matrix, and potentially re-evaluate bezier degree'), (87, '    bool too_steep;'), (88, '    mat4 xyz_to_uv = get_xyz_to_uv(p0, p1, p2, 10.0, too_steep);'), (89, '    if(too_steep) is_linear = 1.0;'), (90, '    uv_anti_alias_width = aaw * length(xyz_to_uv[0].xyz);'), (91, ''), (92, '    for(int i = 0; i < 5; i++){'), (93, '        int j = int[5](0, 0, 1, 2, 2)[i];'), (94, '        vec3 corner = corners[i];'), (95, '        uv_coords = (xyz_to_uv * vec4(corner, 1.0)).xy;'), (96, '        emit_vertex_wrapper(corner, j, unit_normal);'), (97, '    }'), (98, '    EndPrimitive();'), (99, '}'), (100, ''), (101, ''), (103, ""    // If vert indices are sequential, don't fill all""), (104, '    fill_all = float('), (105, '        (v_vert_index[1] - v_vert_index[0]) != 1.0 ||'), (106, '        (v_vert_index[2] - v_vert_index[1]) != 1.0'), (107, '    );'), (108, ''), (109, '    vec3 p0 = verts[0];'), (110, '    vec3 p1 = verts[1];'), (111, '    vec3 p2 = verts[2];'), (112, '    vec3 t01 = p1 - p0;'), (113, '    vec3 t12 = p2 - p1;'), (114, '    vec3 unit_normal = normalize(cross(t01, t12));'), (115, ''), (116, '    if(bool(fill_all)){'), (117, '        emit_simple_triangle(unit_normal);'), (118, '        return;'), (119, '    }'), (120, '    orientation = v_orientation[1];'), (121, ''), (122, '    emit_pentagon('), (123, '        p0, p1, p2,'), (124, '        normalize(t01),'), (125, '        normalize(t12),'), (126, '        unit_normal'), (127, '    );')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,4774d2bc3b34792c7f551bfaebb4230e9b6df779,d01658bc5b89cf950e5087909014c90cafbea124,First pass at a winding-based fill approach,"{'added': [(5, 'in vec3 base_point;'), (8, 'out vec4 v_joint_product;'), (10, 'out vec3 v_base_point;'), (16, '    v_base_point = base_point;'), (17, '    v_vert_index = gl_VertexID;')], 'deleted': [(5, 'in float orientation;'), (6, 'in float vert_index;'), (9, 'out float v_orientation;'), (15, '    v_orientation = orientation;'), (17, '    v_vert_index = vert_index;')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,6e56c31d67ce0d923adcc316b0179196393d1f95,4774d2bc3b34792c7f551bfaebb4230e9b6df779,Use gl_InstanceID instead of hacking triangle_strip,"{'added': [(460, '            render_group[""vao""].render('), (461, '                int(shader_wrapper.render_primitive),'), (462, '                instances=2,'), (463, '            )')], 'deleted': [(460, '            render_group[""vao""].render(int(shader_wrapper.render_primitive))')]}",98,98
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,6e56c31d67ce0d923adcc316b0179196393d1f95,4774d2bc3b34792c7f551bfaebb4230e9b6df779,Use gl_InstanceID instead of hacking triangle_strip,"{'added': [], 'deleted': [(1186, '                # submob.data[""base_color""][:] = submob.data[""fill_color""][0]')]}",260,260
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,6e56c31d67ce0d923adcc316b0179196393d1f95,4774d2bc3b34792c7f551bfaebb4230e9b6df779,Use gl_InstanceID instead of hacking triangle_strip,"{'added': [(4, 'in float fill_all;'), (12, '    if (bool(fill_all)) return;'), (14, '    float x = uv_coords.x;'), (15, '    float y = uv_coords.y;'), (16, '    if(y - x * x < 0) discard;')], 'deleted': [(4, 'in float fill_all;  // Either 0 or 1'), (5, ''), (6, 'in float orientation;'), (14, '    if (orientation == 0) return;'), (15, ''), (16, '    float x0 = uv_coords.x;'), (17, '    float y0 = uv_coords.y;'), (18, '    float Fxy = y0 - x0 * x0;'), (19, '    if(orientation * Fxy < 0) discard;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,6e56c31d67ce0d923adcc316b0179196393d1f95,4774d2bc3b34792c7f551bfaebb4230e9b6df779,Use gl_InstanceID instead of hacking triangle_strip,"{'added': [(4, 'layout (triangle_strip, max_vertices = 3) out;'), (14, 'in float v_inst_id[3];'), (17, 'out float fill_all;'), (40, '    // Curves are marked as ended when the handle after'), (46, '    if(int(v_inst_id[0]) % 2 == 0){'), (47, '        // Emit main triangle'), (48, '        fill_all = float(true);'), (49, '        uv_coords = vec2(0.0);'), (50, '        emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (51, '        emit_vertex_wrapper(v_base_point[0], v_color[0], unit_normal);'), (52, '        emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (53, '    }else{'), (54, '        // Emit edge triangle'), (55, '        fill_all = float(false);'), (56, '        uv_coords = vec2(0.0, 0.0);'), (57, '        emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (58, '        uv_coords = vec2(0.5, 0);'), (59, '        emit_vertex_wrapper(verts[1], v_color[1], unit_normal);'), (60, '        uv_coords = vec2(1.0, 1.0);'), (61, '        emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (62, '        EndPrimitive();'), (63, '    }')], 'deleted': [(4, 'layout (triangle_strip, max_vertices = 7) out;'), (14, ''), (17, ''), (18, 'out float orientation;'), (41, '    // Curves are marked as eneded when the handle after'), (47, '    // Emit main triangle'), (48, '    orientation = 0.0;'), (49, '    uv_coords = vec2(0.0);'), (50, '    emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (51, '    emit_vertex_wrapper(v_base_point[0], v_color[1], unit_normal);'), (52, '    emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (53, ''), (54, '    // Emit edge triangle'), (55, '    orientation = 1.0;'), (56, '    uv_coords = vec2(0, 0);'), (57, '    // Two dummies'), (58, '    emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (59, '    emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (60, '    // Inner corner'), (61, '    uv_coords = vec2(0.5, 0);'), (62, '    emit_vertex_wrapper(verts[1], v_color[1], unit_normal);'), (63, '    // Last corner'), (64, '    uv_coords = vec2(1.0, 1.0);'), (65, '    emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (66, '    EndPrimitive();')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,6e56c31d67ce0d923adcc316b0179196393d1f95,4774d2bc3b34792c7f551bfaebb4230e9b6df779,Use gl_InstanceID instead of hacking triangle_strip,"{'added': [(12, 'out float v_inst_id;'), (19, '    v_inst_id = gl_InstanceID;')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,6e56c31d67ce0d923adcc316b0179196393d1f95,4774d2bc3b34792c7f551bfaebb4230e9b6df779,Use gl_InstanceID instead of hacking triangle_strip,"{'added': [(157, '    // Curves are marked as ended when the handle after')], 'deleted': [(157, '    // Curves are marked as eneded when the handle after')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,87afdac6a4956a9d7455a3aeb55e65a2cbaae75e,6e56c31d67ce0d923adcc316b0179196393d1f95,Small clean up,"{'added': [(300, '        self.fill_texture_vao = self.ctx.simple_vertex_array('), (449, '        primitive = int(shader_wrapper.render_primitive)'), (454, '        if shader_wrapper.is_fill:'), (455, '            self.render_fill(render_group[""vao""], primitive)'), (457, '            render_group[""vao""].render(primitive)'), (462, '    def render_fill(self, vao, render_primitive: int):'), (463, '        """"""'), (464, '        VMobject fill is handled in a special way, where emited triangles'), (465, '        must be blended with moderngl.FUNC_SUBTRACT so as to effectively compute'), (466, '        a winding number around each pixel. This is rendered to a separate texture,'), (467, '        then that texture is overlayed onto the current fbo'), (468, '        """"""'), (469, '        self.fill_fbo.clear(0.0, 0.0, 0.0, 0.0)'), (470, '        self.fill_fbo.use()'), (471, '        self.ctx.enable(moderngl.BLEND)'), (472, '        self.ctx.blend_func = moderngl.ONE, moderngl.ONE'), (473, '        self.ctx.blend_equation = moderngl.FUNC_SUBTRACT'), (474, '        vao.render(render_primitive, instances=2)'), (475, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING'), (476, '        self.ctx.blend_equation = moderngl.FUNC_ADD'), (477, '        self.fbo.use()'), (478, '        self.fill_texture.use(0)'), (479, ""        self.fill_prog['Texture'].value = 0""), (480, '        self.fill_texture_vao.render(moderngl.TRIANGLE_STRIP)'), (481, '')], 'deleted': [(300, '        self.fill_vao = self.ctx.simple_vertex_array('), (453, '        # TODO'), (454, '        if shader_wrapper.render_to_texture:'), (455, '            self.fill_fbo.clear(0.0, 0.0, 0.0, 0.0)'), (456, '            self.fill_fbo.use()'), (457, '            self.ctx.enable(moderngl.BLEND)'), (458, '            self.ctx.blend_func = moderngl.ONE, moderngl.ONE'), (459, '            self.ctx.blend_equation = moderngl.FUNC_SUBTRACT'), (460, '            render_group[""vao""].render('), (461, '                int(shader_wrapper.render_primitive),'), (462, '                instances=2,'), (463, '            )'), (464, '            self.ctx.blend_func = moderngl.DEFAULT_BLENDING'), (465, '            self.ctx.blend_equation = moderngl.FUNC_ADD'), (466, '            self.fbo.use()'), (467, '            self.fill_texture.use(0)'), (468, ""            self.fill_prog['Texture'].value = 0""), (469, '            self.fill_vao.render(moderngl.TRIANGLE_STRIP)'), (471, '            render_group[""vao""].render(int(shader_wrapper.render_primitive))')]}",99,99
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,87afdac6a4956a9d7455a3aeb55e65a2cbaae75e,6e56c31d67ce0d923adcc316b0179196393d1f95,Small clean up,"{'added': [(1157, '            is_fill=True,')], 'deleted': [(1157, '            render_to_texture=True,')]}",260,260
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,87afdac6a4956a9d7455a3aeb55e65a2cbaae75e,6e56c31d67ce0d923adcc316b0179196393d1f95,Small clean up,"{'added': [(37, '        is_fill: bool = False,'), (48, '        self.is_fill = is_fill')], 'deleted': [(37, '        render_to_texture: bool = False,'), (48, '        self.render_to_texture = render_to_texture')]}",37,37
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,87afdac6a4956a9d7455a3aeb55e65a2cbaae75e,6e56c31d67ce0d923adcc316b0179196393d1f95,Small clean up,"{'added': [(51, '        emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (56, '        vec2 uv_coords_arr[3] = vec2[3]('), (57, '            vec2(0.0, 0.0),'), (58, '            vec2(0.5, 0),'), (59, '            vec2(1.0, 1.0)'), (60, '        );'), (61, '        for(int i = 0; i < 3; i ++){'), (62, '            uv_coords = uv_coords_arr[i];'), (63, '            emit_vertex_wrapper(verts[i], v_color[i], unit_normal);'), (64, '        }'), (66, '    EndPrimitive();')], 'deleted': [(50, '        emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (56, '        uv_coords = vec2(0.0, 0.0);'), (57, '        emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (58, '        uv_coords = vec2(0.5, 0);'), (59, '        emit_vertex_wrapper(verts[1], v_color[1], unit_normal);'), (60, '        uv_coords = vec2(1.0, 1.0);'), (61, '        emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (62, '        EndPrimitive();')]}",,
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,aa6c321a0a1e8864a8e1813149f3965298a0d1f6,97789fff35d43048ce776bf56bb57c6f3d6e1be1,Change InteractiveScene dot config,"{'added': [(71, '        radius=0.025,'), (72, '        glow_factor=2.0,')], 'deleted': [(71, '        radius=0.05,'), (72, '        glow_factor=1.0,')]}",151,151
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,945aa9713f49ff300d7107d1dd7f3c2da63925cb,87afdac6a4956a9d7455a3aeb55e65a2cbaae75e,Fix aligned subpaths bug,"{'added': [(848, '                new_subpaths1.append(new_subpaths1[-1][-1])'), (849, '                new_subpaths2.append(new_subpaths2[-1][-1])')], 'deleted': [(848, '                new_subpaths1.append(new_subpaths1[0][-1])'), (849, '                new_subpaths2.append(new_subpaths2[0][-1])')]}",260,260
manimlib/camera/camera.py,manimlib/camera/camera.py,88ed1a2fdb3582ca0e30927a1c23debf0a24e314,945aa9713f49ff300d7107d1dd7f3c2da63925cb,Have init_fill_fbo take in ctx as an argument,"{'added': [(234, '        self.init_fill_fbo(self.ctx)  # Experimental'), (258, '    def init_fill_fbo(self, ctx):'), (260, '        self.fill_texture = ctx.texture('), (265, '        # TODO, depth buffer is not really used yet'), (266, '        fill_depth = ctx.depth_renderbuffer(self.get_pixel_shape(), samples=self.samples)'), (267, '        self.fill_fbo = ctx.framebuffer(self.fill_texture, fill_depth)'), (268, '        self.fill_prog = ctx.program('), (289, '                    frag_color = texture(Texture, v_textcoord);'), (290, '                    if(frag_color.a == 0) discard;'), (299, '        self.fill_texture_vao = ctx.simple_vertex_array('), (301, ""            ctx.buffer(verts.astype('f4').tobytes()),"")], 'deleted': [(234, '        self.init_fill_fbo()  # Experimental'), (258, '    def init_fill_fbo(self):'), (260, '        self.fill_texture = self.ctx.texture('), (265, '        fill_depth = self.ctx.depth_renderbuffer(self.get_pixel_shape(), samples=self.samples)'), (266, '        self.fill_fbo = self.ctx.framebuffer(self.fill_texture, fill_depth)'), (267, '        self.fill_prog = self.ctx.program('), (288, '                    vec4 color = texture(Texture, v_textcoord);'), (289, '                    if(color.a == 0) discard;'), (290, '                    frag_color = color;'), (291, '                    // frag_color = vec4(1, 0, 0, 0.2);'), (300, '        self.fill_texture_vao = self.ctx.simple_vertex_array('), (302, ""            self.ctx.buffer(verts.astype('f4').tobytes()),"")]}",99,99
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,b93e284695ceb6e44637fa265b4cacc94b599183,88ed1a2fdb3582ca0e30927a1c23debf0a24e314,"In aligning families, scale inserted submobjects to 0","{'added': [(1676, '                new_submobs.append(submob.copy().scale(0))')], 'deleted': [(1676, '                new_submob = submob.copy()'), (1677, '                # If the submobject is at all transparent, then'), (1678, '                # make the copy completely transparent'), (1679, '                if submob.get_opacity() < 1:'), (1680, '                    new_submob.set_opacity(0)'), (1681, '                new_submobs.append(new_submob)')]}",501,501
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,516fe9155e4f5c3db0b5d13de6afd653fbe0cb29,b93e284695ceb6e44637fa265b4cacc94b599183,Small tweaks,"{'added': [(44, '    if (v_color[0].a == 0 && v_color[1].a == 0 && v_color[2].a == 0) return;'), (45, ''), (50, '        fill_all = 1.0;'), (57, '        fill_all = 0.0;'), (58, '        // A quadratic bezier curve with these points coincides with y = x^2')], 'deleted': [(48, '        fill_all = float(true);'), (55, '        fill_all = float(false);')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,72da9786a32b4f2f02017bd98e39a1fb204a79bf,516fe9155e4f5c3db0b5d13de6afd653fbe0cb29,Use null array for vert indices in place of None,"{'added': [(505, '        if len(indices) == 0:')], 'deleted': [(505, '        if indices is None:')]}",99,99
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,72da9786a32b4f2f02017bd98e39a1fb204a79bf,516fe9155e4f5c3db0b5d13de6afd653fbe0cb29,Use null array for vert indices in place of None,"{'added': [(1844, '        self.shader_indices = np.zeros(0)')], 'deleted': [(1844, '        self.shader_indices = None')]}",501,501
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,72da9786a32b4f2f02017bd98e39a1fb204a79bf,516fe9155e4f5c3db0b5d13de6afd653fbe0cb29,Use null array for vert indices in place of None,"{'added': [(40, '        self.vert_indices = vert_indices or np.zeros(0)'), (71, '        result.vert_data = self.vert_data.copy()'), (72, '        result.vert_indices = self.vert_indices.copy()'), (138, '            indices_list = [self.vert_indices, *(sw.vert_indices for sw in shader_wrappers)]'), (156, '        if indices_list is None:'), (160, '        if total_verts == 0:'), (161, '            return self'), (162, '')], 'deleted': [(40, '        self.vert_indices = vert_indices'), (71, '        result.vert_data = np.array(self.vert_data)'), (72, '        if result.vert_indices is not None:'), (73, '            result.vert_indices = np.array(self.vert_indices)'), (139, '            if self.vert_indices is not None:'), (140, '                indices_list = [self.vert_indices, *(sw.vert_indices for sw in shader_wrappers)]'), (141, '            else:'), (142, '                indices_list = None'), (160, '        if indices_list is None or self.vert_indices is None:')]}",36,36
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,e9c70dbfd9b737ea501da7ad268e0618ef2404af,72da9786a32b4f2f02017bd98e39a1fb204a79bf,Ensure vert_indices are always of type int,"{'added': [(40, '        self.vert_indices = (vert_indices or np.zeros(0)).astype(int)'), (157, '            self.vert_indices = resize_array(self.vert_indices, 0)')], 'deleted': [(40, '        self.vert_indices = vert_indices or np.zeros(0)')]}",36,36
manimlib/camera/camera.py,manimlib/camera/camera.py,f0df5c759d84c6da2233c5d3a3010deb189208e3,e9c70dbfd9b737ea501da7ad268e0618ef2404af,"Make winding fill optional, and make winding additive rather than toggling","{'added': [(258, '    def init_fill_fbo(self, ctx: moderngl.context.Context):'), (264, '            # Important to make sure floating point (not fixed point) is'), (265, '            # used so that alpha values are not clipped'), (266, ""            dtype='f2',""), (293, '                    frag_color = abs(frag_color);'), (458, '            self.render_fill(render_group[""vao""], primitive, shader_wrapper.vert_indices)'), (465, '    def render_fill(self, vao, render_primitive: int, indices: np.ndarray):'), (472, '        winding = (len(indices) == 0)'), (473, ""        vao.program['winding'].value = winding""), (474, '        if not winding:'), (475, '            vao.render(moderngl.TRIANGLES)'), (476, '            return'), (481, '        vao.render(render_primitive)'), (517, '            ibo = self.ctx.buffer(indices.astype(np.uint32))'), (518, '            # # The vao.render call is strangely longer'), (519, '            # # when an index buffer is used, so if the'), (520, '            # # mobject is not changing, meaning only its'), (521, '            # # uniforms are being updated, just create'), (522, '            # # a larger data array based on the indices'), (523, ""            # # and don't bother with the ibo""), (524, '            # vert_data = vert_data[indices]'), (525, '            # ibo = None')], 'deleted': [(258, '    def init_fill_fbo(self, ctx):'), (454, '            self.render_fill(render_group[""vao""], primitive)'), (461, '    def render_fill(self, vao, render_primitive: int):'), (472, '        self.ctx.blend_equation = moderngl.FUNC_SUBTRACT'), (473, '        vao.render(render_primitive, instances=2)'), (475, '        self.ctx.blend_equation = moderngl.FUNC_ADD'), (510, '            # The vao.render call is strangely longer'), (511, '            # when an index buffer is used, so if the'), (512, '            # mobject is not changing, meaning only its'), (513, '            # uniforms are being updated, just create'), (514, '            # a larger data array based on the indices'), (515, ""            # and don't bother with the ibo""), (516, '            vert_data = vert_data[indices]'), (517, '            ibo = None')]}",100,100
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f0df5c759d84c6da2233c5d3a3010deb189208e3,e9c70dbfd9b737ea501da7ad268e0618ef2404af,"Make winding fill optional, and make winding additive rather than toggling","{'added': [(106, '        self._use_winding_fill = True'), (403, '    def use_winding_fill(self, value: bool = True, recurse: bool = True):'), (404, '        for submob in self.get_family(recurse):'), (405, '            submob._use_winding_fill = value'), (406, '        return self'), (407, ''), (814, '        winding = self._use_winding_fill and vmobject._use_winding_fill'), (815, '        self.use_winding_fill(winding)'), (816, '        vmobject.use_winding_fill(winding)'), (821, '            if self._use_winding_fill and self.has_fill() \\'), (822, '                and vmobject.has_fill() and self.has_same_shape_as(vmobject):'), (909, '        if self.has_fill() and not self._use_winding_fill:'), (1114, '        for mob in self.get_family():'), (1115, '            if not mob.has_points():'), (1116, '                continue'), (1117, '            inner_ends = mob.get_subpath_end_indices()[:-1]'), (1118, '            mob.data[""point""][inner_ends + 1] = mob.data[""point""][inner_ends + 2]'), (1185, '        fill_indices = []'), (1192, '                if self._use_winding_fill:'), (1193, '                    # Add dummy'), (1194, '                    fill_datas.append(submob.data[fill_names][-1:])'), (1195, '                else:'), (1196, '                    fill_indices.append(submob.get_triangulation())'), (1211, '            self.fill_shader_wrapper.read_in(fill_datas, fill_indices or None),')], 'deleted': [(131, '        if self.has_fill():'), (132, '            self.get_triangulation()'), (814, '            if self.has_fill() and vmobject.has_fill() and self.has_same_shape_as(vmobject):'), (901, '        if self.has_fill():'), (994, '        # # Reset orientation data'), (995, '        # self.data[""orientation""][1::2, 0] = curve_orientations'), (996, '        # if ""orientation"" in self.locked_data_keys:'), (997, '        #     self.locked_data_keys.remove(""orientation"")'), (998, ''), (1111, '        if not self.has_points():'), (1112, '            return self'), (1113, '        inner_ends = self.get_subpath_end_indices()[:-1]'), (1114, '        self.data[""point""][inner_ends + 1] = self.data[""point""][inner_ends + 2]'), (1187, '                # Add dummy'), (1188, '                fill_datas.append(submob.data[fill_names][-1:])'), (1203, '            self.fill_shader_wrapper.read_in(fill_datas),')]}",267,267
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,f0df5c759d84c6da2233c5d3a3010deb189208e3,e9c70dbfd9b737ea501da7ad268e0618ef2404af,"Make winding fill optional, and make winding additive rather than toggling","{'added': [(3, 'uniform bool winding;'), (4, ''), (7, 'in float orientation;'), (15, ''), (16, '    if(winding && orientation > 0) frag_color *= -1;'), (17, ''), (22, '    float Fxy = (y - x * x);'), (23, '    if(!winding && orientation > 0) Fxy *= -1;'), (24, '    if(Fxy < 0) discard;')], 'deleted': [(16, '    if(y - x * x < 0) discard;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,f0df5c759d84c6da2233c5d3a3010deb189208e3,e9c70dbfd9b737ea501da7ad268e0618ef2404af,"Make winding fill optional, and make winding additive rather than toggling","{'added': [(4, 'layout (triangle_strip, max_vertices = 6) out;'), (6, 'uniform bool winding;'), (15, 'out float orientation;'), (19, '// A quadratic bezier curve with these points coincides with y = x^2'), (20, 'const vec2 SIMPLE_QUADRATIC[3] = vec2[3]('), (21, '    vec2(0.0, 0.0),'), (22, '    vec2(0.5, 0),'), (23, '    vec2(1.0, 1.0)'), (24, ');'), (32, 'void emit_triangle(vec3 points[3], vec4 v_color[3]){'), (33, '    vec3 unit_normal = get_unit_normal(points[0], points[1], points[2]);'), (34, '    orientation = sign(unit_normal.z);'), (35, ''), (36, '    for(int i = 0; i < 3; i++){'), (37, '        uv_coords = SIMPLE_QUADRATIC[i];'), (38, '        color = finalize_color(v_color[i], points[i], unit_normal);'), (39, '        gl_Position = get_gl_Position(points[i]);'), (40, '        EmitVertex();'), (41, '    }'), (42, '    EndPrimitive();'), (43, '}'), (44, ''), (45, ''), (46, 'void emit_in_triangle(){'), (47, '    emit_triangle('), (48, '        vec3[3](verts[0], verts[1], verts[2]),'), (49, '        vec4[3](v_color[0], v_color[1], v_color[2])'), (50, '    );'), (57, '    if (winding && int(v_vert_index[0]) % 2 == 1) return;'), (63, '    vec3 mid_vert;'), (64, '    if(winding){'), (67, '        emit_triangle('), (68, '            vec3[3](v_base_point[0], verts[0], verts[2]),'), (69, '            vec4[3](v_color[1], v_color[0], v_color[2])'), (70, '        );'), (71, '        // Edge triangle'), (73, '        emit_in_triangle();'), (74, '    }else{'), (75, '        // In this case, one should fill all if the vertices are'), (76, '        // not in sequential order'), (77, '        fill_all = float('), (78, '            (v_vert_index[1] - v_vert_index[0]) != 1.0 ||'), (79, '            (v_vert_index[2] - v_vert_index[1]) != 1.0'), (81, '        emit_in_triangle();')], 'deleted': [(4, 'layout (triangle_strip, max_vertices = 3) out;'), (6, 'uniform float anti_alias_width;'), (7, 'uniform float pixel_size;'), (8, 'uniform vec3 corner;'), (14, 'in float v_inst_id[3];'), (28, 'void emit_vertex_wrapper(vec3 point, vec4 v_color, vec3 unit_normal){'), (29, '    color = finalize_color(v_color, point, unit_normal);'), (30, '    gl_Position = get_gl_Position(point);'), (31, '    EmitVertex();'), (38, '    if (int(v_vert_index[0]) % 2 == 1) return;'), (44, '    if (v_color[0].a == 0 && v_color[1].a == 0 && v_color[2].a == 0) return;'), (45, ''), (46, '    vec3 unit_normal = get_unit_normal(verts[0], verts[1], verts[2]);'), (47, ''), (48, '    if(int(v_inst_id[0]) % 2 == 0){'), (51, '        uv_coords = vec2(0.0);'), (52, '        emit_vertex_wrapper(v_base_point[0], v_color[0], unit_normal);'), (53, '        emit_vertex_wrapper(verts[0], v_color[0], unit_normal);'), (54, '        emit_vertex_wrapper(verts[2], v_color[2], unit_normal);'), (55, '    }else{'), (56, '        // Emit edge triangle'), (58, '        // A quadratic bezier curve with these points coincides with y = x^2'), (59, '        vec2 uv_coords_arr[3] = vec2[3]('), (60, '            vec2(0.0, 0.0),'), (61, '            vec2(0.5, 0),'), (62, '            vec2(1.0, 1.0)'), (64, '        for(int i = 0; i < 3; i ++){'), (65, '            uv_coords = uv_coords_arr[i];'), (66, '            emit_vertex_wrapper(verts[i], v_color[i], unit_normal);'), (67, '        }'), (69, '    EndPrimitive();')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,f0df5c759d84c6da2233c5d3a3010deb189208e3,e9c70dbfd9b737ea501da7ad268e0618ef2404af,"Make winding fill optional, and make winding additive rather than toggling","{'added': [], 'deleted': [(8, 'out vec4 v_joint_product;'), (12, 'out float v_inst_id;'), (19, '    v_inst_id = gl_InstanceID;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,98eccab977d8edbe976d7c5457a10bae3e2f782b,f0df5c759d84c6da2233c5d3a3010deb189208e3,Ensure background rectangle matches orientation,"{'added': [(145, '    def add_background_rectangle('), (146, '        self,'), (147, '        color: ManimColor | None = None,'), (148, '        opacity: float = 0.75,'), (149, '        **kwargs'), (150, '    ):'), (151, '        normal = self.family_members_with_points()[0].get_unit_normal()'), (152, '        super().add_background_rectangle(color, opacity, **kwargs)'), (153, '        rect = self.background_rectangle'), (154, '        if np.dot(rect.get_unit_normal(), normal) < 0:'), (155, '            rect.reverse_points()'), (156, '        return self'), (157, '')], 'deleted': []}",269,269
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,307487e087fd285644ab14c50b69896fdfd9be46,98eccab977d8edbe976d7c5457a10bae3e2f782b,Don't pre-normalize joint_products,"{'added': [(878, '            mob.get_joint_products()'), (1073, '        a0_to_h = h - a0'), (1074, '        h_to_a1 = a1 - h')], 'deleted': [(1072, '        a0_to_h = normalize_along_axis(h - a0, 1)'), (1073, '        h_to_a1 = normalize_along_axis(a1 - h, 1)')]}",269,269
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,307487e087fd285644ab14c50b69896fdfd9be46,98eccab977d8edbe976d7c5457a10bae3e2f782b,Don't pre-normalize joint_products,"{'added': [(102, '    vec4 jp0 = normalize(v_joint_product[0]);'), (103, '    vec4 jp1 = normalize(v_joint_product[1]);'), (104, '    vec4 jp2 = normalize(v_joint_product[2]);'), (105, ''), (107, '    if(jp0.w < -0.9) buff0 *= 10 * (jp0.w + 1.0);'), (108, '    if(jp2.w < -0.9) buff2 *= 10 * (jp2.w + 1.0);'), (111, '    vec3 normal0 = get_joint_unit_normal(jp0);'), (112, '    vec3 normal2 = get_joint_unit_normal(jp2);'), (143, '    float orientation = dot(normal0, jp1.xyz);'), (149, '        create_joint(jp0, v01, buff0, c1, c1, c0, c0);'), (150, '        create_joint(jp2, -v12, buff2, c5, c5, c4, c4);'), (171, '    float cos_angle = normalize(v_joint_product[1]).w;')], 'deleted': [(103, '    if(v_joint_product[0].w < -0.9) buff0 *= 10 * (v_joint_product[0].w + 1.0);'), (104, '    if(v_joint_product[2].w < -0.9) buff2 *= 10 * (v_joint_product[2].w + 1.0);'), (107, '    vec3 normal0 = get_joint_unit_normal(v_joint_product[0]);'), (108, '    vec3 normal2 = get_joint_unit_normal(v_joint_product[2]);'), (139, '    float orientation = dot(normal0, v_joint_product[1].xyz);'), (145, '        create_joint(v_joint_product[0], v01, buff0, c1, c1, c0, c0);'), (146, '        create_joint(v_joint_product[2], -v12, buff2, c5, c5, c4, c4);'), (167, '    float cos_angle = v_joint_product[1].w;')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,088a2f65a3f80743a513e53d94042b9c202cd1ef,307487e087fd285644ab14c50b69896fdfd9be46,Misc. clean up,"{'added': [(260, '        size = self.get_pixel_shape()'), (262, '            size=size,'), (269, '        fill_depth = ctx.depth_renderbuffer(size)'), (295, '                    //TODO, set gl_FragDepth;'), (299, ''), (481, '        self.ctx.blend_func = ('), (482, '            moderngl.ONE, moderngl.ZERO,'), (483, '            moderngl.ONE, moderngl.ONE,'), (484, '        )')], 'deleted': [(261, '            size=self.get_pixel_shape(),'), (263, '            samples=self.samples,'), (269, '        fill_depth = ctx.depth_renderbuffer(self.get_pixel_shape(), samples=self.samples)'), (479, '        self.ctx.enable(moderngl.BLEND)'), (480, '        self.ctx.blend_func = moderngl.ONE, moderngl.ONE'), (484, '        self.fill_texture.use(0)'), (485, ""        self.fill_prog['Texture'].value = 0"")]}",100,100
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,088a2f65a3f80743a513e53d94042b9c202cd1ef,307487e087fd285644ab14c50b69896fdfd9be46,Misc. clean up,"{'added': [(46, 'void emit_simple_triangle(){'), (73, '        emit_simple_triangle();'), (81, '        emit_simple_triangle();')], 'deleted': [(46, 'void emit_in_triangle(){'), (73, '        emit_in_triangle();'), (81, '        emit_in_triangle();')]}",,
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,346d252451fe53c7fa52fda09e8c04fc1f6fea2c,088a2f65a3f80743a513e53d94042b9c202cd1ef,"Don't save triangulation, but do orient svg paths positively","{'added': [(32, 'PATH_TO_POINTS: dict[str, Vect3Array] = {}'), (323, '            # Always default to orienting outward'), (324, '            if self.get_unit_normal()[2] < 0:'), (325, '                self.reverse_points()'), (327, '            PATH_TO_POINTS[path_string] = self.get_points().copy()'), (329, '            points = PATH_TO_POINTS[path_string]')], 'deleted': [(32, 'PATH_TO_POINTS: dict[str, Tuple[Vect3Array, np.ndarray]] = {}'), (324, '            PATH_TO_POINTS[path_string] = ('), (325, '                self.get_points().copy(),'), (326, '                self.get_triangulation().copy()'), (327, '            )'), (329, '            points, triangulation = PATH_TO_POINTS[path_string]'), (331, '            self.triangulation = triangulation'), (332, '            self.needs_new_triangulation = False')]}",62,62
manimlib/animation/fading.py,manimlib/animation/fading.py,0e2d21bed3df1a3ee47565798178826d028df179,346d252451fe53c7fa52fda09e8c04fc1f6fea2c,Don't necessarily use VGroup with FadeTransform,"{'added': [(107, '        super().__init__(Group(mobject, target_mobject.copy()), **kwargs)')], 'deleted': [(106, '        group_type = Group'), (107, '        if isinstance(mobject, VMobject) and isinstance(target_mobject, VMobject):'), (108, '            group_type = VGroup'), (109, ''), (111, '        super().__init__(group_type(mobject, target_mobject.copy()), **kwargs)')]}",22,22
manimlib/camera/camera.py,manimlib/camera/camera.py,272925fa19e9014913e6b21606051a4d06132ea4,0e2d21bed3df1a3ee47565798178826d028df179,Change winding fill blend_func,"{'added': [(482, '            moderngl.ONE, moderngl.ONE,')], 'deleted': [(482, '            moderngl.ONE, moderngl.ZERO,')]}",100,100
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,6cf8c8d2e8f42789c7f7b412115a44d221efc790,272925fa19e9014913e6b21606051a4d06132ea4,Do refresh in pointwise_become_partial,"{'added': [(934, '            self.set_points(vm_points)')], 'deleted': [(934, '            self.set_points(vm_points, refresh=False)')]}",269,269
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,4cb9c9c2fc930af55181ded6aa73f945872c3322,6cf8c8d2e8f42789c7f7b412115a44d221efc790,Remove unnecessary normalize,"{'added': [(142, '    float orientation = dot(normal0, v_joint_product[1].xyz);')], 'deleted': [(103, '    vec4 jp1 = normalize(v_joint_product[1]);'), (143, '    float orientation = dot(normal0, jp1.xyz);')]}",,
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,93dd9f687b50c8f484a7362076429a5a9ac9d73c,4cb9c9c2fc930af55181ded6aa73f945872c3322,Ensure align_family works well with VMobject fill,"{'added': [(1676, '                new_submobs.append(submob.invisible_copy())'), (1680, '    def invisible_copy(self):'), (1681, '        return self.copy().set_opacity(0)'), (1682, '')], 'deleted': [(1676, '                new_submobs.append(submob.copy().scale(0))')]}",502,502
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,93dd9f687b50c8f484a7362076429a5a9ac9d73c,4cb9c9c2fc930af55181ded6aa73f945872c3322,Ensure align_family works well with VMobject fill,"{'added': [(881, '    def invisible_copy(self):'), (882, '        result = self.copy()'), (883, '        result.append_vectorized_mobject(self.copy().reverse_points())'), (884, '        result.set_opacity(0)'), (885, '        return result'), (886, ''), (1116, '            return self')], 'deleted': []}",270,270
manimlib/camera/camera.py,manimlib/camera/camera.py,7deaf4cb114734f0125bea8ae2b7a72da3bd6233,93dd9f687b50c8f484a7362076429a5a9ac9d73c,Small clean up,"{'added': [(479, '        self.fill_fbo.clear()'), (481, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE)')], 'deleted': [(479, '        self.fill_fbo.clear(0.0, 0.0, 0.0, 0.0)'), (481, '        self.ctx.blend_func = ('), (482, '            moderngl.ONE, moderngl.ONE,'), (483, '            moderngl.ONE, moderngl.ONE,'), (484, '        )')]}",100,100
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bc5c78de83287206c9775ed7a3ba2b3e67e45a07,7deaf4cb114734f0125bea8ae2b7a72da3bd6233,Add winding fill to VMobject args,"{'added': [(92, '        use_winding_fill: bool = True,'), (107, '        self._use_winding_fill = use_winding_fill')], 'deleted': [(106, '        self._use_winding_fill = True')]}",270,270
manimlib/camera/camera.py,manimlib/camera/camera.py,3339aad29ecfa673080bfa07cda383bd5220e4a8,a9a3ca08cd66bbdfa90dcdec39ad65b8a9cf3fd2,Separate CameraFrame into its own file,"{'added': [(10, 'from manimlib.camera.camera_frame import CameraFrame'), (14, 'from manimlib.constants import FRAME_WIDTH')], 'deleted': [(4, 'import math'), (10, 'from scipy.spatial.transform import Rotation'), (13, 'from manimlib.constants import DEGREES, RADIANS'), (16, 'from manimlib.constants import FRAME_HEIGHT, FRAME_WIDTH'), (17, 'from manimlib.constants import DOWN, LEFT, ORIGIN, OUT, RIGHT, UP'), (21, 'from manimlib.utils.simple_functions import fdiv'), (22, 'from manimlib.utils.space_ops import normalize'), (32, 'class CameraFrame(Mobject):'), (33, '    def __init__('), (34, '        self,'), (35, '        frame_shape: tuple[float, float] = (FRAME_WIDTH, FRAME_HEIGHT),'), (36, '        center_point: Vect3 = ORIGIN,'), (37, '        focal_dist_to_height: float = 2.0,'), (38, '        **kwargs,'), (39, '    ):'), (40, '        self.frame_shape = frame_shape'), (41, '        self.center_point = center_point'), (42, '        self.focal_dist_to_height = focal_dist_to_height'), (43, '        self.view_matrix = np.identity(4)'), (44, '        super().__init__(**kwargs)'), (45, ''), (46, '    def init_uniforms(self) -> None:'), (47, '        super().init_uniforms()'), (48, '        # As a quaternion'), (49, '        self.uniforms[""orientation""] = Rotation.identity().as_quat()'), (50, '        self.uniforms[""focal_dist_to_height""] = self.focal_dist_to_height'), (51, ''), (52, '    def init_points(self) -> None:'), (53, '        self.set_points([ORIGIN, LEFT, RIGHT, DOWN, UP])'), (54, '        self.set_width(self.frame_shape[0], stretch=True)'), (55, '        self.set_height(self.frame_shape[1], stretch=True)'), (56, '        self.move_to(self.center_point)'), (57, ''), (58, '    def set_orientation(self, rotation: Rotation):'), (59, '        self.uniforms[""orientation""][:] = rotation.as_quat()'), (60, '        return self'), (61, ''), (62, '    def get_orientation(self):'), (63, '        return Rotation.from_quat(self.uniforms[""orientation""])'), (64, ''), (65, '    def to_default_state(self):'), (66, '        self.center()'), (67, '        self.set_height(FRAME_HEIGHT)'), (68, '        self.set_width(FRAME_WIDTH)'), (69, '        self.set_orientation(Rotation.identity())'), (70, '        return self'), (71, ''), (72, '    def get_euler_angles(self):'), (73, '        return self.get_orientation().as_euler(""zxz"")[::-1]'), (74, ''), (75, '    def get_theta(self):'), (76, '        return self.get_euler_angles()[0]'), (77, ''), (78, '    def get_phi(self):'), (79, '        return self.get_euler_angles()[1]'), (80, ''), (81, '    def get_gamma(self):'), (82, '        return self.get_euler_angles()[2]'), (83, ''), (84, '    def get_inverse_camera_rotation_matrix(self):'), (85, '        return self.get_orientation().as_matrix().T'), (86, ''), (87, '    def get_view_matrix(self):'), (88, '        """"""'), (89, '        Returns a 4x4 for the affine transformation mapping a point'), (90, ""        into the camera's internal coordinate system""), (91, '        """"""'), (92, '        result = self.view_matrix'), (93, '        result[:] = np.identity(4)'), (94, '        result[:3, 3] = -self.get_center()'), (95, '        rotation = np.identity(4)'), (96, '        rotation[:3, :3] = self.get_inverse_camera_rotation_matrix()'), (97, '        result[:] = np.dot(rotation, result)'), (98, '        return result'), (99, ''), (100, '    def rotate(self, angle: float, axis: np.ndarray = OUT, **kwargs):'), (101, '        rot = Rotation.from_rotvec(angle * normalize(axis))'), (102, '        self.set_orientation(rot * self.get_orientation())'), (103, '        return self'), (104, ''), (105, '    def set_euler_angles('), (106, '        self,'), (107, '        theta: float | None = None,'), (108, '        phi: float | None = None,'), (109, '        gamma: float | None = None,'), (110, '        units: float = RADIANS'), (111, '    ):'), (112, '        eulers = self.get_euler_angles()  # theta, phi, gamma'), (113, '        for i, var in enumerate([theta, phi, gamma]):'), (114, '            if var is not None:'), (115, '                eulers[i] = var * units'), (116, '        self.set_orientation(Rotation.from_euler(""zxz"", eulers[::-1]))'), (117, '        return self'), (118, ''), (119, '    def reorient('), (120, '        self,'), (121, '        theta_degrees: float | None = None,'), (122, '        phi_degrees: float | None = None,'), (123, '        gamma_degrees: float | None = None,'), (124, '    ):'), (125, '        """"""'), (126, '        Shortcut for set_euler_angles, defaulting to taking'), (127, '        in angles in degrees'), (128, '        """"""'), (129, '        self.set_euler_angles(theta_degrees, phi_degrees, gamma_degrees, units=DEGREES)'), (130, '        return self'), (131, ''), (132, '    def set_theta(self, theta: float):'), (133, '        return self.set_euler_angles(theta=theta)'), (134, ''), (135, '    def set_phi(self, phi: float):'), (136, '        return self.set_euler_angles(phi=phi)'), (137, ''), (138, '    def set_gamma(self, gamma: float):'), (139, '        return self.set_euler_angles(gamma=gamma)'), (140, ''), (141, '    def increment_theta(self, dtheta: float):'), (142, '        self.rotate(dtheta, OUT)'), (143, '        return self'), (144, ''), (145, '    def increment_phi(self, dphi: float):'), (146, '        self.rotate(dphi, self.get_inverse_camera_rotation_matrix()[0])'), (147, '        return self'), (148, ''), (149, '    def increment_gamma(self, dgamma: float):'), (150, '        self.rotate(dgamma, self.get_inverse_camera_rotation_matrix()[2])'), (151, '        return self'), (152, ''), (153, '    def set_focal_distance(self, focal_distance: float):'), (154, '        self.uniforms[""focal_dist_to_height""] = focal_distance / self.get_height()'), (155, '        return self'), (156, ''), (157, '    def set_field_of_view(self, field_of_view: float):'), (158, '        self.uniforms[""focal_dist_to_height""] = 2 * math.tan(field_of_view / 2)'), (159, '        return self'), (160, ''), (161, '    def get_shape(self):'), (162, '        return (self.get_width(), self.get_height())'), (163, ''), (164, '    def get_center(self) -> np.ndarray:'), (165, '        # Assumes first point is at the center'), (166, '        return self.get_points()[0]'), (167, ''), (168, '    def get_width(self) -> float:'), (169, '        points = self.get_points()'), (170, '        return points[2, 0] - points[1, 0]'), (171, ''), (172, '    def get_height(self) -> float:'), (173, '        points = self.get_points()'), (174, '        return points[4, 1] - points[3, 1]'), (175, ''), (176, '    def get_focal_distance(self) -> float:'), (177, '        return self.uniforms[""focal_dist_to_height""] * self.get_height()'), (178, ''), (179, '    def get_field_of_view(self) -> float:'), (180, '        return 2 * math.atan(self.uniforms[""focal_dist_to_height""] / 2)'), (181, ''), (182, '    def get_implied_camera_location(self) -> np.ndarray:'), (183, '        to_camera = self.get_inverse_camera_rotation_matrix()[2]'), (184, '        dist = self.get_focal_distance()'), (185, '        return self.get_center() + dist * to_camera'), (186, '')]}",68,68
,manimlib/camera/camera_frame.py,3339aad29ecfa673080bfa07cda383bd5220e4a8,a9a3ca08cd66bbdfa90dcdec39ad65b8a9cf3fd2,Separate CameraFrame into its own file,"{'added': [(1, 'from __future__ import annotations'), (2, ''), (3, 'import math'), (4, ''), (5, 'import numpy as np'), (6, 'from scipy.spatial.transform import Rotation'), (7, ''), (8, 'from manimlib.constants import DEGREES, RADIANS'), (9, 'from manimlib.constants import FRAME_HEIGHT, FRAME_WIDTH'), (10, 'from manimlib.constants import DOWN, LEFT, ORIGIN, OUT, RIGHT, UP'), (11, 'from manimlib.mobject.mobject import Mobject'), (12, 'from manimlib.utils.space_ops import normalize'), (13, ''), (14, 'from typing import TYPE_CHECKING'), (15, ''), (16, 'if TYPE_CHECKING:'), (17, '    from manimlib.typing import Vect3'), (18, ''), (19, ''), (20, 'class CameraFrame(Mobject):'), (21, '    def __init__('), (22, '        self,'), (23, '        frame_shape: tuple[float, float] = (FRAME_WIDTH, FRAME_HEIGHT),'), (24, '        center_point: Vect3 = ORIGIN,'), (25, '        focal_dist_to_height: float = 2.0,'), (26, '        **kwargs,'), (27, '    ):'), (28, '        self.frame_shape = frame_shape'), (29, '        self.center_point = center_point'), (30, '        self.focal_dist_to_height = focal_dist_to_height'), (31, '        self.view_matrix = np.identity(4)'), (32, '        super().__init__(**kwargs)'), (33, ''), (34, '    def init_uniforms(self) -> None:'), (35, '        super().init_uniforms()'), (36, '        # As a quaternion'), (37, '        self.uniforms[""orientation""] = Rotation.identity().as_quat()'), (38, '        self.uniforms[""focal_dist_to_height""] = self.focal_dist_to_height'), (39, ''), (40, '    def init_points(self) -> None:'), (41, '        self.set_points([ORIGIN, LEFT, RIGHT, DOWN, UP])'), (42, '        self.set_width(self.frame_shape[0], stretch=True)'), (43, '        self.set_height(self.frame_shape[1], stretch=True)'), (44, '        self.move_to(self.center_point)'), (45, ''), (46, '    def set_orientation(self, rotation: Rotation):'), (47, '        self.uniforms[""orientation""][:] = rotation.as_quat()'), (48, '        return self'), (49, ''), (50, '    def get_orientation(self):'), (51, '        return Rotation.from_quat(self.uniforms[""orientation""])'), (52, ''), (53, '    def to_default_state(self):'), (54, '        self.center()'), (55, '        self.set_height(FRAME_HEIGHT)'), (56, '        self.set_width(FRAME_WIDTH)'), (57, '        self.set_orientation(Rotation.identity())'), (58, '        return self'), (59, ''), (60, '    def get_euler_angles(self):'), (61, '        return self.get_orientation().as_euler(""zxz"")[::-1]'), (62, ''), (63, '    def get_theta(self):'), (64, '        return self.get_euler_angles()[0]'), (65, ''), (66, '    def get_phi(self):'), (67, '        return self.get_euler_angles()[1]'), (68, ''), (69, '    def get_gamma(self):'), (70, '        return self.get_euler_angles()[2]'), (71, ''), (72, '    def get_inverse_camera_rotation_matrix(self):'), (73, '        return self.get_orientation().as_matrix().T'), (74, ''), (75, '    def get_view_matrix(self):'), (76, '        """"""'), (77, '        Returns a 4x4 for the affine transformation mapping a point'), (78, ""        into the camera's internal coordinate system""), (79, '        """"""'), (80, '        result = self.view_matrix'), (81, '        result[:] = np.identity(4)'), (82, '        result[:3, 3] = -self.get_center()'), (83, '        rotation = np.identity(4)'), (84, '        rotation[:3, :3] = self.get_inverse_camera_rotation_matrix()'), (85, '        result[:] = np.dot(rotation, result)'), (86, '        return result'), (87, ''), (88, '    def rotate(self, angle: float, axis: np.ndarray = OUT, **kwargs):'), (89, '        rot = Rotation.from_rotvec(angle * normalize(axis))'), (90, '        self.set_orientation(rot * self.get_orientation())'), (91, '        return self'), (92, ''), (93, '    def set_euler_angles('), (94, '        self,'), (95, '        theta: float | None = None,'), (96, '        phi: float | None = None,'), (97, '        gamma: float | None = None,'), (98, '        units: float = RADIANS'), (99, '    ):'), (100, '        eulers = self.get_euler_angles()  # theta, phi, gamma'), (101, '        for i, var in enumerate([theta, phi, gamma]):'), (102, '            if var is not None:'), (103, '                eulers[i] = var * units'), (104, '        self.set_orientation(Rotation.from_euler(""zxz"", eulers[::-1]))'), (105, '        return self'), (106, ''), (107, '    def reorient('), (108, '        self,'), (109, '        theta_degrees: float | None = None,'), (110, '        phi_degrees: float | None = None,'), (111, '        gamma_degrees: float | None = None,'), (112, '    ):'), (113, '        """"""'), (114, '        Shortcut for set_euler_angles, defaulting to taking'), (115, '        in angles in degrees'), (116, '        """"""'), (117, '        self.set_euler_angles(theta_degrees, phi_degrees, gamma_degrees, units=DEGREES)'), (118, '        return self'), (119, ''), (120, '    def set_theta(self, theta: float):'), (121, '        return self.set_euler_angles(theta=theta)'), (122, ''), (123, '    def set_phi(self, phi: float):'), (124, '        return self.set_euler_angles(phi=phi)'), (125, ''), (126, '    def set_gamma(self, gamma: float):'), (127, '        return self.set_euler_angles(gamma=gamma)'), (128, ''), (129, '    def increment_theta(self, dtheta: float):'), (130, '        self.rotate(dtheta, OUT)'), (131, '        return self'), (132, ''), (133, '    def increment_phi(self, dphi: float):'), (134, '        self.rotate(dphi, self.get_inverse_camera_rotation_matrix()[0])'), (135, '        return self'), (136, ''), (137, '    def increment_gamma(self, dgamma: float):'), (138, '        self.rotate(dgamma, self.get_inverse_camera_rotation_matrix()[2])'), (139, '        return self'), (140, ''), (141, '    def set_focal_distance(self, focal_distance: float):'), (142, '        self.uniforms[""focal_dist_to_height""] = focal_distance / self.get_height()'), (143, '        return self'), (144, ''), (145, '    def set_field_of_view(self, field_of_view: float):'), (146, '        self.uniforms[""focal_dist_to_height""] = 2 * math.tan(field_of_view / 2)'), (147, '        return self'), (148, ''), (149, '    def get_shape(self):'), (150, '        return (self.get_width(), self.get_height())'), (151, ''), (152, '    def get_center(self) -> np.ndarray:'), (153, '        # Assumes first point is at the center'), (154, '        return self.get_points()[0]'), (155, ''), (156, '    def get_width(self) -> float:'), (157, '        points = self.get_points()'), (158, '        return points[2, 0] - points[1, 0]'), (159, ''), (160, '    def get_height(self) -> float:'), (161, '        points = self.get_points()'), (162, '        return points[4, 1] - points[3, 1]'), (163, ''), (164, '    def get_focal_distance(self) -> float:'), (165, '        return self.uniforms[""focal_dist_to_height""] * self.get_height()'), (166, ''), (167, '    def get_field_of_view(self) -> float:'), (168, '        return 2 * math.atan(self.uniforms[""focal_dist_to_height""] / 2)'), (169, ''), (170, '    def get_implied_camera_location(self) -> np.ndarray:'), (171, '        to_camera = self.get_inverse_camera_rotation_matrix()[2]'), (172, '        dist = self.get_focal_distance()'), (173, '        return self.get_center() + dist * to_camera')], 'deleted': []}",,32
manimlib/camera/camera.py,manimlib/camera/camera.py,8c1e5f3b42dd187583737939e74402375fc7850a,3339aad29ecfa673080bfa07cda383bd5220e4a8,Change use_clip_plane to be a function,"{'added': [(297, '        self.set_ctx_clip_plane(shader_wrapper.use_clip_plane())')], 'deleted': [(297, '        self.set_ctx_clip_plane(shader_wrapper.use_clip_plane)')]}",68,68
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,8c1e5f3b42dd187583737939e74402375fc7850a,3339aad29ecfa673080bfa07cda383bd5220e4a8,Change use_clip_plane to be a function,"{'added': [], 'deleted': [(221, '        self.shader_wrapper.use_clip_plane = True'), (226, '        self.shader_wrapper.use_clip_plane = False')]}",48,48
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,8c1e5f3b42dd187583737939e74402375fc7850a,3339aad29ecfa673080bfa07cda383bd5220e4a8,Change use_clip_plane to be a function,"{'added': [(133, '    def use_clip_plane(self):'), (134, '        if ""clip_plane"" not in self.uniforms:'), (135, '            return False'), (136, '        return any(self.uniforms[""clip_plane""])'), (137, '')], 'deleted': [(35, '        use_clip_plane: bool = False,'), (46, '        self.use_clip_plane = use_clip_plane')]}",38,38
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,80729c0cb8e719d3aea242518564c2022d61fb27,8c1e5f3b42dd187583737939e74402375fc7850a,Only initialize ShaderWrappers as needed,"{'added': [(104, '        self._shaders_initialized: bool = False'), (1856, '        if self._shaders_initialized:'), (1857, '            self.shader_wrapper.refresh_id()'), (1861, '        if not self._shaders_initialized:'), (1862, '            self.init_shader_data()'), (1863, '            self._shaders_initialized = True'), (1864, '')], 'deleted': [(112, '        self.init_shader_data()'), (1846, '        # TODO, only call this when needed?'), (1857, '        self.shader_wrapper.refresh_id()')]}",504,504
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,80729c0cb8e719d3aea242518564c2022d61fb27,8c1e5f3b42dd187583737939e74402375fc7850a,Only initialize ShaderWrappers as needed,"{'added': [(1199, '        if not self._shaders_initialized:'), (1200, '            self.init_shader_data()'), (1201, '            self._shaders_initialized = True'), (1202, '')], 'deleted': []}",271,271
manimlib/animation/animation.py,manimlib/animation/animation.py,16d773f1b359ad312b0f88780bcab63968a4178b,80729c0cb8e719d3aea242518564c2022d61fb27,Remove refresh_shader_data,"{'added': [], 'deleted': [(68, '        self.mobject.refresh_shader_data()')]}",38,38
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,16d773f1b359ad312b0f88780bcab63968a4178b,80729c0cb8e719d3aea242518564c2022d61fb27,Remove refresh_shader_data,"{'added': [], 'deleted': [(1621, '            # In case any data arrays get resized when aligned to shader data'), (1622, '            mob1.refresh_shader_data()'), (1623, '            mob2.refresh_shader_data()'), (1734, '        # Be sure shader data has most up to date information'), (1735, '        self.refresh_shader_data()'), (1891, '    def refresh_shader_data(self):'), (1892, '        pass'), (1893, '')]}",503,503
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,16d773f1b359ad312b0f88780bcab63968a4178b,80729c0cb8e719d3aea242518564c2022d61fb27,Remove refresh_shader_data,"{'added': [], 'deleted': [(1247, '    def refresh_shader_data(self):'), (1248, '        self.get_shader_wrapper_list()'), (1249, '')]}",270,270
manimlib/camera/camera.py,manimlib/camera/camera.py,10047773f787bba010493e560cf025660771b736,16d773f1b359ad312b0f88780bcab63968a4178b,Have ShaderWrapper track OpenGL context,"{'added': [(340, '            for sw in mobject.get_shader_wrapper_list(self.ctx)')], 'deleted': [(340, '            for sw in mobject.get_shader_wrapper_list()')]}",68,68
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,10047773f787bba010493e560cf025660771b736,16d773f1b359ad312b0f88780bcab63968a4178b,Have ShaderWrapper track OpenGL context,"{'added': [(54, '    from moderngl.context import Context'), (1841, '    def init_shader_data(self, ctx: Context):'), (1844, '            context=ctx,'), (1857, '    def get_shader_wrapper(self, ctx: Context) -> ShaderWrapper:'), (1859, '            self.init_shader_data(ctx)'), (1868, '    def get_shader_wrapper_list(self, ctx: Context) -> list[ShaderWrapper]:'), (1870, '            [self.get_shader_wrapper(ctx)],'), (1871, '            *[sm.get_shader_wrapper_list(ctx) for sm in self.submobjects]'), (1894, '    def render(self, ctx: Context, camera_uniforms: dict):'), (1895, '        if self.data_has_changed:'), (1896, '            self.shader_wrappers = self.get_shader_wrapper_list(ctx)'), (1897, '        for shader_wrapper in self.shader_wrappers:'), (1898, '            shader_wrapper.update_uniforms(camera_uniforms)'), (1899, '            shader_wrapper.update_uniforms(self.get_uniforms)'), (1900, '            shader_wrapper.render()'), (1901, '')], 'deleted': [(1840, '    def init_shader_data(self):'), (1855, '    def get_shader_wrapper(self) -> ShaderWrapper:'), (1857, '            self.init_shader_data()'), (1866, '    def get_shader_wrapper_list(self) -> list[ShaderWrapper]:'), (1868, '            [self.get_shader_wrapper()],'), (1869, '            *[sm.get_shader_wrapper_list() for sm in self.submobjects]')]}",506,506
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,10047773f787bba010493e560cf025660771b736,16d773f1b359ad312b0f88780bcab63968a4178b,Have ShaderWrapper track OpenGL context,"{'added': [(49, '    from moderngl.context import Context'), (1168, '    def init_shader_data(self, ctx: Context):'), (1180, '            context=ctx,'), (1188, '            context=ctx,'), (1195, '        self.shader_wrappers = ['), (1196, '            self.back_stroke_shader_wrapper,'), (1197, '            self.fill_shader_wrapper,'), (1198, '            self.stroke_shader_wrapper,'), (1199, '        ]'), (1202, '        if not self._shaders_initialized:'), (1203, '            return self'), (1204, '        for wrapper in self.shader_wrappers:'), (1208, '    def get_shader_wrapper_list(self, ctx: Context) -> list[ShaderWrapper]:'), (1210, '            self.init_shader_data(ctx)')], 'deleted': [(1167, '    def init_shader_data(self):'), (1194, '        for wrapper in self.get_shader_wrapper_list():'), (1198, '    def get_shader_wrapper_list(self) -> list[ShaderWrapper]:'), (1200, '            self.init_shader_data()')]}",271,271
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,10047773f787bba010493e560cf025660771b736,16d773f1b359ad312b0f88780bcab63968a4178b,Have ShaderWrapper track OpenGL context,"{'added': [(29, '        context: moderngl.context.Context,'), (39, '        self.ctx = context')], 'deleted': []}",38,38
manimlib/camera/camera.py,manimlib/camera/camera.py,329974135993740805d0edb4fcbea402d2367fcd,10047773f787bba010493e560cf025660771b736,"Move program code to ShaderWrapper, away from Camera","{'added': [(367, '        shader_program = shader_wrapper.program'), (368, '        vert_format = shader_wrapper.vert_format')], 'deleted': [(70, '        self.init_shaders()'), (368, '        shader_program, vert_format = self.get_shader_program(shader_wrapper)'), (395, '    def init_shaders(self) -> None:'), (396, '        # Initialize with the null id going to None'), (397, '        self.id_to_shader_program: dict[int, tuple[moderngl.Program, str] | None] = {hash(""""): None}'), (398, ''), (399, '    def get_shader_program('), (400, '        self,'), (401, '        shader_wrapper: ShaderWrapper'), (402, '    ) -> tuple[moderngl.Program, str] | None:'), (403, '        sid = shader_wrapper.get_program_id()'), (404, '        if sid not in self.id_to_shader_program:'), (405, '            # Create shader program for the first time, then cache'), (406, '            # in the id_to_shader_program dictionary'), (407, '            program = self.ctx.program(**shader_wrapper.get_program_code())'), (408, '            vert_format = moderngl.detect_format(program, shader_wrapper.vert_attributes)'), (409, '            self.id_to_shader_program[sid] = (program, vert_format)'), (410, '        return self.id_to_shader_program[sid]')]}",65,65
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,329974135993740805d0edb4fcbea402d2367fcd,10047773f787bba010493e560cf025660771b736,"Move program code to ShaderWrapper, away from Camera","{'added': [(12, 'from manimlib.utils.shaders import get_shader_program'), (51, '        self.init_program()'), (54, '    def init_program_code(self) -> None:'), (55, '        def get_code(name: str) -> str | None:'), (56, '            return get_shader_code_from_file('), (57, '                os.path.join(self.shader_folder, f""{name}.glsl"")'), (58, '            )'), (59, ''), (60, '        self.program_code: dict[str, str | None] = {'), (61, '            ""vertex_shader"": get_code(""vert""),'), (62, '            ""geometry_shader"": get_code(""geom""),'), (63, '            ""fragment_shader"": get_code(""frag""),'), (64, '        }'), (65, ''), (66, '    def init_program(self):'), (67, '        if not self.shader_folder:'), (68, '            self.program = None'), (69, '            self.vert_format = None'), (70, '            return'), (71, '        self.program = get_shader_program(self.ctx, **self.program_code)'), (72, '        self.vert_format = moderngl.detect_format(self.program, self.vert_attributes)'), (73, ''), (140, '        self.init_program()')], 'deleted': [(112, '    def init_program_code(self) -> None:'), (113, '        def get_code(name: str) -> str | None:'), (114, '            return get_shader_code_from_file('), (115, '                os.path.join(self.shader_folder, f""{name}.glsl"")'), (116, '            )'), (117, ''), (118, '        self.program_code: dict[str, str | None] = {'), (119, '            ""vertex_shader"": get_code(""vert""),'), (120, '            ""geometry_shader"": get_code(""geom""),'), (121, '            ""fragment_shader"": get_code(""frag""),'), (122, '        }'), (123, ''), (124, '    def get_program_code(self) -> dict[str, str | None]:'), (125, '        return self.program_code'), (126, '')]}",39,39
manimlib/utils/shaders.py,manimlib/utils/shaders.py,329974135993740805d0edb4fcbea402d2367fcd,10047773f787bba010493e560cf025660771b736,"Move program code to ShaderWrapper, away from Camera","{'added': [(6, 'import moderngl'), (14, '    from typing import Sequence, Optional'), (17, '@lru_cache()'), (18, 'def get_shader_program('), (19, '        ctx: moderngl.context.Context,'), (20, '        vertex_shader: str,'), (21, '        fragment_shader: Optional[str] = None,'), (22, '        geometry_shader: Optional[str] = None,'), (23, '    ) -> moderngl.Program:'), (24, '    return ctx.program('), (25, '        vertex_shader=vertex_shader,'), (26, '        fragment_shader=fragment_shader,'), (27, '        geometry_shader=geometry_shader,'), (28, '    )'), (29, ''), (30, ''), (31, '@lru_cache()')], 'deleted': [(13, '    from typing import Sequence'), (16, '@lru_cache(maxsize=12)')]}",7,7
manimlib/camera/camera.py,manimlib/camera/camera.py,c94d8fd3b014b16f544f08045f7b07211e6d111a,329974135993740805d0edb4fcbea402d2367fcd,Move Texture handling and vao creation outside of Camera,"{'added': [(18, 'from manimlib.utils.shaders import get_texture_id'), (139, ""        self.fill_prog['Texture'].value = get_texture_id(self.fill_texture)""), (140, ''), (291, '        shader_wrapper.update_program_uniforms(self.perspective_uniforms)'), (346, '            ""vao"": shader_wrapper.get_vao(single_use),'), (351, '        render_group[""shader_wrapper""].release()')], 'deleted': [(70, '        self.init_textures()'), (139, '        tid = self.n_textures'), (140, '        self.fill_texture.use(tid)'), (141, ""        self.fill_prog['Texture'].value = tid""), (142, '        self.n_textures += 1'), (292, '        shader_program = render_group[""prog""]'), (294, '        self.set_shader_uniforms(shader_program, shader_wrapper)'), (347, '        # Data buffer'), (348, '        vert_data = shader_wrapper.vert_data'), (349, '        indices = shader_wrapper.vert_indices'), (350, '        if len(indices) == 0:'), (351, '            ibo = None'), (352, '        elif single_use:'), (353, '            ibo = self.ctx.buffer(indices.astype(np.uint32))'), (354, '        else:'), (355, '            ibo = self.ctx.buffer(indices.astype(np.uint32))'), (356, '            # # The vao.render call is strangely longer'), (357, '            # # when an index buffer is used, so if the'), (358, '            # # mobject is not changing, meaning only its'), (359, '            # # uniforms are being updated, just create'), (360, '            # # a larger data array based on the indices'), (361, ""            # # and don't bother with the ibo""), (362, '            # vert_data = vert_data[indices]'), (363, '            # ibo = None'), (364, '        vbo = self.ctx.buffer(vert_data)'), (365, ''), (366, '        # Program and vertex array'), (367, '        shader_program = shader_wrapper.program'), (368, '        vert_format = shader_wrapper.vert_format'), (369, '        attributes = shader_wrapper.vert_attributes'), (370, '        vao = self.ctx.vertex_array('), (371, '            program=shader_program,'), (372, '            content=[(vbo, vert_format, *attributes)],'), (373, '            index_buffer=ibo,'), (374, '        )'), (376, '            ""vbo"": vbo,'), (377, '            ""ibo"": ibo,'), (378, '            ""vao"": vao,'), (379, '            ""prog"": shader_program,'), (385, '        for key in [""vbo"", ""ibo"", ""vao""]:'), (386, '            if render_group[key] is not None:'), (387, '                render_group[key].release()'), (394, '    # Shaders'), (395, ''), (396, '    def set_shader_uniforms('), (397, '        self,'), (398, '        shader: moderngl.Program,'), (399, '        shader_wrapper: ShaderWrapper'), (400, '    ) -> None:'), (401, '        for name, path in shader_wrapper.texture_paths.items():'), (402, '            tid = self.get_texture_id(path)'), (403, '            shader[name].value = tid'), (404, '        for name, value in it.chain(self.perspective_uniforms.items(), shader_wrapper.uniforms.items()):'), (405, '            if name in shader:'), (406, '                if isinstance(value, np.ndarray) and value.ndim > 0:'), (407, '                    value = tuple(value)'), (408, '                shader[name].value = value'), (409, ''), (425, '    def init_textures(self) -> None:'), (426, '        self.n_textures: int = 0'), (427, '        self.path_to_texture: dict['), (428, '            str, tuple[int, moderngl.Texture]'), (429, '        ] = {}'), (430, ''), (431, '    def get_texture_id(self, path: str) -> int:'), (432, '        if path not in self.path_to_texture:'), (433, '            tid = self.n_textures'), (434, '            self.n_textures += 1'), (435, '            im = Image.open(path).convert(""RGBA"")'), (436, '            texture = self.ctx.texture('), (437, '                size=im.size,'), (438, '                components=len(im.getbands()),'), (439, '                data=im.tobytes(),'), (440, '            )'), (441, '            texture.use(location=tid)'), (442, '            self.path_to_texture[path] = (tid, texture)'), (443, '        return self.path_to_texture[path][0]'), (444, ''), (445, '    def release_texture(self, path: str):'), (446, '        tid_and_texture = self.path_to_texture.pop(path, None)'), (447, '        if tid_and_texture:'), (448, '            tid_and_texture[1].release()'), (449, '        return self'), (450, '')]}",50,50
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c94d8fd3b014b16f544f08045f7b07211e6d111a,329974135993740805d0edb4fcbea402d2367fcd,Move Texture handling and vao creation outside of Camera,"{'added': [(1864, '        self.shader_wrapper.uniforms.update(self.get_uniforms())')], 'deleted': [(1864, '        self.shader_wrapper.uniforms = self.get_uniforms()')]}",506,506
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c94d8fd3b014b16f544f08045f7b07211e6d111a,329974135993740805d0edb4fcbea402d2367fcd,Move Texture handling and vao creation outside of Camera,"{'added': [(1253, '            sw.uniforms.update(family[0].get_uniforms())')], 'deleted': [(1253, '            sw.uniforms = family[0].get_uniforms()')]}",271,271
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,c94d8fd3b014b16f544f08045f7b07211e6d111a,329974135993740805d0edb4fcbea402d2367fcd,Move Texture handling and vao creation outside of Camera,"{'added': [(13, 'from manimlib.utils.shaders import image_path_to_texture'), (14, 'from manimlib.utils.shaders import get_texture_id'), (15, 'from manimlib.utils.shaders import release_texture'), (20, '    from typing import List, Optional'), (35, '        vert_indices: Optional[np.ndarray] = None,'), (36, '        shader_folder: Optional[str] = None,'), (37, '        uniforms: Optional[dict[str, float | np.ndarray]] = None,  # A dictionary mapping names of uniform variables'), (38, '        texture_paths: Optional[dict[str, str]] = None,  # A dictionary mapping names to filepaths for textures.'), (52, ''), (53, '        self.vbo = None'), (54, '        self.ibo = None'), (55, '        self.vao = None'), (56, ''), (59, '        if texture_paths is not None:'), (60, '            self.init_textures(texture_paths)'), (83, '    def init_textures(self, texture_paths: dict[str, str]):'), (84, '        for name, path in texture_paths.items():'), (85, '            texture = image_path_to_texture(path, self.ctx)'), (86, '            tid = get_texture_id(texture)'), (87, '            self.uniforms[name] = tid'), (88, ''), (197, ''), (198, '    def update_program_uniforms(self, camera_uniforms: dict):'), (199, '        if self.program is None:'), (200, '            return'), (201, '        for name, value in (*camera_uniforms.items(), *self.uniforms.items()):'), (202, '            if name in self.program:'), (203, '                if isinstance(value, np.ndarray) and value.ndim > 0:'), (204, '                    value = tuple(value)'), (205, '                self.program[name].value = value'), (206, ''), (207, '    def get_vao(self, single_use: bool = False):'), (208, '        # Data buffer'), (209, '        vert_data = self.vert_data'), (210, '        indices = self.vert_indices'), (211, '        if len(indices) == 0:'), (212, '            self.ibo = None'), (213, '        elif single_use or self.is_fill:'), (214, '            self.ibo = self.ctx.buffer(indices.astype(np.uint32))'), (215, '        else:'), (216, '            # The vao.render call is strangely longer'), (217, '            # when an index buffer is used, so if the'), (218, '            # mobject is not changing, meaning only its'), (219, '            # uniforms are being updated, just create'), (220, '            # a larger data array based on the indices'), (221, ""            # and don't bother with the ibo""), (222, '            vert_data = vert_data[indices]'), (223, '            self.ibo = None'), (224, '        self.vbo = self.ctx.buffer(vert_data)'), (225, ''), (226, '        # Vertex array object'), (227, '        self.vao = self.ctx.vertex_array('), (228, '            program=self.program,'), (229, '            content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (230, '            index_buffer=self.ibo,'), (231, '        )'), (232, '        return self.vao'), (233, ''), (234, '    def release(self):'), (235, '        for obj in (self.vbo, self.ibo, self.vao):'), (236, '            if obj is not None:'), (237, '                obj.release()'), (238, '        self.vbo = None'), (239, '        self.ibo = None'), (240, '        self.vao = None')], 'deleted': [(17, '    from typing import List'), (32, '        vert_indices: np.ndarray | None = None,'), (33, '        shader_folder: str | None = None,'), (34, '        uniforms: dict[str, float | np.ndarray] | None = None,  # A dictionary mapping names of uniform variables'), (35, '        texture_paths: dict[str, str] | None = None,  # A dictionary mapping names to filepaths for textures.'), (46, '        self.texture_paths = texture_paths or dict()'), (83, '            all('), (84, '                self.texture_paths[key] == shader_wrapper.texture_paths[key]'), (85, '                for key in self.texture_paths'), (86, '            ),'), (97, '        if self.texture_paths:'), (98, '            result.texture_paths = dict(self.texture_paths)'), (119, '            self.texture_paths,')]}",52,52
manimlib/utils/shaders.py,manimlib/utils/shaders.py,c94d8fd3b014b16f544f08045f7b07211e6d111a,329974135993740805d0edb4fcbea402d2367fcd,Move Texture handling and vao creation outside of Camera,"{'added': [(7, 'from PIL import Image'), (18, 'ID_TO_TEXTURE: dict[int, moderngl.Texture] = dict()'), (19, ''), (20, ''), (21, '@lru_cache()'), (22, 'def image_path_to_texture(path: str, ctx: moderngl.Context) -> moderngl.Texture:'), (23, '    im = Image.open(path).convert(""RGBA"")'), (24, '    return ctx.texture('), (25, '        size=im.size,'), (26, '        components=len(im.getbands()),'), (27, '        data=im.tobytes(),'), (28, '    )'), (29, ''), (30, ''), (31, 'def get_texture_id(texture: moderngl.Texture) -> int:'), (32, '    tid = 0'), (33, '    while tid in ID_TO_TEXTURE:'), (34, '        tid += 1'), (35, '    ID_TO_TEXTURE[tid] = texture'), (36, '    texture.use(location=tid)'), (37, '    return tid'), (38, ''), (39, ''), (40, 'def release_texture(texture_id: int):'), (41, '    texture = ID_TO_TEXTURE.pop(texture_id, None)'), (42, '    if texture is not None:'), (43, '        texture.release()'), (44, ''), (45, '')], 'deleted': []}",12,12
manimlib/camera/camera.py,manimlib/camera/camera.py,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,c94d8fd3b014b16f544f08045f7b07211e6d111a,Move most of rendering logic to ShaderWrapper,"{'added': [(91, '        self.ctx.enable(moderngl.BLEND)'), (222, '        shader_wrapper.render(self.perspective_uniforms)'), (248, '        shader_wrapper.get_vao()')], 'deleted': [(73, '        self.init_fill_fbo(self.ctx)  # Experimental'), (90, '        self.set_ctx_blending()'), (97, '    def init_fill_fbo(self, ctx: moderngl.context.Context):'), (98, '        # Experimental'), (99, '        size = self.get_pixel_shape()'), (100, '        self.fill_texture = ctx.texture('), (101, '            size=size,'), (102, '            components=4,'), (103, '            # Important to make sure floating point (not fixed point) is'), (104, '            # used so that alpha values are not clipped'), (105, ""            dtype='f2',""), (106, '        )'), (107, '        # TODO, depth buffer is not really used yet'), (108, '        fill_depth = ctx.depth_renderbuffer(size)'), (109, '        self.fill_fbo = ctx.framebuffer(self.fill_texture, fill_depth)'), (110, '        self.fill_prog = ctx.program('), (111, ""            vertex_shader='''""), (112, '                #version 330'), (113, ''), (114, '                in vec2 texcoord;'), (115, '                out vec2 v_textcoord;'), (116, ''), (117, '                void main() {'), (118, '                    gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (119, '                    v_textcoord = texcoord;'), (120, '                }'), (121, ""            ''',""), (122, ""            fragment_shader='''""), (123, '                #version 330'), (124, ''), (125, '                uniform sampler2D Texture;'), (126, ''), (127, '                in vec2 v_textcoord;'), (128, '                out vec4 frag_color;'), (129, ''), (130, '                void main() {'), (131, '                    frag_color = texture(Texture, v_textcoord);'), (132, '                    frag_color = abs(frag_color);'), (133, '                    if(frag_color.a == 0) discard;'), (134, '                    //TODO, set gl_FragDepth;'), (135, '                }'), (136, ""            ''',""), (137, '        )'), (138, ''), (139, ""        self.fill_prog['Texture'].value = get_texture_id(self.fill_texture)""), (140, ''), (141, '        verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (142, '        self.fill_texture_vao = ctx.simple_vertex_array('), (143, '            self.fill_prog,'), (144, ""            ctx.buffer(verts.astype('f4').tobytes()),""), (145, ""            'texcoord',""), (146, '        )'), (147, ''), (148, '    def set_ctx_blending(self, enable: bool = True) -> None:'), (149, '        if enable:'), (150, '            self.ctx.enable(moderngl.BLEND)'), (151, '        else:'), (152, '            self.ctx.disable(moderngl.BLEND)'), (153, ''), (154, '    def set_ctx_depth_test(self, enable: bool = True) -> None:'), (155, '        if enable:'), (156, '            self.ctx.enable(moderngl.DEPTH_TEST)'), (157, '        else:'), (158, '            self.ctx.disable(moderngl.DEPTH_TEST)'), (159, ''), (160, '    def set_ctx_clip_plane(self, enable: bool = True) -> None:'), (161, '        if enable:'), (162, '            gl.glEnable(gl.GL_CLIP_DISTANCE0)'), (163, ''), (290, '        primitive = int(shader_wrapper.render_primitive)'), (291, '        shader_wrapper.update_program_uniforms(self.perspective_uniforms)'), (292, '        self.set_ctx_depth_test(shader_wrapper.depth_test)'), (293, '        self.set_ctx_clip_plane(shader_wrapper.use_clip_plane())'), (294, ''), (295, '        if shader_wrapper.is_fill:'), (296, '            self.render_fill(render_group[""vao""], primitive, shader_wrapper.vert_indices)'), (297, '        else:'), (298, '            render_group[""vao""].render(primitive)'), (303, '    def render_fill(self, vao, render_primitive: int, indices: np.ndarray):'), (304, '        """"""'), (305, '        VMobject fill is handled in a special way, where emited triangles'), (306, '        must be blended with moderngl.FUNC_SUBTRACT so as to effectively compute'), (307, '        a winding number around each pixel. This is rendered to a separate texture,'), (308, '        then that texture is overlayed onto the current fbo'), (309, '        """"""'), (310, '        winding = (len(indices) == 0)'), (311, ""        vao.program['winding'].value = winding""), (312, '        if not winding:'), (313, '            vao.render(moderngl.TRIANGLES)'), (314, '            return'), (315, '        self.fill_fbo.clear()'), (316, '        self.fill_fbo.use()'), (317, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE)'), (318, '        vao.render(render_primitive)'), (319, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING'), (320, '        self.fbo.use()'), (321, '        self.fill_texture_vao.render(moderngl.TRIANGLE_STRIP)'), (322, ''), (346, '            ""vao"": shader_wrapper.get_vao(single_use),')]}",40,40
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,c94d8fd3b014b16f544f08045f7b07211e6d111a,Move most of rendering logic to ShaderWrapper,"{'added': [(1844, '            ctx=ctx,')], 'deleted': [(1844, '            context=ctx,')]}",506,506
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,c94d8fd3b014b16f544f08045f7b07211e6d111a,Move most of rendering logic to ShaderWrapper,"{'added': [(43, 'from manimlib.shader_wrapper import FillShaderWrapper'), (1180, '        self.fill_shader_wrapper = FillShaderWrapper('), (1181, '            ctx=ctx,'), (1188, '            ctx=ctx,')], 'deleted': [(1179, '        self.fill_shader_wrapper = ShaderWrapper('), (1180, '            context=ctx,'), (1185, '            is_fill=True,'), (1188, '            context=ctx,')]}",271,271
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,c94d8fd3b014b16f544f08045f7b07211e6d111a,Move most of rendering logic to ShaderWrapper,"{'added': [(7, 'import OpenGL.GL as gl'), (11, 'from manimlib.constants import DEFAULT_PIXEL_HEIGHT'), (12, 'from manimlib.constants import DEFAULT_PIXEL_WIDTH'), (36, '        ctx: moderngl.context.Context,'), (45, '        self.ctx = ctx'), (52, '        self.render_primitive = render_primitive'), (103, '    def __del__(self):'), (104, '        self.release()'), (105, ''), (155, '    # Changing context'), (161, '    def set_ctx_depth_test(self, enable: bool = True) -> None:'), (162, '        if enable:'), (163, '            self.ctx.enable(moderngl.DEPTH_TEST)'), (164, '        else:'), (165, '            self.ctx.disable(moderngl.DEPTH_TEST)'), (166, ''), (167, '    def set_ctx_clip_plane(self, enable: bool = True) -> None:'), (168, '        if enable:'), (169, '            gl.glEnable(gl.GL_CLIP_DISTANCE0)'), (170, ''), (171, ''), (172, '    # Related to data and rendering'), (173, '    def render(self, camera_uniforms: dict):'), (174, '        self.update_program_uniforms(camera_uniforms)'), (175, '        self.set_ctx_depth_test(self.depth_test)'), (176, '        self.set_ctx_clip_plane(self.use_clip_plane())'), (177, ''), (178, '        # TODO, generate on the fly?'), (179, '        assert(self.vao is not None)'), (180, '        self.vao.render(self.render_primitive)'), (181, ''), (233, '    def get_vertex_buffer_object(self, refresh: bool = True):'), (234, '        if refresh:'), (235, '            self.vbo = self.ctx.buffer(self.vert_data)'), (236, '        return self.vbo'), (238, '    def get_index_buffer_object(self, refresh: bool = True):'), (239, '        if refresh and len(self.vert_indices) > 0:'), (240, '            self.ibo = self.ctx.buffer(self.vert_indices.astype(np.uint32))'), (241, '        return self.ibo'), (242, ''), (243, '    def get_vao(self, refresh: bool = True):'), (244, '        # Data buffer'), (245, '        vbo = self.get_vertex_buffer_object(refresh)'), (246, '        ibo = self.get_index_buffer_object(refresh)'), (250, '            content=[(vbo, self.vert_format, *self.vert_attributes)],'), (251, '            index_buffer=ibo,'), (262, ''), (263, ''), (264, 'class FillShaderWrapper(ShaderWrapper):'), (265, '    def __init__('), (266, '        self,'), (267, '        ctx: moderngl.context.Context,'), (268, '        *args,'), (269, '        **kwargs'), (270, '    ):'), (271, '        super().__init__(ctx, *args, **kwargs)'), (272, ''), (273, '        size = (2 * DEFAULT_PIXEL_WIDTH, 2 * DEFAULT_PIXEL_HEIGHT)'), (274, '        self.fill_texture = ctx.texture('), (275, '            size=size,'), (276, '            components=4,'), (277, '            # Important to make sure floating point (not fixed point) is'), (278, '            # used so that alpha values are not clipped'), (279, ""            dtype='f2',""), (280, '        )'), (281, '        # TODO, depth buffer is not really used yet'), (282, '        fill_depth = ctx.depth_renderbuffer(size)'), (283, '        self.fill_fbo = ctx.framebuffer(self.fill_texture, fill_depth)'), (284, '        self.fill_prog = ctx.program('), (285, ""            vertex_shader='''""), (286, '                #version 330'), (287, ''), (288, '                in vec2 texcoord;'), (289, '                out vec2 v_textcoord;'), (290, ''), (291, '                void main() {'), (292, '                    gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (293, '                    v_textcoord = texcoord;'), (294, '                }'), (295, ""            ''',""), (296, ""            fragment_shader='''""), (297, '                #version 330'), (298, ''), (299, '                uniform sampler2D Texture;'), (300, ''), (301, '                in vec2 v_textcoord;'), (302, '                out vec4 frag_color;'), (303, ''), (304, '                void main() {'), (305, '                    frag_color = texture(Texture, v_textcoord);'), (306, '                    frag_color = abs(frag_color);'), (307, '                    if(frag_color.a == 0) discard;'), (308, '                    //TODO, set gl_FragDepth;'), (309, '                }'), (310, ""            ''',""), (311, '        )'), (312, ''), (313, ""        self.fill_prog['Texture'].value = get_texture_id(self.fill_texture)""), (314, ''), (315, '        verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (316, '        self.fill_texture_vao = ctx.simple_vertex_array('), (317, '            self.fill_prog,'), (318, ""            ctx.buffer(verts.astype('f4').tobytes()),""), (319, ""            'texcoord',""), (320, '        )'), (321, ''), (322, '    def render(self, camera_uniforms: dict):'), (323, '        # TODO, these are copied...'), (324, '        self.update_program_uniforms(camera_uniforms)'), (325, '        self.set_ctx_depth_test(self.depth_test)'), (326, '        self.set_ctx_clip_plane(self.use_clip_plane())'), (327, '        #'), (328, '        vao = self.vao'), (329, '        assert(vao is not None)'), (330, '        winding = (len(self.vert_indices) == 0)'), (331, ""        vao.program['winding'].value = winding""), (332, '        if not winding:'), (333, '            vao.render(moderngl.TRIANGLES)'), (334, '            return'), (335, '        self.fill_fbo.clear()'), (336, '        self.fill_fbo.use()'), (337, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE)'), (338, '        vao.render(self.render_primitive)'), (339, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING'), (340, '        self.ctx.screen.use()'), (341, '        self.fill_texture_vao.render(moderngl.TRIANGLE_STRIP)')], 'deleted': [(33, '        context: moderngl.context.Context,'), (41, '        is_fill: bool = False,'), (43, '        self.ctx = context'), (50, '        self.render_primitive = str(render_primitive)'), (51, '        self.is_fill = is_fill'), (207, '    def get_vao(self, single_use: bool = False):'), (208, '        # Data buffer'), (209, '        vert_data = self.vert_data'), (210, '        indices = self.vert_indices'), (211, '        if len(indices) == 0:'), (212, '            self.ibo = None'), (213, '        elif single_use or self.is_fill:'), (214, '            self.ibo = self.ctx.buffer(indices.astype(np.uint32))'), (215, '        else:'), (216, '            # The vao.render call is strangely longer'), (217, '            # when an index buffer is used, so if the'), (218, '            # mobject is not changing, meaning only its'), (219, '            # uniforms are being updated, just create'), (220, '            # a larger data array based on the indices'), (221, ""            # and don't bother with the ibo""), (222, '            vert_data = vert_data[indices]'), (223, '            self.ibo = None'), (224, '        self.vbo = self.ctx.buffer(vert_data)'), (229, '            content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (230, '            index_buffer=self.ibo,')]}",63,63
manimlib/camera/camera.py,manimlib/camera/camera.py,424707d035f3d5faf050d8de6b41d49e8c4c5e0c,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,Move rendering more fully away from Camera to Mobject and ShaderWrapper,"{'added': [(68, '        self.uniforms = dict()'), (210, '        self.refresh_uniforms()'), (212, '            mobject.render(self.ctx, self.uniforms)'), (214, '    def refresh_uniforms(self) -> None:'), (220, '        self.uniforms.update(')], 'deleted': [(68, '        self.perspective_uniforms = dict()'), (72, '        self.refresh_perspective_uniforms()'), (73, '        # A cached map from mobjects to their associated list of render groups'), (74, '        # so that these render groups are not regenerated unnecessarily for static'), (75, '        # mobjects'), (76, '        self.mob_to_render_groups = {}'), (215, '        self.refresh_perspective_uniforms()'), (217, '            for render_group in self.get_render_group_list(mobject):'), (218, '                self.render(render_group)'), (219, ''), (220, '    def render(self, render_group: dict[str, Any]) -> None:'), (221, '        shader_wrapper = render_group[""shader_wrapper""]'), (222, '        shader_wrapper.render(self.perspective_uniforms)'), (223, ''), (224, '        if render_group[""single_use""]:'), (225, '            self.release_render_group(render_group)'), (226, ''), (227, '    def get_render_group_list(self, mobject: Mobject) -> Iterable[dict[str, Any]]:'), (228, '        if mobject.is_changing():'), (229, '            return self.generate_render_group_list(mobject)'), (230, ''), (231, '        # Otherwise, cache result for later use'), (232, '        key = id(mobject)'), (233, '        if key not in self.mob_to_render_groups:'), (234, '            self.mob_to_render_groups[key] = list(self.generate_render_group_list(mobject))'), (235, '        return self.mob_to_render_groups[key]'), (236, ''), (237, '    def generate_render_group_list(self, mobject: Mobject) -> Iterable[dict[str, Any]]:'), (238, '        return ('), (239, '            self.get_render_group(sw, single_use=mobject.is_changing())'), (240, '            for sw in mobject.get_shader_wrapper_list(self.ctx)'), (241, '        )'), (243, '    def get_render_group('), (244, '        self,'), (245, '        shader_wrapper: ShaderWrapper,'), (246, '        single_use: bool = True'), (247, '    ) -> dict[str, Any]:'), (248, '        shader_wrapper.get_vao()'), (249, '        return {'), (250, '            ""shader_wrapper"": shader_wrapper,'), (251, '            ""single_use"": single_use,'), (252, '        }'), (253, ''), (254, '    def release_render_group(self, render_group: dict[str, Any]) -> None:'), (255, '        render_group[""shader_wrapper""].release()'), (256, ''), (257, '    def refresh_static_mobjects(self) -> None:'), (258, '        for render_group in it.chain(*self.mob_to_render_groups.values()):'), (259, '            self.release_render_group(render_group)'), (260, '        self.mob_to_render_groups = {}'), (261, ''), (262, '    def refresh_perspective_uniforms(self) -> None:'), (268, '        self.perspective_uniforms.update(')]}",28,28
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,424707d035f3d5faf050d8de6b41d49e8c4c5e0c,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,Move rendering more fully away from Camera to Mobject and ShaderWrapper,"{'added': [(106, '        self._data_has_changed: bool = True'), (1896, '        if self._data_has_changed or self.is_changing():'), (1898, '            for shader_wrapper in self.shader_wrappers:'), (1899, '                shader_wrapper.release()'), (1900, '                shader_wrapper.get_vao()'), (1901, '            self._data_has_changed = False'), (1903, '            shader_wrapper.uniforms.update(self.get_uniforms())'), (1904, '            shader_wrapper.uniforms.update(camera_uniforms)'), (1905, '            shader_wrapper.pre_render()')], 'deleted': [(1895, '        if self.data_has_changed:'), (1898, '            shader_wrapper.update_uniforms(camera_uniforms)'), (1899, '            shader_wrapper.update_uniforms(self.get_uniforms)')]}",508,508
manimlib/scene/scene.py,manimlib/scene/scene.py,424707d035f3d5faf050d8de6b41d49e8c4c5e0c,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,Move rendering more fully away from Camera to Mobject and ShaderWrapper,"{'added': [(578, '        for mobject in self.mobjects:'), (579, '            mobject._data_has_changed = True')], 'deleted': [(578, '        self.camera.refresh_static_mobjects()')]}",220,220
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,424707d035f3d5faf050d8de6b41d49e8c4c5e0c,2c737ed5406bb77d51e04e9cc7eb09f96faf1488,Move rendering more fully away from Camera to Mobject and ShaderWrapper,"{'added': [(50, '        self.uniforms = dict(uniforms or {})'), (171, '    # Adding data'), (215, '    # Related to data and rendering'), (216, '    def pre_render(self):'), (217, '        self.set_ctx_depth_test(self.depth_test)'), (218, '        self.set_ctx_clip_plane(self.use_clip_plane())'), (219, '        self.update_program_uniforms()'), (220, ''), (221, '    def render(self):'), (222, '        # TODO, generate on the fly?'), (223, '        assert(self.vao is not None)'), (224, '        self.vao.render()'), (225, ''), (226, '    def update_program_uniforms(self):'), (229, '        for name, value in self.uniforms.items():'), (254, '            mode=self.render_primitive,'), (261, '                try:'), (262, '                    obj.release()'), (263, '                except AttributeError:'), (264, '                    pass'), (328, '    def render(self):')], 'deleted': [(50, '        self.uniforms = uniforms or dict()'), (171, ''), (172, '    # Related to data and rendering'), (173, '    def render(self, camera_uniforms: dict):'), (174, '        self.update_program_uniforms(camera_uniforms)'), (175, '        self.set_ctx_depth_test(self.depth_test)'), (176, '        self.set_ctx_clip_plane(self.use_clip_plane())'), (177, ''), (178, '        # TODO, generate on the fly?'), (179, '        assert(self.vao is not None)'), (180, '        self.vao.render(self.render_primitive)'), (224, '    def update_program_uniforms(self, camera_uniforms: dict):'), (227, '        for name, value in (*camera_uniforms.items(), *self.uniforms.items()):'), (258, '                obj.release()'), (322, '    def render(self, camera_uniforms: dict):'), (323, '        # TODO, these are copied...'), (324, '        self.update_program_uniforms(camera_uniforms)'), (325, '        self.set_ctx_depth_test(self.depth_test)'), (326, '        self.set_ctx_clip_plane(self.use_clip_plane())'), (327, '        #')]}",65,65
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4dfabc1c28d965429a18926028cf8efa63f20711,424707d035f3d5faf050d8de6b41d49e8c4c5e0c,Make sure FillShaderWrapper works without a window,"{'added': [(336, '        original_fbo = self.ctx.fbo'), (342, '        original_fbo.use()')], 'deleted': [(341, '        self.ctx.screen.use()')]}",65,65
manimlib/animation/creation.py,manimlib/animation/creation.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [], 'deleted': [(33, '    def begin(self) -> None:'), (34, '        super().begin()'), (35, '        if not self.should_match_start:'), (36, '            self.mobject.lock_matching_data(self.mobject, self.starting_mobject)'), (37, ''), (38, '    def finish(self) -> None:'), (39, '        super().finish()'), (40, '        self.mobject.unlock_data()'), (41, ''), (117, '        self.mobject.lock_matching_data(self.mobject, self.outline)'), (121, '        self.mobject.unlock_data()'), (149, '            submob.unlock_data()'), (150, '            if not self.mobject.has_updaters:'), (151, '                submob.lock_matching_data(submob, start)')]}",35,35
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [(158, '    def note_changed_data(self, recurse_up: bool = True):'), (159, '        self._data_has_changed = True'), (160, '        if recurse_up:'), (161, '            for mob in self.parents:'), (162, '                mob.note_changed_data()'), (163, ''), (164, '    def affects_data(func: Callable):'), (165, '        @wraps(func)'), (166, '        def wrapper(self, *args, **kwargs):'), (167, '            func(self, *args, **kwargs)'), (168, '            self.note_changed_data()'), (169, '        return wrapper'), (170, ''), (171, '    def affects_family_data(func: Callable):'), (172, '        @wraps(func)'), (173, '        def wrapper(self, *args, **kwargs):'), (174, '            func(self, *args, **kwargs)'), (175, '            for mob in self.family_members_with_points():'), (176, '                mob.note_changed_data()'), (177, '            return self'), (178, '        return wrapper'), (179, ''), (181, '    @affects_data'), (182, '    def set_data(self, data: np.ndarray):'), (183, '        assert(data.dtype == self.data.dtype)'), (184, '        self.data = data'), (185, '        return self'), (187, '    @affects_data'), (203, '    @affects_data'), (209, '    @affects_data'), (220, '    @affects_family_data'), (226, '    @affects_family_data'), (360, '    @affects_data'), (624, '        result._data_has_changed = True'), (1248, '    @affects_family_data'), (1287, '    @affects_family_data'), (1715, '    @affects_data'), (1928, '        if self._data_has_changed:'), (1931, '                shader_wrapper.generate_vao()')], 'deleted': [(146, '    def set_data(self, data: np.ndarray):'), (147, '        assert(data.dtype == self.data.dtype)'), (148, '        self.data = data'), (149, '        return self'), (150, ''), (1896, '        if self._data_has_changed or self.is_changing():'), (1899, '                shader_wrapper.release()'), (1900, '                shader_wrapper.get_vao()')]}",515,515
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [(8, 'from manimlib.mobject.mobject import Mobject'), (98, '    @Mobject.affects_data'), (109, '    @Mobject.affects_data')], 'deleted': []}",21,21
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [(50, '    @Mobject.affects_data')], 'deleted': []}",8,8
manimlib/mobject/types/point_cloud_mobject.py,manimlib/mobject/types/point_cloud_mobject.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [(54, '    @Mobject.affects_data'), (62, '    @Mobject.affects_data'), (69, '    @Mobject.affects_data'), (75, '    @Mobject.affects_data'), (87, '    @Mobject.affects_data'), (98, '    @Mobject.affects_data')], 'deleted': [(8, 'from manimlib.utils.iterables import resize_array')]}",21,21
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [(75, '    @Mobject.affects_data'), (134, '    @Mobject.affects_data'), (303, '    @Mobject.affects_data'), (321, '    @Mobject.affects_data')], 'deleted': []}",48,48
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [(236, '    @Mobject.affects_family_data'), (1075, '        self._data_has_changed = True'), (1114, '    def lock_matching_data(self, vmobject1: VMobject, vmobject2: VMobject):'), (1115, '        for mob in [self, vmobject1, vmobject2]:'), (1116, '            mob.get_joint_products()'), (1117, '        super().lock_matching_data(vmobject1, vmobject2)'), (1118, ''), (1132, '        self.refresh_triangulation()'), (1133, '        self.get_joint_products(refresh=True)')], 'deleted': [(1122, '    @triggers_refreshed_triangulation')]}",273,273
manimlib/scene/scene.py,manimlib/scene/scene.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [], 'deleted': [(192, '        self.refresh_static_mobjects()'), (254, '            self.refresh_static_mobjects()'), (565, '        self.refresh_static_mobjects()'), (566, ''), (577, '    def refresh_static_mobjects(self) -> None:'), (578, '        for mobject in self.mobjects:'), (579, '            mobject._data_has_changed = True'), (580, ''), (655, '        self.refresh_static_mobjects()'), (715, '        self.refresh_static_mobjects()'), (721, '        self.refresh_static_mobjects()')]}",218,218
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,d2af6a5f4bbbe03653b221b491b408138887fb8e,4dfabc1c28d965429a18926028cf8efa63f20711,"Keep track of when Mobject data has changed, and used that to determine when ShaderWrapper generates new buffers","{'added': [(60, '        self.vbo = None'), (61, '        self.ibo = None'), (62, '        self.vao = None'), (63, ''), (105, '        result.ctx = self.ctx'), (110, '        result.vao = None'), (111, '        result.vbo = None'), (112, '        result.ibo = None'), (245, '    def generate_vao(self, refresh: bool = True):'), (246, '        self.release()'), (262, '                obj.release()')], 'deleted': [(54, '        self.vbo = None'), (55, '        self.ibo = None'), (56, '        self.vao = None'), (57, ''), (103, '    def __del__(self):'), (104, '        self.release()'), (105, ''), (222, '        # TODO, generate on the fly?'), (245, '    def get_vao(self, refresh: bool = True):'), (261, '                try:'), (262, '                    obj.release()'), (263, '                except AttributeError:'), (264, '                    pass')]}",63,63
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,018b07212fec690b7e5c2617f22fd809c42c80d3,d2af6a5f4bbbe03653b221b491b408138887fb8e,Change how joint_products are updated in pointwise_become_partial,"{'added': [(943, '        self.data[""joint_product""] = vmobject.data[""joint_product""]'), (945, '            self.set_points(vm_points, refresh_joints=False)'), (978, '        self.data[""joint_product""][:i1] = [0, 0, 0, 1]'), (979, '        self.data[""joint_product""][i4:] = [0, 0, 0, 1]'), (980, '        self.set_points(new_points, refresh_joints=False)'), (1132, '    def set_points(self, points: Vect3Array, refresh_joints: bool = True):'), (1136, '        if refresh_joints:'), (1137, '            self.get_joint_products(refresh=True)')], 'deleted': [(944, '            self.set_points(vm_points)'), (977, '        self.set_points(new_points)'), (1129, '    def set_points(self, points: Vect3Array):'), (1133, '        self.get_joint_products(refresh=True)')]}",274,274
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,7609b1db783aff558a6bf89338b98dbd6751b511,018b07212fec690b7e5c2617f22fd809c42c80d3,Set up by-hand anti-aliasing for FillShaderWrapper,"{'added': [(278, '        texture = ctx.texture('), (285, '        depth_buffer = ctx.depth_renderbuffer(size)  # TODO, currently not used'), (286, '        self.texture_fbo = ctx.framebuffer(texture, depth_buffer)'), (287, ''), (288, '        simple_program = ctx.program('), (304, '                uniform sampler2D DepthTexture;'), (305, '                uniform float v_nudge;'), (306, '                uniform float h_nudge;'), (312, ""                    // Apply poor man's anti-aliasing""), (313, '                    vec2 tc0 = v_textcoord + vec2(v_nudge, h_nudge);'), (314, '                    vec2 tc1 = v_textcoord + vec2(v_nudge, -h_nudge);'), (315, '                    vec2 tc2 = v_textcoord + vec2(-v_nudge, h_nudge);'), (316, '                    vec2 tc3 = v_textcoord + vec2(-v_nudge, -h_nudge);'), (317, '                    frag_color ='), (318, '                        0.25 * abs(texture(Texture, tc0)) +'), (319, '                        0.25 * abs(texture(Texture, tc1)) +'), (320, '                        0.25 * abs(texture(Texture, tc2)) +'), (321, '                        0.25 * abs(texture(Texture, tc3));'), (328, ""        simple_program['Texture'].value = get_texture_id(texture)""), (329, '        # Quarter pixel width/height'), (330, ""        simple_program['h_nudge'].value = 0.25 / size[0]""), (331, ""        simple_program['v_nudge'].value = 0.25 / size[1]""), (335, '            simple_program,'), (349, '        self.texture_fbo.clear()'), (350, '        self.texture_fbo.use()')], 'deleted': [(278, '        self.fill_texture = ctx.texture('), (285, '        # TODO, depth buffer is not really used yet'), (286, '        fill_depth = ctx.depth_renderbuffer(size)'), (287, '        self.fill_fbo = ctx.framebuffer(self.fill_texture, fill_depth)'), (288, '        self.fill_prog = ctx.program('), (309, '                    frag_color = texture(Texture, v_textcoord);'), (310, '                    frag_color = abs(frag_color);'), (317, ""        self.fill_prog['Texture'].value = get_texture_id(self.fill_texture)""), (321, '            self.fill_prog,'), (335, '        self.fill_fbo.clear()'), (336, '        self.fill_fbo.use()')]}",63,63
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,2beb55727fd2387631b87c9d0bbf48e058e26928,7609b1db783aff558a6bf89338b98dbd6751b511,Change naming logic for recorded inserts,"{'added': [(296, '        count = 0'), (297, '        while os.path.exists(name := movie_path.replace(""."", f""_insert_{count}."")):'), (298, '            count += 1'), (299, '        self.inserted_file_path = name')], 'deleted': [(296, '        folder, file = os.path.split(movie_path)'), (297, '        scene_name, ext = file.split(""."")'), (298, '        n_inserts = len(list(filter('), (299, '            lambda f: f.startswith(scene_name + ""_insert""),'), (300, '            os.listdir(folder)'), (301, '        )))'), (302, '        self.inserted_file_path = movie_path.replace(""."", f""_insert_{n_inserts}."")')]}",92,92
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,3c8e3792e7d45fe7c5f8f8a48f4f59af28d2be1f,2beb55727fd2387631b87c9d0bbf48e058e26928,Remove references to refresh_static_mobjects,"{'added': [], 'deleted': [(320, '        self.refresh_static_mobjects()'), (327, '        self.refresh_static_mobjects()')]}",151,151
manimlib/animation/transform.py,manimlib/animation/transform.py,f96a697ee3bccf67e436375794303ebd031609bd,3c8e3792e7d45fe7c5f8f8a48f4f59af28d2be1f,Use become for interpolating at 0 or 1,"{'added': [(124, '        if alpha == 0:'), (125, '            submob.become(start)'), (126, '        elif alpha == 1:'), (127, '            submob.become(target_copy)')], 'deleted': []}",53,53
manimlib/camera/camera.py,manimlib/camera/camera.py,a601384211435b0538c286def3deaa11a08bb0f8,f96a697ee3bccf67e436375794303ebd031609bd,Remove stray imports,"{'added': [], 'deleted': [(3, 'import itertools as it'), (4, ''), (18, 'from manimlib.utils.shaders import get_texture_id'), (23, '    from manimlib.shader_wrapper import ShaderWrapper'), (26, '    from typing import Any, Iterable')]}",28,28
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,88590e5a057a3aab34a40e2938bf82affda13775,a601384211435b0538c286def3deaa11a08bb0f8,Remove serializing deepcopy,"{'added': [(590, '        result = copy.deepcopy(self)'), (591, '        result._shaders_initialized = False'), (592, '        result._data_has_changed = True')], 'deleted': [(590, '        try:'), (591, '            # Often faster than deepcopy'), (592, '            return pickle.loads(pickle.dumps(self))'), (593, '        except AttributeError:'), (594, '            return copy.deepcopy(self)')]}",514,514
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,cb36fda6d7c93d8cb9e5df304e70a0bd51ac6e42,88590e5a057a3aab34a40e2938bf82affda13775,"In interpolate, only update data status if some keys are unlocked","{'added': [(1721, '        if keys:'), (1722, '            self.note_changed_data()')], 'deleted': [(1713, '    @affects_data')]}",515,515
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,a68bc1271b87d8a3ba44470a89b4fd26d4dbee07,cb36fda6d7c93d8cb9e5df304e70a0bd51ac6e42,Have FillShaders all share the same texture used for intermediary rendering,"{'added': [(10, 'from functools import lru_cache'), (17, 'from manimlib.utils.shaders import get_intermediary_palette'), (286, ''), (287, '        texture_fbo, texture_vao = get_intermediary_palette(self.ctx)'), (288, ''), (290, '        texture_fbo.clear()'), (291, '        texture_fbo.use()'), (296, '        texture_vao.render(moderngl.TRIANGLE_STRIP)')], 'deleted': [(11, 'from manimlib.constants import DEFAULT_PIXEL_HEIGHT'), (12, 'from manimlib.constants import DEFAULT_PIXEL_WIDTH'), (277, '        size = (2 * DEFAULT_PIXEL_WIDTH, 2 * DEFAULT_PIXEL_HEIGHT)'), (278, '        texture = ctx.texture('), (279, '            size=size,'), (280, '            components=4,'), (281, '            # Important to make sure floating point (not fixed point) is'), (282, '            # used so that alpha values are not clipped'), (283, ""            dtype='f2',""), (284, '        )'), (285, '        depth_buffer = ctx.depth_renderbuffer(size)  # TODO, currently not used'), (286, '        self.texture_fbo = ctx.framebuffer(texture, depth_buffer)'), (287, ''), (288, '        simple_program = ctx.program('), (289, ""            vertex_shader='''""), (290, '                #version 330'), (291, ''), (292, '                in vec2 texcoord;'), (293, '                out vec2 v_textcoord;'), (294, ''), (295, '                void main() {'), (296, '                    gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (297, '                    v_textcoord = texcoord;'), (298, '                }'), (299, ""            ''',""), (300, ""            fragment_shader='''""), (301, '                #version 330'), (302, ''), (303, '                uniform sampler2D Texture;'), (304, '                uniform sampler2D DepthTexture;'), (305, '                uniform float v_nudge;'), (306, '                uniform float h_nudge;'), (307, ''), (308, '                in vec2 v_textcoord;'), (309, '                out vec4 frag_color;'), (310, ''), (311, '                void main() {'), (312, ""                    // Apply poor man's anti-aliasing""), (313, '                    vec2 tc0 = v_textcoord + vec2(v_nudge, h_nudge);'), (314, '                    vec2 tc1 = v_textcoord + vec2(v_nudge, -h_nudge);'), (315, '                    vec2 tc2 = v_textcoord + vec2(-v_nudge, h_nudge);'), (316, '                    vec2 tc3 = v_textcoord + vec2(-v_nudge, -h_nudge);'), (317, '                    frag_color ='), (318, '                        0.25 * abs(texture(Texture, tc0)) +'), (319, '                        0.25 * abs(texture(Texture, tc1)) +'), (320, '                        0.25 * abs(texture(Texture, tc2)) +'), (321, '                        0.25 * abs(texture(Texture, tc3));'), (322, '                    if(frag_color.a == 0) discard;'), (323, '                    //TODO, set gl_FragDepth;'), (324, '                }'), (325, ""            ''',""), (326, '        )'), (327, ''), (328, ""        simple_program['Texture'].value = get_texture_id(texture)""), (329, '        # Quarter pixel width/height'), (330, ""        simple_program['h_nudge'].value = 0.25 / size[0]""), (331, ""        simple_program['v_nudge'].value = 0.25 / size[1]""), (332, ''), (333, '        verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (334, '        self.fill_texture_vao = ctx.simple_vertex_array('), (335, '            simple_program,'), (336, ""            ctx.buffer(verts.astype('f4').tobytes()),""), (337, ""            'texcoord',""), (338, '        )'), (349, '        self.texture_fbo.clear()'), (350, '        self.texture_fbo.use()'), (355, '        self.fill_texture_vao.render(moderngl.TRIANGLE_STRIP)')]}",63,63
manimlib/utils/shaders.py,manimlib/utils/shaders.py,a68bc1271b87d8a3ba44470a89b4fd26d4dbee07,cb36fda6d7c93d8cb9e5df304e70a0bd51ac6e42,Have FillShaders all share the same texture used for intermediary rendering,"{'added': [(9, 'from manimlib.constants import DEFAULT_PIXEL_HEIGHT'), (10, 'from manimlib.constants import DEFAULT_PIXEL_WIDTH'), (17, '    from typing import Sequence, Optional, Tuple'), (18, '    from moderngl.vertex_array import VertexArray'), (19, '    from moderngl.framebuffer import Framebuffer'), (100, ''), (101, ''), (102, ''), (103, '@lru_cache()'), (104, 'def get_intermediary_palette(ctx) -> Tuple[Framebuffer, VertexArray]:'), (105, '    """"""'), (106, '    Creates a texture, loaded into a frame buffer, and a vao'), (107, '    which can display that texture as a simple quad onto a screen.'), (108, '    """"""'), (109, '    size = (2 * DEFAULT_PIXEL_WIDTH, 2 * DEFAULT_PIXEL_HEIGHT)'), (110, '    texture = ctx.texture('), (111, '        size=size,'), (112, '        components=4,'), (113, '        # Important to make sure floating point (not fixed point) is'), (114, '        # used so that alpha values are not clipped'), (115, ""        dtype='f2',""), (116, '    )'), (117, '    depth_buffer = ctx.depth_renderbuffer(size)  # TODO, currently not used'), (118, '    texture_fbo = ctx.framebuffer(texture, depth_buffer)'), (119, ''), (120, '    simple_program = ctx.program('), (121, ""        vertex_shader='''""), (122, '            #version 330'), (123, ''), (124, '            in vec2 texcoord;'), (125, '            out vec2 v_textcoord;'), (126, ''), (127, '            void main() {'), (128, '                gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (129, '                v_textcoord = texcoord;'), (130, '            }'), (131, ""        ''',""), (132, ""        fragment_shader='''""), (133, '            #version 330'), (134, ''), (135, '            uniform sampler2D Texture;'), (136, '            uniform sampler2D DepthTexture;'), (137, '            uniform float v_nudge;'), (138, '            uniform float h_nudge;'), (139, ''), (140, '            in vec2 v_textcoord;'), (141, '            out vec4 frag_color;'), (142, ''), (143, '            void main() {'), (144, ""                // Apply poor man's anti-aliasing""), (145, '                vec2 tc0 = v_textcoord + vec2(v_nudge, h_nudge);'), (146, '                vec2 tc1 = v_textcoord + vec2(v_nudge, -h_nudge);'), (147, '                vec2 tc2 = v_textcoord + vec2(-v_nudge, h_nudge);'), (148, '                vec2 tc3 = v_textcoord + vec2(-v_nudge, -h_nudge);'), (149, '                frag_color ='), (150, '                    0.25 * abs(texture(Texture, tc0)) +'), (151, '                    0.25 * abs(texture(Texture, tc1)) +'), (152, '                    0.25 * abs(texture(Texture, tc2)) +'), (153, '                    0.25 * abs(texture(Texture, tc3));'), (154, '                if(frag_color.a == 0) discard;'), (155, '                //TODO, set gl_FragDepth;'), (156, '            }'), (157, ""        ''',""), (158, '    )'), (159, ''), (160, ""    simple_program['Texture'].value = get_texture_id(texture)""), (161, '    # Quarter pixel width/height'), (162, ""    simple_program['h_nudge'].value = 0.25 / size[0]""), (163, ""    simple_program['v_nudge'].value = 0.25 / size[1]""), (164, ''), (165, '    verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (166, '    fill_texture_vao = ctx.simple_vertex_array('), (167, '        simple_program,'), (168, ""        ctx.buffer(verts.astype('f4').tobytes()),""), (169, ""        'texcoord',""), (170, '    )'), (171, '    return (texture_fbo, fill_texture_vao)')], 'deleted': [(15, '    from typing import Sequence, Optional')]}",13,13
manimlib/camera/camera.py,manimlib/camera/camera.py,a1595a9e2f2b119300da23a2ad0104f7d3ec3bf9,a68bc1271b87d8a3ba44470a89b4fd26d4dbee07,Use separate fbo for writing to file when window is active,"{'added': [(72, '        self.window = window'), (78, '            self.window_fbo = self.ctx.detect_framebuffer()'), (79, '            self.fbo_for_files = self.get_fbo(self.samples)'), (80, '            self.fbo = self.window_fbo'), (81, ''), (93, '    def use_window_fbo(self, use: bool = True):'), (94, '        assert(self.window is not None)'), (95, '        if use:'), (96, '            self.fbo = self.window_fbo'), (97, '        else:'), (98, '            self.fbo = self.fbo_for_files'), (99, ''), (124, '        src_viewport = self.fbo.viewport'), (214, '        self.fbo.use()')], 'deleted': [(77, '            self.fbo = self.ctx.detect_framebuffer()'), (113, '        if self.window is not None:'), (114, '            src_viewport = self.window.viewport'), (115, '        else:'), (116, '            src_viewport = self.fbo.viewport')]}",29,29
manimlib/config.py,manimlib/config.py,a1595a9e2f2b119300da23a2ad0104f7d3ec3bf9,a68bc1271b87d8a3ba44470a89b4fd26d4dbee07,Use separate fbo for writing to file when window is active,"{'added': [(417, '    return dict(size=(window_width, window_height))')], 'deleted': [(417, '    return dict('), (418, '        full_size=(camera_config[""pixel_width""], camera_config[""pixel_height""]),'), (419, '        size=(window_width, window_height),'), (420, '    )')]}",71,71
manimlib/scene/scene.py,manimlib/scene/scene.py,a1595a9e2f2b119300da23a2ad0104f7d3ec3bf9,a68bc1271b87d8a3ba44470a89b4fd26d4dbee07,Use separate fbo for writing to file when window is active,"{'added': [(740, '            self.camera.use_window_fbo(False)'), (747, '            self.camera.use_window_fbo(True)')], 'deleted': [(740, '            # Resize window so rendering happens at the appropriate size'), (741, '            self.window.size = self.camera.get_pixel_shape()'), (742, '            self.window.swap_buffers()'), (743, '            self.update_frame()'), (750, '            # Put window back to how it started'), (751, '            self.window.to_default_position()')]}",218,218
manimlib/window.py,manimlib/window.py,a1595a9e2f2b119300da23a2ad0104f7d3ec3bf9,a68bc1271b87d8a3ba44470a89b4fd26d4dbee07,Use separate fbo for writing to file when window is active,"{'added': [(31, '        super().__init__(size=size, samples=samples)')], 'deleted': [(29, '        full_size: tuple[int, int] = (1920, 1080),'), (32, '        super().__init__(size=full_size, samples=samples)'), (34, '        self.full_size = full_size')]}",18,18
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,72590a8fefb6868eb55e03fbc9a3ce01f935fe2e,a1595a9e2f2b119300da23a2ad0104f7d3ec3bf9,Note that using winding fill changes data,"{'added': [(420, '    @Mobject.affects_family_data'), (839, '            if not self._use_winding_fill and self.has_fill() \\')], 'deleted': [(838, '            if self._use_winding_fill and self.has_fill() \\')]}",274,274
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,05dd3992707508de54a7a52cae4e1f9fc07497cc,72590a8fefb6868eb55e03fbc9a3ce01f935fe2e,Ensure svgs have positive orientation by default,"{'added': [(323, '            # Always default to orienting outward, account'), (324, '            # for the fact that this will get flipped in SVG.__init__'), (325, '            if self.get_unit_normal()[2] > 0:')], 'deleted': [(323, '            # Always default to orienting outward'), (324, '            if self.get_unit_normal()[2] < 0:')]}",62,62
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f5cb2bfa52b0d6581a3a66cfcca740e02b1dca91,05dd3992707508de54a7a52cae4e1f9fc07497cc,Check for mismatched keys in uniform interpolation,"{'added': [(1733, '            if key not in mobject1.uniforms or key not in mobject2.uniforms:'), (1734, '                continue')], 'deleted': []}",517,517
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c6c23a1fe79cc15b19159d09ec8d06361bef034b,f5cb2bfa52b0d6581a3a66cfcca740e02b1dca91,Unnecessary refresh_bounding_box,"{'added': [], 'deleted': [(686, '        self.refresh_bounding_box(recurse_down=True)')]}",517,517
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a33b24310e3b33ab42a5c2e5bbe252dccd1c0d3d,c6c23a1fe79cc15b19159d09ec8d06361bef034b,Fix non-winding-fill orientation,"{'added': [(1056, '        ovi = self.get_outer_vert_indices()'), (1057, '        # Flip outer triangles with negative orientation'), (1058, '        ovi[0::3][concave_parts], ovi[2::3][concave_parts] = ovi[2::3][concave_parts], ovi[0::3][concave_parts]'), (1059, '        tri_indices = np.hstack([ovi, inner_tri_indices])')], 'deleted': [(1056, '        outer_tri_indices = self.get_outer_vert_indices()'), (1057, '        tri_indices = np.hstack([outer_tri_indices, inner_tri_indices])')]}",274,274
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,a33b24310e3b33ab42a5c2e5bbe252dccd1c0d3d,c6c23a1fe79cc15b19159d09ec8d06361bef034b,Fix non-winding-fill orientation,"{'added': [(34, '    orientation = winding ? sign(unit_normal.z) : 1.0;')], 'deleted': [(34, '    orientation = sign(unit_normal.z);')]}",,
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,3f5df432ce159f2ceac9d295bed20fa7a6257dbe,a33b24310e3b33ab42a5c2e5bbe252dccd1c0d3d,Consider winding_fill alphas pre-multiplied,"{'added': [(17, 'from manimlib.utils.shaders import get_fill_palette'), (288, '        texture_fbo, texture_vao = get_fill_palette(self.ctx)'), (289, ''), (294, ''), (295, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE_MINUS_SRC_ALPHA)'), (298, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING')], 'deleted': [(17, 'from manimlib.utils.shaders import get_intermediary_palette'), (287, '        texture_fbo, texture_vao = get_intermediary_palette(self.ctx)'), (288, ''), (294, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING')]}",63,63
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,3f5df432ce159f2ceac9d295bed20fa7a6257dbe,a33b24310e3b33ab42a5c2e5bbe252dccd1c0d3d,Consider winding_fill alphas pre-multiplied,"{'added': [(16, '    // Pre-multiply alphas'), (17, '    if(winding) frag_color *= frag_color.a;'), (18, ''), (19, '    // Give a sign based on orientation so that'), (20, '    // additive blending cancels as needed'), (21, '    if(winding && orientation < 0) frag_color *= -1;'), (28, '    if(!winding && orientation < 0) Fxy *= -1;')], 'deleted': [(16, '    if(winding && orientation > 0) frag_color *= -1;'), (23, '    if(!winding && orientation > 0) Fxy *= -1;')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,3f5df432ce159f2ceac9d295bed20fa7a6257dbe,a33b24310e3b33ab42a5c2e5bbe252dccd1c0d3d,Consider winding_fill alphas pre-multiplied,"{'added': [(8, 'import numpy as np'), (105, 'def get_fill_palette(ctx) -> Tuple[Framebuffer, VertexArray]:'), (111, '    # Important to make sure dtype is floating point (not fixed point)'), (112, '    # so that alpha values can be negative and are not clipped'), (113, ""    texture = ctx.texture(size=size, components=4, dtype='f2')""), (141, '                vec2 tc0 = v_textcoord + vec2(0, 0);'), (142, '                vec2 tc1 = v_textcoord + vec2(0, h_nudge);'), (143, '                vec2 tc2 = v_textcoord + vec2(v_nudge, 0);'), (144, '                vec2 tc3 = v_textcoord + vec2(v_nudge, h_nudge);'), (146, '                    0.25 * texture(Texture, tc0) +'), (147, '                    0.25 * texture(Texture, tc1) +'), (148, '                    0.25 * texture(Texture, tc2) +'), (149, '                    0.25 * texture(Texture, tc3);'), (151, '                frag_color = abs(frag_color);'), (158, '    # Half pixel width/height'), (159, ""    simple_program['h_nudge'].value = 0.5 / size[0]""), (160, ""    simple_program['v_nudge'].value = 0.5 / size[1]"")], 'deleted': [(104, 'def get_intermediary_palette(ctx) -> Tuple[Framebuffer, VertexArray]:'), (110, '    texture = ctx.texture('), (111, '        size=size,'), (112, '        components=4,'), (113, '        # Important to make sure floating point (not fixed point) is'), (114, '        # used so that alpha values are not clipped'), (115, ""        dtype='f2',""), (116, '    )'), (136, '            uniform sampler2D DepthTexture;'), (145, '                vec2 tc0 = v_textcoord + vec2(v_nudge, h_nudge);'), (146, '                vec2 tc1 = v_textcoord + vec2(v_nudge, -h_nudge);'), (147, '                vec2 tc2 = v_textcoord + vec2(-v_nudge, h_nudge);'), (148, '                vec2 tc3 = v_textcoord + vec2(-v_nudge, -h_nudge);'), (150, '                    0.25 * abs(texture(Texture, tc0)) +'), (151, '                    0.25 * abs(texture(Texture, tc1)) +'), (152, '                    0.25 * abs(texture(Texture, tc2)) +'), (153, '                    0.25 * abs(texture(Texture, tc3));'), (161, '    # Quarter pixel width/height'), (162, ""    simple_program['h_nudge'].value = 0.25 / size[0]""), (163, ""    simple_program['v_nudge'].value = 0.25 / size[1]"")]}",13,13
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,37f0bf8c11a556a5462b1e10b3f53ea4d73494db,3f5df432ce159f2ceac9d295bed20fa7a6257dbe,"Fix winding fill blending

(Using somewhat of a hack)","{'added': [(292, '        vao.render()'), (295, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE_MINUS_SRC_ALPHA)'), (297, '        self.ctx.blend_func = (moderngl.DEFAULT_BLENDING)')], 'deleted': [(292, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE)'), (293, '        vao.render(self.render_primitive)'), (295, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE_MINUS_SRC_ALPHA)'), (298, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING')]}",63,63
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,37f0bf8c11a556a5462b1e10b3f53ea4d73494db,3f5df432ce159f2ceac9d295bed20fa7a6257dbe,"Fix winding fill blending

(Using somewhat of a hack)","{'added': [(16, '    /*'), (17, '    We want negatively oriented triangles to be canceled with positively'), (18, '    oriented ones. The easiest way to do this is to give them negative alpha,'), (19, '    and change the blend function to just add them. However, this messes with'), (20, '    usual blending, so instead the following line is meant to let this canceling'), (21, '    work even for the normal blending equation:'), (22, ''), (23, '    (1 - alpha) * dst + alpha * src'), (24, ''), (25, '    We want the effect of blending with a positively oriented triangle followed'), (26, '    by a negatively oriented one to return to whatever the original frag value'), (27, '    was. You can work out this will work if the alpha for negative orientations'), (28, '    is changed to -alpha / (1 - alpha). This has a singularity at alpha = 1,'), (29, '    so we cap it at a value very close to 1. Effectively, the purpose of this'), (30, '    cap is to make sure the original fragment color can be recovered even after'), (31, '    blending with an alpha = 1 color.'), (32, '    */'), (33, '    float a = 0.999 * frag_color.a;'), (34, '    if(winding && orientation < 0) a = -a / (1 - a);'), (35, '    frag_color.a = a;')], 'deleted': [(16, '    // Pre-multiply alphas'), (17, '    if(winding) frag_color *= frag_color.a;'), (18, ''), (19, '    // Give a sign based on orientation so that'), (20, '    // additive blending cancels as needed'), (21, '    if(winding && orientation < 0) frag_color *= -1;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,37f0bf8c11a556a5462b1e10b3f53ea4d73494db,3f5df432ce159f2ceac9d295bed20fa7a6257dbe,"Fix winding fill blending

(Using somewhat of a hack)","{'added': [(39, '        if(winding){'), (40, '            // Pure black will be used to discard fragments later'), (41, '            if(color.rgb == vec3(0.0)) color.rgb += vec3(0.01);'), (42, '            // color.a = sqrt(color.a);'), (43, '        }')], 'deleted': []}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,37f0bf8c11a556a5462b1e10b3f53ea4d73494db,3f5df432ce159f2ceac9d295bed20fa7a6257dbe,"Fix winding fill blending

(Using somewhat of a hack)","{'added': [(113, ""    texture = ctx.texture(size=size, components=4, dtype='f4')""), (150, '                if(distance(frag_color.rgb, vec3(0.0)) < 1e-3) discard;')], 'deleted': [(113, ""    texture = ctx.texture(size=size, components=4, dtype='f2')""), (150, '                if(frag_color.a == 0) discard;'), (151, '                frag_color = abs(frag_color);')]}",13,13
manimlib/scene/scene.py,manimlib/scene/scene.py,14cda7e90857fadd1e8ac5107b2f7e442d3b1fda,37f0bf8c11a556a5462b1e10b3f53ea4d73494db,Don't show progress bar in embed by default,"{'added': [(198, '        show_animation_progress: bool = False,'), (712, '    def checkpoint_paste('), (713, '        self,'), (714, '        skip: bool = False,'), (715, '        record: bool = False,'), (716, '        progress_bar: bool = True'), (717, '    ):'), (744, '        prev_progress = self.show_animation_progress'), (745, '        self.show_animation_progress = progress_bar'), (746, ''), (758, '        self.show_animation_progress = prev_progress')], 'deleted': [(198, '        show_animation_progress: bool = True,'), (712, '    def checkpoint_paste(self, skip: bool = False, record: bool = False):')]}",218,218
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,65afed1bd172513582994f8c9fff84d7d2ea8b58,14cda7e90857fadd1e8ac5107b2f7e442d3b1fda,Move shading from fill geom to fill frag shader,"{'added': [(9, 'in vec3 point;'), (13, '#INSERT finalize_color.glsl'), (14, ''), (17, '    frag_color = finalize_color(color, point, vec3(0.0, 0.0, 1.0));')], 'deleted': [(14, '    frag_color = color;'), (15, '')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,65afed1bd172513582994f8c9fff84d7d2ea8b58,14cda7e90857fadd1e8ac5107b2f7e442d3b1fda,Move shading from fill geom to fill frag shader,"{'added': [(16, 'out vec3 point;'), (38, '        color = v_color[i];'), (39, '        point = points[i];'), (40, '        // Pure black will be used to discard fragments later'), (41, '        if(winding && color.rgb == vec3(0.0)) color.rgb += vec3(0.01);')], 'deleted': [(29, '#INSERT finalize_color.glsl'), (38, '        color = finalize_color(v_color[i], points[i], unit_normal);'), (39, '        if(winding){'), (40, '            // Pure black will be used to discard fragments later'), (41, '            if(color.rgb == vec3(0.0)) color.rgb += vec3(0.01);'), (42, '            // color.a = sqrt(color.a);'), (43, '        }')]}",,
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a8da171adbefc9e3b13d989382d5c68f1ff0223c,65afed1bd172513582994f8c9fff84d7d2ea8b58,Make sure a group inherits the fixed_in_frame status of its parts,"{'added': [(2051, '        if any(m.is_fixed_in_frame for m in mobjects):'), (2052, '            self.fix_in_frame()')], 'deleted': []}",519,519
manimlib/animation/transform.py,manimlib/animation/transform.py,8ef71bb9304425bdc7844e41fb7bba61d21752bb,a8da171adbefc9e3b13d989382d5c68f1ff0223c,Don't use 'become' for interpolate at alpha = 0 or 1,"{'added': [], 'deleted': [(124, '        if alpha == 0:'), (125, '            submob.become(start)'), (126, '        elif alpha == 1:'), (127, '            submob.become(target_copy)')]}",51,51
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,8ef71bb9304425bdc7844e41fb7bba61d21752bb,a8da171adbefc9e3b13d989382d5c68f1ff0223c,Don't use 'become' for interpolate at alpha = 0 or 1,"{'added': [(1722, '            if alpha == 0:'), (1723, '                self.data[:] = mobject1.data[:]'), (1724, '                keys = []'), (1725, '            elif alpha == 1:'), (1726, '                self.data[:] = mobject2.data[:]'), (1727, '                keys = []')], 'deleted': []}",521,521
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,164c9ba75491b6706acffc2a8ad11ae27214e5a7,8ef71bb9304425bdc7844e41fb7bba61d21752bb,Use copy in set_data,"{'added': [(184, '        self.data = data.copy()')], 'deleted': [(184, '        self.data = data')]}",521,521
manimlib/animation/transform.py,manimlib/animation/transform.py,28c875c2c32adf5a5a742f11be2412d9815cfd26,164c9ba75491b6706acffc2a8ad11ae27214e5a7,Finish Transforms with a call to Mobject.become,"{'added': [(73, '        self.mobject.become(self.target_mobject)')], 'deleted': []}",51,51
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,28c875c2c32adf5a5a742f11be2412d9815cfd26,164c9ba75491b6706acffc2a8ad11ae27214e5a7,Finish Transforms with a call to Mobject.become,"{'added': [], 'deleted': [(1722, '            if alpha == 0:'), (1723, '                self.data[:] = mobject1.data[:]'), (1724, '                keys = []'), (1725, '            elif alpha == 1:'), (1726, '                self.data[:] = mobject2.data[:]'), (1727, '                keys = []')]}",519,519
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,6d4782506af1e5a916f50d5465c19c29323dbabc,28c875c2c32adf5a5a742f11be2412d9815cfd26,Account for null fill cases in invinisble_copy,"{'added': [(888, '        if not result.has_fill() or result.get_num_points() == 0:'), (889, '            return result')], 'deleted': []}",276,276
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,96968272139514563873475cee2cf11f5f6a45f6,6d4782506af1e5a916f50d5465c19c29323dbabc,Allow for adding null subpath,"{'added': [(661, '        assert(len(points) % 2 == 1 or len(points) == 0)')], 'deleted': [(661, '        assert(len(points) % 2 == 1)')]}",277,277
manimlib/animation/transform.py,manimlib/animation/transform.py,acdc2654d350a4e88f05d4cff98e519c729f1829,96968272139514563873475cee2cf11f5f6a45f6,Account for 'target_mobject is None' case,"{'added': [(73, '        if self.target_mobject is not None:'), (74, '            self.mobject.become(self.target_mobject)')], 'deleted': [(73, '        self.mobject.become(self.target_mobject)')]}",52,52
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,258bc2256ae5043c55b2b38e0202c14cb7fc47ee,acdc2654d350a4e88f05d4cff98e519c729f1829,Provide a check that shader uniforms really need updating before setting value,"{'added': [(53, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, UniformDict'), (134, '        self.uniforms: UniformDict = {'), (1897, '        self.shader_wrapper.update_program_uniforms(self.get_uniforms())'), (1934, '            shader_wrapper.update_program_uniforms(self.get_uniforms())'), (1935, '            shader_wrapper.update_program_uniforms(camera_uniforms, universal=True)')], 'deleted': [(53, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array'), (134, '        self.uniforms: dict[str, float | np.ndarray] = {'), (1897, '        self.shader_wrapper.uniforms.update(self.get_uniforms())'), (1934, '            shader_wrapper.uniforms.update(self.get_uniforms())'), (1935, '            shader_wrapper.uniforms.update(camera_uniforms)')]}",519,519
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,258bc2256ae5043c55b2b38e0202c14cb7fc47ee,acdc2654d350a4e88f05d4cff98e519c729f1829,Provide a check that shader uniforms really need updating before setting value,"{'added': [], 'deleted': [(1267, ''), (1268, '        for sw in shader_wrappers:'), (1269, '            # Assume uniforms of the first family member'), (1270, '            sw.uniforms.update(family[0].get_uniforms())'), (1271, '            sw.depth_test = family[0].depth_test')]}",276,276
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,258bc2256ae5043c55b2b38e0202c14cb7fc47ee,acdc2654d350a4e88f05d4cff98e519c729f1829,Provide a check that shader uniforms really need updating before setting value,"{'added': [(22, '    from typing import List, Optional, Dict'), (23, '    from manimlib.typing import UniformDict'), (40, '        uniforms: Optional[UniformDict] = None,  # A dictionary mapping names of uniform variables'), (50, '        self.uniforms: UniformDict = dict()'), (56, '        self.update_program_uniforms(uniforms or dict())'), (97, '                self.uniforms[key] == shader_wrapper.uniforms[key]'), (224, '    def update_program_uniforms(self, uniforms: UniformDict, universal: bool = False):'), (227, '        for name, value in uniforms.items():'), (228, '            if name not in self.program:'), (229, '                continue'), (230, '            if isinstance(value, np.ndarray) and value.ndim > 0:'), (231, '                value = tuple(value)'), (232, '            if universal and self.uniforms.get(name, None) == value:'), (233, '                continue'), (234, '            self.program[name].value = value'), (235, '            self.uniforms[name] = value')], 'deleted': [(10, 'from functools import lru_cache'), (23, '    from typing import List, Optional'), (40, '        uniforms: Optional[dict[str, float | np.ndarray]] = None,  # A dictionary mapping names of uniform variables'), (50, '        self.uniforms = dict(uniforms or {})'), (96, '                np.all(self.uniforms[key] == shader_wrapper.uniforms[key])'), (108, '        if self.uniforms:'), (109, '            result.uniforms = {key: np.array(value) for key, value in self.uniforms.items()}'), (220, '        self.update_program_uniforms()'), (226, '    def update_program_uniforms(self):'), (229, '        for name, value in self.uniforms.items():'), (230, '            if name in self.program:'), (231, '                if isinstance(value, np.ndarray) and value.ndim > 0:'), (232, '                    value = tuple(value)'), (233, '                self.program[name].value = value'), (277, '')]}",63,63
manimlib/typing.py,manimlib/typing.py,258bc2256ae5043c55b2b38e0202c14cb7fc47ee,acdc2654d350a4e88f05d4cff98e519c729f1829,Provide a check that shader uniforms really need updating before setting value,"{'added': [(22, '    UniformDict = Dict[str, float | bool | np.ndarray | tuple]'), (23, '')], 'deleted': []}",0,0
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,3a175c1a4c61618a534a123ae23204349763ca9e,258bc2256ae5043c55b2b38e0202c14cb7fc47ee,Note that sorting surface indices affects data,"{'added': [(198, '    @Mobject.affects_data')], 'deleted': []}",48,48
manimlib/scene/scene.py,manimlib/scene/scene.py,9ee9e1946af199d52705f0d071ca89428f84749c,3a175c1a4c61618a534a123ae23204349763ca9e,Use non-window fbo in scene.get_image,"{'added': [(291, '            self.camera.use_window_fbo(False)'), (292, '            self.camera.clear()'), (293, '            self.camera.capture(*self.mobjects)'), (296, '            self.camera.use_window_fbo(True)')], 'deleted': [(291, '            self.window.size = self.camera.get_pixel_shape()'), (292, '            self.window.swap_buffers()'), (293, '            self.update_frame()'), (294, '            self.window.swap_buffers()'), (297, '            self.window.to_default_position()')]}",218,218
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,5803a005986e762ed45539decaca55c8c4f6cccd,9ee9e1946af199d52705f0d071ca89428f84749c,"Use smaller fill_texture, adjusting winding-fill blending hack as is necessary","{'added': [(33, '    blending with an (alpha = 1) color.'), (35, '    float a = 0.98 * frag_color.a;')], 'deleted': [(33, '    blending with an alpha = 1 color.'), (35, '    float a = 0.999 * frag_color.a;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,5803a005986e762ed45539decaca55c8c4f6cccd,9ee9e1946af199d52705f0d071ca89428f84749c,"Use smaller fill_texture, adjusting winding-fill blending hack as is necessary","{'added': [(41, '        if(winding && color.rgb == vec3(0.0)) color.rgb += vec3(3.0 / 256);')], 'deleted': [(41, '        if(winding && color.rgb == vec3(0.0)) color.rgb += vec3(0.01);')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,5803a005986e762ed45539decaca55c8c4f6cccd,9ee9e1946af199d52705f0d071ca89428f84749c,"Use smaller fill_texture, adjusting winding-fill blending hack as is necessary","{'added': [(12, 'from manimlib.utils.customization import get_customization'), (111, ""    cam_config = get_customization()['camera_resolutions']""), (112, ""    res_name = cam_config['default_resolution']""), (113, '    size = tuple(map(int, cam_config[res_name].split(""x"")))'), (114, ''), (117, ""    texture = ctx.texture(size=size, components=4, dtype='f2')""), (141, '            out vec4 color;'), (142, ''), (143, '            const float MIN_RGB = 2.0 / 256;'), (151, '                color ='), (156, '                if(abs(color.r) < MIN_RGB && abs(color.g) < MIN_RGB && abs(color.b) < MIN_RGB)'), (157, '                    discard;'), (158, '                // Counteract scaling in quadratic_bezier_frag'), (159, '                color = color / 0.98;')], 'deleted': [(110, '    size = (2 * DEFAULT_PIXEL_WIDTH, 2 * DEFAULT_PIXEL_HEIGHT)'), (113, ""    texture = ctx.texture(size=size, components=4, dtype='f4')""), (137, '            out vec4 frag_color;'), (145, '                frag_color ='), (150, '                if(distance(frag_color.rgb, vec3(0.0)) < 1e-3) discard;')]}",13,13
manimlib/camera/camera.py,manimlib/camera/camera.py,e9333a908c0c239d318bd2df66fda47736a971eb,5803a005986e762ed45539decaca55c8c4f6cccd,Move camera.clear call into 'capture',"{'added': [(213, '        self.clear()')], 'deleted': []}",29,29
manimlib/scene/scene.py,manimlib/scene/scene.py,e9333a908c0c239d318bd2df66fda47736a971eb,5803a005986e762ed45539decaca55c8c4f6cccd,Move camera.clear call into 'capture',"{'added': [], 'deleted': [(292, '            self.camera.clear()'), (314, '        self.camera.clear()')]}",218,218
manimlib/animation/composition.py,manimlib/animation/composition.py,bf2a609246a006699ce352c339b773a87a333fc3,e9333a908c0c239d318bd2df66fda47736a971eb,Have animation group collect parts as a VGroup if it can,"{'added': [(9, 'from manimlib.mobject.types.vectorized_mobject import VGroup'), (10, 'from manimlib.mobject.types.vectorized_mobject import VMobject'), (19, '    from typing import Callable, Optional'), (33, '        group: Optional[Mobject] = None,'), (34, '        group_type: Optional[type] = None,'), (42, '        mobs = remove_list_redundancies([a.mobject for a in self.animations])'), (43, '        if group is not None:'), (44, '            self.group = group'), (45, '        if group_type is not None:'), (46, '            self.group = group_type(*mobs)'), (47, '        elif all(isinstance(anim.mobject, VMobject) for anim in animations):'), (48, '            self.group = VGroup(*mobs)'), (49, '        else:'), (50, '            self.group = Group(*mobs)')], 'deleted': [(17, '    from typing import Callable'), (31, '        group: Mobject | None = None,'), (32, '        group_type: type = Group,'), (40, '        self.group = group'), (41, '        if self.group is None:'), (42, '            self.group = group_type(*remove_list_redundancies('), (43, '                [anim.mobject for anim in self.animations]'), (44, '            ))')]}",35,35
manimlib/animation/transform_matching_parts.py,manimlib/animation/transform_matching_parts.py,bf2a609246a006699ce352c339b773a87a333fc3,e9333a908c0c239d318bd2df66fda47736a971eb,Have animation group collect parts as a VGroup if it can,"{'added': [], 'deleted': [(35, '        group_type: type = Group,'), (79, '            group_type=group_type,')]}",27,27
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1bd6a77151cf1f12d801d58ec35036a6b1775f94,bf2a609246a006699ce352c339b773a87a333fc3,"Don't use @stash_mobject_pointers on copy, be more explicit","{'added': [(600, '        result.parents = []'), (601, '        result.target = None'), (602, '        result.save_state = None'), (603, ''), (604, '        # copy.copy is only a shallow copy, so the internal'), (605, '        # data which are numpy arrays or other mobjects still'), (609, '            key: value.copy() if isinstance(value, np.ndarray) else value')], 'deleted': [(594, '    @stash_mobject_pointers'), (601, '        # The line above is only a shallow copy, so the internal'), (602, '        # data which are numpyu arrays or other mobjects still'), (606, '            key: np.array(value)')]}",520,520
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,ab57b0acf09886656980281f40e0023d53c51f4f,1bd6a77151cf1f12d801d58ec35036a6b1775f94,"Ensure positive orientation on all SVG, not just PathStrings","{'added': [(77, '        self.ensure_positive_orientation()')], 'deleted': [(323, '            # Always default to orienting outward, account'), (324, '            # for the fact that this will get flipped in SVG.__init__'), (325, '            if self.get_unit_normal()[2] > 0:'), (326, '                self.reverse_points()')]}",61,61
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,ab57b0acf09886656980281f40e0023d53c51f4f,1bd6a77151cf1f12d801d58ec35036a6b1775f94,"Ensure positive orientation on all SVG, not just PathStrings","{'added': [(830, '    def ensure_positive_orientation(self, recurse=True):'), (831, '        for mob in self.get_family(recurse):'), (832, '            if mob.get_unit_normal()[2] < 0:'), (833, '                mob.reverse_points()'), (834, '        return self'), (835, '')], 'deleted': []}",279,279
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,0f89349bb84cd6dce9760acd7801868c1f152537,ab57b0acf09886656980281f40e0023d53c51f4f,Small clean up,"{'added': [(293, '        vao.render(moderngl.TRIANGLE_STRIP)'), (298, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING')], 'deleted': [(293, '        vao.render()'), (298, '        self.ctx.blend_func = (moderngl.DEFAULT_BLENDING)')]}",63,63
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,7a59cc2f03c69babd9fd5146dc046ec2e10de551,0f89349bb84cd6dce9760acd7801868c1f152537,Use gl.MAX to blend alphas in fill,"{'added': [(293, '        self.ctx.blend_func = ('), (294, '            # Ordinary blending for colors'), (295, '            moderngl.SRC_ALPHA, moderngl.ONE_MINUS_SRC_ALPHA,'), (296, '            # Just take the max of the alphas, given the shenanigans'), (297, '            # with how alphas are being used to compute winding numbers'), (298, '            moderngl.ONE, moderngl.ONE'), (299, '        )'), (300, '        self.ctx.blend_equation = moderngl.FUNC_ADD, moderngl.MAX'), (305, '        self.ctx.blend_equation = moderngl.FUNC_ADD')], 'deleted': []}",63,63
manimlib/utils/shaders.py,manimlib/utils/shaders.py,8f6c14ad5f7e3fe821789d23cac14aa1070d5447,7a59cc2f03c69babd9fd5146dc046ec2e10de551,Increase threshold for discarding fill fragments,"{'added': [(143, '            const float MIN_RGB = 3.0 / 256;')], 'deleted': [(143, '            const float MIN_RGB = 2.0 / 256;')]}",13,13
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,eab8edd51d70d38e8c486121b307f9ac6f3741e9,8f6c14ad5f7e3fe821789d23cac14aa1070d5447,Remove needless list(...),"{'added': [(628, '        for attr, value in self.__dict__.items():')], 'deleted': [(628, '        for attr, value in list(self.__dict__.items()):')]}",520,520
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,63886478601ed97c0aa748d627d7d0a61a727da9,eab8edd51d70d38e8c486121b307f9ac6f3741e9,"Change to using glBlendFuncSeparate

To please type checkers","{'added': [(278, '        self.texture_fbo, self.texture_vao = get_fill_palette(self.ctx)'), (291, '        self.texture_fbo.clear()'), (292, '        self.texture_fbo.use()'), (293, '        gl.glBlendFuncSeparate('), (295, '            gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA,'), (298, '            gl.GL_ONE, gl.GL_ONE,'), (300, '        gl.glBlendEquationSeparate(gl.GL_FUNC_ADD, gl.GL_MAX)'), (302, ''), (306, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (307, '        gl.glBlendEquation(gl.GL_FUNC_ADD)'), (308, ''), (309, '        self.texture_vao.render(moderngl.TRIANGLE_STRIP)'), (310, ''), (311, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)')], 'deleted': [(289, '        texture_fbo, texture_vao = get_fill_palette(self.ctx)'), (291, '        texture_fbo.clear()'), (292, '        texture_fbo.use()'), (293, '        self.ctx.blend_func = ('), (295, '            moderngl.SRC_ALPHA, moderngl.ONE_MINUS_SRC_ALPHA,'), (298, '            moderngl.ONE, moderngl.ONE'), (304, '        self.ctx.blend_func = (moderngl.ONE, moderngl.ONE_MINUS_SRC_ALPHA)'), (305, '        self.ctx.blend_equation = moderngl.FUNC_ADD'), (306, '        texture_vao.render(moderngl.TRIANGLE_STRIP)'), (307, '        self.ctx.blend_func = moderngl.DEFAULT_BLENDING')]}",63,63
manimlib/animation/creation.py,manimlib/animation/creation.py,422c9cebd22e2b004a15807d57b46522ed705e4e,63886478601ed97c0aa748d627d7d0a61a727da9,Only trigger triangulation for non-winding fill,"{'added': [(103, '            if not submob._use_winding_fill:'), (104, '                submob.get_triangulation()')], 'deleted': [(103, '            submob.get_triangulation()')]}",36,36
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,28636727407a115c01fb5acdd795dc1d787e6665,422c9cebd22e2b004a15807d57b46522ed705e4e,Small clean up,"{'added': [(1771, '        tuples = zip('), (1772, '            self.get_family(),'), (1773, '            mobject1.get_family(),'), (1774, '            mobject2.get_family(),'), (1775, '        )'), (1776, '        for sm, sm1, sm2 in tuples:'), (1777, '            if not sm.data.dtype == sm1.data.dtype == sm2.data.dtype:'), (1778, '                continue'), (1779, '            names = sm.data.dtype.names'), (1780, '            sm.lock_data(filter('), (1781, '                lambda name: arrays_match(sm1.data[name], sm2.data[name]),'), (1782, '                names,'), (1783, '            ))'), (1784, '            sm.const_data_keys = set(filter('), (1785, '                lambda name: all('), (1786, '                    array_is_constant(mob.data[name])'), (1787, '                    for mob in (sm, sm1, sm2)'), (1788, '                ),'), (1789, '                names'), (1790, '            ))')], 'deleted': [(1771, '        for sm, sm1, sm2 in zip(self.get_family(), mobject1.get_family(), mobject2.get_family()):'), (1772, '            if sm.data.dtype == sm1.data.dtype == sm2.data.dtype:'), (1773, '                names = sm.data.dtype.names'), (1774, '                sm.lock_data(filter('), (1775, '                    lambda name: arrays_match(sm1.data[name], sm2.data[name]),'), (1776, '                    names,'), (1777, '                ))'), (1778, '                sm.const_data_keys = set(filter('), (1779, '                    lambda name: all('), (1780, '                        array_is_constant(mob.data[name])'), (1781, '                        for mob in (sm, sm1, sm2)'), (1782, '                    ),'), (1783, '                    names'), (1784, '                ))')]}",520,520
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,79039bde61f3235377ad310b139b9eec122da210,28636727407a115c01fb5acdd795dc1d787e6665,Fix Arrow,"{'added': [(718, '        # Dumb that this is needed'), (719, '        self.start_new_path(self.point_from_proportion(0.99))'), (723, '    @Mobject.affects_data'), (725, '        if self.get_num_points() < 3:'), (727, '        tip_width = self.tip_width_ratio * min('), (728, '            float(self.get_stroke_width()),'), (731, ""        self.data['stroke_width'][-3:, 0] = tip_width * np.linspace(1, 0, 3)"")], 'deleted': [(718, '        self.start_new_path(self.get_points()[-1])'), (723, '        if not self.has_points():'), (725, '        width = min('), (726, '            self.max_stroke_width,'), (729, '        widths_array = np.full(self.get_num_points(), width)'), (730, '        if len(widths_array) > 3:'), (731, '            tip_width = self.tip_width_ratio * width'), (732, '            widths_array[-3:] = tip_width * np.linspace(1, 0, 3)'), (733, '            self.set_stroke(width=widths_array)')]}",139,139
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,79039bde61f3235377ad310b139b9eec122da210,28636727407a115c01fb5acdd795dc1d787e6665,Fix Arrow,"{'added': [(170, '    vec4 jp1 = v_joint_product[1];'), (171, '    float norm = length(jp1);'), (172, '    float cos_angle = (norm > 0) ? (jp1 / norm).w : 1.0;'), (200, '            uv_coords = vec2(0, sign * (0.5 * stroke_width + scaled_aaw));')], 'deleted': [(170, '    float cos_angle = normalize(v_joint_product[1]).w;'), (198, '            uv_coords = vec2(0, sign * (0.5 * max_sw + scaled_aaw));')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b21e470e693851519694e350b284c43b471ff19b,79039bde61f3235377ad310b139b9eec122da210,"In append_vectorized_mobject, append data as well as points","{'added': [(672, '        n = vmobject.get_num_points()'), (673, '        self.data[-n:] = vmobject.data')], 'deleted': []}",279,279
manimlib/utils/iterables.py,manimlib/utils/iterables.py,de7545e5fac13bb60dbb46447032d6cf5371c688,b21e470e693851519694e350b284c43b471ff19b,Tiny tweak to array_is_constant,"{'added': [(136, '    return len(arr) > 0 and (arr == arr[0]).all()')], 'deleted': [(136, '    return len(arr) > 0 and not (arr - arr[0]).any()')]}",42,42
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,86fb1d82f5bd7b626a810b35f895c91c79f5e570,de7545e5fac13bb60dbb46447032d6cf5371c688,Typo fix,"{'added': [(602, '        result.saved_state = None')], 'deleted': [(602, '        result.save_state = None')]}",520,520
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,746b52cda5d1167413de5084f7b9e8a2ba01b144,86fb1d82f5bd7b626a810b35f895c91c79f5e570,"Okay, actually fix Arrow","{'added': [(718, '        self.start_new_path(self.point_from_proportion(1 - 1e-5))'), (730, ""        self.data['stroke_width'][:-3] = self.data['stroke_width'][0]""), (748, '        if self.has_points():'), (749, '            self.reset_tip()'), (753, '        if scale_factor != 1.0:'), (754, '            self.reset_tip()'), (755, '        return self')], 'deleted': [(688, '        self.max_stroke_width = stroke_width'), (719, '        self.start_new_path(self.point_from_proportion(0.99))'), (748, '        if isinstance(width, numbers.Number):'), (749, '            self.max_stroke_width = width'), (750, '            self.create_tip_with_stroke_width()'), (754, '        return self.reset_tip()')]}",140,140
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,1707958e0fd98cbccb5eba194eec2447ec31b6d8,746b52cda5d1167413de5084f7b9e8a2ba01b144,Clean up fill shader a bit,"{'added': [(16, 'from manimlib.utils.shaders import get_fill_canvas'), (278, '        self.fill_canvas = get_fill_canvas(self.ctx)'), (290, '        texture_fbo, texture_vao, null_rgb = self.fill_canvas'), (292, '        texture_fbo.clear(*null_rgb, 0.0)'), (293, '        texture_fbo.use()'), (310, '        texture_vao.render(moderngl.TRIANGLE_STRIP)')], 'deleted': [(16, 'from manimlib.utils.shaders import get_fill_palette'), (278, '        self.texture_fbo, self.texture_vao = get_fill_palette(self.ctx)'), (291, '        self.texture_fbo.clear()'), (292, '        self.texture_fbo.use()'), (309, '        self.texture_vao.render(moderngl.TRIANGLE_STRIP)')]}",63,63
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,1707958e0fd98cbccb5eba194eec2447ec31b6d8,746b52cda5d1167413de5084f7b9e8a2ba01b144,Clean up fill shader a bit,"{'added': [(35, '    float a = 0.99 * frag_color.a;')], 'deleted': [(35, '    float a = 0.98 * frag_color.a;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,1707958e0fd98cbccb5eba194eec2447ec31b6d8,746b52cda5d1167413de5084f7b9e8a2ba01b144,Clean up fill shader a bit,"{'added': [], 'deleted': [(40, '        // Pure black will be used to discard fragments later'), (41, '        if(winding && color.rgb == vec3(0.0)) color.rgb += vec3(3.0 / 256);')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,1707958e0fd98cbccb5eba194eec2447ec31b6d8,746b52cda5d1167413de5084f7b9e8a2ba01b144,Clean up fill shader a bit,"{'added': [(106, 'def get_fill_canvas(ctx) -> Tuple[Framebuffer, VertexArray, Tuple[float, float, float]]:'), (108, '    Because VMobjects with fill are rendered in a funny way, using'), (109, '    alpha blending to effectively compute the winding number around'), (110, '    each pixel, they need to be rendered to a separate texture, which'), (111, '    is then composited onto the ordinary frame buffer.'), (112, ''), (113, '    This returns a texture, loaded into a frame buffer, and a vao'), (114, '    which can display that texture as a simple quad onto a screen,'), (115, '    along with the rgb value which is meant to be discarded.'), (127, ""    # We'll paint onto a canvas with initially negative rgbs, and""), (128, '    # discard any pixels remaining close to this value. This is'), (129, '    # because alphas are effectively being used for another purpose,'), (130, '    # and'), (131, '    null_rgb = (-0.25, -0.25, -0.25)'), (132, ''), (151, '            uniform vec3 null_rgb;'), (156, '            const float MIN_DIST_TO_NULL = 0.2;'), (160, '                vec2 nudges[4] = vec2[4]('), (161, '                    vec2(0, 0),'), (162, '                    vec2(0, h_nudge),'), (163, '                    vec2(v_nudge, 0),'), (164, '                    vec2(v_nudge, h_nudge)'), (165, '                );'), (166, '                color = vec4(0.0);'), (167, '                for(int i = 0; i < 4; i++){'), (168, '                    color += 0.25 * texture(Texture, v_textcoord + nudges[i]);'), (169, '                }'), (170, '                if(distance(color.rgb, null_rgb) < MIN_DIST_TO_NULL) discard;'), (171, ''), (172, '                // Un-blend from the null value'), (173, '                color.rgb -= (1 - color.a) * null_rgb;'), (174, ''), (184, ""    simple_program['null_rgb'].value = null_rgb""), (192, '    return (texture_fbo, fill_texture_vao, null_rgb)')], 'deleted': [(106, 'def get_fill_palette(ctx) -> Tuple[Framebuffer, VertexArray]:'), (108, '    Creates a texture, loaded into a frame buffer, and a vao'), (109, '    which can display that texture as a simple quad onto a screen.'), (143, '            const float MIN_RGB = 3.0 / 256;'), (147, '                vec2 tc0 = v_textcoord + vec2(0, 0);'), (148, '                vec2 tc1 = v_textcoord + vec2(0, h_nudge);'), (149, '                vec2 tc2 = v_textcoord + vec2(v_nudge, 0);'), (150, '                vec2 tc3 = v_textcoord + vec2(v_nudge, h_nudge);'), (151, '                color ='), (152, '                    0.25 * texture(Texture, tc0) +'), (153, '                    0.25 * texture(Texture, tc1) +'), (154, '                    0.25 * texture(Texture, tc2) +'), (155, '                    0.25 * texture(Texture, tc3);'), (156, '                if(abs(color.r) < MIN_RGB && abs(color.g) < MIN_RGB && abs(color.b) < MIN_RGB)'), (157, '                    discard;'), (158, '                // Counteract scaling in quadratic_bezier_frag'), (159, '                color = color / 0.98;'), (176, '    return (texture_fbo, fill_texture_vao)')]}",13,13
manimlib/utils/shaders.py,manimlib/utils/shaders.py,97e4c254536623946346fb76fddd874075fd16a7,1707958e0fd98cbccb5eba194eec2447ec31b6d8,Add comment,"{'added': [(130, ""    # and we don't want to overlap with any colors one might actually""), (131, '    # use. It should be negative enough to be distinguishable from'), (132, ""    # ordinary colors with some margin, but the farther it's pulled back""), (133, '    # from zero the more it will be true that overlapping filled objects'), (134, '    # with transparency have an unnaturally bright composition.')], 'deleted': [(130, '    # and')]}",13,13
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,40ae4819798e90bd0249feed4a5ba50ff1a3b357,97e4c254536623946346fb76fddd874075fd16a7,Marginally better vbo/ibo tracking,"{'added': [(59, '        self.init_vao()'), (88, '    def init_vao(self):'), (89, '        self.vbo = None'), (90, '        self.ibo = None'), (91, '        self.vao = None'), (92, ''), (111, '        result.init_vao()'), (250, '        vbo = self.vbo = self.get_vertex_buffer_object(refresh)'), (251, '        ibo = self.ibo = self.get_index_buffer_object(refresh)'), (252, '')], 'deleted': [(61, '        self.vbo = None'), (62, '        self.ibo = None'), (63, '        self.vao = None'), (64, ''), (109, '        result.vao = None'), (110, '        result.vbo = None'), (111, '        result.ibo = None'), (250, '        vbo = self.get_vertex_buffer_object(refresh)'), (251, '        ibo = self.get_index_buffer_object(refresh)')]}",64,64
manimlib/camera/camera.py,manimlib/camera/camera.py,3a0916fe3af397015257ec698c4ac96ecc7cc4ef,40ae4819798e90bd0249feed4a5ba50ff1a3b357,Reorganize fbo initialization,"{'added': [(20, '    from typing import Optional'), (28, '        window: Optional[Window] = None,'), (29, '        background_image: Optional[str] = None,'), (66, '        self.init_context()'), (67, '        self.init_fbo()'), (73, '    def init_context(self) -> None:'), (74, '        if self.window is None:'), (77, '            self.ctx = self.window.ctx'), (82, '    def init_fbo(self) -> None:'), (83, '        # This is the buffer used when writing to a video/image file'), (84, '        self.fbo_for_files = self.get_fbo(self.samples)'), (85, ''), (89, '        if self.window is None:'), (90, '            self.window_fbo = None'), (91, '            self.fbo = self.fbo_for_files'), (92, '        else:'), (93, '            self.window_fbo = self.ctx.detect_framebuffer()'), (94, '            self.fbo = self.window_fbo'), (95, ''), (96, '        self.fbo.use()'), (97, '')], 'deleted': [(27, '        window: Window | None = None,'), (28, '        background_image: str | None = None,'), (65, '        self.init_context(window)'), (71, '    def init_context(self, window: Window | None = None) -> None:'), (72, '        self.window = window'), (73, '        if window is None:'), (75, '            self.fbo = self.get_fbo(self.samples)'), (77, '            self.ctx = window.ctx'), (78, '            self.window_fbo = self.ctx.detect_framebuffer()'), (79, '            self.fbo_for_files = self.get_fbo(self.samples)'), (80, '            self.fbo = self.window_fbo'), (81, ''), (82, '        self.fbo.use()')]}",31,31
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,1c432dd6dc347d4c58fd1d49b6f5cd50d24517f9,3a0916fe3af397015257ec698c4ac96ecc7cc4ef,Small refactor to stroke geom shader,"{'added': [(52, 'vec4 normalized_joint_product(vec4 joint_product){'), (53, '    float norm = length(joint_product);'), (54, '    return (norm > 1e-10) ? joint_product / norm : vec4(0.0, 0.0, 0.0, 1.0);'), (55, '}'), (56, ''), (57, ''), (87, 'vec3 get_perp(int index, vec4 joint_product, vec3 point, vec3 tangent, float aaw){'), (88, '    /*'), (89, '    Perpendicular vectors to the left of the curve'), (90, '    */'), (91, '    float buff = 0.5 * v_stroke_width[index] + aaw;'), (92, '    // Add correction for sharp angles to prevent weird bevel effects'), (93, '    if(joint_product.w < -0.9) buff *= 10 * (joint_product.w + 1.0);'), (94, '    vec3 normal = get_joint_unit_normal(joint_product);'), (95, '    // Set global unit normal'), (96, '    unit_normal = normal;'), (97, '    // Choose the ""outward"" normal direction'), (98, '    if(normal.z < 0) normal *= -1;'), (99, '    if(bool(flat_stroke)){'), (100, '        return buff * normalize(cross(normal, tangent));'), (101, '    }else{'), (102, '        return buff * normalize(cross(camera_position - point, tangent));'), (103, '    }'), (104, '}'), (105, ''), (123, '    bool linear = bool(is_linear);'), (124, '    vec4 jp0 = normalized_joint_product(v_joint_product[0]);'), (125, '    vec4 jp2 = normalized_joint_product(v_joint_product[2]);'), (126, '    vec3 p0_perp = get_perp(0, jp0, p0, v01, aaw);'), (127, '    vec3 p2_perp = get_perp(2, jp2, p2, v12, aaw);'), (129, '    if(linear){'), (130, '        p1_perp *= (0.5 * v_stroke_width[1] + aaw) / length(p1_perp);'), (131, '    }'), (142, '    // float orientation = dot(unit_normal, v_joint_product[1].xyz);'), (143, '    float orientation = v_joint_product[1].z;'), (144, '    if(!linear && orientation >= 0.0)     c2 = 0.5 * (c0 + c4);'), (145, '    else if(!linear && orientation < 0.0) c3 = 0.5 * (c1 + c5);'), (149, '        create_joint(jp0, v01, length(p0_perp), c1, c1, c0, c0);'), (150, '        create_joint(jp2, -v12, length(p2_perp), c5, c5, c4, c4);'), (171, ''), (172, '    vec4 jp1 = normalized_joint_product(v_joint_product[1]);'), (173, '    is_linear = float(jp1.w > COS_THRESHOLD);')], 'deleted': [(98, ''), (99, '    float buff0 = 0.5 * v_stroke_width[0] + aaw;'), (100, '    float buff2 = 0.5 * v_stroke_width[2] + aaw;'), (101, ''), (102, '    vec4 jp0 = normalize(v_joint_product[0]);'), (103, '    vec4 jp2 = normalize(v_joint_product[2]);'), (104, ''), (105, '    // Add correction for sharp angles to prevent weird bevel effects'), (106, '    if(jp0.w < -0.9) buff0 *= 10 * (jp0.w + 1.0);'), (107, '    if(jp2.w < -0.9) buff2 *= 10 * (jp2.w + 1.0);'), (108, ''), (109, '    // Unit normal and joint angles'), (110, '    vec3 normal0 = get_joint_unit_normal(jp0);'), (111, '    vec3 normal2 = get_joint_unit_normal(jp2);'), (112, '    // Set global unit normal'), (113, '    unit_normal = normal0;'), (114, ''), (115, '    // Choose the ""outward"" normal direction'), (116, '    normal0 *= sign(normal0.z);'), (117, '    normal2 *= sign(normal2.z);'), (118, ''), (119, '    vec3 p0_perp;'), (120, '    vec3 p2_perp;'), (121, '    if(bool(flat_stroke)){'), (122, '        // Perpendicular vectors to the left of the curve'), (123, '        p0_perp = buff0 * normalize(cross(normal0, v01));'), (124, '        p2_perp = buff2 * normalize(cross(normal2, v12));'), (125, '    }else{'), (126, '        // p0_perp = buff0 * normal0;'), (127, '        // p2_perp = buff2 * normal2;'), (128, '        p0_perp = buff0 * normalize(cross(camera_position - p0, v01));'), (129, '        p2_perp = buff2 * normalize(cross(camera_position - p2, v12));'), (130, '    }'), (142, '    float orientation = dot(normal0, v_joint_product[1].xyz);'), (143, '    if(orientation >= 0.0)     c2 = 0.5 * (c0 + c4);'), (144, '    else if(orientation < 0.0) c3 = 0.5 * (c1 + c5);'), (148, '        create_joint(jp0, v01, buff0, c1, c1, c0, c0);'), (149, '        create_joint(jp2, -v12, buff2, c5, c5, c4, c4);'), (170, '    vec4 jp1 = v_joint_product[1];'), (171, '    float norm = length(jp1);'), (172, '    float cos_angle = (norm > 0) ? (jp1 / norm).w : 1.0;'), (173, '    is_linear = float(cos_angle > COS_THRESHOLD);')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,86fb69c5bb4ae92f648a809623fd1fc7d3902a00,1c432dd6dc347d4c58fd1d49b6f5cd50d24517f9,Track unit normal for fill,"{'added': [(65, ""        ('unit_normal', np.float32, (3,)),""), (67, ""    fill_data_names = ['point', 'fill_rgba', 'base_point', 'unit_normal']""), (831, '        self.data[""unit_normal""][:] = normal'), (834, '    def refresh_unit_normal(self):'), (835, '        self.get_unit_normal()'), (836, '        return self'), (837, ''), (838, '    def rotate('), (839, '        self,'), (840, '        angle: float,'), (841, '        axis: Vect3 = OUT,'), (842, '        about_point: Vect3 | None = None,'), (843, '        **kwargs'), (844, '    ):'), (845, '        super().rotate(angle, axis, about_point, **kwargs)'), (846, '        for mob in self.get_family():'), (847, '            mob.refresh_unit_normal()'), (848, '        return self'), (849, ''), (1169, '            self.get_unit_normal()'), (1179, '    def reverse_points(self, recurse: bool = True):'), (1182, '        for mob in self.get_family(recurse):'), (1268, '                data = submob.data[fill_names]'), (1269, '                data[""base_point""][:] = data[""point""][0]'), (1270, '                fill_datas.append(data)'), (1273, '                    fill_datas.append(data[-1:])')], 'deleted': [(66, ""    fill_data_names = ['point', 'fill_rgba', 'base_point']""), (1160, '    def reverse_points(self):'), (1163, '        for mob in self.get_family():'), (1168, '        super().reverse_points()'), (1169, '        return self'), (1251, '                submob.data[""base_point""][:] = submob.data[""point""][0]'), (1252, '                fill_datas.append(submob.data[fill_names])'), (1255, '                    fill_datas.append(submob.data[fill_names][-1:])')]}",282,282
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,86fb69c5bb4ae92f648a809623fd1fc7d3902a00,1c432dd6dc347d4c58fd1d49b6f5cd50d24517f9,Track unit normal for fill,"{'added': [(10, 'in vec3 unit_normal;'), (18, '    frag_color = finalize_color(color, point, unit_normal);')], 'deleted': [(17, '    frag_color = finalize_color(color, point, vec3(0.0, 0.0, 1.0));')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,86fb69c5bb4ae92f648a809623fd1fc7d3902a00,1c432dd6dc347d4c58fd1d49b6f5cd50d24517f9,Track unit normal for fill,"{'added': [(12, 'in vec3 v_unit_normal[3];'), (18, 'out vec3 unit_normal;'), (34, '    unit_normal = v_unit_normal[1];'), (35, '    orientation = 1.0;'), (36, '    if(winding){'), (37, '        orientation = sign(determinant(mat3('), (38, '            v_unit_normal[1],'), (39, '            points[1] - points[0],'), (40, '            points[2] - points[0]'), (41, '        )));'), (42, '    }')], 'deleted': [(29, '#INSERT get_unit_normal.glsl'), (33, '    vec3 unit_normal = get_unit_normal(points[0], points[1], points[2]);'), (34, '    orientation = winding ? sign(unit_normal.z) : 1.0;')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,86fb69c5bb4ae92f648a809623fd1fc7d3902a00,1c432dd6dc347d4c58fd1d49b6f5cd50d24517f9,Track unit normal for fill,"{'added': [(6, 'in vec3 unit_normal;'), (11, 'out vec3 v_unit_normal;'), (18, '    v_unit_normal = unit_normal;')], 'deleted': []}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e57ca4e1ee4995714e38a70d21a07914e343a732,86fb69c5bb4ae92f648a809623fd1fc7d3902a00,Track orientation for non-winding fill,"{'added': [], 'deleted': [(1085, '        # Flip outer triangles with negative orientation'), (1086, '        ovi[0::3][concave_parts], ovi[2::3][concave_parts] = ovi[2::3][concave_parts], ovi[0::3][concave_parts]')]}",282,282
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,e57ca4e1ee4995714e38a70d21a07914e343a732,86fb69c5bb4ae92f648a809623fd1fc7d3902a00,Track orientation for non-winding fill,"{'added': [(34, '    orientation = sign(determinant(mat3('), (35, '        unit_normal,'), (36, '        points[1] - points[0],'), (37, '        points[2] - points[0]'), (38, '    )));'), (68, '    unit_normal = v_unit_normal[1];'), (69, '')], 'deleted': [(34, '    unit_normal = v_unit_normal[1];'), (35, '    orientation = 1.0;'), (36, '    if(winding){'), (37, '        orientation = sign(determinant(mat3('), (38, '            v_unit_normal[1],'), (39, '            points[1] - points[0],'), (40, '            points[2] - points[0]'), (41, '        )));'), (42, '    }'), (72, '    vec3 mid_vert;')]}",,
manimlib/animation/indication.py,manimlib/animation/indication.py,35c19fe8a7e0b98a5194e56fe5b598e90e5d91d3,e57ca4e1ee4995714e38a70d21a07914e343a732,Edit is_fixed_in_frame,"{'added': [(268, '        if mobject.is_fixed_in_frame():')], 'deleted': [(268, '        if mobject.is_fixed_in_frame:')]}",44,44
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,35c19fe8a7e0b98a5194e56fe5b598e90e5d91d3,e57ca4e1ee4995714e38a70d21a07914e343a732,Edit is_fixed_in_frame,"{'added': [(91, '        self._is_fixed_in_frame = is_fixed_in_frame'), (135, '            ""is_fixed_in_frame"": float(self._is_fixed_in_frame),'), (1811, '    def fix_in_frame(self, recurse: bool = True):'), (1812, '        for mob in self.get_family(recurse):'), (1813, '            mob.uniforms[""is_fixed_in_frame""] = 1.0'), (1821, '    def is_fixed_in_frame(self) -> bool:'), (1822, '        return bool(self.uniforms[""is_fixed_in_frame""])'), (1823, ''), (2062, '        if any(m.is_fixed_in_frame() for m in mobjects):')], 'deleted': [(91, '        self.is_fixed_in_frame = is_fixed_in_frame'), (135, '            ""is_fixed_in_frame"": float(self.is_fixed_in_frame),'), (1811, '    def fix_in_frame(self):'), (1812, '        self.uniforms[""is_fixed_in_frame""] = 1.0'), (1813, '        self.is_fixed_in_frame = True'), (1819, '        self.is_fixed_in_frame = False'), (2060, '        if any(m.is_fixed_in_frame for m in mobjects):')]}",522,522
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1f6363821b82f5793e57c1b667c70f1d67c2f697,35c19fe8a7e0b98a5194e56fe5b598e90e5d91d3,Have VMobject inherit children uniforms when rendering,"{'added': [(1291, '        # TODO, account for submob uniforms separately?'), (1292, '        self.uniforms.update(family[0].uniforms)')], 'deleted': []}",282,282
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d5b1a1725da76eb305bb81a14ea1144cbb4942e4,1f6363821b82f5793e57c1b667c70f1d67c2f697,"Allow Mobject.remove to remove any family member, not just immediate submobjects","{'added': [(411, '    def remove(self, *to_remove: Mobject, reassemble: bool = True):'), (412, '        for parent in self.get_family():'), (413, '            for child in to_remove:'), (414, '                if child in parent.submobjects:'), (415, '                    parent.submobjects.remove(child)'), (416, '                if parent in child.parents:'), (417, '                    child.parents.remove(parent)'), (418, '            if reassemble:'), (419, '                parent.assemble_family()')], 'deleted': [(411, '    def remove(self, *mobjects: Mobject, reassemble: bool = True):'), (412, '        for mobject in mobjects:'), (413, '            if mobject in self.submobjects:'), (414, '                self.submobjects.remove(mobject)'), (415, '            if self in mobject.parents:'), (416, '                mobject.parents.remove(self)'), (417, '        if reassemble:'), (418, '            self.assemble_family()')]}",523,523
manimlib/animation/transform_matching_parts.py,manimlib/animation/transform_matching_parts.py,3a01eb31bd1a9fd737e230f5c7889a92da45e571,d5b1a1725da76eb305bb81a14ea1144cbb4942e4,Remove group_type arg,"{'added': [], 'deleted': [(152, '            group_type=VGroup,')]}",27,27
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,71ef39ea5be5f9c7b132310f2a5f71647f0e58b3,3a01eb31bd1a9fd737e230f5c7889a92da45e571,"Remove ""poor man's anti-aliasing"" for Fill and instead render a small border width for fill","{'added': [(66, ""        ('fill_border_width', np.float32, (1,)),""), (96, '        fill_border_width: float = 0.5,'), (112, '        self.fill_border_width = fill_border_width'), (170, '            border_width=self.fill_border_width,'), (202, '        border_width: float | None = None,'), (206, '        if border_width is not None:'), (207, '            for mob in self.get_family(recurse):'), (208, '                mob.data[""fill_border_width""] = border_width'), (1269, '        fill_border_datas = []'), (1272, '        back_stroke_datas = []'), (1274, '            submob.get_joint_products()'), (1275, '            has_fill = submob.has_fill()'), (1276, '            has_stroke = submob.has_stroke()'), (1277, '            if has_fill:'), (1286, '                # Add fill border'), (1287, '                if not has_stroke:'), (1288, '                    names = list(stroke_names)'), (1289, ""                    names[names.index('stroke_rgba')] = 'fill_rgba'""), (1290, ""                    names[names.index('stroke_width')] = 'fill_border_width'""), (1291, '                    border_stroke_data = submob.data[names]'), (1292, '                    fill_border_datas.append(border_stroke_data)'), (1293, '                    fill_border_datas.append(border_stroke_data[-1:])'), (1294, '            if has_stroke:'), (1295, '                lst = back_stroke_datas if submob.stroke_behind else stroke_datas'), (1303, '            self.back_stroke_shader_wrapper.read_in('), (1304, '                [*back_stroke_datas, *fill_border_datas]'), (1305, '            ),')], 'deleted': [(1263, '        back_stroke_data = []'), (1265, '            if submob.has_fill():'), (1274, '            if submob.has_stroke():'), (1275, '                submob.get_joint_products()'), (1276, '                if submob.stroke_behind:'), (1277, '                    lst = back_stroke_data'), (1278, '                else:'), (1279, '                    lst = stroke_datas'), (1287, '            self.back_stroke_shader_wrapper.read_in(back_stroke_data),')]}",285,285
manimlib/utils/shaders.py,manimlib/utils/shaders.py,71ef39ea5be5f9c7b132310f2a5f71647f0e58b3,3a01eb31bd1a9fd737e230f5c7889a92da45e571,"Remove ""poor man's anti-aliasing"" for Fill and instead render a small border width for fill","{'added': [(161, '                color = texture(Texture, v_textcoord);')], 'deleted': [(153, '            uniform float v_nudge;'), (154, '            uniform float h_nudge;'), (163, ""                // Apply poor man's anti-aliasing""), (164, '                vec2 nudges[4] = vec2[4]('), (165, '                    vec2(0, 0),'), (166, '                    vec2(0, h_nudge),'), (167, '                    vec2(v_nudge, 0),'), (168, '                    vec2(v_nudge, h_nudge)'), (169, '                );'), (170, '                color = vec4(0.0);'), (171, '                for(int i = 0; i < 4; i++){'), (172, '                    color += 0.25 * texture(Texture, v_textcoord + nudges[i]);'), (173, '                }'), (185, '    # Half pixel width/height'), (186, ""    simple_program['h_nudge'].value = 0.5 / size[0]""), (187, ""    simple_program['v_nudge'].value = 0.5 / size[1]"")]}",13,13
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,ce5d0b61f9ba86edd7f809815230772bcb7bc23d,71ef39ea5be5f9c7b132310f2a5f71647f0e58b3,Add back accidentally deleted reverse_points code,"{'added': [(1193, '            mob.data[""unit_normal""] *= -1'), (1194, '        super().reverse_points()'), (1195, '        return self')], 'deleted': []}",285,285
manimlib/__init__.py,manimlib/__init__.py,8ecfc2b2cf7af8ffc7ba0801e324b28e561ba86f,ce5d0b61f9ba86edd7f809815230772bcb7bc23d,add shaders to universal imports,"{'added': [(76, 'from manimlib.utils.shaders import *')], 'deleted': []}",0,0
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,38abef88713b09daed26b42a8dc99c10ffceb053,8ecfc2b2cf7af8ffc7ba0801e324b28e561ba86f,Fix ShaderWrapper.init_textures,"{'added': [(83, '        names_to_ids = {'), (84, '            name: get_texture_id(image_path_to_texture(path, self.ctx))'), (85, '            for name, path in texture_paths.items()'), (86, '        }'), (87, '        self.update_program_uniforms(names_to_ids)')], 'deleted': [(83, '        for name, path in texture_paths.items():'), (84, '            texture = image_path_to_texture(path, self.ctx)'), (85, '            tid = get_texture_id(texture)'), (86, '            self.uniforms[name] = tid')]}",64,64
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,047128a6632a82d484379a76a7949885ca16af87,38abef88713b09daed26b42a8dc99c10ffceb053,Make sure shader_wrapper inherits depth test,"{'added': [(1946, '            shader_wrapper.depth_test = self.depth_test')], 'deleted': []}",523,523
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,fc379dab1855ae3739b8572a299c4cabaf5db4f7,f296dd8df5fb458766d11a454ef55360f5794f85,"Add a ""clear"" option for Mobjects

This not only sets the submobject list to 0, but removes self from the parent lists","{'added': [(411, '    def remove('), (412, '        self,'), (413, '        *to_remove: Mobject,'), (414, '        reassemble: bool = True,'), (415, '        recurse: bool = True'), (416, '    ):'), (417, '        for parent in self.get_family(recurse):'), (427, '    def clear(self):'), (428, '        self.remove(*self.submobjects, recurse=False)'), (429, '')], 'deleted': [(411, '    def remove(self, *to_remove: Mobject, reassemble: bool = True):'), (412, '        for parent in self.get_family():')]}",524,524
manimlib/scene/scene.py,manimlib/scene/scene.py,8a18967ea4a13c2f4b27b22b7af7a99a01c91579,fc379dab1855ae3739b8572a299c4cabaf5db4f7,Initial implementation of render groups in Scene,"{'added': [(10, 'from functools import wraps'), (41, 'from manimlib.utils.iterables import batch_by_property'), (115, '        self.render_groups: list[Mobject] = []'), (295, '            self.camera.capture(*self.render_groups)'), (316, '        self.camera.capture(*self.render_groups)'), (375, '    def assemble_render_groups(self):'), (376, '        """"""'), (377, '        Rendering is more efficient when VMobjects are grouped'), (378, '        together, so this function creates VGroups of all'), (379, ""        clusters of adjacent VMobjects in the scene's mobject""), (380, '        list.'), (381, '        """"""'), (382, '        for group in self.render_groups:'), (383, '            group.clear()'), (384, '        self.render_groups = []'), (385, '        batches = batch_by_property('), (386, '            self.mobjects,'), (387, '            lambda m: str(m.get_uniforms()) + str(m.apply_depth_test)'), (388, '        )'), (389, '        self.render_groups = ['), (390, '            batch[0].get_group_class()(*batch)'), (391, '            for batch, key in batches'), (392, '        ]'), (393, ''), (394, '    def affects_mobject_list(func: Callable):'), (395, '        @wraps(func)'), (396, '        def wrapper(self, *args, **kwargs):'), (397, '            func(self, *args, **kwargs)'), (398, '            self.assemble_render_groups()'), (399, '            return self'), (400, '        return wrapper'), (401, ''), (402, '    @affects_mobject_list'), (429, '    @affects_mobject_list'), (440, '    @affects_mobject_list'), (458, '    @affects_mobject_list'), (464, '    @affects_mobject_list')], 'deleted': [(292, '            self.camera.capture(*self.mobjects)'), (313, '        self.camera.capture(*self.mobjects)')]}",223,223
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1a6231471949b606d8b852fe135c073638ed73ef,f296dd8df5fb458766d11a454ef55360f5794f85,"Add a ""clear"" option for Mobjects

This not only sets the submobject list to 0, but removes self from the parent lists","{'added': [(411, '    def remove('), (412, '        self,'), (413, '        *to_remove: Mobject,'), (414, '        reassemble: bool = True,'), (415, '        recurse: bool = True'), (416, '    ):'), (417, '        for parent in self.get_family(recurse):'), (427, '    def clear(self):'), (428, '        self.remove(*self.submobjects, recurse=False)'), (429, '')], 'deleted': [(411, '    def remove(self, *to_remove: Mobject, reassemble: bool = True):'), (412, '        for parent in self.get_family():')]}",524,524
manimlib/utils/shaders.py,manimlib/utils/shaders.py,60a27f52f186bc1cc423b90d761acc54a8657e16,1a6231471949b606d8b852fe135c073638ed73ef,Add depth sampling for fill,"{'added': [(106, 'def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray, Tuple[float, float, float]]:'), (124, '    depth_texture = ctx.depth_texture(size=size)'), (125, '    texture_fbo = ctx.framebuffer(texture, depth_texture)'), (153, '            uniform sampler2D DepthTexture;'), (168, '                gl_FragDepth = texture(DepthTexture, v_textcoord)[0];'), (174, ""    simple_program['DepthTexture'].value = get_texture_id(depth_texture)"")], 'deleted': [(106, 'def get_fill_canvas(ctx) -> Tuple[Framebuffer, VertexArray, Tuple[float, float, float]]:'), (124, '    depth_buffer = ctx.depth_renderbuffer(size)  # TODO, currently not used'), (125, '    texture_fbo = ctx.framebuffer(texture, depth_buffer)'), (167, '                //TODO, set gl_FragDepth;')]}",13,13
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,05a80f53a70a54156ac90500bb52e407ebd0a979,60a27f52f186bc1cc423b90d761acc54a8657e16,Make sure depth test calls map to the whole family,"{'added': [(1826, '    def unfix_from_frame(self, recurse: bool = True):'), (1827, '        for mob in self.get_family(recurse):'), (1828, '            mob.uniforms[""is_fixed_in_frame""] = 0.0'), (1835, '    def apply_depth_test(self, recurse: bool = True):'), (1836, '        for mob in self.get_family(recurse):'), (1837, '            mob.depth_test = True'), (1841, '    def deactivate_depth_test(self, recurse: bool = True):'), (1842, '        for mob in self.get_family(recurse):'), (1843, '            mob.depth_test = False')], 'deleted': [(1826, '    def unfix_from_frame(self):'), (1827, '        self.uniforms[""is_fixed_in_frame""] = 0.0'), (1834, '    def apply_depth_test(self):'), (1835, '        self.depth_test = True'), (1839, '    def deactivate_depth_test(self):'), (1840, '        self.depth_test = False')]}",527,527
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ab03a0cfbaaa7c617f4919d5316ee2e314c275ae,05a80f53a70a54156ac90500bb52e407ebd0a979,Add Mobject.set_uniform,"{'added': [(1812, '        def wrapper(self, *args, **kwargs):'), (1813, '            result = func(self, *args, **kwargs)'), (1814, '            self.refresh_shader_wrapper_id()'), (1815, '            return result'), (1819, '    def set_uniform(self, recurse: bool = True, **new_uniforms):'), (1821, '            mob.uniforms.update(new_uniforms)'), (1822, '        return self'), (1823, ''), (1824, '    @affects_shader_info_id'), (1825, '    def fix_in_frame(self, recurse: bool = True):'), (1826, '        self.set_uniform(recurse, is_fixed_in_frame=1.0)'), (1831, '        self.set_uniform(recurse, is_fixed_in_frame=0.0)')], 'deleted': [(1812, '        def wrapper(self):'), (1813, '            for mob in self.get_family():'), (1814, '                func(mob)'), (1815, '                mob.refresh_shader_wrapper_id()'), (1816, '            return self'), (1820, '    def fix_in_frame(self, recurse: bool = True):'), (1822, '            mob.uniforms[""is_fixed_in_frame""] = 1.0'), (1827, '        for mob in self.get_family(recurse):'), (1828, '            mob.uniforms[""is_fixed_in_frame""] = 0.0')]}",526,526
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c7ef4eefbcf8145b09c0ffe4b29fb6586ece2ec4,ab03a0cfbaaa7c617f4919d5316ee2e314c275ae,Add getter/setter for anti_alias_width,"{'added': [(332, '    def set_anti_alias_width(self, anti_alias_width: float, recurse: bool = True):'), (333, '        self.set_uniform(recurse, anti_alias_width=anti_alias_width)'), (334, '        return self'), (335, ''), (406, '    def get_anti_alias_width(self):'), (407, '        return self.uniforms[""anti_alias_width""]'), (408, '')], 'deleted': []}",287,287
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2a3f927566fd32388e480a7bb564c72fd43db385,c7ef4eefbcf8145b09c0ffe4b29fb6586ece2ec4,Set defaults so that VMobjects will have no antialias width when depth test is turned on,"{'added': [(436, '    def apply_depth_test('), (437, '        self,'), (438, '        anti_alias_width: float = 0,'), (439, '        fill_border_width: float = 0,'), (440, '        recurse: bool=True'), (441, '    ):'), (442, '        super().apply_depth_test(recurse)'), (443, '        self.set_anti_alias_width(anti_alias_width)'), (444, '        self.set_fill(border_width=fill_border_width)'), (445, '        return self'), (446, ''), (447, '    def deactivate_depth_test('), (448, '        self,'), (449, '        anti_alias_width: float = 1.0,'), (450, '        fill_border_width: float = 0.5,'), (451, '        recurse: bool=True'), (452, '    ):'), (453, '        super().apply_depth_test(recurse)'), (454, '        self.set_anti_alias_width(anti_alias_width)'), (455, '        self.set_fill(border_width=fill_border_width)'), (456, '        return self'), (457, '')], 'deleted': []}",289,289
manimlib/scene/sample_space_scene.py,,a1449def95a24765674e913e4603f3b614b3d1cf,2a3f927566fd32388e480a7bb564c72fd43db385,Move SampleSpaceScene to videos repo,"{'added': [], 'deleted': [(1, 'from manimlib.animation.animation import Animation'), (2, 'from manimlib.animation.transform import MoveToTarget'), (3, 'from manimlib.animation.transform import Transform'), (4, 'from manimlib.animation.update import UpdateFromFunc'), (5, 'from manimlib.constants import DOWN, RIGHT'), (6, 'from manimlib.constants import MED_LARGE_BUFF, SMALL_BUFF'), (7, 'from manimlib.mobject.probability import SampleSpace'), (8, 'from manimlib.mobject.types.vectorized_mobject import VGroup'), (9, 'from manimlib.scene.scene import Scene'), (10, ''), (11, ''), (12, 'class SampleSpaceScene(Scene):'), (13, '    def get_sample_space(self, **config):'), (14, '        self.sample_space = SampleSpace(**config)'), (15, '        return self.sample_space'), (16, ''), (17, '    def add_sample_space(self, **config):'), (18, '        self.add(self.get_sample_space(**config))'), (19, ''), (20, '    def get_division_change_animations('), (21, '        self, sample_space, parts, p_list,'), (22, '        dimension=1,'), (23, '        new_label_kwargs=None,'), (24, '        **kwargs'), (25, '    ):'), (26, '        if new_label_kwargs is None:'), (27, '            new_label_kwargs = {}'), (28, '        anims = []'), (29, '        p_list = sample_space.complete_p_list(p_list)'), (30, '        space_copy = sample_space.copy()'), (31, ''), (32, '        vect = DOWN if dimension == 1 else RIGHT'), (33, '        parts.generate_target()'), (34, '        for part, p in zip(parts.target, p_list):'), (35, '            part.replace(space_copy, stretch=True)'), (36, '            part.stretch(p, dimension)'), (37, '        parts.target.arrange(vect, buff=0)'), (38, '        parts.target.move_to(space_copy)'), (39, '        anims.append(MoveToTarget(parts))'), (40, '        if hasattr(parts, ""labels"") and parts.labels is not None:'), (41, '            label_kwargs = parts.label_kwargs'), (42, '            label_kwargs.update(new_label_kwargs)'), (43, '            new_braces, new_labels = sample_space.get_subdivision_braces_and_labels('), (44, '                parts.target, **label_kwargs'), (45, '            )'), (46, '            anims += ['), (47, '                Transform(parts.braces, new_braces),'), (48, '                Transform(parts.labels, new_labels),'), (49, '            ]'), (50, '        return anims'), (51, ''), (52, '    def get_horizontal_division_change_animations(self, p_list, **kwargs):'), (53, '        assert(hasattr(self.sample_space, ""horizontal_parts""))'), (54, '        return self.get_division_change_animations('), (55, '            self.sample_space, self.sample_space.horizontal_parts, p_list,'), (56, '            dimension=1,'), (57, '            **kwargs'), (58, '        )'), (59, ''), (60, '    def get_vertical_division_change_animations(self, p_list, **kwargs):'), (61, '        assert(hasattr(self.sample_space, ""vertical_parts""))'), (62, '        return self.get_division_change_animations('), (63, '            self.sample_space, self.sample_space.vertical_parts, p_list,'), (64, '            dimension=0,'), (65, '            **kwargs'), (66, '        )'), (67, ''), (68, '    def get_conditional_change_anims('), (69, '        self, sub_sample_space_index, value, post_rects=None,'), (70, '        **kwargs'), (71, '    ):'), (72, '        parts = self.sample_space.horizontal_parts'), (73, '        sub_sample_space = parts[sub_sample_space_index]'), (74, '        anims = self.get_division_change_animations('), (75, '            sub_sample_space, sub_sample_space.vertical_parts, value,'), (76, '            dimension=0,'), (77, '            **kwargs'), (78, '        )'), (79, '        if post_rects is not None:'), (80, '            anims += self.get_posterior_rectangle_change_anims(post_rects)'), (81, '        return anims'), (82, ''), (83, '    def get_top_conditional_change_anims(self, *args, **kwargs):'), (84, '        return self.get_conditional_change_anims(0, *args, **kwargs)'), (85, ''), (86, '    def get_bottom_conditional_change_anims(self, *args, **kwargs):'), (87, '        return self.get_conditional_change_anims(1, *args, **kwargs)'), (88, ''), (89, '    def get_prior_rectangles(self):'), (90, '        return VGroup(*['), (91, '            self.sample_space.horizontal_parts[i].vertical_parts[0]'), (92, '            for i in range(2)'), (93, '        ])'), (94, ''), (95, '    def get_posterior_rectangles(self, buff=MED_LARGE_BUFF):'), (96, '        prior_rects = self.get_prior_rectangles()'), (97, '        areas = ['), (98, '            rect.get_width() * rect.get_height()'), (99, '            for rect in prior_rects'), (100, '        ]'), (101, '        total_area = sum(areas)'), (102, '        total_height = prior_rects.get_height()'), (103, ''), (104, '        post_rects = prior_rects.copy()'), (105, '        for rect, area in zip(post_rects, areas):'), (106, '            rect.stretch_to_fit_height(total_height * area / total_area)'), (107, '            rect.stretch_to_fit_width('), (108, '                area / rect.get_height()'), (109, '            )'), (110, '        post_rects.arrange(DOWN, buff=0)'), (111, '        post_rects.next_to('), (112, '            self.sample_space, RIGHT, buff'), (113, '        )'), (114, '        return post_rects'), (115, ''), (116, '    def get_posterior_rectangle_braces_and_labels('), (117, '        self, post_rects, labels, direction=RIGHT, **kwargs'), (118, '    ):'), (119, '        return self.sample_space.get_subdivision_braces_and_labels('), (120, '            post_rects, labels, direction, **kwargs'), (121, '        )'), (122, ''), (123, '    def update_posterior_braces(self, post_rects):'), (124, '        braces = post_rects.braces'), (125, '        labels = post_rects.labels'), (126, '        for rect, brace, label in zip(post_rects, braces, labels):'), (127, '            brace.stretch_to_fit_height(rect.get_height())'), (128, '            brace.next_to(rect, RIGHT, SMALL_BUFF)'), (129, '            label.next_to(brace, RIGHT, SMALL_BUFF)'), (130, ''), (131, '    def get_posterior_rectangle_change_anims(self, post_rects):'), (132, '        def update_rects(rects):'), (133, '            new_rects = self.get_posterior_rectangles()'), (134, '            Transform(rects, new_rects).update(1)'), (135, '            if hasattr(rects, ""braces""):'), (136, '                self.update_posterior_braces(rects)'), (137, '            return rects'), (138, ''), (139, '        anims = [UpdateFromFunc(post_rects, update_rects)]'), (140, '        if hasattr(post_rects, ""braces""):'), (141, '            anims += list(map(Animation, ['), (142, '                post_rects.labels, post_rects.braces'), (143, '            ]))'), (144, '        return anims')]}",,
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,5deef1c249e2d92f5ae4a11598e8ad3af4ca48a3,a1449def95a24765674e913e4603f3b614b3d1cf,Allow for setting a default frame orientation,"{'added': [(32, '        self.default_orientation = Rotation.identity()'), (54, '    def make_orientation_default(self):'), (55, '        self.default_orientation = self.get_orientation()'), (56, '        return self'), (57, ''), (62, '        self.set_orientation(self.default_orientation)'), (109, '        if all(eulers == 0):'), (110, '            rot = Rotation.identity()'), (111, '        else:'), (112, '            rot = Rotation.from_euler(""zxz"", eulers[::-1])'), (113, '        self.set_orientation(rot)')], 'deleted': [(57, '        self.set_orientation(Rotation.identity())'), (104, '        self.set_orientation(Rotation.from_euler(""zxz"", eulers[::-1]))')]}",34,34
manimlib/scene/scene.py,manimlib/scene/scene.py,5deef1c249e2d92f5ae4a11598e8ad3af4ca48a3,a1449def95a24765674e913e4603f3b614b3d1cf,Allow for setting a default frame orientation,"{'added': [(21, 'from manimlib.camera.camera_frame import CameraFrame'), (67, '    # Euler angles, in degrees'), (68, '    default_frame_orientation = (0, 0)'), (114, '        self.frame: CameraFrame = self.camera.frame'), (115, '        self.frame.reorient(*self.default_frame_orientation)'), (116, '        self.frame.make_orientation_default()'), (117, ''), (981, ''), (982, ''), (983, 'class ThreeDScene(Scene):'), (984, '    samples = 4'), (985, '    default_frame_orientation = (-30, 70)')], 'deleted': []}",218,218
example_scenes.py,example_scenes.py,dec50897779010699b148c4eaa96f3597ad7c6ff,5deef1c249e2d92f5ae4a11598e8ad3af4ca48a3,Update SurfaceExample to use ThreeDScene,"{'added': [(557, 'class SurfaceExample(ThreeDScene):'), (610, '            self.frame.animate.increment_phi(-10 * DEGREES),'), (611, '            self.frame.animate.increment_theta(-20 * DEGREES),'), (615, '        self.frame.add_updater(lambda m, dt: m.increment_theta(-0.1 * dt))')], 'deleted': [(557, 'class SurfaceExample(Scene):'), (558, '    samples = 4'), (559, ''), (591, '        # Set perspective'), (592, '        frame = self.camera.frame'), (593, '        frame.set_euler_angles('), (594, '            theta=-30 * DEGREES,'), (595, '            phi=70 * DEGREES,'), (596, '        )'), (597, ''), (619, '            frame.animate.increment_phi(-10 * DEGREES),'), (620, '            frame.animate.increment_theta(-20 * DEGREES),'), (624, '        frame.add_updater(lambda m, dt: m.increment_theta(-0.1 * dt))')]}",21,21
manimlib/utils/shaders.py,manimlib/utils/shaders.py,144e512952e197c92c47bab3ee7fbb06f98e8480,dec50897779010699b148c4eaa96f3597ad7c6ff,"Use active camera config, not default","{'added': [(10, 'from manimlib.config import parse_cli'), (11, 'from manimlib.config import get_configuration'), (117, ""    cam_config = get_configuration(parse_cli())['camera_config']""), (118, ""    size = (cam_config['pixel_width'], cam_config['pixel_height'])"")], 'deleted': [(10, 'from manimlib.constants import DEFAULT_PIXEL_HEIGHT'), (11, 'from manimlib.constants import DEFAULT_PIXEL_WIDTH'), (117, ""    cam_config = get_customization()['camera_resolutions']""), (118, ""    res_name = cam_config['default_resolution']""), (119, '    size = tuple(map(int, cam_config[res_name].split(""x"")))')]}",13,13
manimlib/animation/creation.py,manimlib/animation/creation.py,8d723405016ad91c111a1b160aa37b1df47d2af6,144e512952e197c92c47bab3ee7fbb06f98e8480,Remove some references to triangulation,"{'added': [], 'deleted': [(139, '            submob.needs_new_triangulation = False')]}",36,36
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,8d723405016ad91c111a1b160aa37b1df47d2af6,144e512952e197c92c47bab3ee7fbb06f98e8480,Remove some references to triangulation,"{'added': [(451, '        outer_path = outer_radius * Arc.create_quadratic_bezier_points(TAU, 0)'), (452, '        inner_path = inner_radius * Arc.create_quadratic_bezier_points(-TAU, 0)')], 'deleted': [(451, ""        # Make sure to add enough components that triangulation doesn't fail""), (452, '        kw = dict('), (453, '            n_components=int(max(8, np.ceil(TAU / math.acos(inner_radius / outer_radius))))'), (454, '        )'), (455, '        outer_path = outer_radius * Arc.create_quadratic_bezier_points(TAU, 0, **kw)'), (456, '        inner_path = inner_radius * Arc.create_quadratic_bezier_points(-TAU, 0, **kw)')]}",140,140
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,8d723405016ad91c111a1b160aa37b1df47d2af6,144e512952e197c92c47bab3ee7fbb06f98e8480,Remove some references to triangulation,"{'added': [], 'deleted': [(386, '        self.refresh_triangulation()')]}",54,54
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,8d723405016ad91c111a1b160aa37b1df47d2af6,144e512952e197c92c47bab3ee7fbb06f98e8480,Remove some references to triangulation,"{'added': [], 'deleted': [(322, ""            # So triangulation doesn't get messed up""), (323, '            self.subdivide_intersections()')]}",61,61
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,8d723405016ad91c111a1b160aa37b1df47d2af6,144e512952e197c92c47bab3ee7fbb06f98e8480,Remove some references to triangulation,"{'added': [(462, '            if not value:'), (463, '                submob.subdivide_intersections()'), (904, '            match_tris = not self._use_winding_fill and \\'), (905, '                         self.has_fill() and \\'), (906, '                         vmobject.has_fill() and \\'), (907, '                         self.has_same_shape_as(vmobject)'), (908, '            if match_tris:'), (929, '                return [path_list[-1][-1]]')], 'deleted': [(902, '            if not self._use_winding_fill and self.has_fill() \\'), (903, '                and vmobject.has_fill() and self.has_same_shape_as(vmobject):'), (924, '                # Create a null path at the very end'), (925, '                return [path_list[-1][-1]] * 3')]}",290,290
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,fbde9e8bba2b3596975c4c90e712fe0504cd24b1,8d723405016ad91c111a1b160aa37b1df47d2af6,Check for null orientation in getting euler angles,"{'added': [(65, '    def get_euler_angles(self) -> np.ndarray:'), (66, '        orientation = self.get_orientation()'), (67, '        if all(orientation.as_quat() == [0, 0, 0, 1]):'), (68, '            return np.zeros(3)'), (69, '        return orientation.as_euler(""zxz"")[::-1]')], 'deleted': [(65, '    def get_euler_angles(self):'), (66, '        return self.get_orientation().as_euler(""zxz"")[::-1]')]}",35,35
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c6db74c9960c0e1a2fc89fc14b082e82b44fd728,fbde9e8bba2b3596975c4c90e712fe0504cd24b1,Re-order conditional blocks,"{'added': [(1313, '            if has_stroke:'), (1314, '                lst = back_stroke_datas if submob.stroke_behind else stroke_datas'), (1315, '                lst.append(submob.data[stroke_names])'), (1316, '                # Set data array to be one longer than number of points,'), (1317, '                # with a dummy vertex added at the end. This is to ensure'), (1318, '                # it can be safely stacked onto other stroke data arrays.'), (1319, '                lst.append(submob.data[stroke_names][-1:])'), (1325, '                    # Add dummy, as above'), (1329, '            if not has_stroke and has_fill:'), (1331, '                names = list(stroke_names)'), (1332, ""                names[names.index('stroke_rgba')] = 'fill_rgba'""), (1333, ""                names[names.index('stroke_width')] = 'fill_border_width'""), (1334, '                border_stroke_data = submob.data[names]'), (1335, '                fill_border_datas.append(border_stroke_data)'), (1336, '                fill_border_datas.append(border_stroke_data[-1:])'), (1337, '')], 'deleted': [(1318, '                    # Add dummy'), (1323, '                if not has_stroke:'), (1324, '                    names = list(stroke_names)'), (1325, ""                    names[names.index('stroke_rgba')] = 'fill_rgba'""), (1326, ""                    names[names.index('stroke_width')] = 'fill_border_width'""), (1327, '                    border_stroke_data = submob.data[names]'), (1328, '                    fill_border_datas.append(border_stroke_data)'), (1329, '                    fill_border_datas.append(border_stroke_data[-1:])'), (1330, '            if has_stroke:'), (1331, '                lst = back_stroke_datas if submob.stroke_behind else stroke_datas'), (1332, '                lst.append(submob.data[stroke_names])'), (1333, '                # Set data array to be one longer than number of points,'), (1334, '                # with a dummy vertex added at the end. This is to ensure'), (1335, '                # it can be safely stacked onto other stroke data arrays.'), (1336, '                lst.append(submob.data[stroke_names][-1:])')]}",291,291
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,31b937a7f1e108b1696c7cfbec82c9ebf9bd3a96,c6db74c9960c0e1a2fc89fc14b082e82b44fd728,Remove no-longer necessary PathString configuration,"{'added': [], 'deleted': [(298, '        should_subdivide_sharp_curves: bool = False,'), (299, '        should_remove_null_curves: bool = True,'), (305, '        self.should_subdivide_sharp_curves = should_subdivide_sharp_curves'), (306, '        self.should_remove_null_curves = should_remove_null_curves'), (316, '            if self.should_subdivide_sharp_curves:'), (317, '                # For a healthy triangulation later'), (318, '                self.subdivide_sharp_curves()'), (319, '            if self.should_remove_null_curves:'), (320, '                # Get rid of any null curves'), (321, '                self.set_points(self.get_points_without_null_curves())')]}",59,59
manimlib/utils/shaders.py,manimlib/utils/shaders.py,474a6c27e3f319120cc6ddc66591e67c7197bf07,31b937a7f1e108b1696c7cfbec82c9ebf9bd3a96,Counteract alpha scaling from fill frag,"{'added': [(166, '                // Counteract scaling in fill frag'), (167, '                color.a *= 1.01;')], 'deleted': []}",13,13
manimlib/shaders/inserts/finalize_color.glsl,manimlib/shaders/inserts/finalize_color.glsl,368f48f8ddd896a8acd35d451591b521fbb7e0ff,474a6c27e3f319120cc6ddc66591e67c7197bf07,Make use of some glsl built-ins,"{'added': [(34, '    vec3 light_reflection = reflect(-to_light, unit_normal);')], 'deleted': [(34, '    vec3 light_reflection = -to_light + 2 * unit_normal * dot(to_light, unit_normal);')]}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,368f48f8ddd896a8acd35d451591b521fbb7e0ff,474a6c27e3f319120cc6ddc66591e67c7197bf07,Make use of some glsl built-ins,"{'added': [(29, '    float approx_dist = abs(Fxy) * inversesqrt(1.0 + 4 * x0 * x0);')], 'deleted': [(29, '    float approx_dist = abs(Fxy) / sqrt(1.0 + 4 * x0 * x0);')]}",,
manimlib/scene/scene.py,manimlib/scene/scene.py,c08e111911d90ec6caf03cd0cb777fa487b7dffb,368f48f8ddd896a8acd35d451591b521fbb7e0ff,Default to applying depth test for non-fixed objects added to a 3d scene,"{'added': [(986, ''), (987, '    def add(self, *mobjects, set_depth_test: bool = True):'), (988, '        for mob in mobjects:'), (989, '            if set_depth_test and not mob.is_fixed_in_frame():'), (990, '                mob.apply_depth_test()'), (991, '        super().add(*mobjects)')], 'deleted': []}",222,222
manimlib/shaders/inserts/finalize_color.glsl,manimlib/shaders/inserts/finalize_color.glsl,0d36f17f9cd5c50499a5c8cd03fbc77370c26003,c08e111911d90ec6caf03cd0cb777fa487b7dffb,Remove unused line,"{'added': [], 'deleted': [(27, '    // Note, this effectively treats surfaces as two-sided'), (28, '    // if(dot(to_camera, unit_normal) < 0) unit_normal *= -1;'), (29, '')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,28c4921a1a88d3ad28dbc01fe6e45002ec523e97,0d36f17f9cd5c50499a5c8cd03fbc77370c26003,Specify ctx type,"{'added': [(75, '            self.ctx: moderngl.Context = moderngl.create_standalone_context()'), (77, '            self.ctx: moderngl.Context = self.window.ctx')], 'deleted': [(75, '            self.ctx = moderngl.create_standalone_context()'), (77, '            self.ctx = self.window.ctx')]}",31,31
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,68255b1c9a5d43b3e68bf9efb556152d84cdee5d,28c4921a1a88d3ad28dbc01fe6e45002ec523e97,Remove references to no-longer-need path_string_config,"{'added': [(33, '        path_string_config: dict = dict(),')], 'deleted': [(33, '        path_string_config: dict = dict('), (34, '            should_subdivide_sharp_curves=True,'), (35, '            should_remove_null_curves=True,'), (36, '        ),')]}",60,60
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b3dec3fd51458f930c7c11f2fde3316c2b763740,68255b1c9a5d43b3e68bf9efb556152d84cdee5d,Small fixes,"{'added': [(147, '    def __iter__(self) -> Iterable[VMobject]:'), (148, '        return super().__iter__()'), (149, ''), (452, '            if not value and submob.has_points():')], 'deleted': [(152, '    def add_background_rectangle('), (153, '        self,'), (154, '        color: ManimColor | None = None,'), (155, '        opacity: float = 0.75,'), (156, '        **kwargs'), (157, '    ):'), (158, '        normal = self.family_members_with_points()[0].get_unit_normal()'), (159, '        super().add_background_rectangle(color, opacity, **kwargs)'), (160, '        rect = self.background_rectangle'), (161, '        if np.dot(rect.get_unit_normal(), normal) < 0:'), (162, '            rect.reverse_points()'), (163, '        return self'), (164, ''), (462, '            if not value:')]}",291,291
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,da9610b9f9847c44b459f67d60bf6ab1efeadb60,b3dec3fd51458f930c7c11f2fde3316c2b763740,Remove redundancy,"{'added': [(218, '        return self'), (252, '        vbo = self.get_vertex_buffer_object(refresh)'), (253, '        ibo = self.get_index_buffer_object(refresh)')], 'deleted': [(251, '        vbo = self.vbo = self.get_vertex_buffer_object(refresh)'), (252, '        ibo = self.ibo = self.get_index_buffer_object(refresh)')]}",64,64
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,91f69be3e0b9cbe93aef4f15835582c6ea99afc4,da9610b9f9847c44b459f67d60bf6ab1efeadb60,Add CameraFrame.to_fixed_frame_point,"{'added': [(186, ''), (187, '    def to_fixed_frame_point(self, point: Vect3):'), (188, '        view = np.linalg.inv(self.get_view_matrix())'), (189, '        return np.dot([*point, 1], view)[:3]')], 'deleted': []}",36,36
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,09900456f7e4ffb430bb1a223b1bad662cad97a0,91f69be3e0b9cbe93aef4f15835582c6ea99afc4,Clean up pixel_coords_to_space_coords to work better in 3d,"{'added': [(129, '        p2 = self.frame.to_fixed_frame_point(self.mouse_point.get_center())'), (380, '        self.selection_rectangle.fixed_corner = self.frame.to_fixed_frame_point('), (381, '            self.mouse_point.get_center()'), (382, '        )'), (573, '        ff_point = self.frame.to_fixed_frame_point(point)'), (574, '        self.crosshair.move_to(ff_point)')], 'deleted': [(129, '        p2 = self.mouse_point.get_center()'), (380, '        self.selection_rectangle.fixed_corner = self.mouse_point.get_center().copy()'), (571, '        self.crosshair.move_to(point)')]}",151,151
manimlib/scene/scene.py,manimlib/scene/scene.py,09900456f7e4ffb430bb1a223b1bad662cad97a0,91f69be3e0b9cbe93aef4f15835582c6ea99afc4,Clean up pixel_coords_to_space_coords to work better in 3d,"{'added': [(61, '    pan_sensitivity: float = 0.5'), (816, '            ff_d_point = frame.to_fixed_frame_point(d_point)'), (817, '            ff_d_point *= self.pan_sensitivity'), (818, '            frame.increment_theta(-ff_d_point[0])'), (819, '            frame.increment_phi(ff_d_point[1])'), (822, '            frame.shift(-d_point)')], 'deleted': [(61, '    pan_sensitivity: float = 3.0'), (816, '            frame.increment_theta(-self.pan_sensitivity * d_point[0])'), (817, '            frame.increment_phi(self.pan_sensitivity * d_point[1])'), (820, '            shift = -d_point'), (821, '            shift[0] *= frame.get_width() / 2'), (822, '            shift[1] *= frame.get_height() / 2'), (823, '            transform = frame.get_inverse_camera_rotation_matrix()'), (824, '            shift = np.dot(np.transpose(transform), shift)'), (825, '            frame.shift(shift)')]}",222,222
manimlib/window.py,manimlib/window.py,09900456f7e4ffb430bb1a223b1bad662cad97a0,91f69be3e0b9cbe93aef4f15835582c6ea99afc4,Clean up pixel_coords_to_space_coords to work better in 3d,"{'added': [(80, '        pixel_shape = np.array(self.size)'), (81, '        frame_shape = np.array(self.scene.frame.get_shape())'), (82, ''), (83, '        coords = (frame_shape / pixel_shape) * np.array([px, py])'), (84, '        view = self.scene.frame.get_view_matrix()'), (85, ''), (87, '            return np.dot([*coords, 0], view[:3, :3])'), (88, ''), (89, '        coords -= 0.5 * frame_shape'), (90, '        return np.dot([*coords, 0, 1], np.linalg.inv(view).T)[:3]')], 'deleted': [(80, '        pw, ph = self.size'), (81, '        fw, fh = self.scene.camera.get_frame_shape()'), (82, '        fc = self.scene.camera.get_frame_center()'), (84, '            return np.array([px / pw, py / ph, 0])'), (85, '        else:'), (86, '            return np.array(['), (87, '                fc[0] + px * fw / pw - fw / 2,'), (88, '                fc[1] + py * fh / ph - fh / 2,'), (89, '                0'), (90, '            ])')]}",18,18
manimlib/scene/scene.py,manimlib/scene/scene.py,0fe59222531010a1e73c3ffe7bbf613b074ba285,09900456f7e4ffb430bb1a223b1bad662cad97a0,Clean up scrolling,"{'added': [(46, '    from manimlib.typing import Vect3'), (63, '    scroll_sensitivity: float = 5.0'), (805, '        point: Vect3,'), (806, '        d_point: Vect3'), (828, '        point: Vect3,'), (829, '        d_point: Vect3,'), (842, '        point: Vect3,'), (854, '        point: Vect3,'), (865, '        point: Vect3,'), (866, '        offset: Vect3'), (874, '        offset *= self.scroll_sensitivity'), (876, '            frame.scale('), (877, '                1 - offset[1] / frame.get_height(),'), (878, '                about_point=point'), (879, '            )'), (881, '            frame.shift(-offset)')], 'deleted': [(803, '        point: np.ndarray,'), (804, '        d_point: np.ndarray'), (826, '        point: np.ndarray,'), (827, '        d_point: np.ndarray,'), (840, '        point: np.ndarray,'), (852, '        point: np.ndarray,'), (863, '        point: np.ndarray,'), (864, '        offset: np.ndarray'), (873, '            factor = 1 + np.arctan(10 * offset[1])'), (874, '            frame.scale(1 / factor, about_point=point)'), (876, '            transform = frame.get_inverse_camera_rotation_matrix()'), (877, '            shift = np.dot(np.transpose(transform), offset)'), (878, '            frame.shift(-20.0 * shift)')]}",222,222
manimlib/scene/scene.py,manimlib/scene/scene.py,0d9bb71d3c745d9483e7b0dfa4103625e423e933,0fe59222531010a1e73c3ffe7bbf613b074ba285,Increase scroll sensitivity,"{'added': [(63, '    scroll_sensitivity: float = 10.0')], 'deleted': [(63, '    scroll_sensitivity: float = 5.0')]}",222,222
manimlib/scene/scene.py,manimlib/scene/scene.py,901d40ba1144290f682d112342da43733477dd1f,0d9bb71d3c745d9483e7b0dfa4103625e423e933,Fix scroll zooming,"{'added': [(28, 'from manimlib.constants import FRAME_HEIGHT'), (876, '            ff_offset = offset * FRAME_HEIGHT / frame.get_height()'), (877, '            frame.scale(1 - ff_offset[1], about_point=point)'), (879, '            frame.shift(-self.scroll_sensitivity * offset)')], 'deleted': [(874, '        offset *= self.scroll_sensitivity'), (876, '            frame.scale('), (877, '                1 - offset[1] / frame.get_height(),'), (878, '                about_point=point'), (879, '            )'), (881, '            frame.shift(-offset)')]}",222,222
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,2705ba3afa566188bf662f018fccca95da16d547,901d40ba1144290f682d112342da43733477dd1f,Fix CameraFrame.to_fixed_frame_point,"{'added': [(188, '        view = self.get_view_matrix()'), (189, '        return np.dot([*point, 1], view.T)[:3]')], 'deleted': [(188, '        view = np.linalg.inv(self.get_view_matrix())'), (189, '        return np.dot([*point, 1], view)[:3]')]}",36,36
manimlib/scene/scene.py,manimlib/scene/scene.py,e58aea9e2f716d449eef92a8a4a40c36d0397cc8,2705ba3afa566188bf662f018fccca95da16d547,"Change to a default where scrolling zooms, and dragging pans","{'added': [(833, '        self.frame.shift(-d_point)'), (874, '        ff_offset = offset * FRAME_HEIGHT / frame.get_height()'), (875, '        frame.scale(1 - ff_offset[1], about_point=point)')], 'deleted': [(56, ""ZOOM_KEY = 'z'""), (64, '    scroll_sensitivity: float = 10.0'), (875, '        if self.window.is_key_pressed(ord(ZOOM_KEY)):'), (876, '            ff_offset = offset * FRAME_HEIGHT / frame.get_height()'), (877, '            frame.scale(1 - ff_offset[1], about_point=point)'), (878, '        else:'), (879, '            frame.shift(-self.scroll_sensitivity * offset)')]}",221,221
manimlib/scene/scene.py,manimlib/scene/scene.py,abdcb644614223acfc3b190a089ada0376b6438a,e58aea9e2f716d449eef92a8a4a40c36d0397cc8,Fix panning for off-center frame,"{'added': [(817, '            ff_d_point = np.dot(d_point, frame.get_view_matrix()[:3, :3].T)')], 'deleted': [(817, '            ff_d_point = frame.to_fixed_frame_point(d_point)')]}",221,221
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,15d8ebb572231d6d546946e29cd322cca9c70493,abdcb644614223acfc3b190a089ada0376b6438a,Add Mobject.set_shape,"{'added': [(51, '    from typing import Callable, Iterable, Union, Tuple, Optional'), (1171, '    def set_shape('), (1172, '        self,'), (1173, '        width: Optional[float] = None,'), (1174, '        height: Optional[float] = None,'), (1175, '        depth: Optional[float] = None,'), (1176, '        **kwargs'), (1177, '    ):'), (1178, '        if width is not None:'), (1179, '            self.set_width(width, stretch=True, **kwargs)'), (1180, '        if height is not None:'), (1181, '            self.set_height(height, stretch=True, **kwargs)'), (1182, '        if depth is not None:'), (1183, '            self.set_depth(depth, stretch=True, **kwargs)'), (1184, '        return self'), (1185, '')], 'deleted': [(51, '    from typing import Callable, Iterable, Union, Tuple')]}",530,530
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,285953b44dc66a8c0d3d4130cb1baab5041cdcb8,15d8ebb572231d6d546946e29cd322cca9c70493,Add FRAME_SHAPE constant,"{'added': [(9, 'from manimlib.constants import FRAME_SHAPE'), (23, '        frame_shape: tuple[float, float] = FRAME_SHAPE,'), (59, '        self.set_shape(*FRAME_SHAPE)')], 'deleted': [(9, 'from manimlib.constants import FRAME_HEIGHT, FRAME_WIDTH'), (23, '        frame_shape: tuple[float, float] = (FRAME_WIDTH, FRAME_HEIGHT),'), (60, '        self.set_height(FRAME_HEIGHT)'), (61, '        self.set_width(FRAME_WIDTH)')]}",36,36
manimlib/constants.py,manimlib/constants.py,285953b44dc66a8c0d3d4130cb1baab5041cdcb8,15d8ebb572231d6d546946e29cd322cca9c70493,Add FRAME_SHAPE constant,"{'added': [(14, 'FRAME_SHAPE: tuple[float, float] = (FRAME_WIDTH, FRAME_HEIGHT)')], 'deleted': []}",0,0
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,b85c3bd478c8de72fb1beea98bbbc552efcffa55,285953b44dc66a8c0d3d4130cb1baab5041cdcb8,Remove stray import,"{'added': [], 'deleted': [(12, 'from manimlib.constants import FRAME_HEIGHT, FRAME_WIDTH')]}",105,105
manimlib/camera/camera.py,manimlib/camera/camera.py,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [(234, '            view=tuple(view_matrix.T.flatten()),'), (235, '            focal_distance=frame.get_focal_distance() / frame.get_scale(),')], 'deleted': [(236, '            view=tuple(view_matrix.T.flatten()),'), (239, '            focal_distance=frame.get_focal_distance(),')]}",31,31
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [(7, 'from pyrr import Matrix44'), (80, '    def get_scale(self):'), (81, '        return self.get_height() / FRAME_SHAPE[1]'), (82, ''), (91, '        shift = Matrix44.from_translation(-self.get_center()).T'), (92, '        rotation = Matrix44.from_quaternion(self.uniforms[""orientation""]).T'), (93, '        self.view_matrix[:] = np.dot(rotation, shift)'), (94, '        self.view_matrix[:3, :3] /= self.get_scale()'), (95, '        return self.view_matrix'), (96, ''), (97, '    def get_inv_view_matrix(self):'), (98, '        return np.linalg.inv(self.get_view_matrix())'), (168, '    def get_aspect_ratio(self):'), (169, '        width, height = self.get_shape()'), (170, '        return width / height'), (171, ''), (195, '    def to_fixed_frame_point(self, point: Vect3, relative: bool = False):'), (197, '        point4d = [*point, 0 if relative else 1]'), (198, '        return np.dot(point4d, view.T)[:3]'), (199, ''), (200, '    def from_fixed_frame_point(self, point: Vect3, relative: bool = False):'), (201, '        inv_view = self.get_inv_view_matrix()'), (202, '        point4d = [*point, 0 if relative else 1]'), (203, '        return np.dot(point4d, inv_view.T)[:3]')], 'deleted': [(87, '        result = self.view_matrix'), (88, '        result[:] = np.identity(4)'), (89, '        result[:3, 3] = -self.get_center()'), (90, '        rotation = np.identity(4)'), (91, '        rotation[:3, :3] = self.get_inverse_camera_rotation_matrix()'), (92, '        result[:] = np.dot(rotation, result)'), (93, '        return result'), (186, '    def to_fixed_frame_point(self, point: Vect3):'), (188, '        return np.dot([*point, 1], view.T)[:3]')]}",42,42
manimlib/scene/scene.py,manimlib/scene/scene.py,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [(807, '        assert(self.window is not None)'), (818, '            ff_d_point = frame.to_fixed_frame_point(d_point, relative=True)'), (824, '            frame.shift(-d_point / self.frame.get_scale())'), (834, '        self.frame.shift(-d_point / self.frame.get_scale())'), (875, '        ff_offset = offset / frame.get_scale()')], 'deleted': [(817, '            ff_d_point = np.dot(d_point, frame.get_view_matrix()[:3, :3].T)'), (823, '            frame.shift(-d_point)'), (833, '        self.frame.shift(-d_point)'), (874, '        ff_offset = offset * FRAME_HEIGHT / frame.get_height()')]}",221,221
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [(5, 'const float DEFAULT_FRAME_HEIGHT = 8.0;'), (6, 'const float DEFAULT_FRAME_WIDTH = DEFAULT_FRAME_HEIGHT * 16.0 / 9.0;'), (10, '    if(!bool(is_fixed_in_frame)){'), (13, '    result.x *= 2.0 / DEFAULT_FRAME_WIDTH;'), (14, '    result.y *= 2.0 / DEFAULT_FRAME_HEIGHT;')], 'deleted': [(3, 'uniform vec2 frame_shape;'), (6, 'const vec2 DEFAULT_FRAME_SHAPE = vec2(8.0 * 16.0 / 9.0, 8.0);'), (9, '    bool is_fixed = bool(is_fixed_in_frame);'), (11, '    if(!is_fixed){'), (14, ''), (15, '    vec2 shape = is_fixed ? DEFAULT_FRAME_SHAPE : frame_shape;'), (16, '    result.x *= 2.0 / shape.x;'), (17, '    result.y *= 2.0 / shape.y;')]}",,
manimlib/shaders/mandelbrot_fractal/frag.glsl,manimlib/shaders/mandelbrot_fractal/frag.glsl,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [], 'deleted': [(18, 'uniform vec2 frame_shape;'), (19, '')]}",,
manimlib/shaders/newton_fractal/frag.glsl,manimlib/shaders/newton_fractal/frag.glsl,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [], 'deleted': [(29, 'uniform vec2 frame_shape;'), (30, '')]}",,
manimlib/window.py,manimlib/window.py,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [(10, 'from manimlib.constants import FRAME_SHAPE'), (82, '        frame_shape = np.array(FRAME_SHAPE)'), (83, '        frame = self.scene.frame'), (84, ''), (85, '        coords = np.zeros(3)'), (86, '        coords[:2] = (frame_shape / pixel_shape) * np.array([px, py])'), (87, '        if not relative:'), (88, '            coords[:2] -= 0.5 * frame_shape'), (89, '        return frame.from_fixed_frame_point(coords, relative)')], 'deleted': [(81, '        frame_shape = np.array(self.scene.frame.get_shape())'), (82, ''), (83, '        coords = (frame_shape / pixel_shape) * np.array([px, py])'), (84, '        view = self.scene.frame.get_view_matrix()'), (85, ''), (86, '        if relative:'), (87, '            return np.dot([*coords, 0], view[:3, :3])'), (88, ''), (89, '        coords -= 0.5 * frame_shape'), (90, '        return np.dot([*coords, 0, 1], np.linalg.inv(view).T)[:3]')]}",18,18
requirements.txt,requirements.txt,277c471c90dc3229645607e2f76f64f3f04d9057,b85c3bd478c8de72fb1beea98bbbc552efcffa55,Refactor so that view matrix incorporates frame scaling,"{'added': [(16, 'pyrr')], 'deleted': []}",,
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,71bd3edb0973b19a813070c93927c927897d1690,277c471c90dc3229645607e2f76f64f3f04d9057,Fix frame scaling,"{'added': [(93, '        scale = Matrix44(np.identity(3) / self.get_scale())'), (94, '        self.view_matrix[:] = shift * rotation * scale')], 'deleted': [(93, '        self.view_matrix[:] = np.dot(rotation, shift)'), (94, '        self.view_matrix[:3, :3] /= self.get_scale()')]}",42,42
manimlib/scene/scene.py,manimlib/scene/scene.py,71bd3edb0973b19a813070c93927c927897d1690,277c471c90dc3229645607e2f76f64f3f04d9057,Fix frame scaling,"{'added': [(824, '            frame.shift(-d_point)'), (834, '        self.frame.shift(-d_point)')], 'deleted': [(824, '            frame.shift(-d_point / self.frame.get_scale())'), (834, '        self.frame.shift(-d_point / self.frame.get_scale())')]}",221,221
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,af69cf9c7d22c17d0f4d178843d07571090e1eda,71bd3edb0973b19a813070c93927c927897d1690,Track field of view instead of focal_dist_to_height,"{'added': [(26, '        # Field of view in the y direction'), (27, '        fovy: float = 45 * DEGREES,'), (30, '        super().__init__(**kwargs)'), (31, ''), (35, '        self.set_points(np.array([ORIGIN, LEFT, RIGHT, DOWN, UP]))'), (36, '        self.set_width(frame_shape[0], stretch=True)'), (37, '        self.set_height(frame_shape[1], stretch=True)'), (38, '        self.move_to(center_point)'), (40, '        self.uniforms[""fovy""] = fovy'), (152, '        self.uniforms[""fovy""] = 2 * math.atan(0.5 * self.get_height() / focal_distance)'), (156, '        self.uniforms[""fovy""] = field_of_view'), (179, '        return 0.5 * self.get_height() / math.tan(0.5 * self.uniforms[""fovy""])'), (182, '        return self.uniforms[""fovy""]')], 'deleted': [(26, '        focal_dist_to_height: float = 2.0,'), (29, '        self.frame_shape = frame_shape'), (30, '        self.center_point = center_point'), (31, '        self.focal_dist_to_height = focal_dist_to_height'), (34, '        super().__init__(**kwargs)'), (36, '    def init_uniforms(self) -> None:'), (37, '        super().init_uniforms()'), (38, '        # As a quaternion'), (40, '        self.uniforms[""focal_dist_to_height""] = self.focal_dist_to_height'), (41, ''), (42, '    def init_points(self) -> None:'), (43, '        self.set_points([ORIGIN, LEFT, RIGHT, DOWN, UP])'), (44, '        self.set_width(self.frame_shape[0], stretch=True)'), (45, '        self.set_height(self.frame_shape[1], stretch=True)'), (46, '        self.move_to(self.center_point)'), (158, '        self.uniforms[""focal_dist_to_height""] = focal_distance / self.get_height()'), (162, '        self.uniforms[""focal_dist_to_height""] = 2 * math.tan(field_of_view / 2)'), (185, '        return self.uniforms[""focal_dist_to_height""] * self.get_height()'), (188, '        return 2 * math.atan(self.uniforms[""focal_dist_to_height""] / 2)')]}",40,40
manimlib/scene/scene.py,manimlib/scene/scene.py,9628adc9577251a4c9eb7fdefd4e4d771a4fabe5,af69cf9c7d22c17d0f4d178843d07571090e1eda,Ensure scroll zooming works better in 3d,"{'added': [(63, '    scroll_sensitivity: float = 20'), (868, '        offset: Vect3,'), (869, '        x_pixel_offset: float,'), (870, '        y_pixel_offset: float'), (877, '        rel_offset = y_pixel_offset / self.camera.get_pixel_height()'), (878, '        self.frame.scale('), (879, '            1 - self.scroll_sensitivity * rel_offset,'), (880, '            about_point=point'), (881, '        )')], 'deleted': [(867, '        offset: Vect3'), (874, '        frame = self.camera.frame'), (875, '        ff_offset = offset / frame.get_scale()'), (876, '        frame.scale(1 - ff_offset[1], about_point=point)')]}",221,221
manimlib/window.py,manimlib/window.py,9628adc9577251a4c9eb7fdefd4e4d771a4fabe5,af69cf9c7d22c17d0f4d178843d07571090e1eda,Ensure scroll zooming works better in 3d,"{'added': [(117, '        self.scene.on_mouse_scroll(point, offset, x_offset, y_offset)')], 'deleted': [(117, '        self.scene.on_mouse_scroll(point, offset)')]}",18,18
manimlib/camera/camera.py,manimlib/camera/camera.py,daaaba0a6733e1fcf38f3fa1a26426ef4f9ee929,9628adc9577251a4c9eb7fdefd4e4d771a4fabe5,Use frame_scale uniform instead of frame_shape,"{'added': [(172, '        return self.frame.get_width() / self.get_pixel_shape()[0]'), (175, '        return self.fbo.size'), (236, '            frame_scale=frame.get_scale(),')], 'deleted': [(172, '        return self.frame.get_shape()[0] / self.get_pixel_shape()[0]'), (175, '        return self.draw_fbo.size'), (236, '            frame_shape=frame.get_shape(),')]}",31,31
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,daaaba0a6733e1fcf38f3fa1a26426ef4f9ee929,9628adc9577251a4c9eb7fdefd4e4d771a4fabe5,Use frame_scale uniform instead of frame_shape,"{'added': [(3, 'uniform float frame_scale;'), (4, 'uniform float is_fixed_in_frame;'), (24, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width;'), (25, '    if(!bool(is_fixed_in_frame)){'), (26, '        v_stroke_width *= frame_scale;'), (27, '    }')], 'deleted': [(3, 'uniform vec2 frame_shape;'), (23, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * frame_shape[1] / 8.0;')]}",,
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,7e00660e47965034a7fca063a8dc05adac3db304,daaaba0a6733e1fcf38f3fa1a26426ef4f9ee929,"Whoops, re-instate pre_render","{'added': [], 'deleted': [(218, '        return self')]}",64,64
manimlib/window.py,manimlib/window.py,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,7e00660e47965034a7fca063a8dc05adac3db304,Small renaming,"{'added': [(82, '        fixed_frame_shape = np.array(FRAME_SHAPE)'), (86, '        coords[:2] = (fixed_frame_shape / pixel_shape) * np.array([px, py])'), (88, '            coords[:2] -= 0.5 * fixed_frame_shape')], 'deleted': [(82, '        frame_shape = np.array(FRAME_SHAPE)'), (86, '        coords[:2] = (frame_shape / pixel_shape) * np.array([px, py])'), (88, '            coords[:2] -= 0.5 * frame_shape')]}",18,18
manimlib/shaders/image/vert.glsl,manimlib/shaders/image/vert.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(13, '#INSERT emit_gl_Position.glsl'), (18, '    emit_gl_Position(point);')], 'deleted': [(13, '#INSERT get_gl_Position.glsl'), (18, '    gl_Position = get_gl_Position(point);')]}",,
,manimlib/shaders/inserts/emit_gl_Position.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(1, 'uniform float is_fixed_in_frame;'), (2, 'uniform mat4 view;'), (3, 'uniform float focal_distance;'), (4, ''), (5, 'const float DEFAULT_FRAME_HEIGHT = 8.0;'), (6, 'const float ASPECT_RATIO = 16.0 / 9.0;'), (7, 'const float X_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT / ASPECT_RATIO;'), (8, 'const float Y_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT;'), (9, ''), (10, 'void emit_gl_Position(vec3 point){'), (11, '    vec4 result = vec4(point, 1.0);'), (12, '    if(!bool(is_fixed_in_frame)){'), (13, '        result = view * result;'), (14, '    }'), (15, '    // Essentially a projection matrix'), (16, '    result.x *= X_SCALE;'), (17, '    result.y *= Y_SCALE;'), (18, '    result.z /= focal_distance;'), (19, '    result.w = 1.0 - result.z;'), (20, '    // Flip and scale to prevent premature clipping'), (21, '    result.z *= -0.1;'), (22, '    gl_Position = result;'), (23, '}')], 'deleted': []}",,
manimlib/shaders/inserts/get_gl_Position.glsl,manimlib/shaders/inserts/get_gl_Position.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(6, 'const float ASPECT_RATIO = 16.0 / 9.0;'), (7, 'const float X_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT / ASPECT_RATIO;'), (8, 'const float Y_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT;'), (10, 'void emit_gl_Position(vec3 point){'), (15, '    // Essentially a projection matrix'), (16, '    result.x *= X_SCALE;'), (17, '    result.y *= Y_SCALE;'), (22, '    gl_Position = result;')], 'deleted': [(6, 'const float DEFAULT_FRAME_WIDTH = DEFAULT_FRAME_HEIGHT * 16.0 / 9.0;'), (8, 'vec4 get_gl_Position(vec3 point){'), (13, '    result.x *= 2.0 / DEFAULT_FRAME_WIDTH;'), (14, '    result.y *= 2.0 / DEFAULT_FRAME_HEIGHT;'), (19, '    return result;')]}",,
manimlib/shaders/mandelbrot_fractal/vert.glsl,manimlib/shaders/mandelbrot_fractal/vert.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(9, '#INSERT emit_gl_Position.glsl'), (13, '    emit_gl_Position(point);')], 'deleted': [(9, '#INSERT get_gl_Position.glsl'), (13, '    gl_Position = get_gl_Position(point);')]}",,
manimlib/shaders/newton_fractal/vert.glsl,manimlib/shaders/newton_fractal/vert.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(9, '#INSERT emit_gl_Position.glsl'), (13, '    emit_gl_Position(point);')], 'deleted': [(9, '#INSERT get_gl_Position.glsl'), (13, '    gl_Position = get_gl_Position(point);')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(30, '#INSERT emit_gl_Position.glsl'), (44, '        emit_gl_Position(points[i]);')], 'deleted': [(30, '#INSERT get_gl_Position.glsl'), (44, '        gl_Position = get_gl_Position(points[i]);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(39, '#INSERT emit_gl_Position.glsl'), (210, '        emit_gl_Position(corners[i]);')], 'deleted': [(39, '#INSERT get_gl_Position.glsl'), (210, '        gl_Position = get_gl_Position(corners[i]);')]}",,
manimlib/shaders/simple_vert.glsl,manimlib/shaders/simple_vert.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(5, '#INSERT emit_gl_Position.glsl'), (8, '    emit_gl_Position(point);')], 'deleted': [(5, '#INSERT get_gl_Position.glsl'), (8, '    gl_Position = get_gl_Position(point);')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(12, '#INSERT emit_gl_Position.glsl'), (17, '    emit_gl_Position(point);')], 'deleted': [(12, '#INSERT get_gl_Position.glsl'), (17, '    gl_Position = get_gl_Position(point);')]}",,
manimlib/shaders/textured_surface/vert.glsl,manimlib/shaders/textured_surface/vert.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(14, '#INSERT emit_gl_Position.glsl'), (22, '    emit_gl_Position(point);')], 'deleted': [(14, '#INSERT get_gl_Position.glsl'), (22, '    gl_Position = get_gl_Position(point);')]}",,
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,e950286fa47287239ad794751ae5b3699d2c5f72,215c21babf6e7a9fc26bf55d1644e25d6271c5fd,Replace get_gl_Position -> emit_gl_Position,"{'added': [(15, '#INSERT emit_gl_Position.glsl'), (22, '    emit_gl_Position(point);')], 'deleted': [(15, '#INSERT get_gl_Position.glsl'), (22, '    gl_Position = get_gl_Position(point);')]}",,
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,0de914fd018de9fc69ce3a650b8a80266768105b,e950286fa47287239ad794751ae5b3699d2c5f72,"No need for du_points, and dv_points in SurfaceMesh","{'added': [(68, '        points = uv_surface.get_points()')], 'deleted': [(68, '        points, du_points, dv_points = uv_surface.get_surface_points_and_nudged_points()')]}",30,30
manimlib/scene/scene.py,manimlib/scene/scene.py,33116f8af18a97680481afad85764dbfc253bf37,0de914fd018de9fc69ce3a650b8a80266768105b,Remove stray import,"{'added': [], 'deleted': [(28, 'from manimlib.constants import FRAME_HEIGHT')]}",221,221
manimlib/camera/camera.py,manimlib/camera/camera.py,9017df847de1394203873cfaa10a3a32c0e2263d,33116f8af18a97680481afad85764dbfc253bf37,"Add Camera.blit, and use it when there's a window, but the used fbo is not the window's","{'added': [(128, '    def blit(self, src_fbo, dst_fbo):'), (129, '        """"""'), (130, ""        Copy blocks between fbo's using Blit""), (131, '        """"""'), (132, '        gl.glBindFramebuffer(gl.GL_READ_FRAMEBUFFER, src_fbo.glo)'), (133, '        gl.glBindFramebuffer(gl.GL_DRAW_FRAMEBUFFER, dst_fbo.glo)'), (135, '            *src_fbo.viewport,'), (136, '            *src_fbo.viewport,'), (139, ''), (140, ""    def get_raw_fbo_data(self, dtype: str = 'f1') -> bytes:""), (141, '        # # Copy blocks from fbo into draw_fbo using Blit'), (142, '        # gl.glBindFramebuffer(gl.GL_READ_FRAMEBUFFER, self.fbo.glo)'), (143, '        # gl.glBindFramebuffer(gl.GL_DRAW_FRAMEBUFFER, self.draw_fbo.glo)'), (144, '        # src_viewport = self.fbo.viewport'), (145, '        # gl.glBlitFramebuffer('), (146, '        #     *src_viewport,'), (147, '        #     *self.draw_fbo.viewport,'), (148, '        #     gl.GL_COLOR_BUFFER_BIT, gl.GL_LINEAR'), (149, '        # )'), (150, '        self.blit(self.fbo, self.draw_fbo)'), (239, '        if self.window is not None and self.fbo is not self.window_fbo:'), (240, '            self.blit(self.fbo, self.window_fbo)')], 'deleted': [(128, ""    def get_raw_fbo_data(self, dtype: str = 'f1') -> bytes:""), (129, '        # Copy blocks from fbo into draw_fbo using Blit'), (130, '        gl.glBindFramebuffer(gl.GL_READ_FRAMEBUFFER, self.fbo.glo)'), (131, '        gl.glBindFramebuffer(gl.GL_DRAW_FRAMEBUFFER, self.draw_fbo.glo)'), (132, '        src_viewport = self.fbo.viewport'), (134, '            *src_viewport,'), (135, '            *self.draw_fbo.viewport,')]}",34,34
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,c469c6b009735ebefc9f3840968ff21c7a236e9e,9017df847de1394203873cfaa10a3a32c0e2263d,Prevent NumberPlane from double drawing axes,"{'added': [(639, '            if abs(x) < 1e-8:'), (640, '                continue')], 'deleted': []}",106,106
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,55da5d5d03be38dbf4322d91d1a11f299abbc657,c469c6b009735ebefc9f3840968ff21c7a236e9e,"Remove use of dv_points and du_points, pass unit normals to shader instead","{'added': [(15, 'from manimlib.utils.space_ops import cross'), (31, ""        ('normal', np.float32, (3,)),""), (98, '        self.data[""normal""] = normalize_along_axis(cross('), (99, '            du_points - points,'), (100, '            dv_points - points,'), (101, '        ), 1)'), (102, ''), (103, '    def apply_points_function(self, *args, **kwargs):'), (104, '        super().apply_points_function(*args, **kwargs)'), (105, '        self.get_unit_normals()'), (129, '        nu, nv = self.resolution'), (130, '        indices = np.arange(nu * nv)'), (131, ''), (132, '        left  = indices - 1'), (133, '        right = indices + 1'), (134, '        up    = indices - nv'), (135, '        down  = indices + nv'), (136, ''), (137, '        left[0] = indices[0]'), (138, '        right[-1] = indices[-1]'), (139, '        up[:nv] = indices[:nv]'), (140, '        down[-nv:] = indices[-nv:]'), (141, ''), (142, '        points = self.get_points()'), (143, '        crosses = cross('), (144, '            points[right] - points[left],'), (145, '            points[up] - points[down],'), (147, '        self.data[""normal""] = normalize_along_axis(crosses, 1)'), (148, '        return self.data[""normal""]'), (166, ""        self.data['point'][:] = self.get_partial_points_array(""), (167, ""            self.data['point'], a, b,""), (168, '            (nu, nv, 3),'), (169, '            axis=axis'), (170, '        )'), (281, ""        ('normal', np.float32, (3,)),""), (323, ""        self.data['point'][:] = surf.data['point']"")], 'deleted': [(30, ""        ('du_point', np.float32, (3,)),""), (31, ""        ('dv_point', np.float32, (3,)),""), (34, ""    pointlike_data_keys = ['point', 'du_point', 'dv_point']""), (99, '        self.data[""du_point""][:] = du_points'), (100, '        self.data[""dv_point""][:] = dv_points'), (123, '    def get_surface_points_and_nudged_points(self) -> tuple[Vect3Array, Vect3Array, Vect3Array]:'), (124, ""        return (self.data['point'], self.data['du_point'], self.data['dv_point'])""), (125, ''), (127, '        s_points, du_points, dv_points = self.get_surface_points_and_nudged_points()'), (128, '        normals = np.cross('), (129, '            (du_points - s_points) / self.epsilon,'), (130, '            (dv_points - s_points) / self.epsilon,'), (132, '        return normalize_along_axis(normals, 1)'), (150, ""        for key in ['point', 'du_point', 'dv_point']:""), (151, '            self.data[key][:] = self.get_partial_points_array('), (152, '                self.data[key], a, b,'), (153, '                (nu, nv, 3),'), (154, '                axis=axis'), (155, '            )'), (266, ""        ('du_point', np.float32, (3,)),""), (267, ""        ('dv_point', np.float32, (3,)),""), (309, ""        for key in ['point', 'du_point', 'dv_point']:""), (310, '            self.data[key][:] = surf.data[key]')]}",46,46
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,55da5d5d03be38dbf4322d91d1a11f299abbc657,c469c6b009735ebefc9f3840968ff21c7a236e9e,"Remove use of dv_points and du_points, pass unit normals to shader instead","{'added': [(6, 'in vec3 normal;'), (17, '    v_color = finalize_color(rgba, point, normalize(normal));')], 'deleted': [(6, 'in vec3 du_point;'), (7, 'in vec3 dv_point;'), (18, '    vec3 normal = get_unit_normal(point, du_point, dv_point);'), (19, '    v_color = finalize_color(rgba, point, normal);')]}",,
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,a58327657c49a4230a4949fe44de7c0828db4ba9,55da5d5d03be38dbf4322d91d1a11f299abbc657,Provide an epsilon of room to Sphere at poles,"{'added': [(99, '        v_range: Tuple[float, float] = (1e-5, PI - 1e-5),')], 'deleted': [(99, '        v_range: Tuple[float, float] = (0, PI),')]}",30,30
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,5ff44f5850c8844eabcd6149e004d2a54bacb15b,a58327657c49a4230a4949fe44de7c0828db4ba9,Divide by epsilon prior to normalizing,"{'added': [(99, '            (du_points - points) / self.epsilon,'), (100, '            (dv_points - points) / self.epsilon,')], 'deleted': [(99, '            du_points - points,'), (100, '            dv_points - points,')]}",46,46
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,e7734ca84c8d06efbe464bee8c4abba485459703,5ff44f5850c8844eabcd6149e004d2a54bacb15b,Fix TexturedSurface,"{'added': [(323, '        self.resolution = surf.resolution'), (325, ""        self.data['normal'][:] = surf.data['normal']"")], 'deleted': []}",46,46
manimlib/shaders/textured_surface/vert.glsl,manimlib/shaders/textured_surface/vert.glsl,e7734ca84c8d06efbe464bee8c4abba485459703,5ff44f5850c8844eabcd6149e004d2a54bacb15b,Fix TexturedSurface,"{'added': [(4, 'in vec3 normal;'), (18, '    v_normal = normal;')], 'deleted': [(4, 'in vec3 du_point;'), (5, 'in vec3 dv_point;'), (19, '    v_normal = get_unit_normal(point, du_point, dv_point);')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,76ee97adfad776a679c8c274d5f57ac20580ad7b,5490b3be19e1236bf317d32d7e62377e498665fe,Possible fix for a type error,"{'added': [(1324, '                border_stroke_data = submob.data[names].astype('), (1325, '                    self.stroke_shader_wrapper.vert_data.dtype'), (1326, '                )'), (1327, '                print(border_stroke_data.dtype)')], 'deleted': [(1324, '                border_stroke_data = submob.data[names]')]}",291,291
manimlib/event_handler/event_dispatcher.py,manimlib/event_handler/event_dispatcher.py,f8cfcfbc6401bf5a56e019dd2f0b7cee9ec4a4cd,e7734ca84c8d06efbe464bee8c4abba485459703,Fix EventListener typo,"{'added': [(5, 'from manimlib.event_handler.event_listner import EventListener'), (12, '            EventType, list[EventListener]'), (20, '        self.draggable_object_listners: list[EventListener] = []'), (22, '    def add_listner(self, event_listner: EventListener):'), (23, '        assert(isinstance(event_listner, EventListener))'), (27, '    def remove_listner(self, event_listner: EventListener):'), (28, '        assert(isinstance(event_listner, EventListener))'), (59, '                assert(isinstance(listner, EventListener))')], 'deleted': [(5, 'from manimlib.event_handler.event_listner import EventListner'), (12, '            EventType, list[EventListner]'), (20, '        self.draggable_object_listners: list[EventListner] = []'), (22, '    def add_listner(self, event_listner: EventListner):'), (23, '        assert(isinstance(event_listner, EventListner))'), (27, '    def remove_listner(self, event_listner: EventListner):'), (28, '        assert(isinstance(event_listner, EventListner))'), (59, '                assert(isinstance(listner, EventListner))')]}",33,33
manimlib/event_handler/event_listner.py,manimlib/event_handler/event_listner.py,f8cfcfbc6401bf5a56e019dd2f0b7cee9ec4a4cd,e7734ca84c8d06efbe464bee8c4abba485459703,Fix EventListener typo,"{'added': [(12, 'class EventListener(object):')], 'deleted': [(12, 'class EventListner(object):')]}",5,5
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f8cfcfbc6401bf5a56e019dd2f0b7cee9ec4a4cd,e7734ca84c8d06efbe464bee8c4abba485459703,Fix EventListener typo,"{'added': [(23, 'from manimlib.event_handler.event_listner import EventListener'), (1993, '        self.event_listners: list[EventListener] = []'), (2000, '        event_listner = EventListener(self, event_type, event_callback)'), (2010, '        event_listner = EventListener(self, event_type, event_callback)')], 'deleted': [(23, 'from manimlib.event_handler.event_listner import EventListner'), (1993, '        self.event_listners: list[EventListner] = []'), (2000, '        event_listner = EventListner(self, event_type, event_callback)'), (2010, '        event_listner = EventListner(self, event_type, event_callback)')]}",530,530
example_scenes.py,example_scenes.py,57deab66179b12ca62542c10fc8f86d682dde60b,f8cfcfbc6401bf5a56e019dd2f0b7cee9ec4a4cd,Fix ControlsExample,"{'added': [(684, '    drag_to_pan = False'), (685, '')], 'deleted': []}",21,21
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,57deab66179b12ca62542c10fc8f86d682dde60b,f8cfcfbc6401bf5a56e019dd2f0b7cee9ec4a4cd,Fix ControlsExample,"{'added': [(1322, '                rgbs = np.array(list(map(color_to_rgb, listify(color))))'), (1323, '                if 1 < len(rgbs) < len(data):')], 'deleted': [(1322, '                if isinstance(color, list):'), (1323, '                    rgbs = np.array(list(map(color_to_rgb, color)))'), (1325, '                else:'), (1326, '                    rgbs = color_to_rgb(color)')]}",530,530
manimlib/scene/scene.py,manimlib/scene/scene.py,57deab66179b12ca62542c10fc8f86d682dde60b,f8cfcfbc6401bf5a56e019dd2f0b7cee9ec4a4cd,Fix ControlsExample,"{'added': [(63, '    drag_to_pan: bool = True'), (835, '        if self.drag_to_pan:'), (836, '            self.frame.shift(-d_point)')], 'deleted': [(834, '        self.frame.shift(-d_point)')]}",222,222
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,f2d71e652193f2f0d4f7b545103130ac95e09689,57deab66179b12ca62542c10fc8f86d682dde60b,Don't rotate Laptop into place,"{'added': [], 'deleted': [(254, '        self.rotate(5 * np.pi / 12, LEFT, about_point=ORIGIN)'), (255, '        self.rotate(np.pi / 6, DOWN, about_point=ORIGIN)')]}",54,54
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,5952f9ea747365dbef82d53a3a600b336f1ee61c,f2d71e652193f2f0d4f7b545103130ac95e09689,Make sure rgbas will be resized if bigger than Mobject.data,"{'added': [(1323, '                if 1 < len(rgbs):')], 'deleted': [(1323, '                if 1 < len(rgbs) < len(data):')]}",530,530
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2cbad30f45c7181b62fd51c3c177dcd26841d44a,0645912765daeba6b78d72e6397cb9e5548a8162,"Change VMobject rendering mode to TRIANGLES

And set indices appropriately when reading in to the ShaderWrapper","{'added': [(71, '    fill_render_primitive: int = moderngl.TRIANGLES'), (72, '    stroke_render_primitive: int = moderngl.TRIANGLES'), (1303, '            indices = submob.get_outer_vert_indices()'), (1306, '                lst.append(submob.data[stroke_names][indices])'), (1311, '                    fill_datas.append(data[indices])'), (1313, '                    fill_datas.append(data)'), (1321, '                fill_border_datas.append(border_stroke_data[indices])')], 'deleted': [(71, '    fill_render_primitive: int = moderngl.TRIANGLE_STRIP'), (72, '    stroke_render_primitive: int = moderngl.TRIANGLE_STRIP'), (1305, '                lst.append(submob.data[stroke_names])'), (1306, '                # Set data array to be one longer than number of points,'), (1307, '                # with a dummy vertex added at the end. This is to ensure'), (1308, '                # it can be safely stacked onto other stroke data arrays.'), (1309, '                lst.append(submob.data[stroke_names][-1:])'), (1313, '                fill_datas.append(data)'), (1315, '                    # Add dummy, as above'), (1316, '                    fill_datas.append(data[-1:])'), (1325, '                fill_border_datas.append(border_stroke_data)'), (1326, '                fill_border_datas.append(border_stroke_data[-1:])')]}",291,291
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,2cbad30f45c7181b62fd51c3c177dcd26841d44a,0645912765daeba6b78d72e6397cb9e5548a8162,"Change VMobject rendering mode to TRIANGLES

And set indices appropriately when reading in to the ShaderWrapper","{'added': [(288, '            vao.render()'), (306, '        vao.render()')], 'deleted': [(288, '            vao.render(moderngl.TRIANGLES)'), (306, '        vao.render(moderngl.TRIANGLE_STRIP)')]}",64,64
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,2cbad30f45c7181b62fd51c3c177dcd26841d44a,0645912765daeba6b78d72e6397cb9e5548a8162,"Change VMobject rendering mode to TRIANGLES

And set indices appropriately when reading in to the ShaderWrapper","{'added': [], 'deleted': [(60, '    // We use the triangle strip primative, but'), (61, '    // actually only need every other strip element'), (62, '    if (winding && int(v_vert_index[0]) % 2 == 1) return;'), (63, '')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,2cbad30f45c7181b62fd51c3c177dcd26841d44a,0645912765daeba6b78d72e6397cb9e5548a8162,"Change VMobject rendering mode to TRIANGLES

And set indices appropriately when reading in to the ShaderWrapper","{'added': [], 'deleted': [(16, 'in float v_vert_index[3];'), (157, '    // We use the triangle strip primative, but'), (158, '    // actually only need every other strip element'), (159, '    if (int(v_vert_index[0]) % 2 == 1) return;'), (160, '')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,2cbad30f45c7181b62fd51c3c177dcd26841d44a,0645912765daeba6b78d72e6397cb9e5548a8162,"Change VMobject rendering mode to TRIANGLES

And set indices appropriately when reading in to the ShaderWrapper","{'added': [], 'deleted': [(18, 'out float v_vert_index;'), (30, '    v_vert_index = gl_VertexID;')]}",,
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,424db4b3e492a5a9e51c8b62b75ded2f6ef9b1cb,2d0bdfbdb683359bbdf66fa9cead8de2d4a72a8c,Ensure view matrix is not computed more than it needs to be,"{'added': [(32, '        self.uniforms[""orientation""] = Rotation.identity().as_quat()'), (33, '        self.uniforms[""fovy""] = fovy'), (34, ''), (42, ''), (43, '    def note_changed_data(self, recurse_up: bool = True):'), (44, '        super().note_changed_data(recurse_up)'), (45, '        self.get_view_matrix(refresh=True)'), (85, '    def get_view_matrix(self, refresh=False):'), (90, '        if refresh:'), (91, '            shift = np.identity(4)'), (92, '            rotation = np.identity(4)'), (93, '            scale = np.identity(4)'), (94, ''), (95, '            shift[:3, 3] = -self.get_center()'), (96, '            rotation[:3, :3] = self.get_inverse_camera_rotation_matrix()'), (97, '            scale[:3, :3] /= self.get_scale()'), (98, ''), (99, '            self.view_matrix = np.dot(scale, np.dot(rotation, shift))'), (100, ''), (106, '    def interpolate(self, *args, **kwargs):'), (107, '        super().interpolate(*args, **kwargs)'), (108, '        self.get_view_matrix(refresh=True)'), (109, ''), (110, '    @Mobject.affects_data')], 'deleted': [(39, '        self.uniforms[""orientation""] = Rotation.identity().as_quat()'), (40, '        self.uniforms[""fovy""] = fovy'), (80, '    def get_view_matrix(self):'), (85, '        shift = Matrix44.from_translation(-self.get_center()).T'), (86, '        rotation = Matrix44.from_quaternion(self.uniforms[""orientation""]).T'), (87, '        scale = Matrix44(np.identity(3) / self.get_scale())'), (88, '        self.view_matrix[:] = shift * rotation * scale')]}",43,43
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,92e4d43ca3cb80a52b4c00d024cd6ab02b908a97,424db4b3e492a5a9e51c8b62b75ded2f6ef9b1cb,Make sure camera location is not computed more times than it needs to be,"{'added': [(36, '        self.view_matrix = np.identity(4)'), (37, '        self.camera_location = OUT  # This will be updated by set_points'), (47, '        self.get_implied_camera_location(refresh=True)'), (108, '    @Mobject.affects_data'), (203, '    def get_implied_camera_location(self, refresh=False) -> np.ndarray:'), (204, '        if refresh:'), (205, '            to_camera = self.get_inverse_camera_rotation_matrix()[2]'), (206, '            dist = self.get_focal_distance()'), (207, '            self.camera_location = self.get_center() + dist * to_camera'), (208, '        return self.camera_location')], 'deleted': [(35, '        self.view_matrix = np.identity(4)'), (108, '        self.get_view_matrix(refresh=True)'), (201, '    def get_implied_camera_location(self) -> np.ndarray:'), (202, '        to_camera = self.get_inverse_camera_rotation_matrix()[2]'), (203, '        dist = self.get_focal_distance()'), (204, '        return self.get_center() + dist * to_camera')]}",44,44
manimlib/animation/creation.py,manimlib/animation/creation.py,60aae748a7dd9183153ccc649b1f1a522cf780f9,92e4d43ca3cb80a52b4c00d024cd6ab02b908a97,Make sure animations will trigger a refresh for joint products,"{'added': [(101, '        self.mobject.set_animating_status(True)')], 'deleted': [(101, '        # Trigger triangulation calculation'), (102, '        for submob in self.mobject.get_family():'), (103, '            if not submob._use_winding_fill:'), (104, '                submob.get_triangulation()'), (105, '')]}",34,34
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,60aae748a7dd9183153ccc649b1f1a522cf780f9,92e4d43ca3cb80a52b4c00d024cd6ab02b908a97,Make sure animations will trigger a refresh for joint products,"{'added': [(1242, '    def set_animating_status(self, is_animating: bool, recurse: bool = True):'), (1243, '        super().set_animating_status(is_animating, recurse)'), (1244, '        if is_animating:'), (1245, '            for submob in self.get_family(recurse):'), (1246, '                submob.get_joint_products(refresh=True)'), (1247, '                if not submob._use_winding_fill:'), (1248, '                    submob.get_triangulation()'), (1249, '        return self'), (1250, '')], 'deleted': []}",295,295
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a4d9b101ded655f2f9cf1db7fb256d687d7ee29c,60aae748a7dd9183153ccc649b1f1a522cf780f9,"Whoops, make sure deepcopy actually returns","{'added': [(602, '        return result')], 'deleted': []}",530,530
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,50343e962929087a0c14cb54ad503880195e50dd,0645912765daeba6b78d72e6397cb9e5548a8162,Add Self type to mobject.py,"{'added': [(51, '    from typing import Callable, Iterable, Union, Tuple, Optional, Self'), (146, '    def set_uniforms(self, uniforms: dict) -> Self:'), (154, '    def animate(self) -> _AnimationBuilder:'), (158, '    def note_changed_data(self, recurse_up: bool = True) -> Self:'), (163, '        return self'), (183, '    def set_data(self, data: np.ndarray) -> Self:'), (193, '    ) -> Self:'), (205, '    def set_points(self, points: Vect3Array) -> Self:'), (211, '    def append_points(self, new_points: Vect3Array) -> Self:'), (222, '    def reverse_points(self) -> Self:'), (234, '    ) -> Self:'), (261, '    def match_points(self, mobject: Mobject) -> Self:'), (268, '    def clear_points(self) -> Self:'), (270, '        return self'), (312, '    ) -> Self:'), (353, '    def __iter__(self) -> Iterable[Self]:'), (356, '    def __len__(self) -> int:'), (359, '    def split(self) -> list[Self]:'), (363, '    def assemble_family(self) -> Self:'), (372, '    def get_family(self, recurse: bool = True) -> list[Self]:'), (378, '    def family_members_with_points(self) -> list[Self]:'), (402, '    def add(self, *mobjects: Mobject) -> Self:'), (418, '    ) -> Self:'), (429, '    def clear(self) -> Self:'), (431, '        return self'), (433, '    def add_to_back(self, *mobjects: Mobject) -> Self:'), (437, '    def replace_submobject(self, index: int, new_submob: Mobject) -> Self:'), (446, '    def insert_submobject(self, index: int, new_submob: Mobject) -> Self:'), (451, '    def set_submobjects(self, submobject_list: list[Mobject]) -> Self:'), (456, '    def digest_mobject_attrs(self) -> Self:'), (472, '    ) -> Self:'), (491, '    ) -> Self:'), (525, '    def arrange_to_fit_dim(self, length: float, dim: int, about_edge=ORIGIN) -> Self:'), (541, '    def arrange_to_fit_width(self, width: float, about_edge=ORIGIN) -> Self:'), (544, '    def arrange_to_fit_height(self, height: float, about_edge=ORIGIN) -> Self:'), (547, '    def arrange_to_fit_depth(self, depth: float, about_edge=ORIGIN) -> Self:'), (554, '    ) -> Self:'), (562, '    def shuffle(self, recurse: bool = False) -> Self:'), (570, '    def reverse_submobjects(self) -> Self:'), (594, '    def serialize(self) -> bytes:'), (597, '    def deserialize(self, data: bytes) -> Self:'), (601, '    def deepcopy(self) -> Self:'), (605, '        return result'), (607, '    def copy(self, deep: bool = False) -> Self:'), (651, '    def generate_target(self, use_deepcopy: bool = False) -> Self:'), (656, '    def save_state(self, use_deepcopy: bool = False) -> Self:'), (661, '    def restore(self) -> Self:'), (667, '    def save_to_file(self, file_path: str) -> Self:'), (674, '    def load(file_path) -> Mobject:'), (682, '    def become(self, mobject: Mobject, match_updaters=False) -> Self:'), (746, '    def get_grid('), (747, '        self,'), (748, '        n_rows: int,'), (749, '        n_cols: int,'), (750, '        height: float | None = None,'), (751, '        width: float | None = None,'), (752, '        group_by_rows: bool = False,'), (753, '        group_by_cols: bool = False,'), (754, '        **kwargs'), (755, '    ) -> Group:'), (786, '    def update(self, dt: float = 0, recurse: bool = True) -> Self:'), (815, '    ) -> Self:'), (833, '    def remove_updater(self, update_function: Updater) -> Self:'), (840, '    def clear_updaters(self, recurse: bool = True) -> Self:'), (849, '    def match_updaters(self, mobject: Mobject) -> Self:'), (855, '    def suspend_updating(self, recurse: bool = True) -> Self:'), (862, '    def resume_updating(self, recurse: bool = True, call_updater: bool = True) -> Self:'), (873, '    def refresh_has_updater_status(self) -> Self:'), (882, '    def set_animating_status(self, is_animating: bool, recurse: bool = True) -> Self:'), (889, '    def shift(self, vector: Vect3) -> Self:'), (903, '    ) -> Self:'), (932, '    def stretch(self, factor: float, dim: int, **kwargs) -> Self:'), (939, '    def rotate_about_origin(self, angle: float, axis: Vect3 = OUT) -> Self:'), (948, '    ) -> Self:'), (957, '    def flip(self, axis: Vect3 = UP, **kwargs) -> Self:'), (960, '    def apply_function(self, function: Callable[[np.ndarray], np.ndarray], **kwargs) -> Self:'), (970, '    def apply_function_to_position(self, function: Callable[[np.ndarray], np.ndarray]) -> Self:'), (977, '    ) -> Self:'), (982, '    def apply_matrix(self, matrix: npt.ArrayLike, **kwargs) -> Self:'), (995, '    def apply_complex_function(self, function: Callable[[complex], complex], **kwargs) -> Self:'), (1011, '    ) -> Self:'), (1025, '    def center(self) -> Self:'), (1033, '    ) -> Self:'), (1049, '    ) -> Self:'), (1056, '    ) -> Self:'), (1068, '    ) -> Self:'), (1090, '    def shift_onto_screen(self, **kwargs) -> Self:'), (1101, '    def is_off_screen(self) -> bool:'), (1112, '    def stretch_about_point(self, factor: float, dim: int, point: Vect3) -> Self:'), (1115, '    def stretch_in_place(self, factor: float, dim: int) -> Self:'), (1119, '    def rescale_to_fit(self, length: float, dim: int, stretch: bool = False, **kwargs) -> Self:'), (1129, '    def stretch_to_fit_width(self, width: float, **kwargs) -> Self:'), (1132, '    def stretch_to_fit_height(self, height: float, **kwargs) -> Self:'), (1135, '    def stretch_to_fit_depth(self, depth: float, **kwargs) -> Self:'), (1138, '    def set_width(self, width: float, stretch: bool = False, **kwargs) -> Self:'), (1141, '    def set_height(self, height: float, stretch: bool = False, **kwargs) -> Self:'), (1144, '    def set_depth(self, depth: float, stretch: bool = False, **kwargs) -> Self:'), (1147, '    def set_max_width(self, max_width: float, **kwargs) -> Self:'), (1152, '    def set_max_height(self, max_height: float, **kwargs) -> Self:'), (1157, '    def set_max_depth(self, max_depth: float, **kwargs) -> Self:'), (1162, '    def set_min_width(self, min_width: float, **kwargs) -> Self:'), (1167, '    def set_min_height(self, min_height: float, **kwargs) -> Self:'), (1172, '    def set_min_depth(self, min_depth: float, **kwargs) -> Self:'), (1183, '    ) -> Self:'), (1192, '    def set_coord(self, value: float, dim: int, direction: Vect3 = ORIGIN) -> Self:'), (1199, '    def set_x(self, x: float, direction: Vect3 = ORIGIN) -> Self:'), (1202, '    def set_y(self, y: float, direction: Vect3 = ORIGIN) -> Self:'), (1205, '    def set_z(self, z: float, direction: Vect3 = ORIGIN) -> Self:'), (1208, '    def space_out_submobjects(self, factor: float = 1.5, **kwargs) -> Self:'), (1219, '    ) -> Self:'), (1228, '    def replace(self, mobject: Mobject, dim_to_match: int = 0, stretch: bool = False) -> Self:'), (1250, '    ) -> Self:'), (1256, '    def put_start_and_end_on(self, start: Vect3, end: Vect3) -> Self:'), (1284, '    ) -> Self:'), (1294, '    ) -> Self:'), (1308, '    ) -> Self:'), (1324, '    ) -> Self:'), (1343, '    ) -> Self:'), (1356, '    ) -> Self:'), (1369, '    def set_color_by_gradient(self, *colors: ManimColor) -> Self:'), (1376, '    def set_submobject_colors_by_gradient(self, *colors: ManimColor) -> Self:'), (1390, '    def fade(self, darkness: float = 0.5, recurse: bool = True) -> Self:'), (1402, '    ) -> Self:'), (1423, '    def set_reflectiveness(self, reflectiveness: float, recurse: bool = True) -> Self:'), (1427, '    def set_gloss(self, gloss: float, recurse: bool = True) -> Self:'), (1431, '    def set_shadow(self, shadow: float, recurse: bool = True) -> Self:'), (1442, '    ) -> Self:'), (1454, '    def add_background_rectangle_to_submobjects(self, **kwargs) -> Self:'), (1459, '    def add_background_rectangle_to_family_members_with_points(self, **kwargs) -> Self:'), (1589, '    def get_z_index_reference_point(self) -> Vect3:'), (1596, '    def match_color(self, mobject: Mobject) -> Self:'), (1599, '    def match_dim_size(self, mobject: Mobject, dim: int, **kwargs) -> Self:'), (1605, '    def match_width(self, mobject: Mobject, **kwargs) -> Self:'), (1608, '    def match_height(self, mobject: Mobject, **kwargs) -> Self:'), (1611, '    def match_depth(self, mobject: Mobject, **kwargs) -> Self:'), (1619, '    ) -> Self:'), (1630, '    ) -> Self:'), (1637, '    ) -> Self:'), (1644, '    ) -> Self:'), (1651, '    ) -> Self:'), (1676, '    def align_data_and_family(self, mobject: Mobject) -> Self:'), (1679, '        return self'), (1681, '    def align_data(self, mobject: Mobject) -> Self:'), (1684, '        return self'), (1686, '    def align_points(self, mobject: Mobject) -> Self:'), (1692, '    def align_family(self, mobject: Mobject) -> Self:'), (1705, '    def push_self_into_submobjects(self) -> Self:'), (1712, '    def add_n_more_submobjects(self, n: int) -> Self:'), (1740, '    def invisible_copy(self) -> Self:'), (1751, '    ) -> Self:'), (1777, '    def pointwise_become_partial(self, mobject, a, b) -> Self:'), (1784, '        # To be implemented in subclass'), (1785, '        return self'), (1789, '    def lock_data(self, keys: Iterable[str]) -> Self:'), (1800, '        return self'), (1802, '    def lock_matching_data(self, mobject1: Mobject, mobject2: Mobject) -> Self:'), (1826, '    def unlock_data(self) -> Self:'), (1830, '        return self'), (1843, '    def set_uniform(self, recurse: bool = True, **new_uniforms) -> Self:'), (1849, '    def fix_in_frame(self, recurse: bool = True) -> Self:'), (1854, '    def unfix_from_frame(self, recurse: bool = True) -> Self:'), (1862, '    def apply_depth_test(self, recurse: bool = True) -> Self:'), (1868, '    def deactivate_depth_test(self, recurse: bool = True) -> Self:'), (1875, '    def replace_shader_code(self, old: str, new: str) -> Self:'), (1883, '    def set_color_by_code(self, glsl_code: str) -> Self:'), (1902, '    ) -> Self:'), (2105, '    def __add__(self, other: Mobject | Group) -> Self:'), (2135, '    def set_location(self, new_loc: npt.ArrayLike) -> Self:'), (2137, '        return self')], 'deleted': [(51, '    from typing import Callable, Iterable, Union, Tuple, Optional'), (146, '    def set_uniforms(self, uniforms: dict):'), (154, '    def animate(self):'), (158, '    def note_changed_data(self, recurse_up: bool = True):'), (182, '    def set_data(self, data: np.ndarray):'), (192, '    ):'), (204, '    def set_points(self, points: Vect3Array):'), (210, '    def append_points(self, new_points: Vect3Array):'), (221, '    def reverse_points(self):'), (233, '    ):'), (260, '    def match_points(self, mobject: Mobject):'), (267, '    def clear_points(self) -> None:'), (310, '    ):'), (351, '    def __iter__(self):'), (354, '    def __len__(self):'), (357, '    def split(self) -> list[Mobject]:'), (361, '    def assemble_family(self):'), (370, '    def get_family(self, recurse: bool = True) -> list[Mobject]:'), (376, '    def family_members_with_points(self):'), (400, '    def add(self, *mobjects: Mobject):'), (416, '    ):'), (427, '    def clear(self):'), (430, '    def add_to_back(self, *mobjects: Mobject):'), (434, '    def replace_submobject(self, index: int, new_submob: Mobject):'), (443, '    def insert_submobject(self, index: int, new_submob: Mobject):'), (448, '    def set_submobjects(self, submobject_list: list[Mobject]):'), (453, '    def digest_mobject_attrs(self):'), (469, '    ):'), (488, '    ):'), (522, '    def arrange_to_fit_dim(self, length: float, dim: int, about_edge=ORIGIN):'), (538, '    def arrange_to_fit_width(self, width: float, about_edge=ORIGIN):'), (541, '    def arrange_to_fit_height(self, height: float, about_edge=ORIGIN):'), (544, '    def arrange_to_fit_depth(self, depth: float, about_edge=ORIGIN):'), (551, '    ):'), (559, '    def shuffle(self, recurse: bool = False):'), (567, '    def reverse_submobjects(self):'), (591, '    def serialize(self):'), (594, '    def deserialize(self, data: bytes):'), (598, '    def deepcopy(self):'), (603, '    def copy(self, deep: bool = False):'), (647, '    def generate_target(self, use_deepcopy: bool = False):'), (652, '    def save_state(self, use_deepcopy: bool = False):'), (657, '    def restore(self):'), (663, '    def save_to_file(self, file_path: str, supress_overwrite_warning: bool = False):'), (670, '    def load(file_path):'), (678, '    def become(self, mobject: Mobject, match_updaters=False):'), (742, '    def get_grid(self,'), (743, '                 n_rows: int,'), (744, '                 n_cols: int,'), (745, '                 height: float | None = None,'), (746, '                 width: float | None = None,'), (747, '                 group_by_rows: bool = False,'), (748, '                 group_by_cols: bool = False,'), (749, '                 **kwargs) -> Group:'), (780, '    def update(self, dt: float = 0, recurse: bool = True):'), (809, '    ):'), (827, '    def remove_updater(self, update_function: Updater):'), (834, '    def clear_updaters(self, recurse: bool = True):'), (843, '    def match_updaters(self, mobject: Mobject):'), (849, '    def suspend_updating(self, recurse: bool = True):'), (856, '    def resume_updating(self, recurse: bool = True, call_updater: bool = True):'), (867, '    def refresh_has_updater_status(self):'), (876, '    def set_animating_status(self, is_animating: bool, recurse: bool = True):'), (883, '    def shift(self, vector: Vect3):'), (897, '    ):'), (926, '    def stretch(self, factor: float, dim: int, **kwargs):'), (933, '    def rotate_about_origin(self, angle: float, axis: Vect3 = OUT):'), (942, '    ):'), (951, '    def flip(self, axis: Vect3 = UP, **kwargs):'), (954, '    def apply_function(self, function: Callable[[np.ndarray], np.ndarray], **kwargs):'), (964, '    def apply_function_to_position(self, function: Callable[[np.ndarray], np.ndarray]):'), (971, '    ):'), (976, '    def apply_matrix(self, matrix: npt.ArrayLike, **kwargs):'), (989, '    def apply_complex_function(self, function: Callable[[complex], complex], **kwargs):'), (1005, '    ):'), (1019, '    def center(self):'), (1027, '    ):'), (1043, '    ):'), (1050, '    ):'), (1062, '    ):'), (1084, '    def shift_onto_screen(self, **kwargs):'), (1095, '    def is_off_screen(self):'), (1106, '    def stretch_about_point(self, factor: float, dim: int, point: Vect3):'), (1109, '    def stretch_in_place(self, factor: float, dim: int):'), (1113, '    def rescale_to_fit(self, length: float, dim: int, stretch: bool = False, **kwargs):'), (1123, '    def stretch_to_fit_width(self, width: float, **kwargs):'), (1126, '    def stretch_to_fit_height(self, height: float, **kwargs):'), (1129, '    def stretch_to_fit_depth(self, depth: float, **kwargs):'), (1132, '    def set_width(self, width: float, stretch: bool = False, **kwargs):'), (1135, '    def set_height(self, height: float, stretch: bool = False, **kwargs):'), (1138, '    def set_depth(self, depth: float, stretch: bool = False, **kwargs):'), (1141, '    def set_max_width(self, max_width: float, **kwargs):'), (1146, '    def set_max_height(self, max_height: float, **kwargs):'), (1151, '    def set_max_depth(self, max_depth: float, **kwargs):'), (1156, '    def set_min_width(self, min_width: float, **kwargs):'), (1161, '    def set_min_height(self, min_height: float, **kwargs):'), (1166, '    def set_min_depth(self, min_depth: float, **kwargs):'), (1177, '    ):'), (1186, '    def set_coord(self, value: float, dim: int, direction: Vect3 = ORIGIN):'), (1193, '    def set_x(self, x: float, direction: Vect3 = ORIGIN):'), (1196, '    def set_y(self, y: float, direction: Vect3 = ORIGIN):'), (1199, '    def set_z(self, z: float, direction: Vect3 = ORIGIN):'), (1202, '    def space_out_submobjects(self, factor: float = 1.5, **kwargs):'), (1213, '    ):'), (1222, '    def replace(self, mobject: Mobject, dim_to_match: int = 0, stretch: bool = False):'), (1244, '    ):'), (1250, '    def put_start_and_end_on(self, start: Vect3, end: Vect3):'), (1278, '    ):'), (1288, '    ):'), (1302, '    ):'), (1318, '    ):'), (1337, '    ):'), (1350, '    ):'), (1363, '    def set_color_by_gradient(self, *colors: ManimColor):'), (1370, '    def set_submobject_colors_by_gradient(self, *colors: ManimColor):'), (1384, '    def fade(self, darkness: float = 0.5, recurse: bool = True):'), (1396, '    ):'), (1417, '    def set_reflectiveness(self, reflectiveness: float, recurse: bool = True):'), (1421, '    def set_gloss(self, gloss: float, recurse: bool = True):'), (1425, '    def set_shadow(self, shadow: float, recurse: bool = True):'), (1436, '    ):'), (1448, '    def add_background_rectangle_to_submobjects(self, **kwargs):'), (1453, '    def add_background_rectangle_to_family_members_with_points(self, **kwargs):'), (1583, '    def get_z_index_reference_point(self):'), (1590, '    def match_color(self, mobject: Mobject):'), (1593, '    def match_dim_size(self, mobject: Mobject, dim: int, **kwargs):'), (1599, '    def match_width(self, mobject: Mobject, **kwargs):'), (1602, '    def match_height(self, mobject: Mobject, **kwargs):'), (1605, '    def match_depth(self, mobject: Mobject, **kwargs):'), (1613, '    ):'), (1624, '    ):'), (1631, '    ):'), (1638, '    ):'), (1645, '    ):'), (1670, '    def align_data_and_family(self, mobject: Mobject) -> None:'), (1674, '    def align_data(self, mobject: Mobject) -> None:'), (1678, '    def align_points(self, mobject: Mobject):'), (1684, '    def align_family(self, mobject: Mobject):'), (1697, '    def push_self_into_submobjects(self):'), (1704, '    def add_n_more_submobjects(self, n: int):'), (1732, '    def invisible_copy(self):'), (1743, '    ):'), (1769, '    def pointwise_become_partial(self, mobject, a, b):'), (1776, '        pass  # To implement in subclass'), (1780, '    def lock_data(self, keys: Iterable[str]):'), (1792, '    def lock_matching_data(self, mobject1: Mobject, mobject2: Mobject):'), (1816, '    def unlock_data(self):'), (1832, '    def set_uniform(self, recurse: bool = True, **new_uniforms):'), (1838, '    def fix_in_frame(self, recurse: bool = True):'), (1843, '    def unfix_from_frame(self, recurse: bool = True):'), (1851, '    def apply_depth_test(self, recurse: bool = True):'), (1857, '    def deactivate_depth_test(self, recurse: bool = True):'), (1864, '    def replace_shader_code(self, old: str, new: str):'), (1872, '    def set_color_by_code(self, glsl_code: str):'), (1891, '    ):'), (2094, '    def __add__(self, other: Mobject | Group):'), (2124, '    def set_location(self, new_loc: npt.ArrayLike):')]}",530,530
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,b58224f6c8eaf4c1c7cef81bedb172f809db7ffb,50343e962929087a0c14cb54ad503880195e50dd,Add Self type to vectorized_mobject.py,"{'added': [(347, '    def __getitem__(self, value: int | slice) -> Self:'), (742, '    def replicate(self, n: int) -> Self:'), (755, '    ) -> Self:')], 'deleted': [(347, '    def __getitem__(self, value: int | slice) -> Mobject:'), (742, '    def replicate(self, n: int) -> Group:'), (755, '    ) -> Group:')]}",530,530
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b58224f6c8eaf4c1c7cef81bedb172f809db7ffb,50343e962929087a0c14cb54ad503880195e50dd,Add Self type to vectorized_mobject.py,"{'added': [(48, '    from typing import Callable, Iterable, Tuple, Any, Self'), (131, '    def add(self, *vmobjects: VMobject) -> Self:'), (134, '        return super().add(*vmobjects)'), (159, '    ) -> Self:'), (175, '    ) -> Self:'), (189, '    ) -> Self:'), (212, '    ) -> Self:'), (229, '    ) -> Self:'), (260, '    def get_style(self) -> dict[str, Any]:'), (270, '    def match_style(self, vmobject: VMobject, recurse: bool = True) -> Self:'), (289, '    ) -> Self:'), (298, '    ) -> Self:'), (303, '    def set_anti_alias_width(self, anti_alias_width: float, recurse: bool = True) -> Self:'), (307, '    def fade(self, darkness: float = 0.5, recurse: bool = True) -> Self:'), (391, '    def set_flat_stroke(self, flat_stroke: bool = True, recurse: bool = True) -> Self:'), (399, '    def set_joint_type(self, joint_type: str, recurse: bool = True) -> Self:'), (412, '    ) -> Self:'), (423, '    ) -> Self:'), (430, '    def use_winding_fill(self, value: bool = True, recurse: bool = True) -> Self:'), (442, '    ) -> Self:'), (450, '    def start_new_path(self, point: Vect3) -> Self:'), (465, '    ) -> Self:'), (475, '    ) -> Self:'), (497, '    def add_quadratic_bezier_curve_to(self, handle: Vect3, anchor: Vect3) -> Self:'), (506, '    def add_line_to(self, point: Vect3) -> Self:'), (513, '    def add_smooth_curve_to(self, point: Vect3) -> Self:'), (522, '    def add_smooth_cubic_curve_to(self, handle: Vect3, point: Vect3) -> Self:'), (543, '    def close_path(self, smooth: bool = False) -> Self:'), (561, '    ) -> Self:'), (583, '    ) -> Self:'), (591, '    def subdivide_intersections(self, recurse: bool = True, n_subdivisions: int = 1) -> Self:'), (601, '    def add_points_as_corners(self, points: Iterable[Vect3]) -> Self:'), (604, '        return self'), (606, '    def set_points_as_corners(self, points: Iterable[Vect3]) -> Self:'), (616, '    ) -> Self:'), (625, '    def change_anchor_mode(self, mode: str) -> Self:'), (648, '    def make_smooth(self, approx=False, recurse=True) -> Self:'), (663, '    def make_approximately_smooth(self, recurse=True) -> Self:'), (665, '        return self'), (667, '    def make_jagged(self, recurse=True) -> Self:'), (672, '    def add_subpath(self, points: Vect3Array) -> Self:'), (682, '    def append_vectorized_mobject(self, vmobject: VMobject) -> Self:'), (700, '    def get_subpath_end_indices_from_points(self, points: Vect3Array) -> np.ndarray:'), (716, '    def get_subpath_end_indices(self) -> np.ndarray:'), (845, '    def refresh_unit_normal(self) -> Self:'), (855, '    ) -> Self:'), (861, '    def ensure_positive_orientation(self, recurse=True) -> Self:'), (868, '    def align_points(self, vmobject: VMobject) -> Self:'), (925, '    def invisible_copy(self) -> Self:'), (933, '    def insert_n_curves(self, n: int, recurse: bool = True) -> Self:'), (940, '    def insert_n_curves_to_point_list(self, n: int, points: Vect3Array) -> Vect3Array:'), (973, '    ) -> Self:'), (982, '    def pointwise_become_partial(self, vmobject: VMobject, a: float, b: float) -> Self:'), (1025, '    def get_subcurve(self, a: float, b: float) -> Self:'), (1030, '    def get_outer_vert_indices(self) -> np.ndarray:'), (1041, '    def refresh_triangulation(self) -> Self:'), (1046, '    def get_triangulation(self) -> np.ndarray:'), (1103, '    def refresh_joint_products(self) -> Self:'), (1108, '    def get_joint_products(self, refresh: bool = False) -> np.ndarray:'), (1159, '    def lock_matching_data(self, vmobject1: VMobject, vmobject2: VMobject) -> Self:'), (1163, '        return self'), (1175, '    def set_points(self, points: Vect3Array, refresh_joints: bool = True) -> Self:'), (1185, '    def append_points(self, points: Vect3Array) -> Self:'), (1191, '    def reverse_points(self, recurse: bool = True) -> Self:'), (1204, '    def set_data(self, data: np.ndarray) -> Self:'), (1215, '    ) -> Self:'), (1221, '    def apply_points_function(self, *args, **kwargs) -> Self:'), (1224, '        return self'), (1259, '    def refresh_shader_wrapper_id(self) -> Self:'), (1330, '    def __add__(self, other: VMobject) -> Self:')], 'deleted': [(48, '    from typing import Callable, Iterable, Tuple'), (131, '    # These are here just to make type checkers happy'), (132, '    def get_family(self, recurse: bool = True) -> list[VMobject]:'), (133, '        return super().get_family(recurse)'), (134, ''), (135, '    def family_members_with_points(self) -> list[VMobject]:'), (136, '        return super().family_members_with_points()'), (137, ''), (138, '    def replicate(self, n: int) -> VGroup:'), (139, '        return super().replicate(n)'), (140, ''), (141, '    def get_grid(self, *args, **kwargs) -> VGroup:'), (142, '        return super().get_grid(*args, **kwargs)'), (143, ''), (144, '    def __getitem__(self, value: int | slice) -> VMobject:'), (145, '        return super().__getitem__(value)'), (146, ''), (147, '    def __iter__(self) -> Iterable[VMobject]:'), (148, '        return super().__iter__()'), (149, ''), (150, '    def add(self, *vmobjects: VMobject):'), (153, '        super().add(*vmobjects)'), (178, '    ):'), (194, '    ):'), (208, '    ):'), (231, '    ):'), (248, '    ):'), (279, '    def get_style(self):'), (289, '    def match_style(self, vmobject: VMobject, recurse: bool = True):'), (308, '    ):'), (317, '    ):'), (322, '    def set_anti_alias_width(self, anti_alias_width: float, recurse: bool = True):'), (326, '    def fade(self, darkness: float = 0.5, recurse: bool = True):'), (410, '    def set_flat_stroke(self, flat_stroke: bool = True, recurse: bool = True):'), (418, '    def set_joint_type(self, joint_type: str, recurse: bool = True):'), (431, '    ):'), (442, '    ):'), (449, '    def use_winding_fill(self, value: bool = True, recurse: bool = True):'), (461, '    ):'), (469, '    def start_new_path(self, point: Vect3):'), (484, '    ):'), (494, '    ):'), (516, '    def add_quadratic_bezier_curve_to(self, handle: Vect3, anchor: Vect3):'), (525, '    def add_line_to(self, point: Vect3):'), (532, '    def add_smooth_curve_to(self, point: Vect3):'), (541, '    def add_smooth_cubic_curve_to(self, handle: Vect3, point: Vect3):'), (562, '    def close_path(self, smooth: bool = False):'), (580, '    ):'), (602, '    ):'), (610, '    def subdivide_intersections(self, recurse: bool = True, n_subdivisions: int = 1):'), (620, '    def add_points_as_corners(self, points: Iterable[Vect3]):'), (623, '        return points'), (625, '    def set_points_as_corners(self, points: Iterable[Vect3]):'), (635, '    ):'), (644, '    def change_anchor_mode(self, mode: str):'), (667, '    def make_smooth(self, approx=False, recurse=True):'), (682, '    def make_approximately_smooth(self, recurse=True):'), (685, '    def make_jagged(self, recurse=True):'), (690, '    def add_subpath(self, points: Vect3Array):'), (700, '    def append_vectorized_mobject(self, vmobject: VMobject):'), (718, '    def get_subpath_end_indices_from_points(self, points: Vect3Array):'), (734, '    def get_subpath_end_indices(self):'), (863, '    def refresh_unit_normal(self):'), (873, '    ):'), (879, '    def ensure_positive_orientation(self, recurse=True):'), (886, '    def align_points(self, vmobject: VMobject):'), (943, '    def invisible_copy(self):'), (951, '    def insert_n_curves(self, n: int, recurse: bool = True):'), (958, '    def insert_n_curves_to_point_list(self, n: int, points: Vect3Array):'), (991, '    ):'), (1000, '    def pointwise_become_partial(self, vmobject: VMobject, a: float, b: float):'), (1043, '    def get_subcurve(self, a: float, b: float) -> VMobject:'), (1048, '    def get_outer_vert_indices(self):'), (1059, '    def refresh_triangulation(self):'), (1064, '    def get_triangulation(self):'), (1121, '    def refresh_joint_products(self):'), (1126, '    def get_joint_products(self, refresh: bool = False):'), (1177, '    def lock_matching_data(self, vmobject1: VMobject, vmobject2: VMobject):'), (1192, '    def set_points(self, points: Vect3Array, refresh_joints: bool = True):'), (1202, '    def append_points(self, points: Vect3Array):'), (1208, '    def reverse_points(self, recurse: bool = True):'), (1221, '    def set_data(self, data: np.ndarray):'), (1232, '    ):'), (1238, '    def apply_points_function(self, *args, **kwargs):'), (1275, '    def refresh_shader_wrapper_id(self):'), (1346, '    def __add__(self, other: VMobject | VGroup):')]}",285,285
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,3779577d9fd0a6b27921979ae68d51cdbb3e1faf,b58224f6c8eaf4c1c7cef81bedb172f809db7ffb,Add Self type to surface.py,"{'added': [(20, '    from typing import Callable, Iterable, Sequence, Tuple, Self'), (103, '    def apply_points_function(self, *args, **kwargs) -> Self:'), (106, '        return self'), (108, '    def compute_triangle_indices(self) -> np.ndarray:'), (115, '            return self.triangle_indices'), (125, '        return self.triangle_indices'), (159, '    ) -> Self:'), (216, '    def sort_faces_back_to_front(self, vect: Vect3 = OUT) -> Self:'), (226, '    def always_sort_to_camera(self, camera: Camera) -> Self:'), (231, '        return self'), (237, '    ) -> Self:'), (244, '    def deactivate_clip_plane(self) -> Self:'), (341, '    def set_opacity(self, opacity: float | Iterable[float]) -> Self:'), (351, '    ) -> Self:'), (362, '    ) -> Self:')], 'deleted': [(20, '    from typing import Callable, Iterable, Sequence, Tuple'), (103, '    def apply_points_function(self, *args, **kwargs):'), (107, '    def compute_triangle_indices(self):'), (114, '            return'), (157, '    ):'), (214, '    def sort_faces_back_to_front(self, vect: Vect3 = OUT):'), (224, '    def always_sort_to_camera(self, camera: Camera):'), (234, '    ):'), (241, '    def deactivate_clip_plane(self):'), (338, '    def set_opacity(self, opacity: float | Iterable[float]):'), (348, '    ):'), (359, '    ):')]}",46,46
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,af585ca3a1eb170bc8c8e5299edfe6103cb53970,3779577d9fd0a6b27921979ae68d51cdbb3e1faf,Add Self type to dot_cloud.py and point_cloud_mobject.py,"{'added': [(16, '    from typing import Sequence, Tuple, Self'), (73, '    ) -> Self:'), (99, '    def set_radii(self, radii: npt.ArrayLike) -> Self:'), (110, '    def set_radius(self, radius: float) -> Self:'), (119, '    def set_glow_factor(self, glow_factor: float) -> Self:'), (121, '        return self'), (126, '    def compute_bounding_box(self) -> Vect3Array:'), (138, '    ) -> Self:'), (149, '    ) -> Self:')], 'deleted': [(16, '    from typing import Sequence, Tuple'), (73, '    ):'), (99, '    def set_radii(self, radii: npt.ArrayLike):'), (110, '    def set_radius(self, radius: float):'), (119, '    def set_glow_factor(self, glow_factor: float) -> None:'), (125, '    def compute_bounding_box(self) -> np.ndarray:'), (137, '    ):'), (148, '    ):')]}",21,21
manimlib/mobject/types/point_cloud_mobject.py,manimlib/mobject/types/point_cloud_mobject.py,af585ca3a1eb170bc8c8e5299edfe6103cb53970,3779577d9fd0a6b27921979ae68d51cdbb3e1faf,Add Self type to dot_cloud.py and point_cloud_mobject.py,"{'added': [(13, '    from typing import Callable, Self'), (31, '    ) -> Self:'), (49, '    def add_point(self, point: Vect3, rgba=None, color=None, opacity=None) -> Self:'), (55, '    def set_color_by_gradient(self, *colors: ManimColor) -> Self:'), (63, '    def match_colors(self, pmobject: PMobject) -> Self:'), (70, '    def filter_out(self, condition: Callable[[np.ndarray], bool]) -> Self:'), (76, '    def sort_points(self, function: Callable[[Vect3], None] = lambda p: p[0]) -> Self:'), (88, '    def ingest_submobjects(self) -> Self:'), (99, '    def pointwise_become_partial(self, pmobject: PMobject, a: float, b: float) -> Self:')], 'deleted': [(13, '    from typing import Callable'), (31, '    ):'), (49, '    def add_point(self, point: Vect3, rgba=None, color=None, opacity=None):'), (55, '    def set_color_by_gradient(self, *colors: ManimColor):'), (63, '    def match_colors(self, pmobject: PMobject):'), (70, '    def filter_out(self, condition: Callable[[np.ndarray], bool]):'), (76, '    def sort_points(self, function: Callable[[Vect3], None] = lambda p: p[0]):'), (88, '    def ingest_submobjects(self):'), (99, '    def pointwise_become_partial(self, pmobject: PMobject, a: float, b: float):')]}",21,21
manimlib/mobject/changing.py,manimlib/mobject/changing.py,d8c21ff7aa46a73a0fb966158a04dfa1e452755e,af585ca3a1eb170bc8c8e5299edfe6103cb53970,Add Self type to changing.py,"{'added': [(14, '    from typing import Callable, List, Iterable, Self'), (52, '    def update_boundary_copies(self, dt: float) -> Self:'), (82, '        return self'), (90, '    ) -> Self:'), (122, '    def update_path(self, dt: float) -> Self:')], 'deleted': [(14, '    from typing import Callable, List, Iterable'), (52, '    def update_boundary_copies(self, dt: float) -> None:'), (89, '    ):'), (121, '    def update_path(self, dt: float):')]}",17,17
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,da6875ca5535bddd71c57a85cd92d0f0e2596a0f,d8c21ff7aa46a73a0fb966158a04dfa1e452755e,Add Self type to coordinate_systems.py,"{'added': [(24, 'from manimlib.mobject.types.vectorized_mobject import VMobject'), (35, '    from typing import Callable, Iterable, Sequence, Type, TypeVar, Optional, Self'), (239, '    def bind_graph_to_func('), (240, '        self,'), (241, '        graph: VMobject,'), (242, '        func: Callable[[Vect3], Vect3],'), (243, '        jagged: bool = False,'), (244, '        get_discontinuities: Optional[Callable[[], Vect3]] = None'), (245, '    ) -> VMobject:'), (669, '    def prepare_for_nonlinear_transform(self, num_inserted_curves: int = 50) -> Self:'), (708, '    ) -> Self:')], 'deleted': [(34, '    from typing import Callable, Iterable, Sequence, Type, TypeVar'), (238, '    def bind_graph_to_func(self, graph, func, jagged=False, get_discontinuities=None):'), (662, '    def prepare_for_nonlinear_transform(self, num_inserted_curves: int = 50):'), (701, '    ):')]}",106,106
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,6a42ef846ab936e6a3aa5c1a5eb81061fd747def,da6875ca5535bddd71c57a85cd92d0f0e2596a0f,Add Self type to geometry.py,"{'added': [(33, '    from typing import Iterable, Self, Optional'), (70, '    def add_tip(self, at_start: bool = False, **kwargs) -> Self:'), (115, '    def reset_endpoints_based_on_tip(self, tip: ArrowTip, at_start: bool) -> Self:'), (130, '    def asign_tip_attr(self, tip: ArrowTip, at_start: bool) -> Self:'), (261, '    def move_arc_center_to(self, point: Vect3) -> Self:'), (321, '    ) -> Self:'), (478, '    ) -> Self:'), (507, '    def set_path_arc(self, new_value: float) -> Self:'), (510, '        return self'), (545, '    def put_start_and_end_on(self, start: Vect3, end: Vect3) -> Self:'), (573, '    def set_angle(self, angle: float, about_point: Optional[Vect3] = None) -> Self:'), (699, '    ) -> Self:'), (705, '    def insert_tip_anchor(self) -> Self:'), (720, '    def create_tip_with_stroke_width(self) -> Self:'), (731, '    def reset_tip(self) -> Self:'), (743, '    ) -> Self:'), (749, '    def _handle_scale_side_effects(self, scale_factor: float) -> Self:'), (791, '    ) -> Self:'), (852, '        return self'), (854, '    def reset_points_around_ends(self) -> Self:'), (869, '    def put_start_and_end_on(self, start: Vect3, end: Vect3) -> Self:'), (873, '    def scale(self, *args, **kwargs) -> Self:'), (878, '    def set_thickness(self, thickness: float) -> Self:'), (883, '    def set_path_arc(self, path_arc: float) -> Self:'), (926, '    def round_corners(self, radius: Optional[float] = None) -> Self:')], 'deleted': [(33, '    from typing import Iterable'), (70, '    def add_tip(self, at_start: bool = False, **kwargs):'), (115, '    def reset_endpoints_based_on_tip(self, tip: ArrowTip, at_start: bool):'), (130, '    def asign_tip_attr(self, tip: ArrowTip, at_start: bool):'), (261, '    def move_arc_center_to(self, point: Vect3):'), (321, '    ):'), (478, '    ):'), (507, '    def set_path_arc(self, new_value: float) -> None:'), (544, '    def put_start_and_end_on(self, start: Vect3, end: Vect3):'), (572, '    def set_angle(self, angle: float, about_point: Vect3 | None = None):'), (698, '    ):'), (704, '    def insert_tip_anchor(self):'), (719, '    def create_tip_with_stroke_width(self):'), (730, '    def reset_tip(self):'), (742, '    ):'), (748, '    def _handle_scale_side_effects(self, scale_factor: float):'), (790, '    ) -> None:'), (852, '    def reset_points_around_ends(self):'), (867, '    def put_start_and_end_on(self, start: Vect3, end: Vect3):'), (871, '    def scale(self, *args, **kwargs):'), (876, '    def set_thickness(self, thickness: float):'), (881, '    def set_path_arc(self, path_arc: float):'), (924, '    def round_corners(self, radius: float | None = None):')]}",140,140
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,74a11bb05ce2838aed70a269ee8f585f569e1f27,6a42ef846ab936e6a3aa5c1a5eb81061fd747def,Add Self type to matrix.py,"{'added': [(21, '    from typing import Sequence, Self'), (132, '    ) -> Self:'), (142, '    def add_brackets(self, v_buff: float, h_buff: float) -> Self:'), (171, '    def set_column_colors(self, *colors: ManimColor) -> Self:'), (177, '    def add_background_to_entries(self) -> Self:')], 'deleted': [(21, '    from typing import Sequence'), (132, '    ):'), (142, '    def add_brackets(self, v_buff: float, h_buff: float):'), (171, '    def set_column_colors(self, *colors: ManimColor):'), (177, '    def add_background_to_entries(self):')]}",39,39
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,576d8c996b99fbc98608f2f24ed24c1706abd64d,74a11bb05ce2838aed70a269ee8f585f569e1f27,Add Self type to numbers.py,"{'added': [(14, '    from typing import TypeVar, Self'), (166, '    def set_value(self, number: float | complex) -> Self:'), (174, '    def _handle_scale_side_effects(self, scale_factor: float) -> Self:'), (176, '        return self'), (181, '    def increment_value(self, delta_t: float | complex = 1) -> Self:'), (183, '        return self')], 'deleted': [(14, '    from typing import TypeVar'), (166, '    def set_value(self, number: float | complex):'), (174, '    def _handle_scale_side_effects(self, scale_factor: float) -> None:'), (180, '    def increment_value(self, delta_t: float | complex = 1) -> None:')]}",32,32
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,0452012d5413e5e0531f2732d314d1369266938d,576d8c996b99fbc98608f2f24ed24c1706abd64d,Add Self type to shape_matchers.py,"{'added': [(17, '    from typing import Sequence, Self'), (63, '    def pointwise_become_partial(self, mobject: Mobject, a: float, b: float) -> Self:'), (67, '    def set_style('), (74, '    ) -> Self:'), (76, '        VMobject.set_style(')], 'deleted': [(17, '    from typing import Sequence'), (63, '    def pointwise_become_partial(self, mobject: Mobject, a: float, b: float):'), (67, '    def set_style_data('), (74, '    ):'), (76, '        VMobject.set_style_data(')]}",8,8
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,031adda503ac258b76a27f9d858c27226c10bd55,0452012d5413e5e0531f2732d314d1369266938d,Small fixes to three_dimensions.py,"{'added': [(188, '            resolution=resolution,')], 'deleted': [(169, '        return self'), (379, '        # # Rotate those two pentagons by all the axis permuations to fill'), (380, '        # # out the dodecahedron'), (381, '        # Id = np.identity(3)'), (382, '        # for i in range(3):'), (383, '        #     perm = [j % 3 for j in range(i, i + 3)]'), (384, '        #     for b in [1, -1]:'), (385, '        #         matrix = b * np.array([Id[0][perm], Id[1][perm], Id[2][perm]])'), (386, '        #         self.add(pentagon1.copy().apply_matrix(matrix, about_point=ORIGIN))'), (387, '        #         self.add(pentagon2.copy().apply_matrix(matrix, about_point=ORIGIN))'), (388, '')]}",30,30
manimlib/mobject/value_tracker.py,manimlib/mobject/value_tracker.py,468fdf9003a787e4df8a18bc401567f9ee3196ae,031adda503ac258b76a27f9d858c27226c10bd55,Add Self type to value_tracker.py,"{'added': [(4, 'from typing import Self'), (39, '    def set_value(self, value: float | complex | np.ndarray) -> Self:')], 'deleted': [(4, ''), (39, '    def set_value(self, value: float | complex | np.ndarray):')]}",8,8
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,015a7487e798f4daca9c076d831935e41a00e324,468fdf9003a787e4df8a18bc401567f9ee3196ae,Remove stray import,"{'added': [], 'deleted': [(25, '    import numpy.typing as npt')]}",37,37
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1e46847a697915d16891a957ec0589ab9b29d39f,4c327cd5d28269c6bd3fd102cbbc0662753a392d,Use Iterator type for Mobject.__iter__,"{'added': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, Self'), (353, '    def __iter__(self) -> Iterator[Self]:')], 'deleted': [(51, '    from typing import Callable, Iterable, Union, Tuple, Optional, Self'), (353, '    def __iter__(self) -> Iterable[Self]:')]}",530,530
manimlib/animation/transform.py,manimlib/animation/transform.py,7e78e769667760227dc2a42c1ceec498e976fb69,1e46847a697915d16891a957ec0589ab9b29d39f,Only call become at the end of Transform if the rate func ends at 1,"{'added': [(73, '        if self.target_mobject is not None and self.rate_func(1) == 1:')], 'deleted': [(73, '        if self.target_mobject is not None:')]}",53,53
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,077f264890d16ad9353149f09e3119e8fb7a38e4,7e78e769667760227dc2a42c1ceec498e976fb69,"In Mobject.become, match needs_new_bounding_box status","{'added': [(698, '            sm1.needs_new_bounding_box = sm2.needs_new_bounding_box')], 'deleted': []}",530,530
example_scenes.py,example_scenes.py,f42b3bfa3ee1fde8ea07ba6fcdc44b15912c6c8a,077f264890d16ad9353149f09e3119e8fb7a38e4,"In UpdatersExample, use Tex.make_number_changable","{'added': [(271, '        label = TexText(""Width = 0.00"")'), (272, '        number = label.make_number_changable(""0.00"")')], 'deleted': [(271, '        text, number = label = VGroup('), (272, '            Text(""Width = ""),'), (273, '            DecimalNumber('), (274, '                0,'), (275, '                show_ellipsis=True,'), (276, '                num_decimal_places=2,'), (277, '                include_sign=True,'), (278, '            )'), (279, '        )'), (280, '        label.arrange(RIGHT)')]}",21,21
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,3b0c9581897d1a55a558e7649f35938b0b493030,f42b3bfa3ee1fde8ea07ba6fcdc44b15912c6c8a,Check case of scale = 0 in get_view_matrix,"{'added': [(95, '            scale_mat = np.identity(4)'), (99, '            scale = self.get_scale()'), (100, '            if scale > 0:'), (101, '                scale_mat[:3, :3] /= self.get_scale()'), (103, '            self.view_matrix = np.dot(scale_mat, np.dot(rotation, shift))')], 'deleted': [(95, '            scale = np.identity(4)'), (99, '            scale[:3, :3] /= self.get_scale()'), (101, '            self.view_matrix = np.dot(scale, np.dot(rotation, shift))')]}",45,45
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,93e65fa3e783a45ee153b437a674536abf233267,3b0c9581897d1a55a558e7649f35938b0b493030,Prevent needless extra copying in Mobject.copy,"{'added': [(638, '        result._shaders_initialized = False'), (645, '            elif isinstance(value, np.ndarray):')], 'deleted': [(620, '        result.data = self.data.copy()'), (645, '            if isinstance(value, np.ndarray):'), (646, '                setattr(result, attr, value.copy())'), (647, '            if isinstance(value, ShaderWrapper):')]}",529,529
manimlib/utils/dict_ops.py,manimlib/utils/dict_ops.py,d9c85aac469aec373cf750d745ad167bf910f332,93e65fa3e783a45ee153b437a674536abf233267,Add dict_eq,"{'added': [(2, 'import numpy as np'), (33, ''), (34, ''), (35, 'def dict_eq(d1, d2):'), (36, '    if len(d1) != len(d2):'), (37, '        return False'), (38, '    for key in d1:'), (39, '        value1 = d1[key]'), (40, '        value2 = d2[key]'), (41, '        if type(value1) != type(value2):'), (42, '            return False'), (43, '        if type(d1[key]) == np.ndarray:'), (44, '            if any(d1[key] != d2[key]):'), (45, '                return False'), (46, '        elif d1[key] != d2[key]:'), (47, '            return False'), (48, '    return True')], 'deleted': []}",16,16
manimlib/camera/camera.py,manimlib/camera/camera.py,fca5770b9f729e2edaeb754947e36e3cebdfb1e4,d9c85aac469aec373cf750d745ad167bf910f332,Fix Camera.blit,"{'added': [(136, '            *dst_fbo.viewport,')], 'deleted': [(136, '            *src_fbo.viewport,')]}",34,34
manimlib/camera/camera.py,manimlib/camera/camera.py,d3a4d81a63ae0f7f1b57bf6a1b500e38756cc18e,fca5770b9f729e2edaeb754947e36e3cebdfb1e4,Remove commended code,"{'added': [], 'deleted': [(141, '        # # Copy blocks from fbo into draw_fbo using Blit'), (142, '        # gl.glBindFramebuffer(gl.GL_READ_FRAMEBUFFER, self.fbo.glo)'), (143, '        # gl.glBindFramebuffer(gl.GL_DRAW_FRAMEBUFFER, self.draw_fbo.glo)'), (144, '        # src_viewport = self.fbo.viewport'), (145, '        # gl.glBlitFramebuffer('), (146, '        #     *src_viewport,'), (147, '        #     *self.draw_fbo.viewport,'), (148, '        #     gl.GL_COLOR_BUFFER_BIT, gl.GL_LINEAR'), (149, '        # )')]}",34,34
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f858a439dd8a64121bc32e0b282daa35f68b764f,d3a4d81a63ae0f7f1b57bf6a1b500e38756cc18e,Make alignment between VMobjects conducive to smoother interpolation,"{'added': [(893, '        for subpaths in [subpaths1, subpaths2]:'), (894, '            subpaths.sort(key=lambda sp: -sum('), (895, '                get_norm(p2 - p1)'), (896, '                for p1, p2 in zip(sp, sp[1:])'), (897, '            ))'), (906, '                return np.vstack([path_list[0][:-1], path_list[0][::-1]])')], 'deleted': [(901, '                return [path_list[-1][-1]]')]}",291,291
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c8d1ee5c88448f682f368713b064b16b7d8dda92,f858a439dd8a64121bc32e0b282daa35f68b764f,No longer any need for specialized invisible_copy,"{'added': [], 'deleted': [(930, '    def invisible_copy(self) -> Self:'), (931, '        result = self.copy()'), (932, '        if not result.has_fill() or result.get_num_points() == 0:'), (933, '            return result'), (934, '        result.append_vectorized_mobject(self.copy().reverse_points())'), (935, '        result.set_opacity(0)'), (936, '        return result'), (937, '')]}",288,288
manimlib/animation/transform_matching_parts.py,manimlib/animation/transform_matching_parts.py,bc38165d448307a3f54c2c9fd96cc76f0e50531f,c8d1ee5c88448f682f368713b064b16b7d8dda92,Allow for matched_pairs arg to TransformMatchingStrings,"{'added': [(134, '        matched_pairs: Iterable[tuple[Mobject, Mobject]] = [],'), (137, '        matched_pairs = list(matched_pairs) + [')], 'deleted': [(136, '        matched_pairs = [')]}",27,27
example_scenes.py,example_scenes.py,7c087838a3f22ac17e0b4b9ca07f31263fad3345,bc38165d448307a3f54c2c9fd96cc76f0e50531f,Change backstroke defaults in OpeningScene,"{'added': [(34, '        linear_transform_words.set_backstroke(width=5)'), (55, '        complex_map_words.set_backstroke(width=5)')], 'deleted': [(34, '        linear_transform_words.set_stroke(BLACK, 10, background=True)'), (55, '        complex_map_words.set_stroke(BLACK, 5, background=True)')]}",21,21
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,7c087838a3f22ac17e0b4b9ca07f31263fad3345,bc38165d448307a3f54c2c9fd96cc76f0e50531f,Change backstroke defaults in OpeningScene,"{'added': [(92, '    if(joint_product.w < -0.75) buff *= 4 * (joint_product.w + 1.0);')], 'deleted': [(92, '    if(joint_product.w < -0.9) buff *= 10 * (joint_product.w + 1.0);')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,b1fb3e1d54eb7a454c379d916bdceb9806f5cd6b,7c087838a3f22ac17e0b4b9ca07f31263fad3345,Add render mode and early discard for fill canvas vao,"{'added': [(162, '                if(color.a == 0) discard;'), (184, '        mode=moderngl.TRIANGLE_STRIP')], 'deleted': []}",13,13
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,0c9afb65d9c7bee290f1eb41562170a42bf363c8,b1fb3e1d54eb7a454c379d916bdceb9806f5cd6b,Small clean up to render calls,"{'added': [(284, ""        self.program['winding'].value = winding""), (286, '            super().render()'), (303, '        super().render()'), (309, '        texture_vao.render()')], 'deleted': [(283, '        vao = self.vao'), (284, '        assert(vao is not None)'), (286, ""        vao.program['winding'].value = winding""), (288, '            vao.render()'), (304, '        self.ctx.blend_equation = moderngl.FUNC_ADD, moderngl.MAX'), (306, '        vao.render()'), (312, '        texture_vao.render(moderngl.TRIANGLE_STRIP)')]}",64,64
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,04733ac32ea50cf2ecca4e1212ee5e86579f7110,0c9afb65d9c7bee290f1eb41562170a42bf363c8,Default to fully opaque background rectangle,"{'added': [(1439, '        opacity: float = 1.0,')], 'deleted': [(1439, '        opacity: float = 0.75,'), (1442, '        # TODO, this does not behave well when the mobject has points,'), (1443, '        # since it gets displayed on top')]}",529,529
example_scenes.py,example_scenes.py,b351c9f1c8881b2c154f1d97ad22db05592f4726,04733ac32ea50cf2ecca4e1212ee5e86579f7110,Add smaller h_buff to matrix in OpeningManimExample,"{'added': [(29, '            IntegerMatrix(matrix, include_background_rectangle=True, h_buff=1.0),')], 'deleted': [(29, '            IntegerMatrix(matrix, include_background_rectangle=True),')]}",21,21
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,280090a7c906f6d6cef9f9a8a04186de27f15b26,b351c9f1c8881b2c154f1d97ad22db05592f4726,"Small reorganization to VMobject.get_shader_wrapper_list, and default to fill border being drawn up front","{'added': [(1286, '        fill_border_datas = []'), (1291, '            indices = submob.get_outer_vert_indices()'), (1294, '            back_stroke = has_stroke and submob.stroke_behind'), (1295, '            front_stroke = has_stroke and not submob.stroke_behind'), (1296, '            if back_stroke:'), (1297, '                back_stroke_datas.append(submob.data[stroke_names][indices])'), (1298, '            if front_stroke:'), (1299, '                stroke_datas.append(submob.data[stroke_names][indices])'), (1300, '            if has_fill and self._use_winding_fill:'), (1303, '                fill_datas.append(data[indices])'), (1304, '            if has_fill and not self._use_winding_fill:'), (1305, '                fill_datas.append(submob.data[fill_names])'), (1306, '                fill_indices.append(submob.get_triangulation())'), (1307, '            if has_fill and not front_stroke:'), (1318, '            self.back_stroke_shader_wrapper.read_in(back_stroke_datas),'), (1320, '            self.stroke_shader_wrapper.read_in([*fill_border_datas, *stroke_datas]),')], 'deleted': [(1285, '        fill_border_datas = []'), (1293, '            indices = submob.get_outer_vert_indices()'), (1294, '            if has_stroke:'), (1295, '                lst = back_stroke_datas if submob.stroke_behind else stroke_datas'), (1296, '                lst.append(submob.data[stroke_names][indices])'), (1297, '            if has_fill:'), (1300, '                if self._use_winding_fill:'), (1301, '                    fill_datas.append(data[indices])'), (1302, '                else:'), (1303, '                    fill_datas.append(data)'), (1304, '                    fill_indices.append(submob.get_triangulation())'), (1305, '            if not has_stroke and has_fill:'), (1316, '            self.back_stroke_shader_wrapper.read_in('), (1317, '                [*back_stroke_datas, *fill_border_datas]'), (1318, '            ),'), (1320, '            self.stroke_shader_wrapper.read_in(stroke_datas),')]}",292,292
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,c8b65d56218d4e1801883c83e81d31da96eaffa3,Draw border width behind fill,"{'added': [(1318, '            self.back_stroke_shader_wrapper.read_in([*back_stroke_datas, *fill_border_datas]),'), (1320, '            self.stroke_shader_wrapper.read_in(stroke_datas),')], 'deleted': [(1318, '            self.back_stroke_shader_wrapper.read_in(back_stroke_datas),'), (1320, '            self.stroke_shader_wrapper.read_in([*fill_border_datas, *stroke_datas]),')]}",292,292
example_scenes.py,example_scenes.py,9ef14c7260f3f14c4d1072080753ddd9b2735ca0,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Change default h_buff on Matrix,"{'added': [(29, '            IntegerMatrix(matrix, include_background_rectangle=True),')], 'deleted': [(29, '            IntegerMatrix(matrix, include_background_rectangle=True, h_buff=1.0),')]}",21,21
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,9ef14c7260f3f14c4d1072080753ddd9b2735ca0,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Change default h_buff on Matrix,"{'added': [(79, '        h_buff: float = 1.0,')], 'deleted': [(79, '        h_buff: float = 1.3,')]}",39,39
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,979589a15688998b0ee6d1f95241e17a50345076,9ef14c7260f3f14c4d1072080753ddd9b2735ca0,Change clicking behavior in InteractiveScene,"{'added': [(32, 'from typing import TYPE_CHECKING'), (33, ''), (34, 'if TYPE_CHECKING:'), (35, '    from manimlib.typing import Vect3'), (36, ''), (76, '        radius=0.05,'), (281, '        radius = float(self.corner_dot_config[""radius""])'), (397, '                    if self.selection_rectangle.get_arc_length() < 1e-2:'), (398, '                        break'), (399, '            self.toggle_from_selection(*additions)'), (527, '    def handle_grabbing(self, point: Vect3):'), (536, '    def handle_resizing(self, point: Vect3):'), (556, '    def handle_sweeping_selection(self, point: Vect3):'), (558, '            point,'), (559, '            search_set=self.get_selection_search_set(),'), (565, '    def choose_color(self, point: Vect3):'), (578, '    def on_mouse_motion(self, point: Vect3, d_point: Vect3) -> None:'), (580, '        self.crosshair.move_to(self.frame.to_fixed_frame_point(point))'), (588, '    def on_mouse_drag('), (589, '        self,'), (590, '        point: Vect3,'), (591, '        d_point: Vect3,'), (592, '        buttons: int,'), (593, '        modifiers: int'), (594, '    ) -> None:'), (595, '        super().on_mouse_drag(point, d_point, buttons, modifiers)'), (596, '        self.crosshair.move_to(self.frame.to_fixed_frame_point(point))'), (597, ''), (598, '    def on_mouse_release(self, point: Vect3, button: int, mods: int) -> None:')], 'deleted': [(71, '        radius=0.025,'), (276, '        radius = self.corner_dot_config[""radius""]'), (392, '            self.add_to_selection(*additions)'), (512, '            # self.remove(self.crosshair)'), (521, '    def handle_grabbing(self, point: np.ndarray):'), (530, '    def handle_resizing(self, point: np.ndarray):'), (550, '    def handle_sweeping_selection(self, point: np.ndarray):'), (552, '            point, search_set=self.get_selection_search_set(),'), (558, '    def choose_color(self, point: np.ndarray):'), (571, '    def on_mouse_motion(self, point: np.ndarray, d_point: np.ndarray) -> None:'), (573, '        ff_point = self.frame.to_fixed_frame_point(point)'), (574, '        self.crosshair.move_to(ff_point)'), (582, '    def on_mouse_release(self, point: np.ndarray, button: int, mods: int) -> None:'), (586, '            return'), (587, '        mobject = self.point_to_mobject('), (588, '            point,'), (589, '            search_set=self.get_selection_search_set(),'), (590, '            buff=1e-4,'), (591, '        )'), (592, '        if mobject is not None:'), (593, '            self.toggle_from_selection(mobject)')]}",152,152
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,40bcb7e0f3f938218caa12f616b3382c37a71dba,979589a15688998b0ee6d1f95241e17a50345076,Accept list of Vect3 as an input to Mobject.set_points,"{'added': [(205, '    def set_points(self, points: Vect3Array | list[Vect3]) -> Self:')], 'deleted': [(205, '    def set_points(self, points: Vect3Array) -> Self:')]}",529,529
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,f293ccdff4c4e543d4ac994e626f387813516842,40bcb7e0f3f938218caa12f616b3382c37a71dba,Add copy_frame_anim_call,"{'added': [(11, 'from manimlib.constants import FRAME_WIDTH, FRAME_HEIGHT, SMALL_BUFF'), (13, 'from manimlib.constants import DEGREES'), (460, '    # Key actions'), (499, '        elif char == PAN_3D_KEY and modifiers == COMMAND_MODIFIER:'), (500, '            self.copy_frame_anim_call()'), (608, ''), (609, '    # Copying code to recreate state'), (610, '    def copy_frame_anim_call(self):'), (611, '        frame = self.frame'), (612, '        center = frame.get_center()'), (613, '        height = frame.get_height()'), (614, '        angles = frame.get_euler_angles()'), (615, ''), (616, '        call = f""self.frame.animate.reorient""'), (617, '        call += str(tuple((angles / DEGREES).astype(int)))'), (618, '        if any(center != 0):'), (619, '            call += f"".move_to({list(np.round(center, 2))})""'), (620, '        if height != FRAME_HEIGHT:'), (621, '            call += "".set_height({:.2f})"".format(height)'), (622, '        pyperclip.copy(call)')], 'deleted': [(11, 'from manimlib.constants import FRAME_WIDTH, SMALL_BUFF')]}",157,157
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,f83c441210ec83c72b516dc493db1d7fb0816fb8,f293ccdff4c4e543d4ac994e626f387813516842,"Make it so that copying a mobject will copy its name, if applicable","{'added': [(6, 'from IPython.core.getipython import get_ipython'), (30, 'from manimlib.scene.scene import PAN_3D_KEY'), (347, '        names = []'), (348, '        shell = get_ipython()'), (349, '        for mob in self.selection:'), (350, '            name = str(id(mob))'), (351, '            if shell is None:'), (352, '                continue'), (353, '            for key, value in shell.user_ns.items():'), (354, '                if mob is value:'), (355, '                    name = key'), (356, '            names.append(name)'), (357, '        pyperclip.copy("", "".join(names))')], 'deleted': [(237, '    # def increment_time(self, dt: float) -> None:'), (238, '    #     super().increment_time(dt)'), (239, ''), (348, '        ids = map(id, self.selection)'), (349, '        pyperclip.copy("","".join(map(str, ids)))')]}",161,161
manimlib/window.py,manimlib/window.py,8820af65ec227eb318e99c01631222e386a2841b,f83c441210ec83c72b516dc493db1d7fb0816fb8,Check that scene has a camera frame in pixel_to_point_coords,"{'added': [(81, '        if not hasattr(self.scene, ""frame""):'), (82, '            return np.zeros(3)'), (83, '')], 'deleted': []}",19,19
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f4a6f99b54f0e916c4f4816b29c21a2d93c8ba71,8820af65ec227eb318e99c01631222e386a2841b,Check _use_winding_fill on the submobject level,"{'added': [(1300, '            if has_fill and submob._use_winding_fill:'), (1304, '            if has_fill and not submob._use_winding_fill:')], 'deleted': [(1300, '            if has_fill and self._use_winding_fill:'), (1304, '            if has_fill and not self._use_winding_fill:')]}",292,292
manimlib/utils/tex.py,manimlib/utils/tex.py,ebf2ee58494b59a3895965aa627f9a7805aa686a,f4a6f99b54f0e916c4f4816b29c21a2d93c8ba71,Update tex patterns,"{'added': [(19, '        for s in [""begin"", ""end"", ""phantom"", ""text""]')], 'deleted': [(19, '        for s in [""begin"", ""end"", ""phantom""]')]}",4,4
manimlib/scene/scene.py,manimlib/scene/scene.py,8adf2a6e07e677b9e10f707eb3055729e386d6c7,6eafdc63cc4daa5dcfbb1f4ef4a34bcc80928acd,"Partition render groups based on shader type, fixed_in_frame status, depth_test and whether the mobject is changing","{'added': [(396, '            lambda m: """".join(['), (397, '                str(m.shader_dtype),'), (398, '                str(m.is_fixed_in_frame()),'), (399, '                str(m.depth_test),'), (400, '                str(m.is_changing()),'), (401, '            ])'), (651, '    @affects_mobject_list')], 'deleted': [(396, '            lambda m: str(m.get_uniforms()) + str(m.apply_depth_test)')]}",227,227
manimlib/scene/scene.py,manimlib/scene/scene.py,eeadbe45425640627fb73e70b89be0c5f9c98b86,8adf2a6e07e677b9e10f707eb3055729e386d6c7,Small reshuffling,"{'added': [(393, '            lambda m: ""|"".join(['), (394, '                str(m.shader_dtype.names),'), (400, ''), (401, '        for group in self.render_groups:'), (402, '            group.clear()')], 'deleted': [(391, '        for group in self.render_groups:'), (392, '            group.clear()'), (393, '        self.render_groups = []'), (396, '            lambda m: """".join(['), (397, '                str(m.shader_dtype),')]}",227,227
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,47672d3b1e4b2bc5360e22f4354d1a60a1b4479a,eeadbe45425640627fb73e70b89be0c5f9c98b86,Add checks for setting submobjects with existing list,"{'added': [(452, '        if self.submobjects == submobject_list:'), (453, '            return self'), (454, '        self.clear()')], 'deleted': [(452, '        self.remove(*self.submobjects, reassemble=False)')]}",530,530
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,9c03a40d682cbcd2767741a64fd47cefc0eb3118,47672d3b1e4b2bc5360e22f4354d1a60a1b4479a,Account for unnecessary calls to use_winding_fill,"{'added': [(870, '        if winding != self._use_winding_fill:'), (871, '            self.use_winding_fill(winding)'), (872, '        if winding != vmobject._use_winding_fill:'), (873, '            vmobject.use_winding_fill(winding)')], 'deleted': [(870, '        self.use_winding_fill(winding)'), (871, '        vmobject.use_winding_fill(winding)')]}",294,294
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,b499caaa4599dec8cb62ecc09b2110dc290bb4d9,9c03a40d682cbcd2767741a64fd47cefc0eb3118,Have SVG subdivide intersections if winding fill is not a default,"{'added': [(312, '            if not self._use_winding_fill:'), (313, '                self.subdivide_intersections()')], 'deleted': []}",60,60
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,17cef427f135bfb284a10ec57ac25bd57e775765,b499caaa4599dec8cb62ecc09b2110dc290bb4d9,"Update fill shader alpha blending, and simplify the fill canvas","{'added': [(290, '        texture_fbo, texture_vao = self.fill_canvas'), (292, '        texture_fbo.clear()'), (297, '            # The effect of blending with -a / (1 - a)'), (298, '            # should be to cancel out'), (299, '            gl.GL_ONE_MINUS_DST_ALPHA, gl.GL_ONE,')], 'deleted': [(290, '        texture_fbo, texture_vao, null_rgb = self.fill_canvas'), (292, '        texture_fbo.clear(*null_rgb, 0.0)'), (297, '            # Just take the max of the alphas, given the shenanigans'), (298, '            # with how alphas are being used to compute winding numbers'), (299, '            gl.GL_ONE, gl.GL_ONE,'), (301, '        gl.glBlendEquationSeparate(gl.GL_FUNC_ADD, gl.GL_MAX)'), (307, '        gl.glBlendEquation(gl.GL_FUNC_ADD)')]}",64,64
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,17cef427f135bfb284a10ec57ac25bd57e775765,b499caaa4599dec8cb62ecc09b2110dc290bb4d9,"Update fill shader alpha blending, and simplify the fill canvas","{'added': [(36, '    float a = 0.95 * frag_color.a;')], 'deleted': [(36, '    float a = 0.99 * frag_color.a;')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,17cef427f135bfb284a10ec57ac25bd57e775765,b499caaa4599dec8cb62ecc09b2110dc290bb4d9,"Update fill shader alpha blending, and simplify the fill canvas","{'added': [(106, 'def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray]:'), (131, '            out vec2 uv;'), (135, '                uv = texcoord;'), (144, '            in vec2 uv;'), (148, '                color = texture(Texture, uv);'), (152, '                color.a *= 1.06;'), (154, '                gl_FragDepth = texture(DepthTexture, uv)[0];'), (169, '    return (texture_fbo, fill_texture_vao)')], 'deleted': [(106, 'def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray, Tuple[float, float, float]]:'), (126, ""    # We'll paint onto a canvas with initially negative rgbs, and""), (127, '    # discard any pixels remaining close to this value. This is'), (128, '    # because alphas are effectively being used for another purpose,'), (129, ""    # and we don't want to overlap with any colors one might actually""), (130, '    # use. It should be negative enough to be distinguishable from'), (131, ""    # ordinary colors with some margin, but the farther it's pulled back""), (132, '    # from zero the more it will be true that overlapping filled objects'), (133, '    # with transparency have an unnaturally bright composition.'), (134, '    null_rgb = (-0.25, -0.25, -0.25)'), (135, ''), (141, '            out vec2 v_textcoord;'), (145, '                v_textcoord = texcoord;'), (153, '            uniform vec3 null_rgb;'), (155, '            in vec2 v_textcoord;'), (158, '            const float MIN_DIST_TO_NULL = 0.2;'), (159, ''), (161, '                color = texture(Texture, v_textcoord);'), (163, '                if(distance(color.rgb, null_rgb) < MIN_DIST_TO_NULL) discard;'), (165, '                // Un-blend from the null value'), (166, '                color.rgb -= (1 - color.a) * null_rgb;'), (168, '                color.a *= 1.01;'), (170, '                gl_FragDepth = texture(DepthTexture, v_textcoord)[0];'), (177, ""    simple_program['null_rgb'].value = null_rgb""), (186, '    return (texture_fbo, fill_texture_vao, null_rgb)')]}",13,13
manimlib/mobject/changing.py,manimlib/mobject/changing.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(14, '    from typing import Callable, List, Iterable'), (15, '    from manimlib.typing import ManimColor, Vect3, Self')], 'deleted': [(14, '    from typing import Callable, List, Iterable, Self'), (15, '    from manimlib.typing import ManimColor, Vect3')]}",17,17
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(35, '    from typing import Callable, Iterable, Sequence, Type, TypeVar, Optional'), (37, '    from manimlib.typing import ManimColor, Vect3, Vect3Array, VectN, RangeSpecifier, Self')], 'deleted': [(35, '    from typing import Callable, Iterable, Sequence, Type, TypeVar, Optional, Self'), (37, '    from manimlib.typing import ManimColor, Vect3, Vect3Array, VectN, RangeSpecifier')]}",106,106
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(33, '    from typing import Iterable, Optional'), (34, '    from manimlib.typing import ManimColor, Vect3, Vect3Array, Self')], 'deleted': [(33, '    from typing import Iterable, Self, Optional'), (34, '    from manimlib.typing import ManimColor, Vect3, Vect3Array')]}",140,140
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(21, '    from typing import Sequence'), (24, '    from manimlib.typing import ManimColor, Vect3, Self')], 'deleted': [(21, '    from typing import Sequence, Self'), (24, '    from manimlib.typing import ManimColor, Vect3')]}",39,39
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional'), (53, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, UniformDict, Self')], 'deleted': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, Self'), (53, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, UniformDict')]}",529,529
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(14, '    from typing import TypeVar'), (15, '    from manimlib.typing import ManimColor, Vect3, Self')], 'deleted': [(14, '    from typing import TypeVar, Self'), (15, '    from manimlib.typing import ManimColor, Vect3')]}",32,32
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(17, '    from typing import Sequence'), (19, '    from manimlib.typing import ManimColor, Self')], 'deleted': [(17, '    from typing import Sequence, Self'), (19, '    from manimlib.typing import ManimColor')]}",8,8
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(16, '    from typing import Sequence, Tuple'), (17, '    from manimlib.typing import ManimColor, Vect3, Vect3Array, Self')], 'deleted': [(16, '    from typing import Sequence, Tuple, Self'), (17, '    from manimlib.typing import ManimColor, Vect3, Vect3Array')]}",21,21
manimlib/mobject/types/point_cloud_mobject.py,manimlib/mobject/types/point_cloud_mobject.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(13, '    from typing import Callable'), (14, '    from manimlib.typing import ManimColor, Vect3, Vect3Array, Vect4Array, Self')], 'deleted': [(13, '    from typing import Callable, Self'), (14, '    from manimlib.typing import ManimColor, Vect3, Vect3Array, Vect4Array')]}",21,21
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(20, '    from typing import Callable, Iterable, Sequence, Tuple'), (23, '    from manimlib.typing import ManimColor, Vect3, Vect3Array, Self')], 'deleted': [(20, '    from typing import Callable, Iterable, Sequence, Tuple, Self'), (23, '    from manimlib.typing import ManimColor, Vect3, Vect3Array')]}",46,46
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(48, '    from typing import Callable, Iterable, Tuple, Any'), (49, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Vect4Array, Self')], 'deleted': [(48, '    from typing import Callable, Iterable, Tuple, Any, Self'), (49, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Vect4Array')]}",292,292
manimlib/mobject/value_tracker.py,manimlib/mobject/value_tracker.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(7, 'from typing import TYPE_CHECKING'), (8, ''), (9, 'if TYPE_CHECKING:'), (10, '    from manimlib.typing import Self'), (11, '')], 'deleted': [(4, 'from typing import Self')]}",8,8
manimlib/typing.py,manimlib/typing.py,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(8, ''), (9, '    try:'), (10, '        from typing import Self'), (11, '    except ImportError:'), (12, '        from typing_extensions import Self')], 'deleted': []}",0,0
requirements.txt,requirements.txt,ab6a7df4af58cc72d917ac438f13f4dc7269573c,c062592684dfdc13f94f9fbef3cf7e2b68deaa10,Use typing_extensions to import Self for python versions <3.11,"{'added': [(25, 'typing-extensions; python_version < ""3.11""')], 'deleted': []}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,594b9258da88e4b95f260fa7e0c45aa66f4fad7a,260815c67575bf851208a58c9461f48d6c86380c,Account for unnecessary calls to use_winding_fill,"{'added': [(870, '        if winding != self._use_winding_fill:'), (871, '            self.use_winding_fill(winding)'), (872, '        if winding != vmobject._use_winding_fill:'), (873, '            vmobject.use_winding_fill(winding)')], 'deleted': [(870, '        self.use_winding_fill(winding)'), (871, '        vmobject.use_winding_fill(winding)')]}",294,294
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,0cf9a35367570c41d06e5ff8e5905a1db2b11852,594b9258da88e4b95f260fa7e0c45aa66f4fad7a,Have SVG subdivide intersections if winding fill is not a default,"{'added': [(312, '            if not self._use_winding_fill:'), (313, '                self.subdivide_intersections()')], 'deleted': []}",60,60
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,c3823e722db10fedb31f8c1647f0da7653e83048,0cf9a35367570c41d06e5ff8e5905a1db2b11852,"Update fill shader alpha blending, and simplify the fill canvas","{'added': [(290, '        texture_fbo, texture_vao = self.fill_canvas'), (292, '        texture_fbo.clear()'), (297, '            # The effect of blending with -a / (1 - a)'), (298, '            # should be to cancel out'), (299, '            gl.GL_ONE_MINUS_DST_ALPHA, gl.GL_ONE,')], 'deleted': [(290, '        texture_fbo, texture_vao, null_rgb = self.fill_canvas'), (292, '        texture_fbo.clear(*null_rgb, 0.0)'), (297, '            # Just take the max of the alphas, given the shenanigans'), (298, '            # with how alphas are being used to compute winding numbers'), (299, '            gl.GL_ONE, gl.GL_ONE,'), (301, '        gl.glBlendEquationSeparate(gl.GL_FUNC_ADD, gl.GL_MAX)'), (307, '        gl.glBlendEquation(gl.GL_FUNC_ADD)')]}",64,64
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,c3823e722db10fedb31f8c1647f0da7653e83048,0cf9a35367570c41d06e5ff8e5905a1db2b11852,"Update fill shader alpha blending, and simplify the fill canvas","{'added': [(36, '    float a = 0.95 * frag_color.a;')], 'deleted': [(36, '    float a = 0.99 * frag_color.a;')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,c3823e722db10fedb31f8c1647f0da7653e83048,0cf9a35367570c41d06e5ff8e5905a1db2b11852,"Update fill shader alpha blending, and simplify the fill canvas","{'added': [(106, 'def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray]:'), (131, '            out vec2 uv;'), (135, '                uv = texcoord;'), (144, '            in vec2 uv;'), (148, '                color = texture(Texture, uv);'), (152, '                color.a *= 1.06;'), (154, '                gl_FragDepth = texture(DepthTexture, uv)[0];'), (169, '    return (texture_fbo, fill_texture_vao)')], 'deleted': [(106, 'def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray, Tuple[float, float, float]]:'), (126, ""    # We'll paint onto a canvas with initially negative rgbs, and""), (127, '    # discard any pixels remaining close to this value. This is'), (128, '    # because alphas are effectively being used for another purpose,'), (129, ""    # and we don't want to overlap with any colors one might actually""), (130, '    # use. It should be negative enough to be distinguishable from'), (131, ""    # ordinary colors with some margin, but the farther it's pulled back""), (132, '    # from zero the more it will be true that overlapping filled objects'), (133, '    # with transparency have an unnaturally bright composition.'), (134, '    null_rgb = (-0.25, -0.25, -0.25)'), (135, ''), (141, '            out vec2 v_textcoord;'), (145, '                v_textcoord = texcoord;'), (153, '            uniform vec3 null_rgb;'), (155, '            in vec2 v_textcoord;'), (158, '            const float MIN_DIST_TO_NULL = 0.2;'), (159, ''), (161, '                color = texture(Texture, v_textcoord);'), (163, '                if(distance(color.rgb, null_rgb) < MIN_DIST_TO_NULL) discard;'), (165, '                // Un-blend from the null value'), (166, '                color.rgb -= (1 - color.a) * null_rgb;'), (168, '                color.a *= 1.01;'), (170, '                gl_FragDepth = texture(DepthTexture, v_textcoord)[0];'), (177, ""    simple_program['null_rgb'].value = null_rgb""), (186, '    return (texture_fbo, fill_texture_vao, null_rgb)')]}",13,13
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,acb4b1c6b3e12422c94ffc31a1fb61594543e9ac,a1b9eae301b87b2c285dee75c307f0fb66196ea3,"Finalize color at the vertex level, rather than the fragment level, for fill","{'added': [(14, '    frag_color = color;'), (32, '    if(winding){'), (33, '        float a = 0.95 * frag_color.a;'), (34, '        if(orientation < 0) a = -a / (1 - a);'), (35, '        frag_color.a = a;'), (36, '    }')], 'deleted': [(9, 'in vec3 point;'), (10, 'in vec3 unit_normal;'), (14, '#INSERT finalize_color.glsl'), (15, ''), (18, '    frag_color = finalize_color(color, point, unit_normal);'), (36, '    float a = 0.95 * frag_color.a;'), (37, '    if(winding && orientation < 0) a = -a / (1 - a);'), (38, '    frag_color.a = a;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,acb4b1c6b3e12422c94ffc31a1fb61594543e9ac,a1b9eae301b87b2c285dee75c307f0fb66196ea3,"Finalize color at the vertex level, rather than the fragment level, for fill","{'added': [(29, '#INSERT finalize_color.glsl'), (33, '    vec3 unit_normal = v_unit_normal[1];'), (34, ''), (43, '        color = finalize_color(v_color[i], points[i], unit_normal);')], 'deleted': [(17, 'out vec3 point;'), (18, 'out vec3 unit_normal;'), (42, '        color = v_color[i];'), (43, '        point = points[i];'), (64, '    unit_normal = v_unit_normal[1];'), (65, '')]}",,
manimlib/scene/scene.py,manimlib/scene/scene.py,e5eed7c36a23c0e23f5c4a44ab859a1c54d0c256,acb4b1c6b3e12422c94ffc31a1fb61594543e9ac,Batch render groups by Mobject type,"{'added': [(386, '        Rendering can be more efficient when mobjects of the'), (387, '        same type are grouped together, so this function creates'), (388, '        Groups of all clusters of adjacent Mobjects in the scene'), (390, '        batches = batch_by_property(self.mobjects, lambda m: str(type(m)))')], 'deleted': [(386, '        Rendering is more efficient when VMobjects are grouped'), (387, '        together, so this function creates VGroups of all'), (388, ""        clusters of adjacent VMobjects in the scene's mobject""), (389, '        list.'), (391, '        batches = batch_by_property('), (392, '            self.mobjects,'), (393, '            lambda m: ""|"".join(['), (394, '                str(m.shader_dtype.names),'), (395, '                str(m.is_fixed_in_frame()),'), (396, '                str(m.depth_test),'), (397, '                str(m.is_changing()),'), (398, '            ])'), (399, '        )')]}",227,227
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b9d6dcd67d5c59b2f6a9ee7e82a8d0f2e9f87a00,e5eed7c36a23c0e23f5c4a44ab859a1c54d0c256,Save _has_fill and _has_stroke to prevent unnecessary recalculation,"{'added': [(114, '        self._has_fill = False'), (115, '        self._has_stroke = False'), (139, '    def note_changed_fill(self) -> Self:'), (140, '        for submob in self.get_family():'), (141, '            submob._has_fill = submob.has_fill()'), (142, '        return self'), (143, ''), (144, '    def note_changed_stroke(self) -> Self:'), (145, '        for submob in self.get_family():'), (146, '            submob._has_stroke = submob.has_stroke()'), (147, '        return self'), (148, ''), (179, '            if name == ""fill_rgba"":'), (180, '                self.note_changed_fill()'), (181, '            elif name == ""stroke_rgba"":'), (182, '                self.note_changed_stroke()'), (196, '        self.note_changed_fill()'), (222, ''), (223, '        self.note_changed_stroke()'), (277, '        self.note_changed_fill()'), (278, '        self.note_changed_stroke()'), (402, '        data = self.data if len(self.data) > 0 else self._data_defaults'), (403, ""        return any(data['stroke_width']) and any(data['stroke_rgba'][:, 3])""), (406, '        data = self.data if len(self.data) > 0 else self._data_defaults'), (407, ""        return any(data['fill_rgba'][:, 3])""), (997, ''), (998, '        self._has_stroke = mobject1._has_stroke or mobject2._has_stroke'), (999, '        self._has_fill = mobject1._has_fill or mobject2._has_fill'), (1000, ''), (1232, '        self.note_changed_fill()'), (1233, '        self.note_changed_stroke()'), (1323, '            has_fill = submob._has_fill'), (1324, '            has_stroke = submob._has_stroke')], 'deleted': [(381, ""        return any(self.data['stroke_width']) and any(self.data['stroke_rgba'][:, 3])""), (384, ""        return any(self.data['fill_rgba'][:, 3])""), (1294, '            has_fill = submob.has_fill()'), (1295, '            has_stroke = submob.has_stroke()')]}",304,304
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bd89056c8e78297645bc253e4ff3a87dce3da133,b9d6dcd67d5c59b2f6a9ee7e82a8d0f2e9f87a00,Only recalculate outer_vert_indices when points are resized,"{'added': [(1056, '    def resize_points('), (1057, '        self,'), (1058, '        new_length: int,'), (1059, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1060, '    ) -> Self:'), (1061, '        super().resize_points(new_length, resize_func)'), (1062, ''), (1063, '        n_curves = self.get_num_curves()'), (1064, '        # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1065, '        self.outer_vert_indices = (np.arange(1, 3 * n_curves + 1) * 2) // 3'), (1066, '        return self'), (1067, '')], 'deleted': [(1060, '        n_curves = self.get_num_curves()'), (1061, '        if len(self.outer_vert_indices) != 3 * n_curves:'), (1062, '            self.outer_vert_indices = (np.arange(1, 3 * n_curves + 1) * 2) // 3')]}",304,304
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,63dbe3b23fa1c7ed0aab85804caf3d3214a1287d,bd89056c8e78297645bc253e4ff3a87dce3da133,More direct check for family_members_with_points,"{'added': [(379, '        return [m for m in self.family if len(m.data) > 0]')], 'deleted': [(379, '        return [m for m in self.get_family() if m.has_points()]')]}",530,530
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,3c0d682efc39dfa6be4920a5cfa6fe8786835f24,7476740980a1046d8b255a9d165917d57ac6076e,Change clicking behavior in InteractiveScene,"{'added': [(32, 'from typing import TYPE_CHECKING'), (33, ''), (34, 'if TYPE_CHECKING:'), (35, '    from manimlib.typing import Vect3'), (36, ''), (76, '        radius=0.05,'), (281, '        radius = float(self.corner_dot_config[""radius""])'), (397, '                    if self.selection_rectangle.get_arc_length() < 1e-2:'), (398, '                        break'), (399, '            self.toggle_from_selection(*additions)'), (527, '    def handle_grabbing(self, point: Vect3):'), (536, '    def handle_resizing(self, point: Vect3):'), (556, '    def handle_sweeping_selection(self, point: Vect3):'), (558, '            point,'), (559, '            search_set=self.get_selection_search_set(),'), (565, '    def choose_color(self, point: Vect3):'), (578, '    def on_mouse_motion(self, point: Vect3, d_point: Vect3) -> None:'), (580, '        self.crosshair.move_to(self.frame.to_fixed_frame_point(point))'), (588, '    def on_mouse_drag('), (589, '        self,'), (590, '        point: Vect3,'), (591, '        d_point: Vect3,'), (592, '        buttons: int,'), (593, '        modifiers: int'), (594, '    ) -> None:'), (595, '        super().on_mouse_drag(point, d_point, buttons, modifiers)'), (596, '        self.crosshair.move_to(self.frame.to_fixed_frame_point(point))'), (597, ''), (598, '    def on_mouse_release(self, point: Vect3, button: int, mods: int) -> None:')], 'deleted': [(71, '        radius=0.025,'), (276, '        radius = self.corner_dot_config[""radius""]'), (392, '            self.add_to_selection(*additions)'), (512, '            # self.remove(self.crosshair)'), (521, '    def handle_grabbing(self, point: np.ndarray):'), (530, '    def handle_resizing(self, point: np.ndarray):'), (550, '    def handle_sweeping_selection(self, point: np.ndarray):'), (552, '            point, search_set=self.get_selection_search_set(),'), (558, '    def choose_color(self, point: np.ndarray):'), (571, '    def on_mouse_motion(self, point: np.ndarray, d_point: np.ndarray) -> None:'), (573, '        ff_point = self.frame.to_fixed_frame_point(point)'), (574, '        self.crosshair.move_to(ff_point)'), (582, '    def on_mouse_release(self, point: np.ndarray, button: int, mods: int) -> None:'), (586, '            return'), (587, '        mobject = self.point_to_mobject('), (588, '            point,'), (589, '            search_set=self.get_selection_search_set(),'), (590, '            buff=1e-4,'), (591, '        )'), (592, '        if mobject is not None:'), (593, '            self.toggle_from_selection(mobject)')]}",152,152
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d0c6d4d38607895182b8441594bf23d25bd8eedd,3c0d682efc39dfa6be4920a5cfa6fe8786835f24,Accept list of Vect3 as an input to Mobject.set_points,"{'added': [(205, '    def set_points(self, points: Vect3Array | list[Vect3]) -> Self:')], 'deleted': [(205, '    def set_points(self, points: Vect3Array) -> Self:')]}",529,529
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,b9d37a9f7ef02888c67e50f22d22b7ee9005330d,d0c6d4d38607895182b8441594bf23d25bd8eedd,Add copy_frame_anim_call,"{'added': [(11, 'from manimlib.constants import FRAME_WIDTH, FRAME_HEIGHT, SMALL_BUFF'), (13, 'from manimlib.constants import DEGREES'), (460, '    # Key actions'), (499, '        elif char == PAN_3D_KEY and modifiers == COMMAND_MODIFIER:'), (500, '            self.copy_frame_anim_call()'), (608, ''), (609, '    # Copying code to recreate state'), (610, '    def copy_frame_anim_call(self):'), (611, '        frame = self.frame'), (612, '        center = frame.get_center()'), (613, '        height = frame.get_height()'), (614, '        angles = frame.get_euler_angles()'), (615, ''), (616, '        call = f""self.frame.animate.reorient""'), (617, '        call += str(tuple((angles / DEGREES).astype(int)))'), (618, '        if any(center != 0):'), (619, '            call += f"".move_to({list(np.round(center, 2))})""'), (620, '        if height != FRAME_HEIGHT:'), (621, '            call += "".set_height({:.2f})"".format(height)'), (622, '        pyperclip.copy(call)')], 'deleted': [(11, 'from manimlib.constants import FRAME_WIDTH, SMALL_BUFF')]}",157,157
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,9cadfa181882eb116d74f2dec0e622e0109de6da,b9d37a9f7ef02888c67e50f22d22b7ee9005330d,"Make it so that copying a mobject will copy its name, if applicable","{'added': [(6, 'from IPython.core.getipython import get_ipython'), (30, 'from manimlib.scene.scene import PAN_3D_KEY'), (347, '        names = []'), (348, '        shell = get_ipython()'), (349, '        for mob in self.selection:'), (350, '            name = str(id(mob))'), (351, '            if shell is None:'), (352, '                continue'), (353, '            for key, value in shell.user_ns.items():'), (354, '                if mob is value:'), (355, '                    name = key'), (356, '            names.append(name)'), (357, '        pyperclip.copy("", "".join(names))')], 'deleted': [(237, '    # def increment_time(self, dt: float) -> None:'), (238, '    #     super().increment_time(dt)'), (239, ''), (348, '        ids = map(id, self.selection)'), (349, '        pyperclip.copy("","".join(map(str, ids)))')]}",161,161
manimlib/window.py,manimlib/window.py,be602930c3f94cbc374a519cc93862522cfe4206,9cadfa181882eb116d74f2dec0e622e0109de6da,Check that scene has a camera frame in pixel_to_point_coords,"{'added': [(81, '        if not hasattr(self.scene, ""frame""):'), (82, '            return np.zeros(3)'), (83, '')], 'deleted': []}",19,19
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,0e60b124ebbbb4b9badfcc154b7889830540f57c,d263fa23faa80882b2b6d8abef8db00c6fd70044,Only compute const_data_keys for unlocked data,"{'added': [(1815, '            sm.const_data_keys = set('), (1816, '                name for name in names'), (1817, '                if name not in sm.locked_data_keys'), (1818, '                if all('), (1821, '                )'), (1822, '            )')], 'deleted': [(1815, '            sm.const_data_keys = set(filter('), (1816, '                lambda name: all('), (1819, '                ),'), (1820, '                names'), (1821, '            ))')]}",533,533
manimlib/animation/fading.py,manimlib/animation/fading.py,c4d698a169cabd883f761e854600b07505c43471,0e60b124ebbbb4b9badfcc154b7889830540f57c,Have Transform only copy target_mobject if it must,"{'added': [(39, '        return self.mobject.copy()')], 'deleted': [(39, '        return self.mobject')]}",22,22
manimlib/animation/growing.py,manimlib/animation/growing.py,c4d698a169cabd883f761e854600b07505c43471,0e60b124ebbbb4b9badfcc154b7889830540f57c,Have Transform only copy target_mobject if it must,"{'added': [(29, '        return self.mobject.copy()')], 'deleted': [(29, '        return self.mobject')]}",7,7
manimlib/animation/transform.py,manimlib/animation/transform.py,c4d698a169cabd883f761e854600b07505c43471,0e60b124ebbbb4b9badfcc154b7889830540f57c,Have Transform only copy target_mobject if it must,"{'added': [(57, ''), (58, '        if self.mobject.is_aligned_with(self.target_mobject):'), (59, '            self.target_copy = self.target_mobject'), (60, '        else:'), (61, '            # Use a copy of target_mobject for the align_data_and_family'), (62, '            # call so that the actual target_mobject stays'), (63, '            # preserved, since calling align_data will potentially'), (64, '            # change the structure of both arguments'), (65, '            self.target_copy = self.target_mobject.copy()'), (66, '            self.mobject.align_data_and_family(self.target_copy)')], 'deleted': [(57, '        # Use a copy of target_mobject for the align_data_and_family'), (58, '        # call so that the actual target_mobject stays'), (59, '        # preserved, since calling allign_data will potentially'), (60, '        # change the structure of both arguments'), (61, '        self.target_copy = self.target_mobject.copy()'), (62, '        self.mobject.align_data_and_family(self.target_copy)')]}",54,54
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c4d698a169cabd883f761e854600b07505c43471,0e60b124ebbbb4b9badfcc154b7889830540f57c,Have Transform only copy target_mobject if it must,"{'added': [(1675, '    def is_aligned_with(self, mobject: Mobject) -> bool:'), (1676, '        if len(self.data) != len(mobject.data):'), (1677, '            return False'), (1678, '        if len(self.submobjects) != len(mobject.submobjects):'), (1679, '            return False'), (1680, '        return all('), (1681, '            sm1.is_aligned_with(sm2)'), (1682, '            for sm1, sm2 in zip(self.submobjects, mobject.submobjects)'), (1683, '        )'), (1684, '')], 'deleted': []}",537,537
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e36719a21bb1cd932e7fbe2fc74d249342204d41,c4d698a169cabd883f761e854600b07505c43471,Use resize_points in Mobject.set_data,"{'added': [(185, '        self.resize_points(len(data))'), (186, '        self.data[:] = data')], 'deleted': [(185, '        self.data = data.copy()')]}",537,537
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ad2e7144b49f05964297aaea464ad6e727d101f4,e36719a21bb1cd932e7fbe2fc74d249342204d41,"Lock uniform keys, the same way data keys are","{'added': [(100, '        self.locked_uniform_keys: set[str] = set()'), (1775, '        keys = [k for k in self.uniforms if k not in self.locked_uniform_keys]'), (1776, '        for key in keys:'), (1810, '            return self'), (1814, '    def lock_uniforms(self, keys: Iterable[str]) -> Self:'), (1815, '        if self.has_updaters:'), (1816, '            return self'), (1817, '        self.locked_uniform_keys = set(keys)'), (1818, '        return self'), (1819, ''), (1829, '            sm.lock_data('), (1830, '                key for key in sm.data.dtype.names'), (1831, '                if arrays_match(sm1.data[key], sm2.data[key])'), (1832, '            )'), (1833, '            sm.lock_uniforms('), (1834, '                key for key in self.uniforms'), (1835, '                if all(listify(mobject1.uniforms.get(key, 0) == mobject2.uniforms.get(key, 0)))'), (1836, '            )'), (1838, '                key for key in sm.data.dtype.names'), (1839, '                if key not in sm.locked_data_keys'), (1841, '                    array_is_constant(mob.data[key])'), (1852, '            mob.locked_uniform_keys = set()')], 'deleted': [(1774, '        for key in self.uniforms:'), (1808, '            return'), (1821, '            names = sm.data.dtype.names'), (1822, '            sm.lock_data(filter('), (1823, '                lambda name: arrays_match(sm1.data[name], sm2.data[name]),'), (1824, '                names,'), (1825, '            ))'), (1827, '                name for name in names'), (1828, '                if name not in sm.locked_data_keys'), (1830, '                    array_is_constant(mob.data[name])')]}",545,545
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1dcc678b2feaae04939376fadd0593aceb19f663,ad2e7144b49f05964297aaea464ad6e727d101f4,Make sure animating a VGroup uniforms will have an effect,"{'added': [(1001, '        if self._has_fill and not self._use_winding_fill:'), (1312, '    def get_uniforms(self):'), (1313, '        # TODO, account for submob uniforms separately?'), (1314, '        self.uniforms.update(self.family_members_with_points()[0].uniforms)'), (1315, '        return self.uniforms'), (1316, '')], 'deleted': [(1001, '        if self.has_fill() and not self._use_winding_fill:'), (1362, '        # TODO, account for submob uniforms separately?'), (1363, '        self.uniforms.update(family[0].uniforms)')]}",305,305
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,7f940fbee4729d50f8a8656759105c88d551b34d,1dcc678b2feaae04939376fadd0593aceb19f663,Change how ShaderWrapper uniforms are handled,"{'added': [(1970, '        self.shader_wrapper.bind_to_mobject_uniforms(self.get_uniforms())'), (2007, '            shader_wrapper.update_program_uniforms(camera_uniforms)')], 'deleted': [(1970, '        self.shader_wrapper.update_program_uniforms(self.get_uniforms())'), (2007, '            shader_wrapper.depth_test = self.depth_test'), (2008, '            shader_wrapper.update_program_uniforms(self.get_uniforms())'), (2009, '            shader_wrapper.update_program_uniforms(camera_uniforms, universal=True)')]}",545,545
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7f940fbee4729d50f8a8656759105c88d551b34d,1dcc678b2feaae04939376fadd0593aceb19f663,Change how ShaderWrapper uniforms are handled,"{'added': [(1287, '            mobject_uniforms=self.uniforms,'), (1294, '            mobject_uniforms=self.uniforms,'), (1323, '        fill_family = (sm for sm in family if sm._has_fill)'), (1324, '        stroke_family = (sm for sm in family if sm._has_stroke)'), (1325, ''), (1326, '        # Build up fill data lists'), (1330, '        for submob in fill_family:'), (1332, '            if submob._use_winding_fill:'), (1336, '            else:'), (1339, '            if (not submob._has_stroke) or submob.stroke_behind:'), (1341, '                submob.get_joint_products()'), (1350, '        # Build up stroke data lists'), (1351, '        stroke_datas = []'), (1352, '        back_stroke_datas = []'), (1353, '        for submob in stroke_family:'), (1354, '            submob.get_joint_products()'), (1355, '            indices = submob.get_outer_vert_indices()'), (1356, '            if submob.stroke_behind:'), (1357, '                back_stroke_datas.append(submob.data[stroke_names][indices])'), (1358, '            else:'), (1359, '                stroke_datas.append(submob.data[stroke_names][indices])'), (1360, ''), (1366, '        for sw in shader_wrappers:'), (1367, '            sw.bind_to_mobject_uniforms(family[0].get_uniforms())'), (1368, '            sw.depth_test = family[0].depth_test'), (1376, '        if vmobjects:'), (1377, '            self.uniforms.update(vmobjects[0].uniforms)')], 'deleted': [(1287, '            uniforms=self.uniforms,'), (1294, '            uniforms=self.uniforms,'), (1312, '    def get_uniforms(self):'), (1313, '        # TODO, account for submob uniforms separately?'), (1314, '        self.uniforms.update(self.family_members_with_points()[0].uniforms)'), (1315, '        return self.uniforms'), (1316, ''), (1328, '        # Build up data lists'), (1332, '        stroke_datas = []'), (1333, '        back_stroke_datas = []'), (1334, '        for submob in family:'), (1335, '            submob.get_joint_products()'), (1337, '            has_fill = submob._has_fill'), (1338, '            has_stroke = submob._has_stroke'), (1339, '            back_stroke = has_stroke and submob.stroke_behind'), (1340, '            front_stroke = has_stroke and not submob.stroke_behind'), (1341, '            if back_stroke:'), (1342, '                back_stroke_datas.append(submob.data[stroke_names][indices])'), (1343, '            if front_stroke:'), (1344, '                stroke_datas.append(submob.data[stroke_names][indices])'), (1345, '            if has_fill and submob._use_winding_fill:'), (1349, '            if has_fill and not submob._use_winding_fill:'), (1352, '            if has_fill and not front_stroke:')]}",305,305
manimlib/scene/scene.py,manimlib/scene/scene.py,7f940fbee4729d50f8a8656759105c88d551b34d,1dcc678b2feaae04939376fadd0593aceb19f663,Change how ShaderWrapper uniforms are handled,"{'added': [(390, '        batches = batch_by_property('), (391, '            self.mobjects,'), (392, '            lambda m: str(type(m)) + str(m.get_uniforms())'), (393, '        )')], 'deleted': [(390, '        batches = batch_by_property(self.mobjects, lambda m: str(type(m)))')]}",227,227
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,7f940fbee4729d50f8a8656759105c88d551b34d,1dcc678b2feaae04939376fadd0593aceb19f663,Change how ShaderWrapper uniforms are handled,"{'added': [(40, '        mobject_uniforms: Optional[UniformDict] = None,  # A dictionary mapping names of uniform variables'), (53, '        self.program_uniform_mirror: UniformDict = dict()'), (54, '        self.bind_to_mobject_uniforms(mobject_uniforms)'), (55, ''), (95, '    def bind_to_mobject_uniforms(self, mobject_uniforms: UniformDict):'), (96, '        self.mobject_uniforms = mobject_uniforms'), (97, ''), (104, '                self.mobject_uniforms[key] == shader_wrapper.mobject_uniforms[key]'), (105, '                for key in self.mobject_uniforms'), (136, '            self.mobject_uniforms,'), (162, '        if ""clip_plane"" not in self.mobject_uniforms:'), (164, '        return any(self.mobject_uniforms[""clip_plane""])'), (229, '    def update_program_uniforms(self, camera_uniforms: UniformDict):'), (232, '        for name, value in (*self.mobject_uniforms.items(), *camera_uniforms.items()):'), (237, '            if name in camera_uniforms and self.program_uniform_mirror.get(name, None) == value:'), (240, '            self.program_uniform_mirror[name] = value')], 'deleted': [(40, '        uniforms: Optional[UniformDict] = None,  # A dictionary mapping names of uniform variables'), (50, '        self.uniforms: UniformDict = dict()'), (56, '        self.update_program_uniforms(uniforms or dict())'), (100, '                self.uniforms[key] == shader_wrapper.uniforms[key]'), (101, '                for key in self.uniforms'), (132, '            self.uniforms,'), (158, '        if ""clip_plane"" not in self.uniforms:'), (160, '        return any(self.uniforms[""clip_plane""])'), (225, '    def update_program_uniforms(self, uniforms: UniformDict, universal: bool = False):'), (228, '        for name, value in uniforms.items():'), (233, '            if universal and self.uniforms.get(name, None) == value:'), (236, '            self.uniforms[name] = value')]}",64,64
manimlib/animation/transform.py,manimlib/animation/transform.py,009f9dd18b6cf2ae408e27adf56e74de6162eabc,7f940fbee4729d50f8a8656759105c88d551b34d,Don't call become at the end of Transform,"{'added': [], 'deleted': [(77, '        if self.target_mobject is not None and self.rate_func(1) == 1:'), (78, '            self.mobject.become(self.target_mobject)')]}",52,52
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,4629e08769a79cef9d603485059d7c1eb30f581e,009f9dd18b6cf2ae408e27adf56e74de6162eabc,Ensure joint_products are computed at both the start and end of an animation,"{'added': [(1265, '        for submob in self.get_family(recurse):'), (1266, '            submob.get_joint_products(refresh=True)'), (1267, '            if not submob._use_winding_fill:'), (1268, '                submob.get_triangulation()')], 'deleted': [(1265, '        if is_animating:'), (1266, '            for submob in self.get_family(recurse):'), (1267, '                submob.get_joint_products(refresh=True)'), (1268, '                if not submob._use_winding_fill:'), (1269, '                    submob.get_triangulation()')]}",304,304
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3d0fe27c553f566fe58b5c9daf4e81483e01f9ab,4629e08769a79cef9d603485059d7c1eb30f581e,Simplify VMobject.set_rgba_array,"{'added': [(169, '        name: str = ""stroke_rgba"",'), (172, '        super().set_rgba_array(rgba_array, name, recurse)'), (173, '        self.note_changed_fill()'), (174, '        self.note_changed_stroke()')], 'deleted': [(169, '        name: str | None = None,'), (172, '        if name is None:'), (173, '            names = [""fill_rgba"", ""stroke_rgba""]'), (174, '        else:'), (175, '            names = [name]'), (176, ''), (177, '        for name in names:'), (178, '            super().set_rgba_array(rgba_array, name, recurse)'), (179, '            if name == ""fill_rgba"":'), (180, '                self.note_changed_fill()'), (181, '            elif name == ""stroke_rgba"":'), (182, '                self.note_changed_stroke()')]}",300,300
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,88959df7a8eda53c36f3c815bb3513c9d0eada46,3d0fe27c553f566fe58b5c9daf4e81483e01f9ab,Use set_color instead of set_rgba_array in vector_field,"{'added': [(16, 'from manimlib.utils.color import rgb_to_color'), (177, '        vect.set_color('), (178, '            rgb_to_color(self.value_to_rgb(norm)),'), (179, '            opacity=self.opacity,'), (180, '        )')], 'deleted': [(176, '        vect.set_rgba_array([[*self.value_to_rgb(norm), self.opacity]])')]}",37,37
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,d10745a3791972341e970ab09328ba84a116309b,88959df7a8eda53c36f3c815bb3513c9d0eada46,Have CameraFrame.get_view_matrix and and CameraFrame.get_implied_camera_location use _data_has_changed instead of a refresh arg,"{'added': [(87, '        if self._data_has_changed:'), (167, '    @Mobject.affects_data'), (172, '    @Mobject.affects_data'), (202, '    def get_implied_camera_location(self) -> np.ndarray:'), (203, '        if self._data_has_changed:')], 'deleted': [(44, '    def note_changed_data(self, recurse_up: bool = True):'), (45, '        super().note_changed_data(recurse_up)'), (46, '        self.get_view_matrix(refresh=True)'), (47, '        self.get_implied_camera_location(refresh=True)'), (48, ''), (92, '        if refresh:'), (205, '    def get_implied_camera_location(self, refresh=False) -> np.ndarray:'), (206, '        if refresh:')]}",44,44
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c4777015fca6a22d34f3f79f254170748e5774b3,d10745a3791972341e970ab09328ba84a116309b,FIx Mobject.replace_shader_code,"{'added': [(108, '        self.shader_code_replacements: dict[str, str] = dict()'), (1899, '    @affects_data'), (1901, '        self.shader_code_replacements[old] = new'), (1902, '        self._shaders_initialized = False'), (1903, '        for mob in self.get_ancestors():'), (1904, '            mob._shaders_initialized = False'), (1973, '        for old, new in self.shader_code_replacements.items():'), (1974, '            self.shader_wrapper.replace_code(old, new)')], 'deleted': [(1899, '        # TODO, will this work with VMobject structure, given'), (1900, '        # that it does not simpler return shader_wrappers of'), (1901, '        # family?'), (1902, '        for wrapper in self.get_shader_wrapper_list():'), (1903, '            wrapper.replace_code(old, new)')]}",546,546
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c4777015fca6a22d34f3f79f254170748e5774b3,d10745a3791972341e970ab09328ba84a116309b,FIx Mobject.replace_shader_code,"{'added': [(1295, '        for sw in self.shader_wrappers:'), (1296, '            rep = self.family_members_with_points()[0]'), (1297, '            for old, new in rep.shader_code_replacements.items():'), (1298, '                sw.replace_code(old, new)'), (1362, '            rep = family[0]  # Representative family member'), (1363, '            sw.bind_to_mobject_uniforms(rep.get_uniforms())'), (1364, '            sw.depth_test = rep.depth_test')], 'deleted': [(1358, '            sw.bind_to_mobject_uniforms(family[0].get_uniforms())'), (1359, '            sw.depth_test = family[0].depth_test')]}",302,302
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,ee08c552bfdc3fd5da9a3bcc121c7b15cf245e9c,c4777015fca6a22d34f3f79f254170748e5774b3,Remove ShaderWrapper.get_program_id,"{'added': [(131, '        program_id = hash("""".join('), (132, '            self.program_code[f""{name}_shader""] or """"'), (133, '            for name in (""vertex"", ""geometry"", ""fragment"")'), (134, '        ))'), (136, '            program_id,'), (147, '        for name in code_map:')], 'deleted': [(129, '    def get_program_id(self) -> int:'), (130, '        return self.program_id'), (131, ''), (135, '            self.program_id,'), (142, '        self.program_id = self.create_program_id()'), (145, '    def create_program_id(self) -> int:'), (146, '        return hash("""".join(('), (147, '            self.program_code[f""{name}_shader""] or """"'), (148, '            for name in (""vertex"", ""geometry"", ""fragment"")'), (149, '        )))'), (150, ''), (153, '        for (name, code) in code_map.items():')]}",62,62
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,772ea792d02f7f93188df6aabff99c9f1642a1dc,ee08c552bfdc3fd5da9a3bcc121c7b15cf245e9c,Add check for null VMobject in shader init,"{'added': [(1296, '            family = self.family_members_with_points()'), (1297, '            rep = family[0] if family else self')], 'deleted': [(1296, '            rep = self.family_members_with_points()[0]')]}",303,303
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,ac3db9b636f7c33aecb955a6eeaece9f76ad2b63,772ea792d02f7f93188df6aabff99c9f1642a1dc,Add set_program_uniform function,"{'added': [(18, 'from manimlib.utils.shaders import set_program_uniform'), (228, '            set_program_uniform(self.program, name, value)')], 'deleted': [(227, '            if name not in self.program:'), (228, '                continue'), (229, '            if isinstance(value, np.ndarray) and value.ndim > 0:'), (230, '                value = tuple(value)'), (231, '            if name in camera_uniforms and self.program_uniform_mirror.get(name, None) == value:'), (232, '                continue'), (233, '            self.program[name].value = value'), (234, '            self.program_uniform_mirror[name] = value')]}",57,57
manimlib/utils/shaders.py,manimlib/utils/shaders.py,ac3db9b636f7c33aecb955a6eeaece9f76ad2b63,772ea792d02f7f93188df6aabff99c9f1642a1dc,Add set_program_uniform function,"{'added': [(19, '    from manimlib.typing import UniformDict'), (25, 'PROGRAM_UNIFORM_MIRRORS: dict[int, dict[str, float | tuple]] = dict()'), (67, 'def set_program_uniform('), (68, '    program: moderngl.Program,'), (69, '    name: str,'), (70, '    value: float | tuple | np.ndarray'), (71, ') -> bool:'), (72, '    """"""'), (73, '    Sets a program uniform, and also keeps track of a dictionary'), (74, '    of previously set uniforms for that program so that it'), (75, ""    doesn't needlessly reset it, requiring an exchange with gpu""), (76, '    memory, if it sees the same value again.'), (77, ''), (78, '    Returns True if changed the program, False if it left it as is.'), (79, '    """"""'), (80, '    if name not in program:'), (81, '        return False'), (82, '    pid = id(program)'), (83, '    if pid not in PROGRAM_UNIFORM_MIRRORS:'), (84, '        PROGRAM_UNIFORM_MIRRORS[pid] = dict()'), (85, '    uniform_mirror = PROGRAM_UNIFORM_MIRRORS[pid]'), (86, '    if isinstance(value, np.ndarray) and value.ndim > 0:'), (87, '        value = tuple(value)'), (88, '    if uniform_mirror.get(name, None) == value:'), (89, '        return False'), (90, '    uniform_mirror[name] = value'), (91, '    program[name].value = value'), (92, '    return True'), (93, ''), (94, '')], 'deleted': [(12, 'from manimlib.utils.customization import get_customization')]}",19,19
manimlib/utils/shaders.py,manimlib/utils/shaders.py,7c561d3757bc9b4edde8474f3682ad91dc2a10a9,ac3db9b636f7c33aecb955a6eeaece9f76ad2b63,Edit set_program_uniform,"{'added': [(80, ''), (85, ''), (86, '    if type(value) is np.ndarray and value.ndim > 0:'), (90, ''), (91, '    try:'), (92, '        program[name].value = value'), (93, '    except KeyError:'), (94, '        return False')], 'deleted': [(80, '    if name not in program:'), (81, '        return False'), (86, '    if isinstance(value, np.ndarray) and value.ndim > 0:'), (91, '    program[name].value = value')]}",19,19
manimlib/config.py,manimlib/config.py,b25f022859e54de027839b511d2242bb3aa6cf8e,7c561d3757bc9b4edde8474f3682ad91dc2a10a9,Make it an option (default to false) to prerun a scene to calculate its number of frames,"{'added': [(163, '        parser.add_argument('), (164, '            ""--prerun"",'), (165, '            action=""store_true"",'), (166, '            help=""Calculate total framecount, to display in a progress bar, by doing "" + \\'), (167, '                 ""an initial run of the scene which skips animations.""'), (168, '        )'), (498, '        ""prerun"": args.prerun,')], 'deleted': []}",71,71
manimlib/extract_scene.py,manimlib/extract_scene.py,b25f022859e54de027839b511d2242bb3aa6cf8e,7c561d3757bc9b4edde8474f3682ad91dc2a10a9,Make it an option (default to false) to prerun a scene to calculate its number of frames,"{'added': [(64, 'def compute_total_frames(scene_class, scene_config, config):'), (71, '    if not config[""prerun""]:'), (72, '        return -1'), (95, '                    fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config, config)'), (114, '            fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config, config)')], 'deleted': [(64, 'def compute_total_frames(scene_class, scene_config):'), (93, '                    fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config)'), (112, '            fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config)')]}",35,35
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,b25f022859e54de027839b511d2242bb3aa6cf8e,7c561d3757bc9b4edde8474f3682ad91dc2a10a9,Make it an option (default to false) to prerun a scene to calculate its number of frames,"{'added': [(49, '        progress_description_len: int | None = None,'), (65, '        self.progress_description_len = progress_description_len or \\'), (66, '            40 if total_frames > 0 else 80'), (282, '        if not self.quiet:')], 'deleted': [(49, '        progress_description_len: int = 40,'), (65, '        self.progress_description_len = progress_description_len'), (281, '        if self.total_frames > 0 and not self.quiet:'), (284, '                # bar_format=""{l_bar}{bar}|{n_fmt}/{total_fmt}"",')]}",93,93
manimlib/extract_scene.py,manimlib/extract_scene.py,bc107787cc490eaca545e1a9876022272e209931,b25f022859e54de027839b511d2242bb3aa6cf8e,Clean up get_scenes_to_render,"{'added': [(64, 'def compute_total_frames(scene_class, scene_config):'), (82, 'def scene_from_class(scene_class, scene_config, config):'), (83, '    fw_config = scene_config[""file_writer_config""]'), (84, '    if fw_config[""write_to_movie""] and config[""prerun""]:'), (85, '        fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config)'), (86, '    return scene_class(**scene_config)'), (87, ''), (88, ''), (89, 'def get_scenes_to_render(all_scene_classes, scene_config, config):'), (91, '        return [sc(**scene_config) for sc in all_scene_classes]'), (92, ''), (93, '    names_to_classes = {sc.__name__ : sc for sc in all_scene_classes}'), (94, '    scene_names = config[""scene_names""]'), (95, ''), (96, '    for name in set.difference(set(scene_names), names_to_classes):'), (97, '        log.error(f""No scene named {name} found"")'), (98, '        scene_names.remove(name)'), (99, ''), (100, '    if scene_names:'), (101, '        classes_to_run = [names_to_classes[name] for name in scene_names]'), (102, '    elif len(all_scene_classes) == 1:'), (103, '        classes_to_run = [all_scene_classes[0]]'), (105, '        classes_to_run = prompt_user_for_choice(all_scene_classes)'), (106, ''), (107, '    return ['), (108, '        scene_from_class(scene_class, scene_config, config)'), (109, '        for scene_class in classes_to_run'), (110, '    ]')], 'deleted': [(64, 'def compute_total_frames(scene_class, scene_config, config):'), (71, '    if not config[""prerun""]:'), (72, '        return -1'), (84, 'def get_scenes_to_render(scene_classes, scene_config, config):'), (86, '        return [sc(**scene_config) for sc in scene_classes]'), (87, ''), (88, '    result = []'), (89, '    for scene_name in config[""scene_names""]:'), (90, '        found = False'), (91, '        for scene_class in scene_classes:'), (92, '            if scene_class.__name__ == scene_name:'), (93, '                fw_config = scene_config[""file_writer_config""]'), (94, '                if fw_config[""write_to_movie""]:'), (95, '                    fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config, config)'), (96, '                scene = scene_class(**scene_config)'), (97, '                result.append(scene)'), (98, '                found = True'), (99, '                break'), (100, '        if not found and (scene_name != """"):'), (101, '            log.error(f""No scene named {scene_name} found"")'), (102, '    if result:'), (103, '        return result'), (104, ''), (105, '    # another case'), (106, '    result=[]'), (107, '    if len(scene_classes) == 1:'), (108, '        scene_classes = [scene_classes[0]]'), (110, '        scene_classes = prompt_user_for_choice(scene_classes)'), (111, '    for scene_class in scene_classes:'), (112, '        fw_config = scene_config[""file_writer_config""]'), (113, '        if fw_config[""write_to_movie""]:'), (114, '            fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config, config)'), (115, '        scene = scene_class(**scene_config)'), (116, '        result.append(scene)'), (117, '    return result')]}",33,33
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,12dc124d72c264a159599a6531a7d3cdca080363,bc107787cc490eaca545e1a9876022272e209931,Revert to simple progress_description_len default,"{'added': [(49, '        progress_description_len: int = 40,'), (65, '        self.progress_description_len = progress_description_len')], 'deleted': [(49, '        progress_description_len: int | None = None,'), (65, '        self.progress_description_len = progress_description_len or \\'), (66, '            40 if total_frames > 0 else 80')]}",91,91
manimlib/config.py,manimlib/config.py,e1bb360e0bfffbebb562fa6ca722d87e16c5b643,12dc124d72c264a159599a6531a7d3cdca080363,Add CLI args for setting video codec and pixel forma,"{'added': [(96, '        parser.add_argument('), (97, '            ""--vcodec"",'), (98, '            help=""Video codec to use with ffmpeg"",'), (99, '        )'), (100, '        parser.add_argument('), (101, '            ""--pix_fmt"",'), (102, '            help=""Pixel format to use for the output of ffmpeg, defaults to `yuv420p`"",'), (103, '        )'), (403, '    result = {'), (419, '    if args.vcodec:'), (420, '        result[""video_codec""] = args.vcodec'), (421, '    elif args.transparent:'), (422, '        result[""video_codec""] = \'prores_ks\''), (423, '    elif args.gif:'), (424, '        result[""video_codec""] = \'\''), (425, ''), (426, '    if args.pix_fmt:'), (427, '        result[""pix_fmt""] = args.pix_fmt'), (428, ''), (429, '    return result'), (430, '')], 'deleted': [(395, '    return {')]}",75,75
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,e1bb360e0bfffbebb562fa6ca722d87e16c5b643,12dc124d72c264a159599a6531a7d3cdca080363,Add CLI args for setting video codec and pixel forma,"{'added': [(50, '        video_codec: str = ""libx264"",'), (51, '        pixel_format: str = ""yuvj422p"",'), (68, '        self.video_codec = video_codec'), (69, '        self.pixel_format = pixel_format'), (269, '        if self.video_codec:'), (270, ""            command += ['-vcodec', self.video_codec]""), (271, '        if self.pixel_format:'), (272, ""            command += ['-pix_fmt', self.pixel_format]""), (285, '    def use_fast_encoding(self):'), (286, '        self.video_codec = ""libx264rgb""'), (287, '        self.pixel_format = ""rgb32""'), (288, '')], 'deleted': [(265, '        if self.movie_file_extension == "".mov"":'), (266, '            # This is if the background of the exported'), (267, '            # video should be transparent.'), (268, '            command += ['), (269, ""                '-vcodec', 'prores_ks',""), (270, '            ]'), (271, '        elif self.movie_file_extension == "".gif"":'), (272, '            command += []'), (273, '        else:'), (274, '            command += ['), (275, ""                '-vcodec', 'libx264',""), (276, ""                '-pix_fmt', 'yuv420p',""), (277, '            ]')]}",92,92
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,a54d1eddfc30ddff93a25dec42dfc2c96693b663,e1bb360e0bfffbebb562fa6ca722d87e16c5b643,Set default pixel format to yuv420p,"{'added': [(51, '        pixel_format: str = ""yuv420p"",')], 'deleted': [(51, '        pixel_format: str = ""yuvj422p"",')]}",92,92
manimlib/scene/scene.py,manimlib/scene/scene.py,b8fe7b0172106a6475e5a12ca55f7255064c1ca3,a54d1eddfc30ddff93a25dec42dfc2c96693b663,Note that restoring state affects the mobject list,"{'added': [(729, '    @affects_mobject_list')], 'deleted': []}",227,227
manimlib/animation/transform_matching_parts.py,manimlib/animation/transform_matching_parts.py,fab917cceeaae088f28b53531ce2e3922d883008,b8fe7b0172106a6475e5a12ca55f7255064c1ca3,Improve TransformMatchingString to match longest common substrings by default,"{'added': [(4, 'from difflib import SequenceMatcher'), (12, 'from manimlib.mobject.svg.string_mobject import StringMobject'), (130, '        matched_pairs: Iterable[tuple[VMobject, VMobject]] = [],'), (133, '        matched_pairs = ['), (134, '            *matched_pairs,'), (135, '            *self.matching_blocks(source, target, matched_keys, key_map),'), (137, ''), (144, '    def matching_blocks('), (145, '        self,'), (146, '        source: StringMobject,'), (147, '        target: StringMobject,'), (148, '        matched_keys: Iterable[str],'), (149, '        key_map: dict[str, str]'), (150, '    ) -> list[tuple[VMobject, VMobject]]:'), (151, '        syms1 = source.get_symbol_substrings()'), (152, '        syms2 = target.get_symbol_substrings()'), (153, '        counts1 = list(map(source.substr_to_path_count, syms1))'), (154, '        counts2 = list(map(target.substr_to_path_count, syms2))'), (155, ''), (156, '        # Start with user specified matches'), (157, '        blocks = [(source[key], target[key]) for key in matched_keys]'), (158, '        blocks += [(source[key1], target[key2]) for key1, key2 in key_map.items()]'), (159, ''), (160, '        # Nullify any intersections with those matches in the two symbol lists'), (161, '        for sub_source, sub_target in blocks:'), (162, '            for i in range(len(syms1)):'), (163, '                if source[i] in sub_source.family_members_with_points():'), (164, '                    syms1[i] = ""Null1""'), (165, '            for j in range(len(syms2)):'), (166, '                if target[j] in sub_target.family_members_with_points():'), (167, '                    syms2[j] = ""Null2""'), (168, ''), (169, '        # Group together longest matching substrings'), (170, '        while True:'), (171, '            matcher = SequenceMatcher(None, syms1, syms2)'), (172, '            match = matcher.find_longest_match(0, len(syms1), 0, len(syms2))'), (173, '            if match.size == 0:'), (174, '                break'), (175, ''), (176, '            i1 = sum(counts1[:match.a])'), (177, '            i2 = sum(counts2[:match.b])'), (178, '            size = sum(counts1[match.a:match.a + match.size])'), (179, ''), (180, '            blocks.append((source[i1:i1 + size], target[i2:i2 + size]))'), (181, ''), (182, '            for i in range(match.size):'), (183, '                syms1[match.a + i] = ""Null1""'), (184, '                syms2[match.b + i] = ""Null2""'), (185, ''), (186, '        return blocks'), (187, '')], 'deleted': [(4, ''), (5, 'import numpy as np'), (10, 'from manimlib.animation.fading import FadeTransformPieces'), (13, 'from manimlib.mobject.mobject import Group'), (14, 'from manimlib.mobject.svg.string_mobject import StringMobject'), (15, 'from manimlib.mobject.types.vectorized_mobject import VGroup'), (134, '        matched_pairs: Iterable[tuple[Mobject, Mobject]] = [],'), (137, '        matched_pairs = list(matched_pairs) + ['), (138, '            *[(source[key], target[key]) for key in matched_keys],'), (139, '            *[(source[key1], target[key2]) for key1, key2 in key_map.items()],'), (140, '            *['), (141, '                (source[substr], target[substr])'), (142, '                for substr in ['), (143, '                    *source.get_specified_substrings(),'), (144, '                    *target.get_specified_substrings(),'), (145, '                    *source.get_symbol_substrings(),'), (146, '                    *target.get_symbol_substrings(),'), (147, '                ]'), (148, '            ]')]}",35,35
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,3bf9e40aba0b63fee94bb5a64d2c2ae8daee821e,fab917cceeaae088f28b53531ce2e3922d883008,Add more lenient tolerance to Mobject.has_same_shape_as,"{'added': [(742, '        return bool(np.isclose(points1, points2, atol=self.get_width() * 1e-2).all())')], 'deleted': [(742, '        return bool(np.isclose(points1, points2).all())')]}",546,546
example_scenes.py,example_scenes.py,e3b95276fa5835a168d649cbb5d2a6209718b640,3bf9e40aba0b63fee94bb5a64d2c2ae8daee821e,"Update TexTransformExample, and pull out TexIndexing","{'added': [(177, '        # Here, giving it a little path_arc makes each part rotate into'), (178, '        # their final positions, which feels appropriate for the idea of'), (179, '        # rearranging an equation'), (185, '                # will align the longest matching substrings.'), (186, '                # In this case, the substring ""^2 = C^2"" would'), (187, '                # trip it up'), (210, '        self.play(LaggedStartMap(FadeOut, lines, shift=2 * RIGHT))'), (212, '        # TransformMatchingShapes will try to line up all pieces of a'), (213, '        # source mobject with those of a target, regardless of the'), (214, '        # what Mobject type they are.'), (215, '        source = Text(""the morse code"", height=1)'), (216, '        target = Text(""here come dots"", height=1)'), (217, '        saved_source = source.copy()'), (219, '        self.play(Write(source))'), (221, '        kw = dict(run_time=3, path_arc=PI / 2)'), (222, '        self.play(TransformMatchingShapes(source, target, **kw))'), (223, '        self.wait()'), (224, '        self.play(TransformMatchingShapes(target, saved_source, **kw))'), (225, '        self.wait()'), (226, ''), (227, ''), (228, 'class TexIndexing(Scene):'), (229, '    def construct(self):'), (230, '        # You can index into Tex mobject (or other StringMobjects) by substrings'), (231, '        equation = Tex(R""e^{\\pi i} = -1"", font_size=144)'), (232, ''), (233, '        self.add(equation)'), (234, '        self.play(FlashAround(equation[""e""]))'), (235, '        self.wait()'), (236, '        self.play(Indicate(equation[R""\\pi""]))'), (237, '        self.wait()'), (238, '        self.play(TransformFromCopy('), (239, '            equation[R""e^{\\pi i}""].copy().set_opacity(0.5),'), (240, '            equation[""-1""],'), (241, '            path_arc=-PI / 2,'), (242, '            run_time=3'), (243, '        ))'), (244, '        self.play(FadeOut(equation))'), (245, ''), (246, '        # Or regular expressions'), (247, '        equation = Tex(""A^2 + B^2 = C^2"", font_size=144)'), (248, ''), (249, '        self.play(Write(equation))'), (250, '        for part in equation[re.compile(r""\\w\\^2"")]:'), (251, '            self.play(FlashAround(part))'), (252, '        self.wait()'), (253, '        self.play(FadeOut(equation))'), (260, '        equation = Tex(R""\\sum_{n = 1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}"", font_size=72)'), (272, '            isolate=[R""\\infty""],'), (273, '            font_size=72')], 'deleted': [(177, '        # Here, giving it a little path_arc makes each part sort of'), (178, '        # rotate into their final positions, which feels appropriate'), (179, '        # for the idea of rearranging an equation'), (185, '                # will try its best, but may not quite give the'), (186, '                # intended effect'), (210, '        # You can also index into Tex mobject (or other StringMobjects)'), (211, '        # by substrings and regular expressions'), (212, '        top_equation = lines[0]'), (213, '        low_equation = lines[3]'), (215, '        self.play(LaggedStartMap(FlashAround, low_equation[""C""], lag_ratio=0.5))'), (216, '        self.play(LaggedStartMap(FlashAround, low_equation[""B""], lag_ratio=0.5))'), (217, '        self.play(LaggedStartMap(FlashAround, top_equation[re.compile(r""\\w\\^2"")]))'), (218, '        self.play(Indicate(low_equation[R""\\sqrt""]))'), (220, '        self.play(LaggedStartMap(FadeOut, lines, shift=2 * RIGHT))'), (227, '        equation = Tex(R""\\sum_{n = 1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}"")'), (239, '            isolate=[R""\\infty""]'), (246, '        # TransformMatchingShapes will try to line up all pieces of a'), (247, '        # source mobject with those of a target, regardless of the'), (248, '        # what Mobject type they are.'), (249, '        source = Text(""the morse code"", height=1)'), (250, '        target = Text(""here come dots"", height=1)'), (251, ''), (252, '        self.play(Write(source))'), (253, '        self.wait()'), (254, '        kw = dict(run_time=3, path_arc=PI / 2)'), (255, '        self.play(TransformMatchingShapes(source, target, **kw))'), (256, '        self.wait()'), (257, '        self.play(TransformMatchingShapes(target, source, **kw))'), (258, '        self.wait()'), (259, '')]}",23,23
manimlib/scene/scene.py,manimlib/scene/scene.py,c918e8478441b1b1a4d3bc7592283b825be45017,e3b95276fa5835a168d649cbb5d2a6209718b640,Change default progress bar format,"{'added': [(560, '                bar_format=""{l_bar} {n_fmt:3}/{total_fmt:3} {rate_fmt}{postfix}"",')], 'deleted': []}",227,227
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,7d1330fa68109b339920aa58b8ecb066c6fa1f09,c918e8478441b1b1a4d3bc7592283b825be45017,Check if mobject_uniforms is None,"{'added': [(55, '        self.bind_to_mobject_uniforms(mobject_uniforms or dict())')], 'deleted': [(55, '        self.bind_to_mobject_uniforms(mobject_uniforms)')]}",58,58
manimlib/animation/composition.py,manimlib/animation/composition.py,4e90a77fcdb1a886078561d57fb169d8f552442f,7d1330fa68109b339920aa58b8ecb066c6fa1f09,Change type hint on LaggedStart to accept any functions outputting animations,"{'added': [(168, '        anim_func: Callable[[Mobject], Animation],'), (178, '            *(anim_func(submob, **anim_kwargs) for submob in group),')], 'deleted': [(168, '        AnimationClass: type,'), (178, '            *(AnimationClass(submob, **anim_kwargs) for submob in group),')]}",35,35
manimlib/window.py,manimlib/window.py,d1b1df64a546e7987bf5bc3822800436bdf10b97,4e90a77fcdb1a886078561d57fb169d8f552442f,"Ensure Window's scene always points back to window

Issues can arise in the few milliseconds of startup otherwise.","{'added': [(32, '        scene.window = self')], 'deleted': []}",19,19
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1844f7fd64157b2638b49704658506c2c0f9759a,66b78d01a9f16b67e99f3c93dc153c777cb58731,Fix for https://github.com/3b1b/manim/issues/1991,"{'added': [(547, '        if len(points) == 0:'), (548, '            return False'), (549, '        elif len(points) == 1:')], 'deleted': [(547, '        if len(points) == 1:')]}",304,304
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,0ce972991be01a59d9186071ac03230887160c82,41f0239e9d5a6868ebb3bb06a45d6527f8b2b4ea,Remove num_axis_pieces arg from ThreeDAxes,"{'added': [], 'deleted': [(511, '        num_axis_pieces: int = 20,'), (536, '        for axis in self.axes:'), (537, '            axis.insert_n_curves(num_axis_pieces - 1)')]}",105,105
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,169e7a302b45c6887550c296f03b578ecf942a83,0ce972991be01a59d9186071ac03230887160c82,Give ThreeDAxes flat stroke by default,"{'added': [(511, '        flat_stroke: bool = False,'), (536, '        self.set_flat_stroke(flat_stroke)')], 'deleted': []}",105,105
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f2c07afe748fdb7b0734b43f7caf5d9bc0aacf72,169e7a302b45c6887550c296f03b578ecf942a83,add 'return self',"{'added': [(544, '        return self')], 'deleted': []}",304,304
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,ded06c1f888b389c9d31769bda661300f4af3f64,f2c07afe748fdb7b0734b43f7caf5d9bc0aacf72,"Give SceneFileWriter an option for saturation, and set default to 1.7

The colors in a scene can look a little different in a preview window vs. in the rendered file written by ffmpeg. This is mean to bring them closer together.","{'added': [(52, '        saturation: float = 1.7'), (71, '        self.saturation = saturation'), (267, ""            '-vf', f'eq=saturation={self.saturation},vflip',"")], 'deleted': [(265, ""            '-vf', 'vflip',"")]}",92,92
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,3e3e4de5e9d819658e9d9b39556f38d42b65208d,ded06c1f888b389c9d31769bda661300f4af3f64,Add option for gamma correction to SceneFileWriter,"{'added': [(52, '        saturation: float = 1.7,'), (53, '        gamma: float = 1.2,'), (73, '        self.gamma = gamma'), (269, ""            '-vf', f'vflip,eq=saturation={self.saturation}:gamma={self.gamma}',"")], 'deleted': [(52, '        saturation: float = 1.7'), (267, ""            '-vf', f'eq=saturation={self.saturation},vflip',"")]}",92,92
manimlib/animation/transform.py,manimlib/animation/transform.py,b39fbb62f41fa2f813ac44efb57e45427b306830,3e3e4de5e9d819658e9d9b39556f38d42b65208d,Ensure joint_products are refreshed for _AnimationBuilder,"{'added': [(66, '        self.mobject.align_data_and_family(self.target_copy)')], 'deleted': [(66, '            self.mobject.align_data_and_family(self.target_copy)')]}",52,52
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b39fbb62f41fa2f813ac44efb57e45427b306830,3e3e4de5e9d819658e9d9b39556f38d42b65208d,Ensure joint_products are refreshed for _AnimationBuilder,"{'added': [(902, '            for mob in [self, vmobject]:'), (903, '                mob.get_joint_products()')], 'deleted': []}",305,305
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ad409999dcd06fae8d2c26bd5c40947133ae97af,b39fbb62f41fa2f813ac44efb57e45427b306830,Small tweak,"{'added': [(2181, '                ""Method chaining is currently not supported for "" + \\'), (2216, '                ""Animation arguments can only be passed by calling ``animate`` "" + \\')], 'deleted': [(2181, '                ""Method chaining is currently not supported for ""'), (2216, '                ""Animation arguments can only be passed by calling ``animate`` ""')]}",546,546
manimlib/mobject/mobject_update_utils.py,manimlib/mobject/mobject_update_utils.py,01c51dbc6d7bf66d380bddd0e82679442fd513f8,ad409999dcd06fae8d2c26bd5c40947133ae97af,animation.update_config -> animation.update_rate_info,"{'added': [(96, '    animation.update_rate_info(**kwargs)')], 'deleted': [(96, '    animation.update_config(**kwargs)')]}",13,13
manimlib/config.py,manimlib/config.py,557cb66c52d3cabe19a8013e5edfcd24f86231b8,01c51dbc6d7bf66d380bddd0e82679442fd513f8,Fix transparent background videos,"{'added': [(423, '        result[""pixel_format""] = \'\''), (428, '        result[""pixel_format""] = args.pix_fmt')], 'deleted': [(427, '        result[""pix_fmt""] = args.pix_fmt')]}",75,75
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,557cb66c52d3cabe19a8013e5edfcd24f86231b8,01c51dbc6d7bf66d380bddd0e82679442fd513f8,Fix transparent background videos,"{'added': [(261, ""        vf_arg = 'vflip'""), (262, '        if self.pixel_format.startswith(""yuv""):'), (263, ""            vf_arg += f',eq=saturation={self.saturation}:gamma={self.gamma}'""), (264, ''), (273, ""            '-vf', vf_arg,"")], 'deleted': [(269, ""            '-vf', f'vflip,eq=saturation={self.saturation}:gamma={self.gamma}',"")]}",93,93
manimlib/animation/movement.py,manimlib/animation/movement.py,576a26493e5c4d6e5a198630b37c5ad3eb11464c,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,Use quick_point_from_proportion in MoveAlongPath,"{'added': [(14, '    from manimlib.mobject.types.vectorized_mobject import VMobject'), (109, '        path: VMobject,'), (117, '        point = self.path.quick_point_from_proportion(alpha)')], 'deleted': [(108, '        path: Mobject,'), (116, '        point = self.path.point_from_proportion(alpha)')]}",12,12
manimlib/animation/composition.py,manimlib/animation/composition.py,dcb58c1f4fdc20b9832c43852b07604a774c7ac5,576a26493e5c4d6e5a198630b37c5ad3eb11464c,"Remove arg_creator arg from LaggedStartMap

Anything that enables is better done just with LaggedStart","{'added': [], 'deleted': [(170, '        arg_creator: Callable[[Mobject], tuple] | None = None,')]}",35,35
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,3a05352f73a2fc882af6d8e2badf285aa7b296db,dcb58c1f4fdc20b9832c43852b07604a774c7ac5,Add poly_line_length function,"{'added': [(64, 'def poly_line_length(points):'), (65, '    """"""'), (66, '    Return the sum of the lengths between adjacent points'), (67, '    """"""'), (68, '    diffs = points[1:] - points[:-1]'), (69, '    return np.sqrt((diffs**2).sum(1)).sum()'), (70, '')], 'deleted': []}",91,91
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,3a05352f73a2fc882af6d8e2badf285aa7b296db,Faster VMobject.get_arc_length,"{'added': [(20, 'from manimlib.utils.bezier import interpolate'), (42, 'from manimlib.utils.space_ops import poly_line_length'), (819, '        if n_sample_points is not None:'), (820, '            points = np.array(['), (821, '                self.quick_point_from_proportion(a)'), (822, '                for a in np.linspace(0, 1, n_sample_points)'), (823, '            ])'), (824, '            return poly_line_length(points)'), (825, '        points = self.get_points()'), (826, '        inner_len = poly_line_length(points[::2])'), (827, '        outer_len = poly_line_length(points)'), (828, '        return interpolate(inner_len, outer_len, 1 / 3)')], 'deleted': [(817, '        if n_sample_points is None:'), (818, '            n_sample_points = 4 * self.get_num_curves() + 1'), (819, '        points = np.array(['), (820, '            self.point_from_proportion(a)'), (821, '            for a in np.linspace(0, 1, n_sample_points)'), (822, '        ])'), (823, '        diffs = points[1:] - points[:-1]'), (824, '        return sum(map(get_norm, diffs))')]}",305,305
manimlib/shaders/true_dot/frag.glsl,manimlib/shaders/true_dot/frag.glsl,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,Make TrueDot shading in 3d work,"{'added': [(8, 'in vec3 point;'), (9, 'in vec3 to_cam;'), (10, 'in vec3 center;'), (11, 'in float radius;'), (12, 'in vec2 uv_coords;'), (20, '    float r = length(uv_coords.xy);'), (21, '    if(r > 1.0) discard;'), (30, '        vec3 point_3d = point + radius * sqrt(1 - r * r) * to_cam;'), (31, '        vec3 normal = normalize(point_3d - center);'), (32, '        frag_color = finalize_color(frag_color, point_3d, normal);')], 'deleted': [(8, 'in vec3 v_point;'), (16, '    vec2 vect = 2.0 * gl_PointCoord.xy - vec2(1.0);'), (17, '    float r = length(vect);'), (18, '    if(r > 1.0 + scaled_aaw) discard;'), (27, '        vec3 normal = vec3(vect, sqrt(1 - r * r));'), (28, '        normal = (perspective * vec4(normal, 0.0)).xyz;'), (29, '        frag_color = finalize_color(frag_color, v_point, normal);')]}",,
,manimlib/shaders/true_dot/geom.glsl,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,Make TrueDot shading in 3d work,"{'added': [(1, '#version 330'), (2, ''), (3, 'layout (points) in;'), (4, 'layout (triangle_strip, max_vertices = 4) out;'), (5, ''), (6, 'uniform float pixel_size;'), (7, 'uniform float anti_alias_width;'), (8, 'uniform float frame_scale;'), (9, 'uniform vec3 camera_position;'), (10, ''), (11, 'in vec3 v_point[1];'), (12, 'in float v_radius[1];'), (13, 'in vec4 v_rgba[1];'), (14, ''), (15, 'out vec4 color;'), (16, 'out float scaled_aaw;'), (17, 'out vec3 point;'), (18, 'out vec3 to_cam;'), (19, 'out vec3 center;'), (20, 'out float radius;'), (21, 'out vec2 uv_coords;'), (22, ''), (23, '#INSERT emit_gl_Position.glsl'), (24, ''), (25, 'void main(){'), (26, '    color = v_rgba[0];'), (27, '    radius = v_radius[0];'), (28, '    center = v_point[0];'), (29, '    scaled_aaw = (anti_alias_width * pixel_size) / v_radius[0];'), (30, ''), (31, '    to_cam = normalize(camera_position - v_point[0]);'), (32, '    vec3 right = v_radius[0] * normalize(cross(vec3(0, 1, 1), to_cam));'), (33, '    vec3 up = v_radius[0] * normalize(cross(to_cam, right));'), (34, ''), (35, '    for(int i = -1; i < 2; i += 2){'), (36, '        for(int j = -1; j < 2; j += 2){'), (37, '            point = v_point[0] + i * right + j * up;'), (38, '            uv_coords = vec2(i, j);'), (39, '            emit_gl_Position(point);'), (40, '            EmitVertex();'), (41, '        }'), (42, '    }'), (43, '    EndPrimitive();'), (44, '}')], 'deleted': []}",,
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,Make TrueDot shading in 3d work,"{'added': [(8, 'out float v_radius;'), (9, 'out vec4 v_rgba;'), (14, '    v_radius = radius;'), (15, '    v_rgba = rgba;')], 'deleted': [(3, 'uniform float pixel_size;'), (4, 'uniform float anti_alias_width;'), (5, ''), (10, 'out vec4 color;'), (11, 'out float scaled_aaw;'), (13, 'out vec3 light_pos;'), (15, '#INSERT emit_gl_Position.glsl'), (19, '    color = rgba;'), (20, '    scaled_aaw = (anti_alias_width * pixel_size) / radius;'), (21, ''), (22, '    emit_gl_Position(point);'), (23, '    float z = -10 * gl_Position.z;'), (24, '    float scaled_radius = radius * 1.0 / (1.0 - z);'), (25, '    gl_PointSize = 2 * ((scaled_radius / pixel_size) + anti_alias_width);')]}",,
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,a79d4a862f016e82d234d28eccd0510804f882f8,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,Keep track of dots in DieFace,"{'added': [(625, '        self.dots = arrangement')], 'deleted': []}",54,54
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,1eb819363d1e17c79df52d25bec752c1975387a7,a79d4a862f016e82d234d28eccd0510804f882f8,Fix issue with ticks going beyond number line,"{'added': [(97, '        result = np.arange(self.x_min, x_max, self.x_step)'), (98, '        return result[result <= self.x_max]')], 'deleted': [(97, '        return np.arange(self.x_min, x_max, self.x_step)')]}",34,34
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b216b8f7e399fd8f2adeffd421a787e5ed0a879f,1eb819363d1e17c79df52d25bec752c1975387a7,Reset default in set_style to stroke_background = False,"{'added': [(239, '        stroke_background: bool = False,')], 'deleted': [(239, '        stroke_background: bool = True,')]}",305,305
manimlib/animation/creation.py,manimlib/animation/creation.py,6d0b58659732976e2e78709ac4bbe77439a82a90,b216b8f7e399fd8f2adeffd421a787e5ed0a879f,Prevent index out of range error for ShowSubmobjectsOneByOne,"{'added': [(15, 'from manimlib.utils.simple_functions import clip'), (210, '        index = int(clip(index, 0, len(self.all_submobs) - 1))')], 'deleted': [(209, '        # N = len(self.all_submobs)')]}",34,34
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,392019fc6ea33700d97cd6c81133e1e3bc60fdf4,6d0b58659732976e2e78709ac4bbe77439a82a90,Specify type in bind_to_graph,"{'added': [(242, '        func: Callable[[VectN], VectN],')], 'deleted': [(242, '        func: Callable[[Vect3], Vect3],')]}",105,105
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,b644bb51de5b06b564995ae456bc6b0bd95ced52,392019fc6ea33700d97cd6c81133e1e3bc60fdf4,Update submobjects before parents,"{'added': [(793, '        if recurse:'), (794, '            for submob in self.submobjects:'), (795, '                submob.update(dt, recurse)')], 'deleted': [(797, '        if recurse:'), (798, '            for submob in self.submobjects:'), (799, '                submob.update(dt, recurse)')]}",546,546
manimlib/utils/tex.py,manimlib/utils/tex.py,d1e2a7a157a7ea5076cd4ab3c6167ba749e51507,b644bb51de5b06b564995ae456bc6b0bd95ced52,Make sure \text{...} is counted correctly in num_tex_symbols,"{'added': [(19, '        for s in [""begin"", ""end"", ""phantom""]')], 'deleted': [(19, '        for s in [""begin"", ""end"", ""phantom"", ""text""]')]}",4,4
manimlib/utils/tex_to_symbol_count.py,manimlib/utils/tex_to_symbol_count.py,80fb1a98a92fe2ff9dc875a3ccc1a642a1fcb987,d1e2a7a157a7ea5076cd4ab3c6167ba749e51507,Add \text to TEX_TO_SYMBOL_COUNT,"{'added': [(163, '    R""\\text"": 0,')], 'deleted': []}",0,0
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,0d415036a93ed15b60c223f0ec8d4c3067bc08af,80fb1a98a92fe2ff9dc875a3ccc1a642a1fcb987,Ensure exact integers are displays for large values in Integer,"{'added': [(101, '        if self.num_decimal_places == 0 and isinstance(number, float):'), (102, '            number = int(number)'), (154, '            f"".{ndp}f"" if ndp > 0 else ""d"",')], 'deleted': [(152, '            f"".{ndp}f"",')]}",35,35
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,6b24860bbfa3f46d6363c51e068f6726f2e756bb,0d415036a93ed15b60c223f0ec8d4c3067bc08af,Tweak default configuration for Underline,"{'added': [(113, '        stretch_factor=1.2,'), (123, '        self.set_stroke(stroke_color, stroke_width)'), (124, '        self.set_width(mobject.get_width() * stretch_factor)')], 'deleted': [(122, '        self.match_width(mobject)')]}",8,8
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,de8e9e5ec1f2c8b43ba536f8c72ea8625a58ae11,6b24860bbfa3f46d6363c51e068f6726f2e756bb,Fix error with setting bubble direction,"{'added': [(361, '        self.direction = LEFT  # Possibly updated below by self.flip()'), (383, '        self.content = VMobject()'), (406, '    def pin_to(self, mobject, auto_flip=False):'), (409, '        if want_to_flip and auto_flip:')], 'deleted': [(361, '        self.direction = direction'), (383, '        self.content = Mobject()'), (406, '    def pin_to(self, mobject):'), (409, '        if want_to_flip:')]}",55,55
manimlib/utils/bezier.py,manimlib/utils/bezier.py,3b2904b4c7b27e11963df1a6def6d06f49670a30,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,Correction of indices,"{'added': [(216, '        return np.array([anchors[0], anchors.mean(0), anchors[1]])')], 'deleted': [(216, '        return np.array([anchors[0], anchors.mean(1), anchors[2]])')]}",49,49
docs/source/getting_started/installation.rst,docs/source/getting_started/installation.rst,71ab276e057cb6c64f136084c316415797ee6618,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,"Update installation.rst added FFmpeg install

Added how to install ffmpeg","{'added': [(14, 'Install FFmpeg'), (15, '--------------'), (16, ''), (17, ''), (18, ''), (19, 'Install FFmpeg Windows'), (20, '------------------------'), (21, '.. code-block:: cmd'), (22, ''), (23, '   choco install ffmpeg'), (24, ''), (25, ''), (26, '# Install FFmepeg Linux'), (27, '----------------------------'), (28, '.. code-block:: sh'), (29, ''), (30, '   $ sudo apt update'), (31, '   $ sudo apt install ffmpeg'), (32, '   $ ffmpeg -version'), (33, ''), (34, '# Install FFmpeg MacOS'), (35, '----------------------------'), (36, '- Download This ZIP file `https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-full.7z`(if the link is not working download this zip file from there original website)'), (37, ''), (38, ''), (39, '')], 'deleted': []}",,
manimlib/animation/indication.py,manimlib/animation/indication.py,f33b8d1d2f9d37e51eff4ec113373f0c3948d17d,de8e9e5ec1f2c8b43ba536f8c72ea8625a58ae11,Add stretch_factor in FlashUnder Underline,"{'added': [(281, '        return Underline(mobject, buff=buff, stretch_factor=1.0)')], 'deleted': [(281, '        return Underline(mobject, buff=buff)')]}",44,44
manimlib/animation/indication.py,manimlib/animation/indication.py,5d9a7f49e638a43823966b80efb0fb85ffc9fa7f,f33b8d1d2f9d37e51eff4ec113373f0c3948d17d,Add taper_width argument to FlashAround,"{'added': [(261, '        taper_width: float = 0.0,'), (274, '        super().__init__(path, time_width=time_width, taper_width=taper_width, **kwargs)')], 'deleted': [(273, '        super().__init__(path, time_width=time_width, **kwargs)')]}",44,44
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,16f5890fd3c18a1e4594345b9d8b6b972c96b3ed,5d9a7f49e638a43823966b80efb0fb85ffc9fa7f,"Add CoordianteSystem.get_area_under_graph

This is not perfect, since one could optionally add a different color for negative area.","{'added': [(25, 'from manimlib.utils.bezier import inverse_interpolate'), (402, '    def get_area_under_graph(self, graph, x_range, fill_color=BLUE, fill_opacity=0.5):'), (403, '        if not hasattr(graph, ""x_range""):'), (404, '            raise Exception(""Argument `graph` must have attribute `x_range`"")'), (405, ''), (406, '        alpha_bounds = ['), (407, '            inverse_interpolate(*graph.x_range, x)'), (408, '            for x in x_range'), (409, '        ]'), (410, '        sub_graph = graph.copy()'), (411, '        sub_graph.pointwise_become_partial(graph, *alpha_bounds)'), (412, '        sub_graph.add_line_to(self.c2p(x_range[1], 0))'), (413, '        sub_graph.add_line_to(self.c2p(x_range[0], 0))'), (414, '        sub_graph.add_line_to(sub_graph.get_start())'), (415, ''), (416, '        sub_graph.set_stroke(width=0)'), (417, '        sub_graph.set_fill(fill_color, fill_opacity)'), (418, ''), (419, '        return sub_graph')], 'deleted': [(401, '    def get_area_under_graph(self, graph, x_range, fill_color=BLUE, fill_opacity=1):'), (402, '        # TODO'), (403, '        pass')]}",107,107
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,ce7422f8af888827229de9f72255bdd115102b88,16f5890fd3c18a1e4594345b9d8b6b972c96b3ed,Add ThreeDAxes.get_graph and .get_parametric_surface,"{'added': [(568, '    def get_graph('), (569, '        self,'), (570, '        func,'), (571, '        color=BLUE_E,'), (572, '        opacity=0.9,'), (573, '        u_range=None,'), (574, '        v_range=None,'), (575, '        **kwargs'), (576, '    ) -> ParametricSurface:'), (581, '        u_range = u_range or self.x_range[:2]'), (582, '        v_range = v_range or self.y_range[:2]'), (585, '            u_range=u_range,'), (586, '            v_range=v_range,'), (592, '    def get_parametric_surface('), (593, '        self,'), (594, '        func,'), (595, '        color=BLUE_E,'), (596, '        opacity=0.9,'), (597, '        **kwargs'), (598, '    ) -> ParametricSurface:'), (599, '        surface = ParametricSurface(func, color=color, opacity=opacity, **kwargs)'), (600, '        xu = self.x_axis.get_unit_size()'), (601, '        yu = self.y_axis.get_unit_size()'), (602, '        zu = self.z_axis.get_unit_size()'), (603, '        axes = [self.x_axis, self.y_axis, self.z_axis]'), (604, '        for dim, axis in zip(range(3), axes):'), (605, '            surface.stretch(axis.get_unit_size(), dim, about_point=ORIGIN)'), (606, '        surface.shift(self.get_origin())'), (607, '        return surface'), (608, '')], 'deleted': [(568, '    def get_graph(self, func, color=BLUE_E, opacity=0.9, **kwargs):'), (575, '            u_range=self.x_range[:2],'), (576, '            v_range=self.y_range[:2],')]}",111,111
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,fa1080d59a0717a98bc3892a50d04e57050cb43c,ce7422f8af888827229de9f72255bdd115102b88,Be sure reverse_points changes data in place,"{'added': [(227, '            mob.data[:] = mob.data[::-1]')], 'deleted': [(227, '            mob.data = mob.data[::-1]')]}",546,546
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f01b990c2ea19eeca9ab1fce38cf8f05ce399da5,fa1080d59a0717a98bc3892a50d04e57050cb43c,Add default Mobject.match_style,"{'added': [(1601, '    def match_style(self, mobject: Mobject) -> Self:'), (1602, '        self.set_color(mobject.get_color())'), (1603, '        self.set_opacity(mobject.get_opacity())'), (1604, '        self.set_shading(*mobject.get_shading())'), (1605, '        return self'), (1606, '')], 'deleted': []}",547,547
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,63f6e9d84ff5685e78dc923e401ac980202263cb,f01b990c2ea19eeca9ab1fce38cf8f05ce399da5,Add Dartboard,"{'added': [(4, 'import itertools as it'), (18, 'from manimlib.constants import GREEN_E'), (31, 'from manimlib.constants import RED_E'), (42, 'from manimlib.constants import TAU'), (51, 'from manimlib.mobject.geometry import AnnularSector'), (597, '        dot_color: ManimColor = WHITE,'), (632, ''), (633, ''), (634, 'class Dartboard(VGroup):'), (635, '    radius = 3'), (636, '    n_sectors = 20'), (637, ''), (638, '    def __init__(self, **kwargs):'), (639, '        super().__init__(**kwargs)'), (640, '        n_sectors = self.n_sectors'), (641, '        angle = TAU / n_sectors'), (642, ''), (643, '        segments = VGroup(*['), (644, '            VGroup(*['), (645, '                AnnularSector('), (646, '                    inner_radius=in_r,'), (647, '                    outer_radius=out_r,'), (648, '                    start_angle=n * angle,'), (649, '                    angle=angle,'), (650, '                    fill_color=color,'), (651, '                )'), (652, '                for n, color in zip('), (653, '                    range(n_sectors),'), (654, '                    it.cycle(colors)'), (655, '                )'), (656, '            ])'), (657, '            for colors, in_r, out_r in ['), (658, '                ([GREY_B, GREY_E], 0, 1),'), (659, '                ([GREEN_E, RED_E], 0.5, 0.55),'), (660, '                ([GREEN_E, RED_E], 0.95, 1),'), (661, '            ]'), (662, '        ])'), (663, '        segments.rotate(-angle / 2)'), (664, '        bullseyes = VGroup(*['), (665, '            Circle(radius=r)'), (666, '            for r in [0.07, 0.035]'), (667, '        ])'), (668, '        bullseyes.set_fill(opacity=1)'), (669, '        bullseyes.set_stroke(width=0)'), (670, '        bullseyes[0].set_color(GREEN_E)'), (671, '        bullseyes[1].set_color(RED_E)'), (672, ''), (673, '        self.bullseye = bullseyes[1]'), (674, '        self.add(*segments, *bullseyes)'), (675, '        self.scale(self.radius)')], 'deleted': [(582, ''), (593, '        dot_color: ManimColor = BLUE_B,')]}",59,59
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,bae3b98c0bd4a718f552ca2e46f8a6f0c2678e48,63f6e9d84ff5685e78dc923e401ac980202263cb,Fixes to Surface,"{'added': [(133, '        if len(indices) == 0:'), (134, '            return np.zeros((3, 0))'), (136, '        left = indices - 1'), (138, '        up = indices - nv'), (139, '        down = indices + nv'), (171, ""            smobject.data['point'], a, b,""), (188, '        points = points.reshape(resolution).copy()')], 'deleted': [(134, '        left  = indices - 1'), (136, '        up    = indices - nv'), (137, '        down  = indices + nv'), (169, ""            self.data['point'], a, b,""), (186, '        points = points.reshape(resolution)')]}",47,47
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,6f8ea7433d72ea38ac379c5d663ca61d17c36264,bae3b98c0bd4a718f552ca2e46f8a6f0c2678e48,Small formatting tweaks,"{'added': [(428, '        recurse: bool = True'), (439, '        recurse: bool = True')], 'deleted': [(428, '        recurse: bool=True'), (439, '        recurse: bool=True')]}",305,305
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3e641119526b079d667ee21830b58710ae7e5016,6f8ea7433d72ea38ac379c5d663ca61d17c36264,Change default on VMobject to no depth test,"{'added': [(441, '        super().deactivate_depth_test(recurse)')], 'deleted': [(441, '        super().apply_depth_test(recurse)')]}",305,305
manimlib/scene/scene.py,manimlib/scene/scene.py,cb02066f22a12f2c2a95e89d29c25936e384329c,3e641119526b079d667ee21830b58710ae7e5016,"Add always_depth_test option to ThreeDScene, default to true","{'added': [(1024, '    always_depth_test = True'), (1028, '            if set_depth_test and not mob.is_fixed_in_frame() and self.always_depth_test:')], 'deleted': [(1027, '            if set_depth_test and not mob.is_fixed_in_frame():')]}",228,228
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,162fd4a92be68018eea9434d3e1644cc3266c70e,cb02066f22a12f2c2a95e89d29c25936e384329c,"Change defaults for where videos are saved

Save them directly to the relevant output directory, rather than to a ""videos"" subdirectory within it.","{'added': [(45, '        subdirectory_for_videos: bool = False,'), (67, '        self.subdirectory_for_videos = subdirectory_for_videos'), (93, '            if self.subdirectory_for_videos:'), (94, '                movie_dir = guarantee_existence(os.path.join(out_dir, ""videos""))'), (95, '            else:'), (96, '                movie_dir = guarantee_existence(out_dir)')], 'deleted': [(91, '            movie_dir = guarantee_existence(os.path.join(out_dir, ""videos""))')]}",94,94
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,0609c1bfa85295d94f4f45200d644a72315a9f42,162fd4a92be68018eea9434d3e1644cc3266c70e,Change default saturation and gamma to each be 1,"{'added': [(53, '        saturation: float = 1.0,'), (54, '        gamma: float = 1.0,')], 'deleted': [(53, '        saturation: float = 1.7,'), (54, '        gamma: float = 1.2,')]}",94,94
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,21d20541b5167c0ec73c66e942fbb9c37bbe74c7,0609c1bfa85295d94f4f45200d644a72315a9f42,Add texture_names_to_ids to ShaderWrapper,"{'added': [(59, '        self.texture_names_to_ids = dict()'), (86, '        self.texture_names_to_ids = {'), (227, '        for uniforms in [self.mobject_uniforms, camera_uniforms, self.texture_names_to_ids]:'), (228, '            for name, value in uniforms.items():'), (229, '                set_program_uniform(self.program, name, value)')], 'deleted': [(85, '        names_to_ids = {'), (89, '        self.update_program_uniforms(names_to_ids)'), (227, '        for name, value in (*self.mobject_uniforms.items(), *camera_uniforms.items()):'), (228, '            set_program_uniform(self.program, name, value)')]}",59,59
manimlib/utils/shaders.py,manimlib/utils/shaders.py,4f42ebeb4f7ecb6b2a45319e290f4aa33373400e,21d20541b5167c0ec73c66e942fbb9c37bbe74c7,Small formatting tweaks,"{'added': [(59, ') -> moderngl.Program:'), (77, '')], 'deleted': [(59, '    ) -> moderngl.Program:'), (77, ''), (137, '')]}",19,19
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,7ff45b46378fd6a364cddbbd940b940f0b1fc45b,4f42ebeb4f7ecb6b2a45319e290f4aa33373400e,Having changing decimal match fixed_in_frame status,"{'added': [(174, '        self.fix_in_frame(self._is_fixed_in_frame)')], 'deleted': []}",35,35
manimlib/animation/animation.py,manimlib/animation/animation.py,c65b7242e43df4720cf803ef5ab5b127b9b72766,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,Remove duplicate items,"{'added': [(122, '        items = list(filter('), (126, '        items = list(set(items))'), (127, '        return items')], 'deleted': [(122, '        return list(filter(')]}",38,38
manimlib/animation/creation.py,manimlib/animation/creation.py,7954ba14ef2fbd90f68e501ee833e2530ea082b1,7ff45b46378fd6a364cddbbd940b940f0b1fc45b,Use rate_function appropriately in ShowIncreasingSubsets,"{'added': [(193, '        alpha = self.rate_func(alpha)')], 'deleted': []}",34,34
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,2337be2318b1a28e0dd6a94266979271cd76d70a,7954ba14ef2fbd90f68e501ee833e2530ea082b1,Remove num_sampled_graph_points_per_tick in Axes __init__,"{'added': [(440, '        kwargs.pop(""num_sampled_graph_points_per_tick"", None)')], 'deleted': []}",111,111
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,ddf2f7d9bd72faabd6c66b6fc23f944bae838eed,2337be2318b1a28e0dd6a94266979271cd76d70a,Fix typo,"{'added': [(539, '                kwargs.get(""axis_config"", {}),')], 'deleted': [(539, '                kwargs.get(""axes_config"", {}),')]}",111,111
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,fc522e5278bf3f7b56c170962d7c85f9ff13a52f,ddf2f7d9bd72faabd6c66b6fc23f944bae838eed,Change width_to_tip_len -> tip_len_to_width,"{'added': [(676, '        tip_len_to_width: float = 0.0075,'), (682, '        self.tip_len_to_width = tip_len_to_width'), (709, '        tip_len = self.get_stroke_width() * self.tip_width_ratio * self.tip_len_to_width')], 'deleted': [(676, '        width_to_tip_len: float = 0.0075,'), (682, '        self.width_to_tip_len = width_to_tip_len'), (708, '        tip_len = self.get_stroke_width() * self.width_to_tip_len * self.tip_width_ratio')]}",140,140
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,d21b05ae0d5ffd373d7ee72ab892589f6b26afed,fc522e5278bf3f7b56c170962d7c85f9ff13a52f,Arrow fix,"{'added': [(709, '        if tip_len >= self.max_tip_length_to_length_ratio * arc_len or arc_len == 0:')], 'deleted': [(708, '        if tip_len >= self.max_tip_length_to_length_ratio * arc_len:')]}",141,141
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,4be7f611ec424ab9cf57651cde3ff04c3085c787,d21b05ae0d5ffd373d7ee72ab892589f6b26afed,Fix issues with stroke opacities passed as numpy arrays,"{'added': [(1337, '                if not isinstance(opacity, (float, int)):')], 'deleted': [(1337, '                if isinstance(opacity, list):')]}",547,547
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,f2ad9a70f7c6af3cf28cb6b50dad358b9e645b19,4be7f611ec424ab9cf57651cde3ff04c3085c787,Small format fix,"{'added': [(25, '')], 'deleted': []}",21,21
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,eafd09549df2ae74d78492ca353b04589cdd3c3e,f2ad9a70f7c6af3cf28cb6b50dad358b9e645b19,Handle make_jagged for empty VMobjects,"{'added': [(460, '        if len(anchors) == 0:'), (461, '            self.clear_points()'), (462, '            return self'), (650, '        if self.get_num_points() == 0:'), (651, '            return self')], 'deleted': []}",307,307
manimlib/utils/iterables.py,manimlib/utils/iterables.py,c8cf83eedf90fae385ae63b9d0b722913015c15e,eafd09549df2ae74d78492ca353b04589cdd3c3e,Add cartesian_product,"{'added': [(139, 'def cartesian_product(*arrays: np.ndarray):'), (140, '    """"""'), (141, '    Copied from https://stackoverflow.com/a/11146645'), (142, '    """"""'), (143, '    la = len(arrays)'), (144, '    dtype = np.result_type(*arrays)'), (145, '    arr = np.empty([len(a) for a in arrays] + [la], dtype=dtype)'), (146, '    for i, a in enumerate(np.ix_(*arrays)):'), (147, '        arr[..., i] = a'), (148, '    return arr.reshape(-1, la)'), (149, ''), (150, '')], 'deleted': []}",45,45
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,13d4ab1eb079ef2c278da8a7d382a88324853ab3,c8cf83eedf90fae385ae63b9d0b722913015c15e,Stylistic change,"{'added': [(209, '    return array / norms[:, np.newaxis]')], 'deleted': [(209, '    return (array.T / norms).T')]}",91,91
manimlib/utils/tex_to_symbol_count.py,manimlib/utils/tex_to_symbol_count.py,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,13d4ab1eb079ef2c278da8a7d382a88324853ab3,Add \dots and \mathds to tex_to_symbol_count,"{'added': [(52, '    R""\\dots"": 3,'), (106, '    R""\\mathds"": 0,')], 'deleted': []}",0,0
manimlib/config.py,manimlib/config.py,65e7943ff7582d64fdc5b012f05e5679c3d6e248,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix aspect_ratio other than 16:9 issue,"{'added': [(475, '            ""frame_shape"": ((width / height) * get_frame_height(), get_frame_height()),'), (522, ''), (523, 'def get_frame_height():'), (524, '    return 8.0'), (525, ''), (526, 'def get_aspect_ratio():'), (527, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (528, ""    return cam_config['pixel_width'] / cam_config['pixel_height']""), (529, ''), (530, 'def get_default_pixel_width():'), (531, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (532, ""    return cam_config['pixel_width']""), (533, ''), (534, 'def get_default_pixel_height():'), (535, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (536, ""    return cam_config['pixel_height']"")], 'deleted': [(16, 'from manimlib.constants import FRAME_HEIGHT'), (476, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),')]}",79,79
manimlib/constants.py,manimlib/constants.py,65e7943ff7582d64fdc5b012f05e5679c3d6e248,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix aspect_ratio other than 16:9 issue,"{'added': [(4, 'from manimlib.config import get_aspect_ratio,get_default_pixel_width,get_default_pixel_height,get_frame_height'), (5, ''), (13, 'ASPECT_RATIO: float = get_aspect_ratio()'), (14, 'FRAME_HEIGHT: float = get_frame_height()'), (20, 'DEFAULT_PIXEL_HEIGHT: int = get_default_pixel_height()'), (21, 'DEFAULT_PIXEL_WIDTH: int = get_default_pixel_width()')], 'deleted': [(11, 'ASPECT_RATIO: float = 16.0 / 9.0'), (12, 'FRAME_HEIGHT: float = 8.0'), (18, 'DEFAULT_PIXEL_HEIGHT: int = 1080'), (19, 'DEFAULT_PIXEL_WIDTH: int = 1920')]}",0,0
manimlib/utils/shaders.py,manimlib/utils/shaders.py,65e7943ff7582d64fdc5b012f05e5679c3d6e248,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix aspect_ratio other than 16:9 issue,"{'added': [(12, 'from manimlib.constants import ASPECT_RATIO'), (116, ''), (117, '        result = re.sub(r""\\s+ASPECT_RATIO\\s+=\\s+[\\s0-9/.]+"", f"" ASPECT_RATIO = {ASPECT_RATIO}"", result)')], 'deleted': []}",19,19
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,0b5e9d4a8bda88a9ccd69477e3d80b5512c61160,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,add zorder to mobject,"{'added': [(86, '        zorder: int = 0,'), (94, '        self.zorder = zorder'), (95, '        self._scene_order = 0')], 'deleted': []}",546,546
manimlib/scene/scene.py,manimlib/scene/scene.py,0b5e9d4a8bda88a9ccd69477e3d80b5512c61160,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,add zorder to mobject,"{'added': [(417, '        idx = 0'), (418, '        scene_order = len(self.mobjects)'), (419, '        for m in new_mobjects:'), (420, '            m._scene_order = scene_order+idx'), (421, '            idx += 1'), (423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.zorder,m._scene_order))')], 'deleted': []}",228,228
manimlib/animation/indication.py,manimlib/animation/indication.py,f0a61beaf5e844f6478b2eade8fc8e95d3f1d81b,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix VShowPassingFlash index out of bounds issue,"{'added': [(247, '        if len(widths * gaussian) !=0:'), (248, '            submobject.set_stroke(width=widths * gaussian)')], 'deleted': [(247, '        submobject.set_stroke(width=widths * gaussian)')]}",45,45
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,72780959212f3071ea92b199a75647d55ad6f04d,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,"Change ImageMobject rendering mode to TRIANGLES

And add vertices","{'added': [(5, 'from moderngl import TRIANGLES'), (28, '    render_primitive: int = TRIANGLES'), (42, '        super().init_data(length=6)'), (43, '        self.data[""point""][:] = [UL, DL, UR, DR, UR, DL]'), (44, '        self.data[""im_coords""][:] = [(0, 0), (0, 1), (1, 0), (1, 1), (1, 0), (0, 1)]')], 'deleted': [(40, '        super().init_data(length=4)'), (41, '        self.data[""point""][:] = [UL, DL, UR, DR]'), (42, '        self.data[""im_coords""][:] = [(0, 0), (0, 1), (1, 0), (1, 1)]')]}",8,8
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,Add surround method for Rectangles and SurroundingRectangles,"{'added': [(10, 'from manimlib.constants import MED_SMALL_BUFF, SMALL_BUFF'), (1049, '    def surround(self, mobject, buff=SMALL_BUFF) -> Self:'), (1050, '        target_shape = np.array(mobject.get_shape()) + 2 * buff'), (1051, '        self.set_shape(*target_shape)'), (1052, '        self.move_to(mobject)'), (1053, '        return self'), (1054, '')], 'deleted': [(10, 'from manimlib.constants import MED_SMALL_BUFF')]}",142,142
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,Add surround method for Rectangles and SurroundingRectangles,"{'added': [(1543, '    def get_shape(self) -> Tuple[float]:'), (1544, '        return tuple(self.length_over_dim(dim) for dim in range(3))'), (1545, '')], 'deleted': []}",549,549
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,Add surround method for Rectangles and SurroundingRectangles,"{'added': [(30, '        super().__init__(color=color, **kwargs)'), (31, '        self.buff = buff'), (32, '        self.surround(mobject)'), (33, ''), (34, '    def surround(self, mobject, buff=None) -> Self:'), (35, '        self.mobject = mobject'), (36, '        self.buff = buff if buff is not None else self.buff'), (37, '        super().surround(mobject, self.buff)'), (38, '        return self'), (39, ''), (40, '    def set_buff(self, buff) -> Self:'), (41, '        self.buff = buff'), (42, '        self.surround(self.mobject)'), (43, '        return self')], 'deleted': [(30, '        super().__init__('), (31, '            width=mobject.get_width() + 2 * buff,'), (32, '            height=mobject.get_height() + 2 * buff,'), (33, '            color=color,'), (34, '            **kwargs'), (35, '        )'), (36, '        self.move_to(mobject)')]}",11,11
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,0a642133ad73ccc87f32c4bbdc07ead6746f270c,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,Add scale_radii method for DotCloud,"{'added': [(120, '    def scale_radii(self, scale_factor: float) -> Self:'), (121, '        self.set_radius(scale_factor * self.get_radii())'), (122, '        return self'), (123, '')], 'deleted': []}",22,22
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,60a4f0e167852ce3aaed9ae9668b26a73125d187,0a642133ad73ccc87f32c4bbdc07ead6746f270c,Factor out Arc.create_quadratic_bezier_points to quadratic_bezier_points_for_arc,"{'added': [(16, 'from manimlib.utils.bezier import quadratic_bezier_points_for_arc'), (30, 'from manimlib.utils.space_ops import rotation_about_z'), (218, '        self.set_points(quadratic_bezier_points_for_arc(angle, n_components))'), (219, '        self.rotate(start_angle, about_point=ORIGIN)'), (436, '        outer_path = outer_radius * quadratic_bezier_points_for_arc(TAU)'), (437, '        inner_path = inner_radius * quadratic_bezier_points_for_arc(-TAU)'), (478, '            raw_arc_points = quadratic_bezier_points_for_arc(path_arc - 2 * buff / radius)'), (479, '            rot_matrix = rotation_about_z(angle_of_vector(start - center) + buff / radius)'), (480, '            raw_arc_points = raw_arc_points @ rot_matrix.T'), (804, '            points1 = quadratic_bezier_points_for_arc(path_arc)')], 'deleted': [(216, '        self.set_points(Arc.create_quadratic_bezier_points('), (217, '            angle=angle,'), (218, '            start_angle=start_angle,'), (219, '            n_components=n_components'), (220, '        ))'), (224, '    @staticmethod'), (225, '    def create_quadratic_bezier_points('), (226, '        angle: float,'), (227, '        start_angle: float = 0,'), (228, '        n_components: int = 8'), (229, '    ) -> Vect3Array:'), (230, '        n_points = 2 * n_components + 1'), (231, '        angles = np.linspace(start_angle, start_angle + angle, n_points)'), (232, '        points = np.array([np.cos(angles), np.sin(angles), np.zeros(n_points)]).T'), (233, '        # Adjust handles'), (234, '        theta = angle / n_components'), (235, '        points[1::2] /= np.cos(theta / 2)'), (236, '        return points'), (237, ''), (451, '        outer_path = outer_radius * Arc.create_quadratic_bezier_points(TAU, 0)'), (452, '        inner_path = inner_radius * Arc.create_quadratic_bezier_points(-TAU, 0)'), (493, '            raw_arc_points = Arc.create_quadratic_bezier_points('), (494, '                angle=path_arc - 2 * buff / radius,'), (495, '                start_angle=angle_of_vector(start - center) + buff / radius,'), (496, '            )'), (820, '            points1 = Arc.create_quadratic_bezier_points(path_arc)')]}",141,141
manimlib/utils/bezier.py,manimlib/utils/bezier.py,60a4f0e167852ce3aaed9ae9668b26a73125d187,0a642133ad73ccc87f32c4bbdc07ead6746f270c,Factor out Arc.create_quadratic_bezier_points to quadratic_bezier_points_for_arc,"{'added': [(174, 'def quadratic_bezier_points_for_arc(angle: float, n_components: int = 8):'), (175, '    n_points = 2 * n_components + 1'), (176, '    angles = np.linspace(0, angle, n_points)'), (177, '    points = np.array([np.cos(angles), np.sin(angles), np.zeros(n_points)]).T'), (178, '    # Adjust handles'), (179, '    theta = angle / n_components'), (180, '    points[1::2] /= np.cos(theta / 2)'), (181, '    return points'), (182, ''), (183, '')], 'deleted': []}",50,50
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,690eb24562b77953b17f86102878ed54fc779fd4,60a4f0e167852ce3aaed9ae9668b26a73125d187,Add VMobject.add_arc_to method,"{'added': [(25, 'from manimlib.utils.bezier import partial_quadratic_bezier_points'), (26, 'from manimlib.utils.bezier import quadratic_bezier_points_for_arc'), (43, 'from manimlib.utils.space_ops import rotation_between_vectors'), (553, '    def add_arc_to(self, point: Vect3, angle: float, n_components: int = 8) -> Self:'), (554, '        self.throw_error_if_no_points()'), (555, '        arc_points = quadratic_bezier_points_for_arc(angle, n_components)'), (556, '        target_vect = point - self.get_end()'), (557, '        curr_vect = arc_points[-1] - arc_points[0]'), (558, ''), (559, '        arc_points = arc_points @ rotation_between_vectors(curr_vect, target_vect).T'), (560, '        arc_points *= get_norm(target_vect) / get_norm(curr_vect)'), (561, '        arc_points += (self.get_end() - arc_points[0])'), (562, '        self.append_points(arc_points[1:])'), (563, '        return self'), (564, '')], 'deleted': [(24, 'from manimlib.utils.bezier import partial_quadratic_bezier_points')]}",308,308
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,5f41e238ba347b93cc3b56c078073badcde618f3,690eb24562b77953b17f86102878ed54fc779fd4,Improve VMobject.add_arc_to,"{'added': [(14, 'from manimlib.constants import TAU'), (382, '    def get_stroke_width(self) -> float:'), (554, '    def add_arc_to(self, point: Vect3, angle: float, n_components: int | None = None, threshold: float = 1e-3) -> Self:'), (556, '        if abs(angle) < threshold:'), (557, '            self.add_line_to(point)'), (558, '            return self'), (559, ''), (560, '        # Assign default value for n_components'), (561, '        if n_components is None:'), (562, '            n_components = int(np.ceil(8 * angle / TAU))'), (563, '')], 'deleted': [(381, '    def get_stroke_width(self) -> float | np.ndarray:'), (553, '    def add_arc_to(self, point: Vect3, angle: float, n_components: int = 8) -> Self:')]}",310,310
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,b53ab02675c01812d477188851973c99e611ce92,5f41e238ba347b93cc3b56c078073badcde618f3,Simplify initialization of Line with path arc,"{'added': [(454, '        self.buff = buff'), (465, '        self.clear_points()'), (466, '        self.start_new_path(start)'), (467, '        self.add_arc_to(end, path_arc)'), (468, ''), (469, '        # Apply buffer'), (470, '        if buff > 0:'), (471, '            length = self.get_arc_length()'), (472, '            alpha = min(buff / length, 0.5)'), (473, '            self.pointwise_become_partial(self, alpha, 1 - alpha)'), (654, '        self.n_tip_points = 3'), (683, ''), (684, '        if self.path_arc > 0 and self.buff > 0:'), (685, '            self.insert_n_curves(10)  # Is this needed?'), (686, '        self.pointwise_become_partial(self, 0.0, 1.0 - alpha)'), (687, '        self.append_points([self.get_end(), self.get_end()])'), (689, '        self.n_tip_points = 3'), (700, '        ntp = self.n_tip_points'), (701, ""        self.data['stroke_width'][:-ntp] = self.data['stroke_width'][0]""), (702, ""        self.data['stroke_width'][-ntp:, 0] = tip_width * np.linspace(1, 0, ntp)"")], 'deleted': [(464, '        vect = end - start'), (465, '        dist = get_norm(vect)'), (466, '        if np.isclose(dist, 0):'), (467, '            self.set_points_as_corners([start, end])'), (468, '            return self'), (469, '        if path_arc:'), (470, '            neg = path_arc < 0'), (471, '            if neg:'), (472, '                path_arc = -path_arc'), (473, '                start, end = end, start'), (474, '            radius = (dist / 2) / math.sin(path_arc / 2)'), (475, '            alpha = (PI - path_arc) / 2'), (476, '            center = start + radius * normalize(rotate_vector(end - start, alpha))'), (477, ''), (478, '            raw_arc_points = quadratic_bezier_points_for_arc(path_arc - 2 * buff / radius)'), (479, '            rot_matrix = rotation_about_z(angle_of_vector(start - center) + buff / radius)'), (480, '            raw_arc_points = raw_arc_points @ rot_matrix.T'), (481, '            if neg:'), (482, '                raw_arc_points = raw_arc_points[::-1]'), (483, '            self.set_points(center + radius * raw_arc_points)'), (484, '        else:'), (485, '            if buff > 0 and dist > 0:'), (486, '                start = start + vect * (buff / dist)'), (487, '                end = end - vect * (buff / dist)'), (488, '            self.set_points_as_corners([start, end])'), (697, '        self.pointwise_become_partial(self, 0, 1 - alpha)'), (698, '        # Dumb that this is needed'), (699, '        self.start_new_path(self.point_from_proportion(1 - 1e-5))'), (711, ""        self.data['stroke_width'][:-3] = self.data['stroke_width'][0]""), (712, ""        self.data['stroke_width'][-3:, 0] = tip_width * np.linspace(1, 0, 3)"")]}",138,138
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2b00a9cf8020defc38832ab0e2166860c912f7d3,b53ab02675c01812d477188851973c99e611ce92,Fix add_curve_to,"{'added': [(562, '            n_components = int(np.ceil(8 * abs(angle) / TAU))')], 'deleted': [(562, '            n_components = int(np.ceil(8 * angle / TAU))')]}",310,310
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,295a0f76cc0d7ced0af8ffbd41e56f6343b52c82,2b00a9cf8020defc38832ab0e2166860c912f7d3,Formatting tweak,"{'added': [(778, '        assert n < self.get_num_curves()'), (779, '        return self.get_points()[2 * n:2 * n + 3]')], 'deleted': [(778, '        assert(n < self.get_num_curves())'), (779, '        return self.get_points()[2 * n : 2 * n + 3]')]}",310,310
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,39e5d24858bb985923eab3e88bd1830007525bbc,295a0f76cc0d7ced0af8ffbd41e56f6343b52c82,Factor out partial results from point_from_proportion,"{'added': [(794, '    def curve_and_prop_of_partial_point(self, alpha) -> Tuple[int, float]:'), (795, '        """"""'), (796, '        If you want a point a proportion alpha along the curve, this'), (797, '        gives you the index of the appropriate bezier curve, together'), (798, ""        with the proportion along that curve you'd need to travel""), (799, '        """"""'), (800, '        if alpha == 0:'), (801, '            return (0, 0.0)'), (813, '            return len(partials), 1.0'), (815, '        index = next('), (817, '            len(partials) - 1  # Default'), (819, '        residue = float(inverse_interpolate('), (820, '            partials[index - 1] / full, partials[index] / full, alpha'), (821, '        ))'), (822, '        return index - 1, residue'), (823, ''), (824, '    def point_from_proportion(self, alpha: float) -> Vect3:'), (825, '        if alpha <= 0:'), (826, '            return self.get_start()'), (827, '        elif alpha >= 1:'), (828, '            return self.get_end()'), (829, '        index, residue = self.curve_and_prop_of_partial_point(alpha)'), (830, '        return self.get_nth_curve_function(index)(residue)')], 'deleted': [(794, '    def point_from_proportion(self, alpha: float) -> Vect3:'), (795, '        if alpha <= 0:'), (796, '            return self.get_start()'), (797, '        elif alpha >= 1:'), (798, '            return self.get_end()'), (799, ''), (811, '            return self.get_start()'), (813, '        i = next('), (815, '            len(partials)  # Default'), (817, '        residue = float(inverse_interpolate(partials[i - 1] / full, partials[i] / full, alpha))'), (818, '        return self.get_nth_curve_function(i - 1)(residue)')]}",312,312
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,a8b1791ff5939950a90feec3700fe3d3b20aed3f,39e5d24858bb985923eab3e88bd1830007525bbc,Small tweaks to arrow tip implementation,"{'added': [(16, 'from manimlib.utils.bezier import bezier'), (18, 'from manimlib.utils.bezier import partial_quadratic_bezier_points'), (689, '        self.add_line_to(self.get_end())')], 'deleted': [(687, '        self.append_points([self.get_end(), self.get_end()])')]}",138,138
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,916ab94efd402b730b44455fb9dd1f3aff864699,a8b1791ff5939950a90feec3700fe3d3b20aed3f,Remove white space,"{'added': [(28, '    def __init__(')], 'deleted': [(28, '    def __init__(')]}",8,8
manimlib/animation/animation.py,manimlib/animation/animation.py,f4778b57ef0254b5b05d0ea60f1fb15d31d731fd,916ab94efd402b730b44455fb9dd1f3aff864699,Have Animation keep track of whether a mobject had had it's updating suspended before resuming it at the end,"{'added': [(77, '            self.mobject_was_updating = not self.mobject.updating_suspended'), (85, '        if self.suspend_mobject_updating and self.mobject_was_updating:')], 'deleted': [(84, '        if self.suspend_mobject_updating:')]}",39,39
manimlib/animation/creation.py,manimlib/animation/creation.py,cbc32468bf2b23610294b534ec77ef134b20c506,f4778b57ef0254b5b05d0ea60f1fb15d31d731fd,Note chanted stroke and fill after DrawBorderThenFill  has complete,"{'added': [(142, '        submob.note_changed_stroke()'), (143, '        submob.note_changed_fill()')], 'deleted': []}",34,34
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,0d046a7eab8c5272a40fd14a656b34abc90caed7,cbc32468bf2b23610294b534ec77ef134b20c506,Add an option for a graph to continually update to its defining function,"{'added': [(178, '        bind: bool = False,'), (199, ''), (200, '        if bind:'), (201, '            self.bind_graph_to_func(graph, function)'), (202, '')], 'deleted': []}",112,112
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,2cdb85cae90b41e5fe43abc2e63a2d8d5db2ec25,0d046a7eab8c5272a40fd14a656b34abc90caed7,Don't assign a fixed default depth to ThreeDAxes,"{'added': [(532, '        depth: float | None = None,')], 'deleted': [(532, '        depth: float = 6.0,')]}",112,112
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,17cd5979046db60b7b5885f10fe0a708301c76dc,2cdb85cae90b41e5fe43abc2e63a2d8d5db2ec25,Have Arrow track what stroke width it was set to,"{'added': [(657, '        self.original_stroke_width = stroke_width'), (699, '        stroke_width = min('), (700, '            self.original_stroke_width,'), (703, '        tip_width = self.tip_width_ratio * stroke_width'), (723, '        self.original_stroke_width = self.get_stroke_width()')], 'deleted': [(698, '        tip_width = self.tip_width_ratio * min('), (699, '            float(self.get_stroke_width()),')]}",138,138
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,246a010799d8554f7e532daab4a48299db2378bd,17cd5979046db60b7b5885f10fe0a708301c76dc,Add default border width to StringMobject,"{'added': [(50, '        fill_border_width: float = 0.5,'), (69, '        super().__init__(**kwargs)'), (70, '        self.set_stroke(stroke_color, stroke_width)'), (71, '        self.set_fill(fill_color, border_width=fill_border_width)'), (72, '        self.note_changed_stroke()')], 'deleted': [(68, '        super().__init__('), (69, '            stroke_color=stroke_color,'), (70, '            fill_color=fill_color,'), (71, '            stroke_width=stroke_width,'), (72, '            **kwargs'), (73, '        )')]}",129,129
manimlib/window.py,manimlib/window.py,8a4d7b4e8cec4239e5ef58a4ef9d4dbb0f07adab,246a010799d8554f7e532daab4a48299db2378bd,Add a small hack to ensure Window resets properly in non-primary monitors,"{'added': [(30, '        samples: int = 0'), (51, '        # Hack. Sometimes, namely when configured to open in a separate window,'), (52, '        # the window needs to be resized to display correctly.'), (53, '        w, h = self.default_size'), (54, '        self.size = (w - 1, h - 1)'), (55, '        self.size = (w, h)')], 'deleted': [(30, '        samples = 0'), (50, '        self.size = self.default_size'), (52, '        self.swap_buffers()')]}",19,19
.gitignore,.gitignore,dcf3eb8416cd096cb46f3fedf9cd3e16347c7347,8a4d7b4e8cec4239e5ef58a4ef9d4dbb0f07adab,Ignore pyright configuration,"{'added': [(94, 'pyrightconfig.json')], 'deleted': []}",,
requirements.txt,requirements.txt,fa017b94d94e673317f53fdaef7d5239641d1606,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,"Update requirements.txt

Now, the ipython version needs to be 8.18.0 or greater","{'added': [(2, 'ipython>=8.18.0')], 'deleted': [(2, 'ipython')]}",,
manimlib/animation/movement.py,manimlib/animation/movement.py,f8fedffa4c4aefb18bf736067fdbe62da2b9d073,dcf3eb8416cd096cb46f3fedf9cd3e16347c7347,Use rate function on MoveAlongPath,"{'added': [(117, '        point = self.path.quick_point_from_proportion(self.rate_func(alpha))')], 'deleted': [(117, '        point = self.path.quick_point_from_proportion(alpha)')]}",12,12
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,88672a21ff84cfe4c4f82cc7d8663aa7e404eeeb,f8fedffa4c4aefb18bf736067fdbe62da2b9d073,"Include texture id in shader wrapper id

This ensure that, among other things, ImageMobjects appearing in groups don't get lumped together in rendering.","{'added': [(141, '            self.texture_names_to_ids,')], 'deleted': []}",59,59
manimlib/utils/shaders.py,manimlib/utils/shaders.py,41ece958fd1fe5b0138255d3003e321df3d6ad01,88672a21ff84cfe4c4f82cc7d8663aa7e404eeeb,Explicitly call out global naure of ID_TO_TEXTURE map,"{'added': [(24, '# Global maps updated as textures are allocated')], 'deleted': []}",19,19
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,855ef9be8d19a4e7ae53e6a46736bf5b85c9de63,41ece958fd1fe5b0138255d3003e321df3d6ad01,"Refactor Matrix, DecimalMatrix, MobjectMatrix, etc.","{'added': [(7, 'from manimlib.constants import DOWN, LEFT, RIGHT, ORIGIN'), (16, '    from typing import Sequence, Union, Tuple'), (17, '    from manimlib.typing import ManimColor, Vect3, VectNArray, Self'), (18, ''), (19, '    StringMatrixType = Union[Sequence[Sequence[str]], np.ndarray[int, np.dtype[np.str_]]]'), (20, '    FloatMatrixType = Union[Sequence[Sequence[float]], VectNArray]'), (21, '    VMobjectMatrixType = Sequence[Sequence[VMobject]]'), (22, '    GenericMatrixType = Union[FloatMatrixType, StringMatrixType, VMobjectMatrixType]'), (23, ''), (29, '        matrix: GenericMatrixType,'), (30, '        v_buff: float = 0.5,'), (31, '        h_buff: float = 0.5,'), (34, '        height: float | None = None,'), (35, '        element_config: dict = dict(),'), (44, '        self.mob_matrix = self.create_mobject_matrix('), (45, '            matrix, v_buff, h_buff, element_alignment_corner,'), (46, '            **element_config'), (47, '        )'), (48, '        # Create helpful groups for the elements'), (49, '        n_cols = len(self.mob_matrix[0])'), (50, '        self.elements = VGroup(*it.chain(*self.mob_matrix))'), (51, '        self.columns = VGroup(*('), (52, '            VGroup(*(row[i] for row in self.mob_matrix))'), (53, '            for i in range(n_cols)'), (54, '        ))'), (55, '        self.rows = VGroup(*(VGroup(*row) for row in self.mob_matrix))'), (56, ''), (57, '        # Add elements and brackets'), (59, '        if height is not None:'), (60, '            self.set_height(height - 2 * bracket_v_buff)'), (64, '    def create_mobject_matrix('), (66, '        matrix: GenericMatrixType,'), (67, '        v_buff: float,'), (68, '        h_buff: float,'), (69, '        aligned_corner: Vect3,'), (70, '        **element_config'), (71, '    ) -> VMobjectMatrixType:'), (72, '        """"""'), (73, '        Creates and organizes the matrix of mobjects'), (74, '        """"""'), (75, '        mob_matrix = ['), (77, '                self.element_to_mobject(element, **element_config)'), (78, '                for element in row'), (82, '        max_width = max(elem.get_width() for row in mob_matrix for elem in row)'), (83, '        max_height = max(elem.get_height() for row in mob_matrix for elem in row)'), (84, '        x_step = (max_width + h_buff) * RIGHT'), (85, '        y_step = (max_height + v_buff) * DOWN'), (86, '        for i, row in enumerate(mob_matrix):'), (88, '                elem.move_to(i * y_step + j * x_step, aligned_corner)'), (89, '        return mob_matrix'), (90, ''), (91, '    def element_to_mobject(self, element, **config) -> VMobject:'), (92, '        if isinstance(element, VMobject):'), (93, '            return element'), (94, '        elif isinstance(element, float | complex):'), (95, '            return DecimalNumber(element, **config)'), (96, '        else:'), (97, '            return Tex(str(element), **config)'), (112, '        self.brackets = VGroup(l_bracket, r_bracket)'), (116, '    def get_column(self, index: int):'), (117, '        if not 0 <= index < len(self.columns):'), (118, '            raise IndexError(f""Index {index} out of bound for matrix with {len(self.columns)} columns"")'), (119, '        return self.columns[index]'), (120, ''), (121, '    def get_row(self, index: int):'), (122, '        if not 0 <= index < len(self.rows):'), (123, '            raise IndexError(f""Index {index} out of bound for matrix with {len(self.rows)} rows"")'), (124, '        return self.rows[index]'), (125, ''), (127, '        return self.columns'), (130, '        return self.rows'), (143, '    def get_mob_matrix(self) -> VMobjectMatrixType:'), (154, '    def __init__('), (155, '        self,'), (156, '        matrix: FloatMatrixType,'), (157, '        num_decimal_places: int = 2,'), (158, '        decimal_config: dict = dict(),'), (159, '        **config'), (160, '    ):'), (161, '        super().__init__('), (162, '            matrix,'), (163, '            element_config=dict('), (164, '                num_decimal_places=num_decimal_places,'), (165, '                **decimal_config'), (166, '            ),'), (167, '            **config'), (168, '        )'), (170, '    def element_to_mobject(self, element, **decimal_config) -> VMobject:'), (171, '        return DecimalNumber(element, **decimal_config)'), (173, ''), (174, 'class IntegerMatrix(DecimalMatrix):'), (177, '        matrix: FloatMatrixType,'), (178, '        num_decimal_places: int = 0,'), (179, '        decimal_config: dict = dict(),'), (180, '        **config'), (182, '        super().__init__(matrix, num_decimal_places, decimal_config, **config)'), (183, ''), (184, ''), (185, ''), (186, 'class TexMatrix(Matrix):'), (187, '    def __init__('), (188, '        self,'), (189, '        matrix: StringMatrixType,'), (190, '        tex_config: dict = dict(),'), (191, '        **config,'), (192, '    ):'), (193, '        super().__init__('), (194, '            matrix,'), (195, '            element_config=tex_config,'), (196, '            **config'), (197, '        )'), (202, '    def __init__('), (203, '        self,'), (204, '        group: VGroup,'), (205, '        n_rows: int | None = None,'), (206, '        n_cols: int | None = None,'), (207, '        height: float = 4.0,'), (208, '        element_alignment_corner=ORIGIN,'), (209, '        **config,'), (210, '    ):'), (211, '        # Have fallback defaults of n_rows and n_cols'), (212, '        n_mobs = len(group)'), (213, '        if n_rows is None:'), (214, '            n_rows = int(np.sqrt(n_mobs)) if n_cols is None else n_mobs // n_cols'), (215, '        if n_cols is None:'), (216, '            n_cols = n_mobs // n_rows'), (217, ''), (218, '        if len(group) < n_rows * n_cols:'), (219, '            raise Exception(""Input to MobjectMatrix must have at least n_rows * n_cols entries"")'), (220, ''), (221, '        mob_matrix = ['), (222, '            [group[n * n_cols + k] for k in range(n_cols)]'), (223, '            for n in range(n_rows)'), (224, '        ]'), (225, '        config.update('), (226, '            height=height,'), (227, '            element_alignment_corner=element_alignment_corner,'), (228, '        )'), (229, '        super().__init__(mob_matrix,  **config)'), (230, '')], 'deleted': [(7, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFFER'), (8, 'from manimlib.constants import DOWN, LEFT, RIGHT, UP'), (9, 'from manimlib.constants import WHITE'), (11, 'from manimlib.mobject.numbers import Integer'), (12, 'from manimlib.mobject.shape_matchers import BackgroundRectangle'), (14, 'from manimlib.mobject.svg.tex_mobject import TexText'), (21, '    from typing import Sequence'), (22, '    import numpy.typing as npt'), (23, '    from manimlib.mobject.mobject import Mobject'), (24, '    from manimlib.typing import ManimColor, Vect3, Self'), (25, ''), (26, ''), (27, 'VECTOR_LABEL_SCALE_FACTOR = 0.8'), (28, ''), (29, ''), (30, 'def matrix_to_tex_string(matrix: npt.ArrayLike) -> str:'), (31, '    matrix = np.array(matrix).astype(""str"")'), (32, '    if matrix.ndim == 1:'), (33, '        matrix = matrix.reshape((matrix.size, 1))'), (34, '    n_rows, n_cols = matrix.shape'), (35, '    prefix = R""\\left[ \\begin{array}{%s}"" % (""c"" * n_cols)'), (36, '    suffix = R""\\end{array} \\right]""'), (37, '    rows = ['), (38, '        "" & "".join(row)'), (39, '        for row in matrix'), (40, '    ]'), (41, '    return prefix + R"" \\\\ "".join(rows) + suffix'), (42, ''), (43, ''), (44, 'def matrix_to_mobject(matrix: npt.ArrayLike) -> Tex:'), (45, '    return Tex(matrix_to_tex_string(matrix))'), (46, ''), (47, ''), (48, 'def vector_coordinate_label('), (49, '    vector_mob: VMobject,'), (50, '    integer_labels: bool = True,'), (51, '    n_dim: int = 2,'), (52, '    color: ManimColor = WHITE'), (53, ') -> Matrix:'), (54, '    vect = np.array(vector_mob.get_end())'), (55, '    if integer_labels:'), (56, '        vect = np.round(vect).astype(int)'), (57, '    vect = vect[:n_dim]'), (58, '    vect = vect.reshape((n_dim, 1))'), (59, '    label = Matrix(vect, add_background_rectangles_to_entries=True)'), (60, '    label.scale(VECTOR_LABEL_SCALE_FACTOR)'), (61, ''), (62, '    shift_dir = np.array(vector_mob.get_end())'), (63, '    if shift_dir[0] >= 0:  # Pointing right'), (64, '        shift_dir -= label.get_left() + DEFAULT_MOBJECT_TO_MOBJECT_BUFFER * LEFT'), (65, '    else:  # Pointing left'), (66, '        shift_dir -= label.get_right() + DEFAULT_MOBJECT_TO_MOBJECT_BUFFER * RIGHT'), (67, '    label.shift(shift_dir)'), (68, '    label.set_color(color)'), (69, '    label.rect = BackgroundRectangle(label)'), (70, '    label.add_to_back(label.rect)'), (71, '    return label'), (77, '        matrix: Sequence[Sequence[str | float | VMobject]],'), (78, '        v_buff: float = 0.8,'), (79, '        h_buff: float = 1.0,'), (82, '        add_background_rectangles_to_entries: bool = False,'), (83, '        include_background_rectangle: bool = False,'), (85, '        **kwargs'), (93, '        mob_matrix = self.matrix_to_mob_matrix(matrix, **kwargs)'), (94, '        self.mob_matrix = mob_matrix'), (95, ''), (96, '        self.organize_mob_matrix(mob_matrix, v_buff, h_buff, element_alignment_corner)'), (97, '        self.elements = VGroup(*it.chain(*mob_matrix))'), (101, '        if add_background_rectangles_to_entries:'), (102, '            for mob in self.elements:'), (103, '                mob.add_background_rectangle()'), (104, '        if include_background_rectangle:'), (105, '            self.add_background_rectangle()'), (107, ''), (108, '    def element_to_mobject(self, element: str | float | VMobject, **config) -> VMobject:'), (109, '        if isinstance(element, VMobject):'), (110, '            return element'), (111, '        return Tex(str(element), **config)'), (112, ''), (113, '    def matrix_to_mob_matrix('), (115, '        matrix: Sequence[Sequence[str | float | VMobject]],'), (116, '        **config'), (117, '    ) -> list[list[VMobject]]:'), (118, '        return ['), (120, '                self.element_to_mobject(item, **config)'), (121, '                for item in row'), (125, ''), (126, '    def organize_mob_matrix('), (127, '        self,'), (128, '        matrix: list[list[VMobject]],'), (129, '        v_buff: float,'), (130, '        h_buff: float,'), (131, '        aligned_corner: Vect3,'), (132, '    ) -> Self:'), (133, '        for i, row in enumerate(matrix):'), (135, '                mob = matrix[i][j]'), (136, '                mob.move_to('), (137, '                    i * v_buff * DOWN + j * h_buff * RIGHT,'), (138, '                    aligned_corner'), (139, '                )'), (140, '        return self'), (155, '        self.brackets = brackets'), (160, '        return VGroup(*['), (161, '            VGroup(*[row[i] for row in self.mob_matrix])'), (162, '            for i in range(len(self.mob_matrix[0]))'), (163, '        ])'), (166, '        return VGroup(*['), (167, '            VGroup(*row)'), (168, '            for row in self.mob_matrix'), (169, '        ])'), (182, '    def get_mob_matrix(self) -> list[list[Mobject]]:'), (193, '    def element_to_mobject(self, element: float, num_decimal_places: int = 1, **config) -> DecimalNumber:'), (194, '        return DecimalNumber(element, num_decimal_places=num_decimal_places, **config)'), (197, 'class IntegerMatrix(Matrix):'), (200, '        matrix: npt.ArrayLike,'), (201, '        element_alignment_corner: Vect3 = UP,'), (202, '        **kwargs'), (204, '        super().__init__(matrix, element_alignment_corner=element_alignment_corner, **kwargs)'), (206, '    def element_to_mobject(self, element: int, **config) -> Integer:'), (207, '        return Integer(element, **config)'), (213, ''), (214, ''), (215, 'def get_det_text('), (216, '    matrix: Matrix,'), (217, '    determinant: int | str | None = None,'), (218, '    background_rect: bool = False,'), (219, '    initial_scale_factor: int = 2'), (220, ') -> VGroup:'), (221, '    parens = Tex(""()"")'), (222, '    parens.scale(initial_scale_factor)'), (223, '    parens.stretch_to_fit_height(matrix.get_height())'), (224, '    l_paren, r_paren = parens.split()'), (225, '    l_paren.next_to(matrix, LEFT, buff=0.1)'), (226, '    r_paren.next_to(matrix, RIGHT, buff=0.1)'), (227, '    det = TexText(""det"")'), (228, '    det.scale(initial_scale_factor)'), (229, '    det.next_to(l_paren, LEFT, buff=0.1)'), (230, '    if background_rect:'), (231, '        det.add_background_rectangle()'), (232, '    det_text = VGroup(det, l_paren, r_paren)'), (233, '    if determinant is not None:'), (234, '        eq = Tex(""="")'), (235, '        eq.next_to(r_paren, RIGHT, buff=0.1)'), (236, '        result = Tex(str(determinant))'), (237, '        result.next_to(eq, RIGHT, buff=0.2)'), (238, '        det_text.add(eq, result)'), (239, '    return det_text')]}",43,43
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,8179ba88d01c6da468a9cd64405abd181f5bc1fc,855ef9be8d19a4e7ae53e6a46736bf5b85c9de63,Reformat defaults for n_rows and n_cols in Mobject.arrange_in_grid,"{'added': [(498, '        n_submobs = len(submobs)'), (500, '            n_rows = int(np.sqrt(n_submobs)) if n_cols is None else n_submobs // n_cols'), (502, '            n_cols = n_submobs // n_rows')], 'deleted': [(498, '        if n_rows is None and n_cols is None:'), (499, '            n_rows = int(np.sqrt(len(submobs)))'), (501, '            n_rows = len(submobs) // n_cols'), (503, '            n_cols = len(submobs) // n_rows')]}",548,548
manimlib/shaders/inserts/get_gl_Position.glsl,,60b762ca4339c611c7e4d19f27d5ed3f878ecb14,8179ba88d01c6da468a9cd64405abd181f5bc1fc,Remove redundant and unused get_gl_Position.glsl file,"{'added': [], 'deleted': [(1, 'uniform float is_fixed_in_frame;'), (2, 'uniform mat4 view;'), (3, 'uniform float focal_distance;'), (4, ''), (5, 'const float DEFAULT_FRAME_HEIGHT = 8.0;'), (6, 'const float ASPECT_RATIO = 16.0 / 9.0;'), (7, 'const float X_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT / ASPECT_RATIO;'), (8, 'const float Y_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT;'), (9, ''), (10, 'void emit_gl_Position(vec3 point){'), (11, '    vec4 result = vec4(point, 1.0);'), (12, '    if(!bool(is_fixed_in_frame)){'), (13, '        result = view * result;'), (14, '    }'), (15, '    // Essentially a projection matrix'), (16, '    result.x *= X_SCALE;'), (17, '    result.y *= Y_SCALE;'), (18, '    result.z /= focal_distance;'), (19, '    result.w = 1.0 - result.z;'), (20, '    // Flip and scale to prevent premature clipping'), (21, '    result.z *= -0.1;'), (22, '    gl_Position = result;'), (23, '}')]}",,
manimlib/shaders/inserts/emit_gl_Position.glsl,manimlib/shaders/inserts/emit_gl_Position.glsl,d3dee240c329245166013220b1b54af9066da7b9,60b762ca4339c611c7e4d19f27d5ed3f878ecb14,Allow for smooth transitions between mobjects fixed and unfixed from the frame,"{'added': [(12, '    // This allow for smooth transitions between objects fixed and unfixed from frame'), (13, '    result = mix(view * result, result, is_fixed_in_frame);')], 'deleted': [(12, '    if(!bool(is_fixed_in_frame)){'), (13, '        result = view * result;'), (14, '    }')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,d3dee240c329245166013220b1b54af9066da7b9,60b762ca4339c611c7e4d19f27d5ed3f878ecb14,Allow for smooth transitions between mobjects fixed and unfixed from the frame,"{'added': [(24, '    v_stroke_width *= mix(frame_scale, 1, is_fixed_in_frame);')], 'deleted': [(24, '    if(!bool(is_fixed_in_frame)){'), (25, '        v_stroke_width *= frame_scale;'), (26, '    }')]}",,
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,1c72059725d244ecae0846dec7b8bb7f84b9af9e,d3dee240c329245166013220b1b54af9066da7b9,Have surrounding rectangle match framed fixed status of what it surrounds,"{'added': [(33, '        if mobject.is_fixed_in_frame():'), (34, '            self.fix_in_frame()')], 'deleted': []}",12,12
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,cde709fcfada100eb1c8fc430ad773085c4718fd,1c72059725d244ecae0846dec7b8bb7f84b9af9e,Replace fix_in_frame matching for DecimalNumber.set_value to general uniform matching,"{'added': [(174, '        for submob in self.get_family():'), (175, '            submob.uniforms.update(self.uniforms)')], 'deleted': [(174, '        self.fix_in_frame(self._is_fixed_in_frame)')]}",36,36
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,711438f625c4be9aab6b89a616963daacb215e54,cde709fcfada100eb1c8fc430ad773085c4718fd,"Update the types in decorator methods using @wraps

This is method to address issues flagged by pyright","{'added': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Any'), (56, ""    T = TypeVar('T')""), (168, '    @staticmethod'), (169, '    def affects_data(func: Callable[..., T]) -> Callable[..., T]:'), (172, '            result = func(self, *args, **kwargs)'), (174, '            return result'), (177, '    @staticmethod'), (178, '    def affects_family_data(func: Callable[..., T]) -> Callable[..., T]:'), (181, '            result = func(self, *args, **kwargs)'), (184, '            return result'), (585, '    @staticmethod'), (586, '    def stash_mobject_pointers(func: Callable[..., T]) -> Callable[..., T]:'), (1871, '    @staticmethod'), (1872, '    def affects_shader_info_id(func: Callable[..., T]) -> Callable[..., T]:')], 'deleted': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional'), (167, '    def affects_data(func: Callable):'), (170, '            func(self, *args, **kwargs)'), (174, '    def affects_family_data(func: Callable):'), (177, '            func(self, *args, **kwargs)'), (180, '            return self'), (581, '    def stash_mobject_pointers(func: Callable):'), (1866, '    def affects_shader_info_id(func: Callable):')]}",548,548
manimlib/animation/composition.py,manimlib/animation/composition.py,45d904940562d681bf0dbce9c60cc0615c30284c,711438f625c4be9aab6b89a616963daacb215e54,Minor clean up,"{'added': [(29, '    def __init__('), (30, '        self,')], 'deleted': [(29, '    def __init__(self,')]}",35,35
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,661814deea7fcfeed0f370a67668d2191fb63edc,45d904940562d681bf0dbce9c60cc0615c30284c,Add all orientation options into CameraFrame.reorient,"{'added': [(138, '        center: Vect3 | tuple[float, float, float] | None = None,'), (139, '        height: float | None = None'), (146, '        if center is not None:'), (147, '            self.move_to(np.array(center))'), (148, '        if height is not None:'), (149, '            self.set_height(height)')], 'deleted': []}",46,46
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,4aef0d1bf549c9cf2f6201dc9c28d88b18a7a3a3,661814deea7fcfeed0f370a67668d2191fb63edc,Add add_ambient_rotation,"{'added': [(173, '    def add_ambient_rotation(self, angular_speed=1 * DEGREES):'), (174, '        self.add_updater(lambda m, dt: m.increment_theta(angular_speed * dt))'), (175, '        return self'), (176, '')], 'deleted': []}",47,47
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ebe689dedece2df6b90bc73bc3e40fd8c71cc3bb,4aef0d1bf549c9cf2f6201dc9c28d88b18a7a3a3,"Treat is_fixed_in_frame as a float in uniforms, to allow for transformations between","{'added': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar'), (120, '        if is_fixed_in_frame:'), (121, '            self.fix_in_frame()'), (139, '            ""is_fixed_in_frame"": 0.0,'), (2139, '        super().__init__(**kwargs)'), (2143, '        assert isinstance(other, Mobject)'), (2147, '')], 'deleted': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Any'), (92, '        self._is_fixed_in_frame = is_fixed_in_frame'), (138, '            ""is_fixed_in_frame"": float(self._is_fixed_in_frame),'), (2138, '        Mobject.__init__(self, **kwargs)'), (2140, '        if any(m.is_fixed_in_frame() for m in mobjects):'), (2141, '            self.fix_in_frame()'), (2144, '        assert(isinstance(other, Mobject))')]}",547,547
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,dfa96c20479262a1e731e09cbede6b15e7c91109,ebe689dedece2df6b90bc73bc3e40fd8c71cc3bb,Update copy_frame_positioning,"{'added': [(508, '            self.copy_frame_positioning()'), (618, '    def copy_frame_positioning(self):'), (624, '        call = f""reorient(""'), (625, '        theta, phi, gamma = (angles / DEGREES).astype(int)'), (626, '        call += f""{theta}, {phi}, {gamma}""'), (628, '            call += f"", {tuple(np.round(center, 2))}""'), (630, '            call += "", {:.2f}"".format(height)'), (631, '        call += "")""')], 'deleted': [(508, '            self.copy_frame_anim_call()'), (618, '    def copy_frame_anim_call(self):'), (624, '        call = f""self.frame.animate.reorient""'), (625, '        call += str(tuple((angles / DEGREES).astype(int)))'), (627, '            call += f"".move_to({list(np.round(center, 2))})""'), (629, '            call += "".set_height({:.2f})"".format(height)')]}",161,161
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7009f0f53e4edc6aa5a91e362d8990c20655b300,dfa96c20479262a1e731e09cbede6b15e7c91109,Add space after assert,"{'added': [(1426, '        assert isinstance(other, VMobject)')], 'deleted': [(1426, '        assert(isinstance(other, VMobject))')]}",312,312
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,100b108ad18d952977f4f0e27a28267aa7b72734,7009f0f53e4edc6aa5a91e362d8990c20655b300,"Treat Group and VGroup more like list types

This may not be the best way to address it, but at least temporarily it prevents linting issues for calls like VGroup(Circle())[0].get_radius()","{'added': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Generic, List'), (60, ""    SubmobjectType = TypeVar('SubmobjectType', bound='Mobject')""), (356, '    def __getitem__(self, value: int | slice) -> Mobject:'), (2136, 'class Group(Mobject, Generic[SubmobjectType]):'), (2137, '    def __init__(self, *mobjects: SubmobjectType, **kwargs):'), (2147, '    # This is just here to make linters happy with references to things like Group(...)[0]'), (2148, '    def __getitem__(self, index) -> SubmobjectType:'), (2149, '        return super().__getitem__(index)')], 'deleted': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar'), (355, '    def __getitem__(self, value: int | slice) -> Self:'), (2135, 'class Group(Mobject):'), (2136, '    def __init__(self, *mobjects: Mobject, **kwargs):')]}",548,548
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,100b108ad18d952977f4f0e27a28267aa7b72734,7009f0f53e4edc6aa5a91e362d8990c20655b300,"Treat Group and VGroup more like list types

This may not be the best way to address it, but at least temporarily it prevents linting issues for calls like VGroup(Circle())[0].get_radius()","{'added': [(53, '    from typing import Callable, Iterable, Tuple, Any, Generic, TypeVar'), (56, ""    SubVmobjectType = TypeVar('SubVmobjectType', bound='VMobject')""), (61, ''), (1420, 'class VGroup(VMobject, Generic[SubVmobjectType]):'), (1421, '    def __init__(self, *vmobjects: SubVmobjectType, **kwargs):'), (1431, '    # This is just here to make linters happy with references to things like VGroup(...)[0]'), (1432, '    def __getitem__(self, index) -> SubVmobjectType:'), (1433, '        return super().__getitem__(index)'), (1434, '')], 'deleted': [(53, '    from typing import Callable, Iterable, Tuple, Any'), (1418, 'class VGroup(VMobject):'), (1419, '    def __init__(self, *vmobjects: VMobject, **kwargs):')]}",313,313
manimlib/utils/color.py,manimlib/utils/color.py,31b2bcd9e6ca8714accea22b0ddea2acea496650,100b108ad18d952977f4f0e27a28267aa7b72734,Add interpolate_color_by_hsl,"{'added': [(105, 'def interpolate_color_by_hsl('), (106, '    color1: ManimColor,'), (107, '    color2: ManimColor,'), (108, '    alpha: float'), (109, ') -> Color:'), (110, '    hsl1 = np.array(Color(color1).get_hsl())'), (111, '    hsl2 = np.array(Color(color2).get_hsl())'), (112, '    return Color(hsl=interpolate(hsl1, hsl2, alpha))'), (113, ''), (114, '')], 'deleted': []}",26,26
manimlib/utils/color.py,manimlib/utils/color.py,e4c824e672444b139d30148e070ff3692dcbc9ba,31b2bcd9e6ca8714accea22b0ddea2acea496650,Update random_bright_color to operate based on hsl ranges,"{'added': [(124, 'def random_bright_color('), (125, '    hue_range: tuple[float, float] = (0.0, 1.0),'), (126, '    saturation_range: tuple[float, float] = (0.5, 0.8),'), (127, '    luminance_range: tuple[float, float] = (0.5, 1.0),'), (128, ') -> Color:'), (129, '    return Color(hsl=('), (130, '        interpolate(*hue_range, random.random()),'), (131, '        interpolate(*saturation_range, random.random()),'), (132, '        interpolate(*luminance_range, random.random()),'), (133, '    ))')], 'deleted': [(124, 'def random_bright_color() -> Color:'), (125, '    color = random_color()'), (126, '    return average_color(color, Color(WHITE))')]}",26,26
manimlib/utils/color.py,manimlib/utils/color.py,f3571cf2cbeb2588e49d7784258f6df0e3243307,e4c824e672444b139d30148e070ff3692dcbc9ba,Add random import,"{'added': [(7, 'import random')], 'deleted': []}",26,26
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,8417369da12d68b4ab863de7d4f9218d6635f5df,f3571cf2cbeb2588e49d7784258f6df0e3243307,Performance improvement for DecimalNumber.set_value,"{'added': [(2, 'from functools import lru_cache'), (21, '@lru_cache()'), (22, 'def char_to_cahced_mob(char: str, **text_config):'), (23, '    return Text(char, **text_config)'), (24, ''), (25, ''), (55, '        self.text_config[""font_size""] = font_size'), (68, '        # Create the submobject list'), (70, '        self.num_string = self.get_num_string(number)'), (72, '        # Submob_templates will be a list of cached Tex and Text mobjects,'), (73, '        # with the intent of calling .copy or .become on them'), (74, '        submob_templates = list(map(self.char_to_mob, self.num_string))'), (78, '            submob_templates.append(dots)'), (80, '            submob_templates.append(self.char_to_mob(self.unit))'), (82, '        # Set internals'), (83, '        if len(submob_templates) == len(self.submobjects):'), (84, '            for sm, smt in zip(self.submobjects, submob_templates):'), (85, '                sm.become(smt)'), (86, '        else:'), (87, '            self.set_submobjects([smt.copy() for smt in submob_templates])'), (88, ''), (89, '        font_size = self.get_font_size()'), (90, '        digit_buff = self.digit_buff_per_font_unit * font_size'), (91, '        self.scale(font_size / self.text_config[""font_size""])'), (92, '        self.arrange(RIGHT, buff=digit_buff, aligned_edge=DOWN)'), (94, '        # Handle alignment of special characters'), (95, '        for i, c in enumerate(self.num_string):'), (96, '            if c == ""â"" and len(self.num_string) > i + 1:'), (102, '            self[-1].align_to(self, UP)'), (125, '    def char_to_mob(self, char: str) -> Text:'), (126, '        return char_to_cahced_mob(char, **self.text_config)')], 'deleted': [(49, '        self.char_to_mob_map = dict()'), (63, '        self.set_submobjects([])'), (64, '        self.text_config[""font_size""] = self.get_font_size()'), (65, '        num_string = self.num_string = self.get_num_string(number)'), (66, '        self.add(*map(self.char_to_mob, num_string))'), (68, '        # Add non-numerical bits'), (72, '            self.add(dots)'), (74, '            self.unit_sign = Tex(self.unit, font_size=self.get_font_size())'), (75, '            self.add(self.unit_sign)'), (77, '        self.arrange('), (78, '            buff=self.digit_buff_per_font_unit * self.get_font_size(),'), (79, '            aligned_edge=DOWN'), (80, '        )'), (82, '        # Handle alignment of parts that should be aligned'), (83, '        # to the bottom'), (84, '        for i, c in enumerate(num_string):'), (85, '            if c == ""â"" and len(num_string) > i + 1:'), (91, '            self.unit_sign.align_to(self, UP)'), (114, '    def char_to_mob(self, char: str) -> Tex | Text:'), (115, '        if char not in self.char_to_mob_map:'), (116, '            self.char_to_mob_map[char] = Text(char, **self.text_config)'), (117, '        result = self.char_to_mob_map[char].copy()'), (118, '        result.scale(self.get_font_size() / result.font_size)'), (119, '        return result')]}",39,39
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,2966f358a36b70809a314d37266fafb6946bdb07,8417369da12d68b4ab863de7d4f9218d6635f5df,Pull type definitions used for Generic[SubmobjectType] outside of if TYPE_CHECKING block,"{'added': [(49, 'from typing import TypeVar, Generic'), (50, ""SubmobjectType = TypeVar('SubmobjectType', bound='Mobject')""), (51, ''), (54, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional')], 'deleted': [(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Generic, List'), (60, ""    SubmobjectType = TypeVar('SubmobjectType', bound='Mobject')"")]}",548,548
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2966f358a36b70809a314d37266fafb6946bdb07,8417369da12d68b4ab863de7d4f9218d6635f5df,Pull type definitions used for Generic[SubmobjectType] outside of if TYPE_CHECKING block,"{'added': [(50, 'from typing import Generic, TypeVar'), (51, ""SubVmobjectType = TypeVar('SubVmobjectType', bound='VMobject')""), (54, '    from typing import Callable, Iterable, Tuple, Any')], 'deleted': [(43, 'from manimlib.utils.space_ops import normalize_along_axis'), (53, '    from typing import Callable, Iterable, Tuple, Any, Generic, TypeVar'), (56, ""    SubVmobjectType = TypeVar('SubVmobjectType', bound='VMobject')"")]}",313,313
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,45f8ca764348f0131a3110483b96fd9a6aa2b185,2966f358a36b70809a314d37266fafb6946bdb07,Specify output type for DecimalMatrix.element_to_mobject,"{'added': [(169, '    def element_to_mobject(self, element, **decimal_config) -> DecimalNumber:')], 'deleted': [(25, ''), (170, '    def element_to_mobject(self, element, **decimal_config) -> VMobject:')]}",43,43
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,c531e56a2f132448f6e6b5e932048e5f0336e6ef,45f8ca764348f0131a3110483b96fd9a6aa2b185,Fix DecimalNumber.set_value font size issue,"{'added': [(82, '        font_size = self.get_font_size()'), (86, '                sm.scale(font_size / smt.font_size)'), (88, '            self.set_submobjects(['), (89, '                smt.copy().scale(font_size / smt.font_size)'), (90, '                for smt in submob_templates'), (91, '            ])')], 'deleted': [(55, '        self.text_config[""font_size""] = font_size'), (87, '            self.set_submobjects([smt.copy() for smt in submob_templates])'), (89, '        font_size = self.get_font_size()'), (91, '        self.scale(font_size / self.text_config[""font_size""])')]}",39,39
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,578427543c1978c0056d960f93caa1e2fbdedabb,c531e56a2f132448f6e6b5e932048e5f0336e6ef,Add defaults for Matrix object to have ellipses,"{'added': [(8, 'from manimlib.constants import DEGREES'), (17, '    from typing import Sequence, Union, Tuple, Optional'), (37, '        ellipses_row: Optional[int] = None,'), (38, '        ellipses_col: Optional[int] = None,'), (58, '        self.ellipses = VGroup()'), (61, '        self.elements.center()'), (66, '        self.add(self.ellipses)'), (67, ''), (68, '        # Potentially add ellipses'), (69, '        self.swap_entries_for_ellipses('), (70, '            ellipses_row,'), (71, '            ellipses_col,'), (72, '        )'), (153, '    def swap_entries_for_ellipses('), (154, '        self,'), (155, '        row_index: Optional[int] = None,'), (156, '        col_index: Optional[int] = None,'), (157, '        height_ratio: float = 0.65,'), (158, '        width_ratio: float = 0.4'), (159, '    ):'), (160, '        rows = self.get_rows()'), (161, '        cols = self.get_columns()'), (162, ''), (163, '        avg_row_height = rows.get_height() / len(rows)'), (164, '        vdots_height = height_ratio * avg_row_height'), (165, ''), (166, '        avg_col_width = cols.get_width() / len(cols)'), (167, '        hdots_width = width_ratio * avg_col_width'), (168, ''), (169, '        use_vdots = row_index is not None and -len(rows) <= row_index < len(rows)'), (170, '        use_hdots = col_index is not None and -len(cols) <= col_index < len(cols)'), (171, ''), (172, '        def swap_entry_for_dots(entry, dots):'), (173, '            dots.move_to(entry)'), (174, '            entry.become(dots)'), (175, '            self.elements.remove(entry)'), (176, '            self.ellipses.add(entry)'), (177, ''), (178, '        if use_vdots:'), (179, '            for column in cols:'), (180, '                # Add vdots'), (181, '                dots = Tex(R""\\vdots"")'), (182, '                dots.set_height(vdots_height)'), (183, '                swap_entry_for_dots(column[row_index], dots)'), (184, '        if use_hdots:'), (185, '            for row in rows:'), (186, '                # Add hdots'), (187, '                dots = Tex(R""\\hdots"")'), (188, '                dots.set_width(hdots_width)'), (189, '                swap_entry_for_dots(row[col_index], dots)'), (190, '        if use_vdots and use_hdots:'), (191, '            rows[row_index][col_index].rotate(-45 * DEGREES)'), (192, '        return self'), (193, '')], 'deleted': [(16, '    from typing import Sequence, Union, Tuple'), (61, '        self.center()')]}",53,53
manimlib/scene/scene.py,manimlib/scene/scene.py,d44e248277f4c7215a0689abb78a634ab5502c56,578427543c1978c0056d960f93caa1e2fbdedabb,Specify type of argument in Mobject.add,"{'added': [(1026, '    def add(self, *mobjects: Mobject, set_depth_test: bool = True):')], 'deleted': [(1026, '    def add(self, *mobjects, set_depth_test: bool = True):')]}",228,228
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,4ce8a3ba9d1135b4fde3db7c7fc992b89b7b32b6,d44e248277f4c7215a0689abb78a634ab5502c56,Fix computation of normals for Surface,"{'added': [(136, '        # For each point, find two adjacent points at indices'), (137, '        # step1 and step2, such that crossing points[step1] - points'), (138, '        # with points[step1] - points gives a normal vector'), (139, '        step1 = indices + 1'), (140, '        step2 = indices + nu'), (142, '        # Right edge'), (143, '        step1[nu - 1::nu] = indices[nu - 1::nu] + nu'), (144, '        step2[nu - 1::nu] = indices[nu - 1::nu] - 1'), (145, ''), (146, '        # Bottom edge'), (147, '        step1[-nu:] = indices[-nu:] - nu'), (148, '        step2[-nu:] = indices[-nu:] + 1'), (149, ''), (150, '        # Lower right point'), (151, '        step1[-1] = indices[-1] - 1'), (152, '        step2[-1] = indices[-1] - nu'), (156, '            points[step1] - points,'), (157, '            points[step2] - points,')], 'deleted': [(136, '        left = indices - 1'), (137, '        right = indices + 1'), (138, '        up = indices - nv'), (139, '        down = indices + nv'), (141, '        left[0] = indices[0]'), (142, '        right[-1] = indices[-1]'), (143, '        up[:nv] = indices[:nv]'), (144, '        down[-nv:] = indices[-nv:]'), (148, '            points[right] - points[left],'), (149, '            points[up] - points[down],')]}",47,47
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,ed3ac74d671b17c8e1cf19314344ea186d219f79,4ce8a3ba9d1135b4fde3db7c7fc992b89b7b32b6,Add option to change Euler axes,"{'added': [(28, '        euler_axes: str = ""zxz"",'), (39, '        self.euler_axes = euler_axes'), (67, '        return orientation.as_euler(self.euler_axes)[::-1]'), (131, '            rot = Rotation.from_euler(self.euler_axes, eulers[::-1])'), (135, '    def increment_euler_angles('), (136, '        self,'), (137, '        dtheta: float | None = None,'), (138, '        dphi: float | None = None,'), (139, '        dgamma: float | None = None,'), (140, '        units: float = RADIANS'), (141, '    ):'), (142, '        angles = self.get_euler_angles()'), (143, '        for i, value in enumerate([dtheta, dphi, dgamma]):'), (144, '            if value is not None:'), (145, '                angles[i] += value * units'), (146, '        self.set_euler_angles(*angles)'), (147, '        return self'), (148, ''), (149, '    def set_euler_axes(self, seq: str):'), (150, '        self.euler_axes = seq'), (151, ''), (180, '    def increment_theta(self, dtheta: float, units=RADIANS):'), (181, '        self.increment_euler_angles(dtheta=dtheta, units=units)'), (184, '    def increment_phi(self, dphi: float, units=RADIANS):'), (185, '        self.increment_euler_angles(dphi=dphi, units=units)'), (188, '    def increment_gamma(self, dgamma: float, units=RADIANS):'), (189, '        self.increment_euler_angles(dgamma=dgamma, units=units)')], 'deleted': [(65, '        return orientation.as_euler(""zxz"")[::-1]'), (129, '            rot = Rotation.from_euler(""zxz"", eulers[::-1])'), (161, '    def increment_theta(self, dtheta: float):'), (162, '        self.rotate(dtheta, OUT)'), (165, '    def increment_phi(self, dphi: float):'), (166, '        self.rotate(dphi, self.get_inverse_camera_rotation_matrix()[0])'), (169, '    def increment_gamma(self, dgamma: float):'), (170, '        self.rotate(dgamma, self.get_inverse_camera_rotation_matrix()[2])')]}",51,51
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,7b577e9fc10121f9a38bea665c2be381bf12458f,ed3ac74d671b17c8e1cf19314344ea186d219f79,Have matrix keep track of elements and ellipses as lists instead of VGroups,"{'added': [(50, ''), (53, '        self.elements = [elem for row in self.mob_matrix for elem in row]'), (59, '        if height is not None:'), (60, '            self.rows.set_height(height - 2 * bracket_v_buff)'), (61, '        self.brackets = self.create_brackets(self.rows, bracket_v_buff, bracket_h_buff)'), (62, '        self.ellipses = []'), (65, '        self.add(*self.elements)'), (66, '        self.add(*self.brackets)'), (67, '        self.center()'), (75, '    def copy(self, deep: bool = False):'), (76, '        result = super().copy(deep)'), (77, '        self_family = self.get_family()'), (78, '        copy_family = result.get_family()'), (79, '        for attr in [""elements"", ""ellipses""]:'), (80, '            setattr(result, attr, ['), (81, '                copy_family[self_family.index(mob)]'), (82, '                for mob in getattr(self, attr)'), (83, '            ])'), (84, '        return result'), (85, ''), (121, '    def create_brackets(self, rows, v_buff: float, h_buff: float) -> VGroup:'), (124, '            *len(rows) * [R""\\quad \\\\""],'), (127, '        brackets.set_height(rows.get_height() + v_buff)'), (130, '        l_bracket.next_to(rows, LEFT, h_buff)'), (131, '        r_bracket.next_to(rows, RIGHT, h_buff)'), (132, '        return VGroup(l_bracket, r_bracket)'), (161, '    def swap_entry_for_dots(self, entry, dots):'), (162, '        dots.move_to(entry)'), (163, '        entry.become(dots)'), (164, '        if entry in self.elements:'), (165, '            self.elements.remove(entry)'), (166, '        if entry not in self.ellipses:'), (167, '            self.ellipses.append(entry)'), (168, ''), (193, '                self.swap_entry_for_dots(column[row_index], dots)'), (199, '                self.swap_entry_for_dots(row[col_index], dots)'), (208, '        return VGroup(*self.elements)'), (211, '        return VGroup(*self.brackets)'), (212, ''), (213, '    def get_ellipses(self) -> VGroup:'), (214, '        return VGroup(*self.ellipses)')], 'deleted': [(52, '        self.elements = VGroup(*it.chain(*self.mob_matrix))'), (58, '        self.ellipses = VGroup()'), (61, '        self.elements.center()'), (62, '        self.add(self.elements)'), (63, '        if height is not None:'), (64, '            self.set_height(height - 2 * bracket_v_buff)'), (65, '        self.add_brackets(bracket_v_buff, bracket_h_buff)'), (66, '        self.add(self.ellipses)'), (109, '    def add_brackets(self, v_buff: float, h_buff: float) -> Self:'), (110, '        height = len(self.mob_matrix)'), (113, '            *height * [R""\\quad \\\\""],'), (116, '        brackets.set_height(self.get_height() + v_buff)'), (119, '        l_bracket.next_to(self, LEFT, h_buff)'), (120, '        r_bracket.next_to(self, RIGHT, h_buff)'), (121, '        brackets.set_submobjects([l_bracket, r_bracket])'), (122, '        self.brackets = VGroup(l_bracket, r_bracket)'), (123, '        self.add(*brackets)'), (124, '        return self'), (172, '        def swap_entry_for_dots(entry, dots):'), (173, '            dots.move_to(entry)'), (174, '            entry.become(dots)'), (175, '            self.elements.remove(entry)'), (176, '            self.ellipses.add(entry)'), (177, ''), (183, '                swap_entry_for_dots(column[row_index], dots)'), (189, '                swap_entry_for_dots(row[col_index], dots)'), (198, '        return self.elements'), (201, '        return self.brackets')]}",61,61
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,5632fee9a3a04012126fad90c871ed1feda5e849,7b577e9fc10121f9a38bea665c2be381bf12458f,Ensure get_opacity returns float,"{'added': [(1379, '        return float(self.data[""rgba""][0, 3])')], 'deleted': [(1379, '        return self.data[""rgba""][0, 3]')]}",548,548
manimlib/mobject/svg/brace.py,manimlib/mobject/svg/brace.py,712fa301748b65dfbe0803a7683296f6c8cbe0ea,5632fee9a3a04012126fad90c871ed1feda5e849,Ensure Brace.get_tex uses buff key word arg,"{'added': [(94, '        buff = kwargs.pop(""buff"", SMALL_BUFF)'), (95, '        tex_mob = Tex(*tex, **kwargs)'), (96, '        self.put_at_tip(tex_mob, buff=buff)')], 'deleted': [(94, '        tex_mob = Tex(*tex)'), (95, '        self.put_at_tip(tex_mob, **kwargs)')]}",20,20
manimlib/scene/scene.py,manimlib/scene/scene.py,4a89376fdd9377eeab03cf950b96f345b215f6c2,712fa301748b65dfbe0803a7683296f6c8cbe0ea,Add method for resetting which plane in 3d space behaves like the floor when panning,"{'added': [(839, '    def set_floor_plane(self, plane: str = ""xy""):'), (840, '        if plane == ""xy"":'), (841, '            self.frame.set_euler_axes(""zxz"")'), (842, '        elif plane == ""xz"":'), (843, '            self.frame.set_euler_axes(""zxy"")'), (844, '        else:'), (845, '            raise Exception(""Only `xz` and `xy` are valid floor planes"")')], 'deleted': []}",231,231
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,e784c42f0d280978e0b30b6567995d82da5ece11,4a89376fdd9377eeab03cf950b96f345b215f6c2,Add big_tick_spacing option NumberLine,"{'added': [(19, '    from typing import Iterable, Optional'), (31, '        width: Optional[float] = None,'), (37, '        big_tick_spacing: Optional[float] = None,'), (58, '        if big_tick_spacing is not None:'), (59, '            self.numbers_with_elongated_ticks = np.arange('), (60, '                x_range[0],'), (61, '                x_range[1] + big_tick_spacing,'), (62, '                big_tick_spacing,'), (63, '            )'), (64, '        else:'), (65, '            self.numbers_with_elongated_ticks = list(numbers_with_elongated_ticks)')], 'deleted': [(19, '    from typing import Iterable'), (31, '        width: float | None = None,'), (57, '        self.numbers_with_elongated_ticks = list(numbers_with_elongated_ticks)')]}",35,35
example_scenes.py,example_scenes.py,7edc4b64ad5134f404e08c53ce9bb34802a0aede,e784c42f0d280978e0b30b6567995d82da5ece11,Replace numbers_with_elongated_ticks -> big_tick_numbers,"{'added': [(362, '                big_tick_numbers=[-2, 2],')], 'deleted': [(362, '                numbers_with_elongated_ticks=[-2, 2],')]}",23,23
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,7edc4b64ad5134f404e08c53ce9bb34802a0aede,e784c42f0d280978e0b30b6567995d82da5ece11,Replace numbers_with_elongated_ticks -> big_tick_numbers,"{'added': [(38, '        big_tick_numbers: list[float] = [],'), (59, '            self.big_tick_numbers = np.arange('), (65, '            self.big_tick_numbers = list(big_tick_numbers)'), (112, '            if np.isclose(self.big_tick_numbers, x).any():'), (221, '        big_tick_numbers: list[float] = [0, 1],'), (229, '            big_tick_numbers=big_tick_numbers,')], 'deleted': [(38, '        numbers_with_elongated_ticks: list[float] = [],'), (59, '            self.numbers_with_elongated_ticks = np.arange('), (65, '            self.numbers_with_elongated_ticks = list(numbers_with_elongated_ticks)'), (112, '            if np.isclose(self.numbers_with_elongated_ticks, x).any():'), (221, '        numbers_with_elongated_ticks: list[float] = [0, 1],'), (229, '            numbers_with_elongated_ticks=numbers_with_elongated_ticks,')]}",35,35
manimlib/scene/scene.py,manimlib/scene/scene.py,ffbe5c8114c2940d7f011c58e4ab4eec457bcbee,7edc4b64ad5134f404e08c53ce9bb34802a0aede,Add type hints for affects_mobject_list,"{'added': [(47, '    from typing import Callable, Iterable, TypeVar'), (50, ""    T = TypeVar('T')""), (51, ''), (404, '    @staticmethod'), (405, '    def affects_mobject_list(func: Callable[..., T]) -> Callable[..., T]:')], 'deleted': [(47, '    from typing import Callable, Iterable'), (402, '    def affects_mobject_list(func: Callable):')]}",231,231
manimlib/scene/scene.py,manimlib/scene/scene.py,9432a73a9f7594d48375a8d74a2e1ba7c64c5ef0,ffbe5c8114c2940d7f011c58e4ab4eec457bcbee,Let checkpoint_paste work on methods of the current scene,"{'added': [(10, 'import re'), (781, '        lines = pasted.split(""\\n"")'), (782, ''), (783, '        # Commented lines trigger saved checkpoints'), (784, '        if lines[0].lstrip().startswith(""#""):'), (785, '            if lines[0] not in self.checkpoint_states:'), (786, '                self.checkpoint(lines[0])'), (788, '                self.revert_to_checkpoint(lines[0])'), (789, ''), (790, '        # Copied methods of a scene are handled specially'), (791, '        # A bit hacky, yes, but convenient'), (792, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (793, '        method_names = re.findall(method_pattern ,lines[0].strip())'), (794, '        if method_names:'), (795, '            method_name = method_names[0]'), (796, '            indent = "" "" * lines[0].index(lines[0].strip())'), (797, '            pasted = ""\\n"".join(['), (798, '                # Remove self from function signature'), (799, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (800, '                *lines[1:],'), (801, '                # Attach to scene via self.func_name = func_name'), (802, '                f""{indent}self.{method_name} = {method_name}""'), (803, '            ])'), (805, '        # Keep track of skipping and progress bar status')], 'deleted': [(780, '        line0 = pasted.lstrip().split(""\\n"")[0]'), (781, '        if line0.startswith(""#""):'), (782, '            if line0 not in self.checkpoint_states:'), (783, '                self.checkpoint(line0)'), (785, '                self.revert_to_checkpoint(line0)')]}",232,232
manimlib/animation/numbers.py,manimlib/animation/numbers.py,2e9c89502d8ec2fc613bafdbc5f5341f8430afb1,9432a73a9f7594d48375a8d74a2e1ba7c64c5ef0,Restrict alpha in CountInFrom,"{'added': [(6, 'from manimlib.utils.simple_functions import clip'), (59, '        start_number = decimal_mob.get_value()'), (62, '            lambda a: interpolate(source_number, start_number, clip(a, 0, 1)),')], 'deleted': [(58, '        start_number = decimal_mob.number'), (61, '            lambda a: interpolate(source_number, start_number, a),')]}",4,4
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,a5f2ac689ffe05ac3c99a33de811967e0bb04cc4,2e9c89502d8ec2fc613bafdbc5f5341f8430afb1,Spacing,"{'added': [], 'deleted': [(249, ''), (264, '')]}",61,61
manimlib/utils/iterables.py,manimlib/utils/iterables.py,4d67361800867fe685ca310ca44d289b81ff9206,a5f2ac689ffe05ac3c99a33de811967e0bb04cc4,Add shuffled,"{'added': [(6, 'import random'), (87, 'def shuffled(iterable: Iterable) -> list:'), (88, '    as_list = list(iterable)'), (89, '    random.shuffle(as_list)'), (90, '    return as_list'), (91, ''), (92, '')], 'deleted': []}",46,46
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1372cf101cc6e97a863c0eb2a58a46155bd3a225,4d67361800867fe685ca310ca44d289b81ff9206,Allow VGroup and Group to accept generators and iterables as arguments,"{'added': [(49, 'from typing import TypeVar, Generic, Iterable'), (54, '    from typing import Callable, Iterator, Union, Tuple, Optional'), (2139, '    def __init__(self, *mobjects: SubmobjectType | Iterable[SubmobjectType], **kwargs):'), (2141, '        self._ingest_args(*mobjects)'), (2142, ''), (2143, '    def _ingest_args(self, *args: Mobject | Iterable[Mobject]):'), (2144, '        if len(args) == 0:'), (2145, '            return'), (2146, '        if all(isinstance(mob, Mobject) for mob in args):'), (2147, '            self.add(*args)'), (2148, '        elif isinstance(args[0], Iterable):'), (2149, '            self.add(*args[0])'), (2150, '        else:'), (2151, '            raise Exception(f""Invalid argument to Group of type {type(args[0])}"")')], 'deleted': [(49, 'from typing import TypeVar, Generic'), (54, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional'), (2139, '    def __init__(self, *mobjects: SubmobjectType, **kwargs):'), (2140, '        if not all([isinstance(m, Mobject) for m in mobjects]):'), (2141, '            raise Exception(""All submobjects must be of type Mobject"")'), (2143, '        self.add(*mobjects)')]}",551,551
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1372cf101cc6e97a863c0eb2a58a46155bd3a225,4d67361800867fe685ca310ca44d289b81ff9206,Allow VGroup and Group to accept generators and iterables as arguments,"{'added': [(16, 'from manimlib.mobject.mobject import Group'), (51, 'from typing import Generic, TypeVar, Iterable'), (55, '    from typing import Callable, Tuple, Any'), (1421, 'class VGroup(Group, VMobject, Generic[SubVmobjectType]):'), (1422, '    def __init__(self, *vmobjects: SubVmobjectType | Iterable[SubVmobjectType], **kwargs):'), (1424, '        if any(isinstance(vmob, Mobject) and not isinstance(vmob, VMobject) for vmob in vmobjects):'), (1425, '            raise Exception(""Only VMobjects can be passed into VGroup"")'), (1426, '        self._ingest_args(*vmobjects)'), (1427, '        if self.submobjects:'), (1428, '            self.uniforms.update(self.submobjects[0].uniforms)')], 'deleted': [(50, 'from typing import Generic, TypeVar'), (54, '    from typing import Callable, Iterable, Tuple, Any'), (1420, 'class VGroup(VMobject, Generic[SubVmobjectType]):'), (1421, '    def __init__(self, *vmobjects: SubVmobjectType, **kwargs):'), (1423, '        self.add(*vmobjects)'), (1424, '        if vmobjects:'), (1425, '            self.uniforms.update(vmobjects[0].uniforms)')]}",316,316
manimlib/animation/composition.py,manimlib/animation/composition.py,2380ffd6162304e75d574c044301875329be2e3f,1372cf101cc6e97a863c0eb2a58a46155bd3a225,Allow LaggedStart to accept an iterable as an argument,"{'added': [(16, 'from typing import TYPE_CHECKING, Union, Iterable'), (17, 'AnimationType = Union[Animation, _AnimationBuilder]'), (32, '        *args: AnimationType | Iterable[AnimationType],'), (39, '        animations = args[0] if isinstance(args[0], Iterable) else args')], 'deleted': [(16, 'from typing import TYPE_CHECKING'), (31, '        *animations: Animation | _AnimationBuilder,')]}",36,36
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a6b46c641bd6ca97036670a33493f5f6360411fa,2380ffd6162304e75d574c044301875329be2e3f,"Add Mobject.always and Mobject.f_always

For nicer syntax in creating updaters","{'added': [(165, '    @property'), (166, '    def always(self) -> _UpdaterBuilder:'), (167, '        """"""'), (168, '        Methods called with mobject.always.method(*args, **kwargs)'), (169, '        will result in the call mobject.method(*args, **kwargs)'), (170, '        on every frame'), (171, '        """"""'), (172, '        return _UpdaterBuilder(self)'), (173, ''), (174, '    @property'), (175, '    def f_always(self) -> _FunctionalUpdaterBuilder:'), (176, '        """"""'), (177, '        Similar to Mobject.always, but with the intent that arguments'), (178, '        are functions returning the corresponding type fit for the method'), (179, '        Methods called with'), (180, '        mobject.f_always.method('), (181, '            func1, func2, ...,'), (182, '            kwarg1=kw_func1,'), (183, '            kwarg2=kw_func2,'), (184, '            ...'), (185, '        )'), (186, '        will result in the call'), (187, '        mobject.method('), (188, '            func1(), func2(), ...,'), (189, '            kwarg1=kw_func1(),'), (190, '            kwarg2=kw_func2(),'), (191, '            ...'), (192, '        )'), (193, '        on every frame'), (194, '        """"""'), (195, '        return _FunctionalUpdaterBuilder(self)'), (196, ''), (2299, ''), (2300, ''), (2301, 'class _UpdaterBuilder:'), (2302, '    def __init__(self, mobject: Mobject):'), (2303, '        self.mobject = mobject'), (2304, ''), (2305, '    def __getattr__(self, method_name: str):'), (2306, '        def add_updater(*method_args, **method_kwargs):'), (2307, '            self.mobject.add_updater('), (2308, '                lambda m: getattr(m, method_name)(*method_args, **method_kwargs)'), (2309, '            )'), (2310, '            return self'), (2311, '        return add_updater'), (2312, ''), (2313, ''), (2314, 'class _FunctionalUpdaterBuilder:'), (2315, '    def __init__(self, mobject: Mobject):'), (2316, '        self.mobject = mobject'), (2317, ''), (2318, '    def __getattr__(self, method_name: str):'), (2319, '        def add_updater(*method_args, **method_kwargs):'), (2320, '            self.mobject.add_updater('), (2321, '                lambda m: getattr(m, method_name)('), (2322, '                    *(arg() for arg in method_args),'), (2323, '                    **{'), (2324, '                        key: value()'), (2325, '                        for key, value in method_kwargs.items()'), (2326, '                    }'), (2327, '                )'), (2328, '            )'), (2329, '            return self'), (2330, '        return add_updater')], 'deleted': []}",561,561
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,3c778ba678e4d11408ee281a9259a35275b47e12,a6b46c641bd6ca97036670a33493f5f6360411fa,Add comment to Mobject.animate,"{'added': [(162, '        """"""'), (163, '        Methods called with Mobject.animate.method() can be passed'), (164, '        into a Scene.play call, as if you were calling'), (165, '        ApplyMethod(mobject.method)'), (166, ''), (167, '        Borrowed from https://github.com/ManimCommunity/manim/'), (168, '        """"""')], 'deleted': [(162, '        # Borrowed from https://github.com/ManimCommunity/manim/')]}",561,561
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e124aecd6b037af390acfeb8948d91cd2ac6bd7f,3c778ba678e4d11408ee281a9259a35275b47e12,Clarify Mobject.needs_new_bounding_box is private,"{'added': [(107, '        self._is_animating: bool = False'), (108, '        self._needs_new_bounding_box: bool = True'), (334, '        if self._needs_new_bounding_box:'), (336, '            self._needs_new_bounding_box = False'), (363, '            mob._needs_new_bounding_box = True'), (421, '    def get_family(self, recurse: bool = True) -> list[Mobject]:'), (747, '            sm1._needs_new_bounding_box = sm2._needs_new_bounding_box')], 'deleted': [(104, '        self.needs_new_bounding_box: bool = True'), (105, '        self._is_animating: bool = False'), (334, '        if self.needs_new_bounding_box:'), (336, '            self.needs_new_bounding_box = False'), (363, '            mob.needs_new_bounding_box = True'), (421, '    def get_family(self, recurse: bool = True) -> list[Self]:'), (747, '            sm1.needs_new_bounding_box = sm2.needs_new_bounding_box')]}",561,561
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,4b14c11e4b2b97c7436dfe3f8823a700062985cb,e124aecd6b037af390acfeb8948d91cd2ac6bd7f,Only reconstruct family as needed,"{'added': [(100, '        self.family: list[Mobject] | None = [self]'), (412, '    def note_updated_family(self, only_changed_order=False) -> Self:'), (413, '        self.family = None'), (414, '        if not only_changed_order:'), (415, '            self.refresh_has_updater_status()'), (416, '            self.refresh_bounding_box()'), (418, '            parent.note_updated_family()'), (422, '        if not recurse:'), (424, '        if self.family is None:'), (425, '            # Reconstruct and save'), (426, '            sub_families = (sm.get_family() for sm in self.submobjects)'), (427, '            self.family = [self, *it.chain(*sub_families)]'), (428, '        return self.family'), (430, '    def family_members_with_points(self) -> list[Mobject]:'), (431, '        return [m for m in self.get_family() if len(m.data) > 0]'), (462, '        self.note_updated_family()'), (478, '                parent.note_updated_family()'), (495, '        self.note_updated_family()'), (500, '        self.note_updated_family()'), (612, '        self.note_updated_family(only_changed_order=True)'), (620, '        self.note_updated_family(only_changed_order=True)'), (625, '        self.note_updated_family(only_changed_order=True)'), (698, '                    setattr(result, attr, result.family[family.index(value)])')], 'deleted': [(100, '        self.family: list[Mobject] = [self]'), (412, '    def assemble_family(self) -> Self:'), (413, '        sub_families = (sm.get_family() for sm in self.submobjects)'), (414, '        self.family = [self, *it.chain(*sub_families)]'), (415, '        self.refresh_has_updater_status()'), (416, '        self.refresh_bounding_box()'), (418, '            parent.assemble_family()'), (422, '        if recurse:'), (423, '            return self.family'), (424, '        else:'), (427, '    def family_members_with_points(self) -> list[Self]:'), (428, '        return [m for m in self.family if len(m.data) > 0]'), (459, '        self.assemble_family()'), (475, '                parent.assemble_family()'), (492, '        self.assemble_family()'), (497, '        self.assemble_family()'), (609, '        self.assemble_family()'), (617, '        self.assemble_family()'), (622, '        self.assemble_family()'), (695, '                    setattr(result, attr, result.family[self.family.index(value)])')]}",563,563
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,fd35433a6285e014aa5377cc0aece32e1a2d10c4,4b14c11e4b2b97c7436dfe3f8823a700062985cb,Change name note_updated_family -> note_changed_family,"{'added': [(412, '    def note_changed_family(self, only_changed_order=False) -> Self:'), (418, '            parent.note_changed_family()'), (462, '        self.note_changed_family()'), (478, '                parent.note_changed_family()'), (495, '        self.note_changed_family()'), (500, '        self.note_changed_family()'), (612, '        self.note_changed_family(only_changed_order=True)'), (620, '        self.note_changed_family(only_changed_order=True)'), (625, '        self.note_changed_family(only_changed_order=True)')], 'deleted': [(412, '    def note_updated_family(self, only_changed_order=False) -> Self:'), (418, '            parent.note_updated_family()'), (462, '        self.note_updated_family()'), (478, '                parent.note_updated_family()'), (495, '        self.note_updated_family()'), (500, '        self.note_updated_family()'), (612, '        self.note_updated_family(only_changed_order=True)'), (620, '        self.note_updated_family(only_changed_order=True)'), (625, '        self.note_updated_family(only_changed_order=True)')]}",563,563
manimlib/animation/transform.py,manimlib/animation/transform.py,70b839e188bc1837b7ddd992edbc0a64ea626e61,fd35433a6285e014aa5377cc0aece32e1a2d10c4,Change to only compute has_updater status as needed,"{'added': [(68, '        if not self.mobject.has_updaters():')], 'deleted': [(68, '        if not self.mobject.has_updaters:')]}",52,52
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,70b839e188bc1837b7ddd992edbc0a64ea626e61,fd35433a6285e014aa5377cc0aece32e1a2d10c4,Change to only compute has_updater status as needed,"{'added': [(840, '        if not self.has_updaters() or self.updating_suspended:'), (865, '        update_func: Updater,'), (868, '        if ""dt"" in get_parameters(update_func):'), (869, '            self.time_based_updaters.append(update_func)'), (871, '            self.non_time_updaters.append(update_func)'), (873, '        if call_updater:'), (874, '            self.update(dt=0)'), (875, ''), (876, '        self.refresh_has_updater_status()'), (877, '        return self'), (878, ''), (879, '    def insert_updater(self, update_func: Updater, index=0):'), (880, '        if ""dt"" in get_parameters(update_func):'), (881, '            self.time_based_updaters.insert(index, update_func)'), (883, '            self.non_time_updaters.insert(index, update_func)'), (888, '    def remove_updater(self, update_func: Updater) -> Self:'), (890, '            while update_func in updater_list:'), (891, '                updater_list.remove(update_func)'), (928, '    def has_updaters(self) -> bool:'), (929, '        if self._has_updaters_in_family is None:'), (930, '            # Recompute and save'), (931, '            res = bool(self.time_based_updaters or self.non_time_updaters)'), (932, '            self._has_updaters_in_family = res or any(sm.has_updaters() for sm in self.submobjects)'), (933, '        return self._has_updaters_in_family'), (934, ''), (936, '        for mob in (self, *self.parents):'), (937, '            mob._has_updaters_in_family = None'), (943, '        return self._is_animating or self.has_updaters()'), (1878, '        if self.has_updaters():'), (1884, '        if self.has_updaters():')], 'deleted': [(840, '        if not self.has_updaters or self.updating_suspended:'), (865, '        update_function: Updater,'), (866, '        index: int | None = None,'), (869, '        if ""dt"" in get_parameters(update_function):'), (870, '            updater_list = self.time_based_updaters'), (872, '            updater_list = self.non_time_updaters'), (874, '        if index is None:'), (875, '            updater_list.append(update_function)'), (877, '            updater_list.insert(index, update_function)'), (880, '        for parent in self.parents:'), (881, '            parent.has_updaters = True'), (882, '        if call_updater:'), (883, '            self.update(dt=0)'), (886, '    def remove_updater(self, update_function: Updater) -> Self:'), (888, '            while update_function in updater_list:'), (889, '                updater_list.remove(update_function)'), (927, '        self.has_updaters = any(mob.get_updaters() for mob in self.get_family())'), (933, '        return self._is_animating or self.has_updaters'), (1868, '        if self.has_updaters:'), (1874, '        if self.has_updaters:')]}",568,568
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,83cd5d6246aa0be7f37b3bada34c46e57ef68508,70b839e188bc1837b7ddd992edbc0a64ea626e61,"Clean up updater matters, prune unused functions","{'added': [(43, 'from manimlib.utils.simple_functions import get_num_args'), (55, '    from typing import Callable, Iterator, Union, Tuple, Optional, Any'), (835, '        self.time_based_updaters: list[TimeBasedUpdater] = list()'), (836, '        self.non_time_updaters: list[NonTimeUpdater] = list()'), (837, '        self._has_updaters_in_family: Optional[bool] = False'), (853, '        return [*self.time_based_updaters, *self.non_time_updaters]'), (855, '    def add_updater(self, update_func: Updater, call: bool = True) -> Self:'), (856, '        if get_num_args(update_func) > 1:'), (861, '        if call:'), (868, '        if get_num_args(update_func) > 1:')], 'deleted': [(54, '    from typing import Callable, Iterator, Union, Tuple, Optional'), (834, '        self.time_based_updaters: list[TimeBasedUpdater] = []'), (835, '        self.non_time_updaters: list[NonTimeUpdater] = []'), (836, '        self.has_updaters: bool = False'), (851, '    def get_time_based_updaters(self) -> list[TimeBasedUpdater]:'), (852, '        return self.time_based_updaters'), (853, ''), (854, '    def has_time_based_updater(self) -> bool:'), (855, '        return len(self.time_based_updaters) > 0'), (856, ''), (858, '        return self.time_based_updaters + self.non_time_updaters'), (859, ''), (860, '    def get_family_updaters(self) -> list[Updater]:'), (861, '        return list(it.chain(*[sm.get_updaters() for sm in self.get_family()]))'), (863, '    def add_updater('), (864, '        self,'), (865, '        update_func: Updater,'), (866, '        call_updater: bool = True'), (867, '    ) -> Self:'), (868, '        if ""dt"" in get_parameters(update_func):'), (873, '        if call_updater:'), (880, '        if ""dt"" in get_parameters(update_func):')]}",564,564
manimlib/scene/scene.py,manimlib/scene/scene.py,83cd5d6246aa0be7f37b3bada34c46e57ef68508,70b839e188bc1837b7ddd992edbc0a64ea626e61,"Clean up updater matters, prune unused functions","{'added': [(348, '        return self.always_update_mobjects or any('), (349, '            mob.has_updaters() for mob in self.mobjects'), (350, '        )')], 'deleted': [(348, '        return self.always_update_mobjects or any(['), (349, '            len(mob.get_family_updaters()) > 0'), (350, '            for mob in self.mobjects'), (351, '        ])'), (352, ''), (353, '    def has_time_based_updaters(self) -> bool:'), (354, '        return any(['), (355, '            sm.has_time_based_updater()'), (356, '            for mob in self.mobjects()'), (357, '            for sm in mob.get_family()'), (358, '        ])')]}",229,229
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,83cd5d6246aa0be7f37b3bada34c46e57ef68508,70b839e188bc1837b7ddd992edbc0a64ea626e61,"Clean up updater matters, prune unused functions","{'added': [(12, '    from typing import Callable, TypeVar, Iterable'), (33, '    return len(list(get_parameters(function)))'), (36, 'def get_parameters(function: Callable) -> Iterable[str]:'), (37, '    return inspect.signature(function).parameters.keys()')], 'deleted': [(12, '    from typing import Callable, TypeVar'), (33, '    return len(get_parameters(function))'), (36, 'def get_parameters(function: Callable) -> list:'), (37, '    return list(inspect.signature(function).parameters.keys())')]}",22,22
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d3ba101ee5960cc920e756a73245ee2ac3986805,83cd5d6246aa0be7f37b3bada34c46e57ef68508,Change from tracking time_based_updater and non_time_updater lists separately to just tracking one list,"{'added': [(688, '        result.updaters = list(self.updaters)'), (832, '        self.updaters: list[Updater] = list()'), (842, '        for updater in self.updaters:'), (843, '            # This is hacky, but if an updater takes dt as an arg,'), (844, '            # it will be passed the change in time from here'), (845, '            if ""dt"" in updater.__code__.co_varnames:'), (846, '                updater(self, dt=dt)'), (847, '            else:'), (848, '                updater(self)'), (852, '        return self.updaters'), (855, '        self.updaters.append(update_func)'), (862, '        self.updaters.insert(index, update_func)'), (867, '        while update_func in self.updaters:'), (868, '            self.updaters.remove(update_func)'), (873, '        for mob in self.get_family(recurse):'), (874, '            mob.updaters = []'), (875, '            mob._has_updaters_in_family = False'), (876, '        for parent in self.get_ancestors():'), (877, '            parent._has_updaters_in_family = False'), (881, '        self.updaters = list(mobject.updaters)'), (882, '        self.refresh_has_updater_status()'), (906, '            self._has_updaters_in_family = bool(self.updaters) or any('), (907, '                sm.has_updaters() for sm in self.submobjects'), (908, '            )'), (912, '        self._has_updaters_in_family = None'), (913, '        for parent in self.parents:'), (914, '            parent.refresh_has_updater_status()')], 'deleted': [(42, 'from manimlib.utils.simple_functions import get_parameters'), (43, 'from manimlib.utils.simple_functions import get_num_args'), (690, '        result.non_time_updaters = list(self.non_time_updaters)'), (691, '        result.time_based_updaters = list(self.time_based_updaters)'), (835, '        self.time_based_updaters: list[TimeBasedUpdater] = list()'), (836, '        self.non_time_updaters: list[NonTimeUpdater] = list()'), (846, '        for updater in self.time_based_updaters:'), (847, '            updater(self, dt)'), (848, '        for updater in self.non_time_updaters:'), (849, '            updater(self)'), (853, '        return [*self.time_based_updaters, *self.non_time_updaters]'), (856, '        if get_num_args(update_func) > 1:'), (857, '            self.time_based_updaters.append(update_func)'), (858, '        else:'), (859, '            self.non_time_updaters.append(update_func)'), (860, ''), (863, ''), (868, '        if get_num_args(update_func) > 1:'), (869, '            self.time_based_updaters.insert(index, update_func)'), (870, '        else:'), (871, '            self.non_time_updaters.insert(index, update_func)'), (872, ''), (877, '        for updater_list in [self.time_based_updaters, self.non_time_updaters]:'), (878, '            while update_func in updater_list:'), (879, '                updater_list.remove(update_func)'), (884, '        self.time_based_updaters = []'), (885, '        self.non_time_updaters = []'), (886, '        if recurse:'), (887, '            for submob in self.submobjects:'), (888, '                submob.clear_updaters()'), (889, '        self.refresh_has_updater_status()'), (893, '        self.clear_updaters()'), (894, '        for updater in mobject.get_updaters():'), (895, '            self.add_updater(updater)'), (919, '            res = bool(self.time_based_updaters or self.non_time_updaters)'), (920, '            self._has_updaters_in_family = res or any(sm.has_updaters() for sm in self.submobjects)'), (924, '        for mob in (self, *self.parents):'), (925, '            mob._has_updaters_in_family = None')]}",559,559
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,d3ba101ee5960cc920e756a73245ee2ac3986805,83cd5d6246aa0be7f37b3bada34c46e57ef68508,Change from tracking time_based_updater and non_time_updater lists separately to just tracking one list,"{'added': [(33, '    return function.__code__.co_argcount')], 'deleted': [(33, '    return len(list(get_parameters(function)))')]}",22,22
example_scenes.py,example_scenes.py,226d649ee602ff077d28fd757670eadef8bf9d0b,d3ba101ee5960cc920e756a73245ee2ac3986805,Change UpdatersExample scene to feature .always and .f_always syntax,"{'added': [(296, '        label.always.next_to(brace, UP)'), (305, '        number.f_always.set_value(square.get_width)')], 'deleted': [(296, '        always(label.next_to, brace, UP)'), (305, '        f_always(number.set_value, square.get_width)')]}",23,23
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,27f397e0a6c6a884fb9f7cb7193fbfe3c33feee0,2c110790d259636e1ace5d63b7d682642a864a30,Have stroke width change continuously with fixed_in_frame status,"{'added': [(24, '    v_stroke_width *= mix(frame_scale, 1, is_fixed_in_frame);')], 'deleted': [(24, '    if(!bool(is_fixed_in_frame)){'), (25, '        v_stroke_width *= frame_scale;'), (26, '    }')]}",,
example_scenes.py,example_scenes.py,8235607b2a45849bc799b79049678668f091a635,4729e44e057fcc4f02b4d6bdb64c010af4a540b3,remove include_background_rectangle,"{'added': [(29, '            IntegerMatrix(matrix),')], 'deleted': [(29, '            IntegerMatrix(matrix, include_background_rectangle=True),')]}",23,23
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,fa99eafe2b50efa623df5386be11653352c575ab,226d649ee602ff077d28fd757670eadef8bf9d0b,Account for rgba case in point_to_rgb,"{'added': [(74, '        ))[:3]')], 'deleted': [(74, '        ))')]}",8,8
manimlib/animation/composition.py,manimlib/animation/composition.py,7db69e32aa6a0763aa2053dbdf95a33b18d43919,fa99eafe2b50efa623df5386be11653352c575ab,Update input type to LaggedStartMap,"{'added': [(171, '        anim_func: Callable[[Mobject], Animation] | Animation,')], 'deleted': [(171, '        anim_func: Callable[[Mobject], Animation],')]}",36,36
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,b26feb70458cd212b911ea152b08391ca7c032b1,7db69e32aa6a0763aa2053dbdf95a33b18d43919,Adjust Underline configuration,"{'added': [(121, '        stroke_width: float | Sequence[float] = [0, 2, 3, 3, 2, 0],'), (125, '        super().__init__(LEFT, RIGHT, **kwargs)'), (126, '        if not isinstance(stroke_width, (float, int)):'), (127, '            self.insert_n_curves(len(stroke_width) - 2)')], 'deleted': [(121, '        stroke_width: float | Sequence[float] = [0, 3, 3, 0],'), (125, '        super().__init__('), (126, '            LEFT, RIGHT,'), (127, '            stroke_color=stroke_color,'), (128, '            stroke_width=stroke_width,'), (129, '            **kwargs'), (130, '        )'), (131, '        self.insert_n_curves(30)')]}",13,13
manimlib/animation/composition.py,manimlib/animation/composition.py,6b3834739c3a687f434a8d7070c2c3e05f1bb465,b26feb70458cd212b911ea152b08391ca7c032b1,Undo redundant previous tweak to LaggedStartMap input type,"{'added': [(171, '        anim_func: Callable[[Mobject], Animation],')], 'deleted': [(171, '        anim_func: Callable[[Mobject], Animation] | Animation,')]}",36,36
example_scenes.py,example_scenes.py,7e6a37d4996ff43f673d63ba088d777896fa3f2e,6b3834739c3a687f434a8d7070c2c3e05f1bb465,Typo fix: make_number_changable -> make_number_changeable,"{'added': [(292, '        number = label.make_number_changeable(""0.00"")'), (518, '        value = tex.make_number_changeable(""4.00"")'), (540, '        # By default, tex.make_number_changeable replaces the first occurance'), (543, '        exponents = tex.make_number_changeable(""2"", replace_all=True)')], 'deleted': [(292, '        number = label.make_number_changable(""0.00"")'), (518, '        value = tex.make_number_changable(""4.00"")'), (540, '        # By default, tex.make_number_changable replaces the first occurance'), (543, '        exponents = tex.make_number_changable(""2"", replace_all=True)')]}",23,23
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,7e6a37d4996ff43f673d63ba088d777896fa3f2e,6b3834739c3a687f434a8d7070c2c3e05f1bb465,Typo fix: make_number_changable -> make_number_changeable,"{'added': [(234, '    def make_number_changeable('), (244, '            log.warning(f""{value} not found in Tex.make_number_changeable call"")')], 'deleted': [(234, '    def make_number_changable('), (244, '            log.warning(f""{value} not found in Tex.make_number_changable call"")')]}",52,52
manimlib/__init__.py,manimlib/__init__.py,223d671eea295401f993a968628b11242ff5a5fe,7e6a37d4996ff43f673d63ba088d777896fa3f2e,Remove redundancy,"{'added': [], 'deleted': [(46, 'from manimlib.mobject.svg.tex_mobject import *')]}",0,0
manimlib/animation/fading.py,manimlib/animation/fading.py,ec42326618125d95dffc7c9c4654bd9d559e7eeb,223d671eea295401f993a968628b11242ff5a5fe,Fix remover=True case for FadeTransform,"{'added': [(137, '        if not self.remover:'), (138, '            scene.add(self.to_add_on_completion)')], 'deleted': [(137, '        scene.add(self.to_add_on_completion)')]}",23,23
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0509e824c63af8be0681fbb96dbf8ac288388066,ec42326618125d95dffc7c9c4654bd9d559e7eeb,Have border_width default to 0 for lower opacity,"{'added': [(193, '        if border_width is None:'), (194, '            border_width = 0 if self.get_fill_opacity() < 1 else 0.5'), (195, '        for mob in self.get_family(recurse):'), (196, '            mob.data[""fill_border_width""] = border_width')], 'deleted': [(193, '        if border_width is not None:'), (194, '            for mob in self.get_family(recurse):'), (195, '                mob.data[""fill_border_width""] = border_width')]}",317,317
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,1d6aa47933833442dd57f949b892a48a187355af,0509e824c63af8be0681fbb96dbf8ac288388066,Reimplement SpeechBubble and ThoughtBubble,"{'added': [(5, 'import random'), (28, 'from manimlib.constants import LARGE_BUFF'), (46, 'from manimlib.mobject.boolean_ops import Union'), (57, 'from manimlib.mobject.shape_matchers import SurroundingRectangle'), (66, 'from manimlib.mobject.svg.text_mobject import Text'), (67, 'from manimlib.utils.bezier import interpolate'), (68, 'from manimlib.utils.iterables import adjacent_pairs'), (72, 'from manimlib.utils.space_ops import get_norm'), (355, 'class Bubble(VGroup):'), (357, '    bubble_center_adjustment_factor = 0.125'), (361, '        content: str | VMobject | None = None,'), (362, '        buff: float = 1.0,'), (363, '        filler_shape: Tuple[float, float] = (3.0, 2.0),'), (364, '        pin_point: Vect3 | None = None,'), (366, '        add_content: bool = True,'), (373, '        super().__init__(**kwargs)'), (374, '        self.direction = direction'), (376, '        if content is None:'), (377, '            content = Rectangle(*filler_shape)'), (378, '            content.set_fill(opacity=0)'), (379, '            content.set_stroke(width=0)'), (380, '        elif isinstance(content, str):'), (381, '            content = Text(content)'), (382, '        self.content = content'), (384, '        self.body = self.get_body(content, direction, buff)'), (385, '        self.body.set_fill(fill_color, fill_opacity)'), (386, '        self.body.set_stroke(stroke_color, stroke_width)'), (387, '        self.add(self.body)'), (388, ''), (389, '        if add_content:'), (390, '            self.add(self.content)'), (392, '        if pin_point is not None:'), (393, '            self.pin_to(pin_point)'), (394, ''), (395, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (396, '        body = SVGMobject(self.file_name)'), (397, '        if direction[0] > 0:'), (398, '            body.flip()'), (399, '        # Resize'), (400, '        width = content.get_width()'), (401, '        height = content.get_height()'), (402, '        target_width = width + min(buff, height)'), (403, '        target_height = 1.35 * (height + buff)  # Magic number?'), (404, '        body.set_shape(target_width, target_height)'), (405, '        body.move_to(content)'), (406, '        body.shift(self.bubble_center_adjustment_factor * body.get_height() * DOWN)'), (407, '        return body'), (410, '        return self.get_corner(DOWN + self.direction)'), (417, '        self.shift(point - self.get_tip())'), (420, '    def flip(self, axis=UP, only_body=True, **kwargs):'), (421, '        if only_body:'), (422, '            self.body.flip(axis=axis, **kwargs)'), (423, '        else:'), (424, '            super().flip(axis=axis, **kwargs)'), (439, '    def position_mobject_inside(self, mobject, buff=MED_LARGE_BUFF):'), (440, '        mobject.set_max_width(self.body.get_width() - 2 * buff)'), (441, '        mobject.set_max_height(self.body.get_height() / 1.5 - 2 * buff)'), (450, '    def write(self, text):'), (451, '        self.add_content(Text(text))'), (454, '    def resize_to_content(self, buff=1.0):  # TODO'), (455, '        self.body.match_points(self.get_body('), (456, '            self.content, self.direction, buff'), (457, '        ))'), (460, '        self.remove(self.content)'), (465, '    def __init__('), (466, '        self,'), (467, '        content: str | VMobject | None = None,'), (468, '        buff: float = MED_SMALL_BUFF,'), (469, '        filler_shape: Tuple[float, float] = (2.0, 1.0),'), (470, '        stem_height_to_bubble_height: float = 0.5,'), (471, '        stem_top_x_props: Tuple[float, float] = (0.2, 0.3),'), (472, '        **kwargs'), (473, '    ):'), (474, '        self.stem_height_to_bubble_height = stem_height_to_bubble_height'), (475, '        self.stem_top_x_props = stem_top_x_props'), (476, '        super().__init__(content, buff, filler_shape, **kwargs)'), (477, ''), (478, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (479, '        rect = SurroundingRectangle(content, buff=buff)'), (480, '        rect.round_corners()'), (481, '        lp = rect.get_corner(DL)'), (482, '        rp = rect.get_corner(DR)'), (483, '        stem_height = self.stem_height_to_bubble_height * rect.get_height()'), (484, '        low_prop, high_prop = self.stem_top_x_props'), (485, '        triangle = Polygon('), (486, '            interpolate(lp, rp, low_prop),'), (487, '            interpolate(lp, rp, high_prop),'), (488, '            lp + stem_height * DOWN,'), (489, '        )'), (490, '        result = Union(rect, triangle)'), (491, '        result.insert_n_curves(20)'), (492, '        if direction[0] > 0:'), (493, '            result.flip()'), (494, ''), (495, '        return result'), (496, ''), (497, ''), (498, 'class ThoughtBubble(Bubble):'), (499, '    def __init__('), (500, '        self,'), (501, '        content: str | VMobject | None = None,'), (502, '        buff: float = SMALL_BUFF,'), (503, '        filler_shape: Tuple[float, float] = (2.0, 1.0),'), (504, '        bulge_radius: float = 0.35,'), (505, '        bulge_overlap: float = 0.25,'), (506, '        noise_factor: float = 0.1,'), (507, '        circle_radii: list[float] = [0.1, 0.15, 0.2],'), (508, '        **kwargs'), (509, '    ):'), (510, '        self.bulge_radius = bulge_radius'), (511, '        self.bulge_overlap = bulge_overlap'), (512, '        self.noise_factor = noise_factor'), (513, '        self.circle_radii = circle_radii'), (514, '        super().__init__(content, buff, filler_shape, **kwargs)'), (515, ''), (516, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (517, '        rect = SurroundingRectangle(content, buff)'), (518, '        perimeter = rect.get_arc_length()'), (519, '        radius = self.bulge_radius'), (520, '        step = (1 - self.bulge_overlap) * (2 * radius)'), (521, '        nf = self.noise_factor'), (522, '        corners = [rect.get_corner(v) for v in [DL, UL, UR, DR]]'), (523, '        points = []'), (524, '        for c1, c2 in adjacent_pairs(corners):'), (525, '            n_alphas = int(get_norm(c1 - c2) / step) + 1'), (526, '            for alpha in np.linspace(0, 1, n_alphas):'), (527, '                points.append(interpolate('), (528, '                    c1, c2, alpha + nf * (step / n_alphas) * (random.random() - 0.5)'), (529, '                ))'), (530, ''), (531, '        cloud = Union(rect, *('), (532, '            # Add bulges'), (533, '            Circle(radius=radius * (1 + nf * random.random())).move_to(point)'), (534, '            for point in points'), (535, '        ))'), (536, '        cloud.set_stroke(WHITE, 2)'), (537, ''), (538, '        circles = VGroup(Circle(radius=radius) for radius in self.circle_radii)'), (539, '        circ_buff = 0.25 * self.circle_radii[0]'), (540, '        circles.arrange(UR, buff=circ_buff)'), (541, '        circles[1].shift(circ_buff * DR)'), (542, '        circles.next_to(cloud, DOWN, 4 * circ_buff, aligned_edge=LEFT)'), (543, '        circles.set_stroke(WHITE, 2)'), (544, ''), (545, '        result = VGroup(*circles, cloud)'), (546, ''), (547, '        if direction[0] > 0:'), (548, '            result.flip()'), (549, ''), (550, '        return result'), (551, ''), (552, ''), (553, 'class OldSpeechBubble(Bubble):'), (561, 'class OldThoughtBubble(Bubble):'), (564, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (565, '        body = super().get_body(content, direction, buff)'), (566, '        body.sort(lambda p: p[1])'), (567, '        return body'), (570, '        self.body[-1].set_fill(GREEN_SCREEN, opacity=1)')], 'deleted': [(347, 'class Bubble(SVGMobject):'), (353, '        center_point: Vect3 = ORIGIN,'), (354, '        content_scale_factor: float = 0.7,'), (355, '        height: float = 4.0,'), (356, '        width: float = 8.0,'), (357, '        max_height: float | None = None,'), (358, '        max_width: float | None = None,'), (359, '        bubble_center_adjustment_factor: float = 0.125,'), (366, '        self.direction = LEFT  # Possibly updated below by self.flip()'), (367, '        self.bubble_center_adjustment_factor = bubble_center_adjustment_factor'), (368, '        self.content_scale_factor = content_scale_factor'), (370, '        super().__init__('), (371, '            fill_color=fill_color,'), (372, '            fill_opacity=fill_opacity,'), (373, '            stroke_color=stroke_color,'), (374, '            stroke_width=stroke_width,'), (375, '            **kwargs'), (376, '        )'), (378, '        self.center()'), (379, '        self.set_height(height, stretch=True)'), (380, '        self.set_width(width, stretch=True)'), (381, '        if max_height:'), (382, '            self.set_max_height(max_height)'), (383, '        if max_width:'), (384, '            self.set_max_width(max_width)'), (385, '        if direction[0] > 0:'), (386, '            self.flip()'), (388, '        self.content = VMobject()'), (391, '        # TODO, find a better way'), (392, '        return self.get_corner(DOWN + self.direction) - 0.6 * self.direction'), (399, '        mover = VGroup(self)'), (400, '        if self.content is not None:'), (401, '            mover.add(self.content)'), (402, '        mover.shift(point - self.get_tip())'), (405, '    def flip(self, axis=UP):'), (406, '        super().flip(axis=axis)'), (421, '    def position_mobject_inside(self, mobject):'), (422, '        mobject.set_max_width(self.content_scale_factor * self.get_width())'), (423, '        mobject.set_max_height(self.content_scale_factor * self.get_height() / 1.5)'), (432, '    def write(self, *text):'), (433, '        self.add_content(TexText(*text))'), (436, '    def resize_to_content(self, buff=0.75):'), (437, '        width = self.content.get_width()'), (438, '        height = self.content.get_height()'), (439, '        target_width = width + min(buff, height)'), (440, '        target_height = 1.35 * (self.content.get_height() + buff)'), (441, '        tip_point = self.get_tip()'), (442, '        self.stretch_to_fit_width(target_width, about_point=tip_point)'), (443, '        self.stretch_to_fit_height(target_height, about_point=tip_point)'), (444, '        self.position_mobject_inside(self.content)'), (447, '        self.add_content(VMobject())'), (459, 'class ThoughtBubble(Bubble):'), (462, '    def __init__(self, **kwargs):'), (463, '        Bubble.__init__(self, **kwargs)'), (464, '        self.submobjects.sort('), (465, '            key=lambda m: m.get_bottom()[1]'), (466, '        )'), (469, '        self.submobjects[-1].set_fill(GREEN_SCREEN, opacity=1)')]}",73,73
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,7565e936fa32579d610890f4a40977cd43c768e0,1d6aa47933833442dd57f949b892a48a187355af,Better bubble flipping,"{'added': [(421, '        super().flip(axis=axis, **kwargs)'), (423, ""            # Flip in place, don't use kwargs""), (424, '            self.content.flip(axis=axis)')], 'deleted': [(422, '            self.body.flip(axis=axis, **kwargs)'), (423, '        else:'), (424, '            super().flip(axis=axis, **kwargs)')]}",73,73
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,920f2407e03d8416ba56fb2f333ebc7c9c115fea,7565e936fa32579d610890f4a40977cd43c768e0,Revert default underline stroke width,"{'added': [(121, '        stroke_width: float | Sequence[float] = [0, 3, 3, 0],')], 'deleted': [(121, '        stroke_width: float | Sequence[float] = [0, 2, 3, 3, 2, 0],')]}",13,13
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,f5d1a9c449bb0bbb878888aa1753fe6adfaf2398,920f2407e03d8416ba56fb2f333ebc7c9c115fea,Keep track of original float matrix in DecimalMatrix,"{'added': [(225, '        self.float_matrix = matrix')], 'deleted': []}",61,61
manimlib/animation/fading.py,manimlib/animation/fading.py,772a3283023ed8965dee5e759912278eeedcbaa9,f5d1a9c449bb0bbb878888aa1753fe6adfaf2398,Have FadeTransform target match all uniforms of source,"{'added': [(121, '        source.set_uniform(**target.get_uniforms())')], 'deleted': []}",23,23
example_scenes.py,example_scenes.py,c970f776bba4a0f4070c876aaeab72a3dca39835,4729e44e057fcc4f02b4d6bdb64c010af4a540b3,Removed old argument from example,"{'added': [(29, '            IntegerMatrix(matrix),')], 'deleted': [(29, '            IntegerMatrix(matrix, include_background_rectangle=True),')]}",23,23
manimlib/utils/rate_functions.py,manimlib/utils/rate_functions.py,ab28804ae5776d480e88fb38c11593919aeee6fb,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,fix: `there_and_back_with_pause`,"{'added': [(49, '    a = 2. / (1. - pause_ratio)')], 'deleted': [(49, '    a = 1. / pause_ratio')]}",24,24
manimlib/tex_templates.yml,manimlib/tex_templates.yml,63e98eee94aa74f4efac66c5e1cabcae414b0aff,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,"Update tex_templates.yml

Fix the error when using Chinese, and add international typesetting support","{'added': [(48, '    \\usepackage{fontspec}'), (49, '    \\usepackage{xeCJK}'), (50, '    \\setmainfont{Microsoft YaHei}')], 'deleted': []}",,
manimlib/animation/composition.py,manimlib/animation/composition.py,4feb831a11054d32f5fc7e4aa294f8b8387f1633,772a3283023ed8965dee5e759912278eeedcbaa9,Pass group parameter in LaggedStartMap -> AnimationGroup,"{'added': [(183, '            group=group')], 'deleted': []}",36,36
manimlib/scene/scene.py,manimlib/scene/scene.py,a07ccf4aca1b6400d559c956c3b4932f5c256b47,4feb831a11054d32f5fc7e4aa294f8b8387f1633,"Include *args, **kwargs in embed shell event pre_cell and post_cell functions","{'added': [(216, '            # Embed is only relevant with a preview'), (217, '            return'), (264, '            lambda *args, **kwargs: shell.user_global_ns.update(shell.user_ns)'), (268, '        def post_cell_func(*args, **kwargs):'), (277, ""            # Show the error don't just swallow it"")], 'deleted': [(216, '            return  # Embed is only relevant with a preview'), (263, '            lambda: shell.user_global_ns.update(shell.user_ns)'), (267, '        def post_cell_func():'), (276, ""            # still show the error don't just swallow it"")]}",229,229
manimlib/animation/animation.py,manimlib/animation/animation.py,0eae42977a153e1627e87d4ea929c0a9f87dc4a8,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,fix(animation): `time_span` doesn't work for mobjects with submobjects,"{'added': [(150, '    def time_spanned_alpha(self, alpha: float) -> float:'), (151, '        if self.time_span is not None:'), (152, '            start, end = self.time_span'), (153, '            return clip(alpha * self.run_time - start, 0, end - start) / (end - start)'), (154, '        return alpha'), (155, ''), (158, '            sub_alpha = self.get_sub_alpha(self.time_spanned_alpha(alpha), i, len(self.families))')], 'deleted': [(65, '            self.rate_func = squish_rate_func('), (66, '                self.rate_func, start / self.run_time, end / self.run_time,'), (67, '            )'), (155, '            sub_alpha = self.get_sub_alpha(alpha, i, len(self.families))')]}",41,41
manimlib/animation/rotation.py,manimlib/animation/rotation.py,0eae42977a153e1627e87d4ea929c0a9f87dc4a8,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,fix(animation): `time_span` doesn't work for mobjects with submobjects,"{'added': [(51, '            self.rate_func(self.time_spanned_alpha(alpha)) * self.angle,')], 'deleted': [(51, '            self.rate_func(alpha) * self.angle,')]}",5,5
example_scenes.py,example_scenes.py,79c89ad34d1d479afb8268328d43c2c910eeed9c,a07ccf4aca1b6400d559c956c3b4932f5c256b47,Remove (outdated) background rectangle arg from example scene,"{'added': [(29, '            IntegerMatrix(matrix),'), (254, '')], 'deleted': [(29, '            IntegerMatrix(matrix, include_background_rectangle=True),'), (254, '')]}",23,23
manimlib/config.py,manimlib/config.py,d1314e5a3c95e52de28992d4da37718a90a2732a,79c89ad34d1d479afb8268328d43c2c910eeed9c,Catch screeninfo.ScreenInfoError error,"{'added': [(9, 'import screeninfo'), (436, '    try:'), (437, '        monitors = screeninfo.get_monitors()'), (438, '    except screeninfo.ScreenInfoError:'), (439, '        pass')], 'deleted': [(9, 'from screeninfo import get_monitors'), (436, '    monitors = get_monitors()')]}",76,76
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,57d4732ef12f88744c8abf81e3149bb9c9affee1,d1314e5a3c95e52de28992d4da37718a90a2732a,Remove unused lines,"{'added': [], 'deleted': [(606, '        xu = self.x_axis.get_unit_size()'), (607, '        yu = self.y_axis.get_unit_size()'), (608, '        zu = self.z_axis.get_unit_size()')]}",112,112
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,a7765dcac3e9161c948e11e2f4f8af340d51bda6,57d4732ef12f88744c8abf81e3149bb9c9affee1,Change copy frame position command,"{'added': [(51, ""COPY_FRAME_POSITION_KEY = 'p'""), (508, '        elif char == ""d"" and modifiers == SHIFT_MODIFIER:')], 'deleted': [(507, '        elif char == PAN_3D_KEY and modifiers == COMMAND_MODIFIER:')]}",161,161
manimlib/scene/scene.py,manimlib/scene/scene.py,c1efd1490459c1bfe01e6892a021601f5ad91749,a7765dcac3e9161c948e11e2f4f8af340d51bda6,Add touch and notouch to embed vocabulary,"{'added': [(243, '            touch=lambda: shell.enable_gui(""manim""),'), (244, '            notouch=lambda: shell.enable_gui(None),')], 'deleted': []}",229,229
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a105216a4776d458f998f58a0ec611af63f3ab79,c1efd1490459c1bfe01e6892a021601f5ad91749,Small clean up,"{'added': [(191, '            float sign = (i % 2 == 0 ? -1 : 1);')], 'deleted': [(166, ''), (192, '            float sign = vec2(-1, 1)[i % 2];')]}",,
manimlib/scene/scene.py,manimlib/scene/scene.py,bbc89d13e99587cd0b4fd4df1e51f5b910634617,a105216a4776d458f998f58a0ec611af63f3ab79,Don't save state after each embed cell call,"{'added': [], 'deleted': [(273, '            self.save_state()')]}",229,229
manimlib/mobject/changing.py,manimlib/mobject/changing.py,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,bbc89d13e99587cd0b4fd4df1e51f5b910634617,Hot fix for Traicing Tail,"{'added': [(170, '        self.add_updater(lambda m: m.set_stroke(width=stroke_width, opacity=stroke_opacity))')], 'deleted': []}",17,17
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,First pass at a polyline implementation for stroke,"{'added': [(3, 'in float signed_dist_to_curve;'), (15, '    float signed_dist_to_region = abs(signed_dist_to_curve) - 0.5 * uv_stroke_width;'), (16, '    frag_color.a *= smoothstep(1.0, 0.0, signed_dist_to_region / uv_anti_alias_width);'), (17, '    frag_color.a += 0.2;  // undo')], 'deleted': [(3, 'in vec2 uv_coords;'), (4, ''), (9, 'in float is_linear;'), (10, ''), (13, 'const float QUICK_DIST_WIDTH = 0.2;'), (14, ''), (15, 'float dist_to_curve(){'), (16, '    // In the linear case, the curve will have'), (17, '    // been set to equal the x axis'), (18, '    if(bool(is_linear)) return abs(uv_coords.y);'), (19, ''), (20, '    // Otherwise, find the distance from uv_coords to the curve y = x^2'), (21, '    float x0 = uv_coords.x;'), (22, '    float y0 = uv_coords.y;'), (23, ''), (24, '    // This is a quick approximation for computing'), (25, '    // the distance to the curve.'), (26, '    // Evaluate F(x, y) = y - x^2'), (27, ""    // divide by its gradient's magnitude""), (28, '    float Fxy = y0 - x0 * x0;'), (29, '    float approx_dist = abs(Fxy) * inversesqrt(1.0 + 4 * x0 * x0);'), (30, '    if(approx_dist < QUICK_DIST_WIDTH) return approx_dist;'), (31, ''), (32, '    // Otherwise, solve for the minimal distance.'), (33, '    // The distance squared between (x0, y0) and a point (x, x^2) looks like'), (34, '    //'), (35, '    // (x0 - x)^2 + (y0 - x^2)^2 = x^4 + (1 - 2y0)x^2 - 2x0 * x + (x0^2 + y0^2)'), (36, '    //'), (37, '    // Setting the derivative equal to zero (and rescaling) looks like'), (38, '    //'), (39, '    // x^3 + (0.5 - y0) * x - 0.5 * x0 = 0'), (40, '    //'), (41, '    // Adapted from https://www.shadertoy.com/view/ws3GD7'), (42, '    x0 = abs(x0);'), (43, ""    float p = (0.5 - y0) / 3.0;  // p / 3 in usual Cardano's formula notation""), (44, ""    float q = 0.25 * x0;         // -q / 2 in usual Cardano's formula notation""), (45, '    float disc = q*q + p*p*p;'), (46, '    float r = sqrt(abs(disc));'), (47, ''), (48, '    float x = (disc > 0.0) ?'), (49, '        // 1 root'), (50, '        pow(q + r, 1.0 / 3.0) + pow(abs(q - r), 1.0 / 3.0) * sign(-p) :'), (51, '        // 3 roots'), (52, '        2.0 * cos(atan(r, q) / 3.0) * sqrt(-p);'), (53, ''), (54, '    return length(vec2(x0 - x, y0 - x * x));'), (55, '}'), (56, ''), (57, ''), (63, '    float signed_dist = dist_to_curve() - 0.5 * uv_stroke_width;'), (64, ''), (65, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist / uv_anti_alias_width);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,First pass at a polyline implementation for stroke,"{'added': [(4, 'layout (triangle_strip, max_vertices = 32) out;  // Related to MAX_STEPS below'), (20, 'out float signed_dist_to_curve;'), (31, 'const float COS_THRESHOLD = 0.999;'), (32, 'const int MAX_STEPS = 16;'), (84, 'vec3 get_perp(vec4 joint_product, vec3 point, vec3 tangent){'), (89, '    float mult = 1.0;'), (90, '    if(joint_product.w < -0.75) mult *= 4 * (joint_product.w + 1.0);'), (97, '        return mult * normalize(cross(normal, tangent));'), (99, '        return mult * normalize(cross(camera_position - point, tangent));'), (104, 'vec3 point_on_curve(float t){'), (105, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (106, '}'), (107, ''), (108, ''), (109, 'vec3 tangent_on_curve(float t){'), (110, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (111, '}'), (112, ''), (113, ''), (114, 'void emit_point_with_width('), (115, '    vec3 point,'), (116, '    vec3 tangent,'), (117, '    vec4 joint_product,'), (118, '    float width,'), (119, '    vec4 joint_color,'), (120, '    float aaw'), (121, '){'), (122, '    vec3 unit_tan = normalize(tangent);'), (123, '    vec4 njp = normalized_joint_product(joint_product);'), (124, '    float buff = 0.5 * width + aaw;'), (125, '    vec3 perp = buff * get_perp(njp, point, unit_tan);'), (126, ''), (127, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (128, '    create_joint('), (129, '        njp, unit_tan, length(perp),'), (130, '        corners[0], corners[0],'), (131, '        corners[1], corners[1]'), (132, '    );'), (133, ''), (134, '    color = finalize_color(joint_color, point, unit_normal);'), (135, '    uv_anti_alias_width = aaw;'), (136, '    uv_stroke_width = width;'), (137, ''), (138, '    // Emit two corners'), (139, '    for(int i = 0; i < 2; i++){'), (140, '        float sign = i % 2 == 0 ? -1 : 1;'), (141, '        signed_dist_to_curve = sign * buff;'), (142, '        emit_gl_Position(corners[i]);'), (143, '        EmitVertex();'), (154, '    bool is_linear = jp1.w > COS_THRESHOLD; // TODO, something with this'), (155, ''), (156, '    // Compute subdivision'), (157, '    int n_steps;'), (158, '    if (is_linear){'), (159, '        n_steps = 2;'), (160, '    }else{'), (161, '        n_steps = MAX_STEPS;  // TODO'), (164, '    float subdivision[MAX_STEPS];'), (165, '    vec3 points[MAX_STEPS];'), (166, '    for(int i = 0; i < MAX_STEPS; i++){'), (167, '        if (i >= n_steps) break;'), (168, '        subdivision[i] = float(i) / (n_steps - 1);'), (169, '        points[i] = point_on_curve(subdivision[i]);'), (170, '    }'), (171, ''), (172, '    // Compute joint products'), (173, '    vec4 joint_products[MAX_STEPS];'), (174, '    joint_products[0] = v_joint_product[0];'), (175, '    joint_products[0].xyz *= -1;'), (176, '    joint_products[n_steps - 1] = v_joint_product[2];'), (177, '    for (int i = 1; i < MAX_STEPS; i++){'), (178, '        if (i >= n_steps - 1) break;'), (179, '        vec3 v1 = points[i] - points[i - 1];'), (180, '        vec3 v2 = points[i + 1] - points[i];'), (181, '        joint_products[i].xyz = cross(v1, v2);'), (182, '        joint_products[i].w = dot(v1, v2);'), (183, '    }'), (184, ''), (185, '    // Intermediate points'), (187, '    for (int i = 0; i < MAX_STEPS; i++){'), (188, '        if (i >= n_steps) break;'), (189, '        float t = subdivision[i];'), (190, '        emit_point_with_width('), (191, '            points[i],'), (192, '            tangent_on_curve(t),'), (193, '            joint_products[i],  // TODO'), (194, '            mix(v_stroke_width[0], v_stroke_width[2], t),'), (195, '            mix(v_color[0], v_color[2], t),'), (196, '            scaled_aaw'), (197, '        );')], 'deleted': [(4, 'layout (triangle_strip, max_vertices = 6) out;'), (20, ''), (21, 'out float is_linear;'), (22, ''), (23, 'out vec2 uv_coords;'), (34, 'const float COS_THRESHOLD = 0.99;'), (86, 'vec3 get_perp(int index, vec4 joint_product, vec3 point, vec3 tangent, float aaw){'), (90, '    float buff = 0.5 * v_stroke_width[index] + aaw;'), (92, '    if(joint_product.w < -0.75) buff *= 4 * (joint_product.w + 1.0);'), (99, '        return buff * normalize(cross(normal, tangent));'), (101, '        return buff * normalize(cross(camera_position - point, tangent));'), (105, '// This function is responsible for finding the corners of'), (106, '// a bounding region around the bezier curve, which can be'), (107, '// emitted as a triangle fan, with vertices vaguely close'), (108, '// to control points so that the passage of vert data to'), (109, '// frag shaders is most natural.'), (110, 'void get_corners('), (111, '    // Control points for a bezier curve'), (112, '    vec3 p0,'), (113, '    vec3 p1,'), (114, '    vec3 p2,'), (115, '    // Unit tangent vectors at p0 and p2'), (116, '    vec3 v01,'), (117, '    vec3 v12,'), (118, '    // Anti-alias width'), (119, '    float aaw,'), (120, '    out vec3 corners[6]'), (121, '){'), (122, '    bool linear = bool(is_linear);'), (123, '    vec4 jp0 = normalized_joint_product(v_joint_product[0]);'), (124, '    vec4 jp2 = normalized_joint_product(v_joint_product[2]);'), (125, '    vec3 p0_perp = get_perp(0, jp0, p0, v01, aaw);'), (126, '    vec3 p2_perp = get_perp(2, jp2, p2, v12, aaw);'), (127, '    vec3 p1_perp = 0.5 * (p0_perp + p2_perp);'), (128, '    if(linear){'), (129, '        p1_perp *= (0.5 * v_stroke_width[1] + aaw) / length(p1_perp);'), (130, '    }'), (132, '    // The order of corners should be for a triangle_strip.'), (133, '    vec3 c0 = p0 + p0_perp;'), (134, '    vec3 c1 = p0 - p0_perp;'), (135, '    vec3 c2 = p1 + p1_perp;'), (136, '    vec3 c3 = p1 - p1_perp;'), (137, '    vec3 c4 = p2 + p2_perp;'), (138, '    vec3 c5 = p2 - p2_perp;'), (139, '    // Move the inner middle control point to make'), (140, '    // room for the curve'), (141, '    // float orientation = dot(unit_normal, v_joint_product[1].xyz);'), (142, '    float orientation = v_joint_product[1].z;'), (143, '    if(!linear && orientation >= 0.0)     c2 = 0.5 * (c0 + c4);'), (144, '    else if(!linear && orientation < 0.0) c3 = 0.5 * (c1 + c5);'), (145, ''), (146, '    // Account for previous and next control points'), (147, '    if(bool(flat_stroke)){'), (148, '        create_joint(jp0, v01, length(p0_perp), c1, c1, c0, c0);'), (149, '        create_joint(jp2, -v12, length(p2_perp), c5, c5, c4, c4);'), (152, '    corners = vec3[6](c0, c1, c2, c3, c4, c5);'), (160, '    vec3 p0 = verts[0];'), (161, '    vec3 p1 = verts[1];'), (162, '    vec3 p2 = verts[2];'), (163, '    vec3 v01 = normalize(p1 - p0);'), (164, '    vec3 v12 = normalize(p2 - p1);'), (165, ''), (167, '    is_linear = float(jp1.w > COS_THRESHOLD);'), (168, ''), (169, '    // We want to change the coordinates to a space where the curve'), (170, '    // coincides with y = x^2, between some values x0 and x2. Or, in'), (171, '    // the case of a linear curve just put it on the x-axis'), (172, '    mat4 xyz_to_uv;'), (173, '    float uv_scale_factor;'), (174, '    if(!bool(is_linear)){'), (175, '        bool too_steep;'), (176, '        xyz_to_uv = get_xyz_to_uv(p0, p1, p2, 2.0, too_steep);'), (177, '        is_linear = float(too_steep);'), (178, '        uv_scale_factor = length(xyz_to_uv[0].xyz);'), (182, '    vec3 corners[6];'), (183, '    get_corners(p0, p1, p2, v01, v12, scaled_aaw, corners);'), (184, ''), (185, '    // Emit each corner'), (186, '    float max_sw = max(v_stroke_width[0], v_stroke_width[2]);'), (187, '    for(int i = 0; i < 6; i++){'), (188, '        float stroke_width = v_stroke_width[i / 2];'), (189, ''), (190, '        if(bool(is_linear)){'), (191, '            float sign = (i % 2 == 0 ? -1 : 1);'), (192, '            // In this case, we only really care about'), (193, '            // the v coordinate'), (194, '            uv_coords = vec2(0, sign * (0.5 * stroke_width + scaled_aaw));'), (195, '            uv_anti_alias_width = scaled_aaw;'), (196, '            uv_stroke_width = stroke_width;'), (197, '        }else{'), (198, '            uv_coords = (xyz_to_uv * vec4(corners[i], 1.0)).xy;'), (199, '            uv_stroke_width = uv_scale_factor * stroke_width;'), (200, '            uv_anti_alias_width = uv_scale_factor * scaled_aaw;'), (201, '        }'), (202, ''), (203, '        color = finalize_color(v_color[i / 2], corners[i], unit_normal);'), (204, '        emit_gl_Position(corners[i]);'), (205, '        EmitVertex();')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,First pass at a polyline implementation for stroke,"{'added': [(23, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')], 'deleted': [(23, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width;'), (24, '    v_stroke_width *= mix(frame_scale, 1, is_fixed_in_frame);')]}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,c6a6503544a0caaa92d2ca61ea841f3b693157bb,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,Cleaning up first pass implementation,"{'added': [(16, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist_to_region / uv_anti_alias_width);')], 'deleted': [(16, '    frag_color.a *= smoothstep(1.0, 0.0, signed_dist_to_region / uv_anti_alias_width);'), (17, '    frag_color.a += 0.2;  // undo')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c6a6503544a0caaa92d2ca61ea841f3b693157bb,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,Cleaning up first pass implementation,"{'added': [(54, 'vec3 point_on_curve(float t){'), (55, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (56, '}'), (57, ''), (58, ''), (59, 'vec3 tangent_on_curve(float t){'), (60, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (61, '}'), (62, ''), (63, ''), (64, 'void map_to_basic(out float x0, out float x2, out float scale_factor){'), (65, '    /* Find the coordinates and scale factor such that the bezier curve'), (66, '    defined by verts[] is congruent to a section of the parabola y = x^2'), (67, '    between x0 and x2, with scale_factor'), (68, '    */'), (69, '}'), (70, ''), (71, ''), (72, 'void compute_subdivision(out int n_steps, out float subdivision[MAX_STEPS]){'), (73, '    /*'), (74, '    Based on https://raphlinus.github.io/graphics/curves/2019/12/23/flatten-quadbez.html'), (75, '    */'), (76, '    float x0;'), (77, '    float x2;'), (78, '    float scale_factor;'), (79, '    map_to_basic(x0, x2, scale_factor);'), (80, ''), (81, '    if (normalized_joint_product(v_joint_product[1]).w > COS_THRESHOLD){'), (82, '        // Linear'), (83, '        n_steps = 2;'), (84, '    }else{'), (85, '        n_steps = MAX_STEPS;  // TODO'), (86, '    }'), (87, ''), (88, '    for(int i = 0; i < MAX_STEPS; i++){'), (89, '        if (i >= n_steps) break;'), (90, '        subdivision[i] = float(i) / (n_steps - 1);'), (91, '    }'), (92, '}'), (93, ''), (94, ''), (124, ''), (125, 'vec3 get_perp(vec3 point, vec3 tangent, vec4 joint_product){'), (156, '    vec3 perp = buff * get_perp(point, unit_tan, njp);'), (186, '    compute_subdivision(n_steps, subdivision);'), (187, ''), (188, '    // Compute joint products'), (190, '    vec4 joint_products[MAX_STEPS];'), (191, '    for (int i = 0; i < MAX_STEPS; i++){'), (206, '    // Emit vertex pairs aroudn subdivided points'), (214, '            joint_products[i],')], 'deleted': [(37, '#INSERT get_xyz_to_uv.glsl'), (84, 'vec3 get_perp(vec4 joint_product, vec3 point, vec3 tangent){'), (104, 'vec3 point_on_curve(float t){'), (105, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (106, '}'), (107, ''), (108, ''), (109, 'vec3 tangent_on_curve(float t){'), (110, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (111, '}'), (112, ''), (113, ''), (125, '    vec3 perp = buff * get_perp(njp, point, unit_tan);'), (145, ''), (153, '    vec4 jp1 = normalized_joint_product(v_joint_product[1]);'), (154, '    bool is_linear = jp1.w > COS_THRESHOLD; // TODO, something with this'), (155, ''), (158, '    if (is_linear){'), (159, '        n_steps = 2;'), (160, '    }else{'), (161, '        n_steps = MAX_STEPS;  // TODO'), (162, '    }'), (163, ''), (166, '    for(int i = 0; i < MAX_STEPS; i++){'), (168, '        subdivision[i] = float(i) / (n_steps - 1);'), (171, ''), (172, '    // Compute joint products'), (173, '    vec4 joint_products[MAX_STEPS];'), (185, '    // Intermediate points'), (193, '            joint_products[i],  // TODO')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a3469c236e10fa72eba97dab5cdf2840aadb8085,c6a6503544a0caaa92d2ca61ea841f3b693157bb,Simpler compute_subdivisions,"{'added': [(4, 'layout (triangle_strip, max_vertices = 64) out;  // Related to MAX_STEPS below'), (10, 'uniform float frame_scale;'), (22, 'out float flag;'), (33, 'const float COS_THRESHOLD = 0.99;'), (34, '// Used to determine how many lines to break the curve into'), (35, 'const float POLYLINE_FACTOR = 20;'), (36, 'const int MAX_STEPS = 32;'), (64, '    return 2 * (verts[1] - verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (69, '    // Crude estimate for the number of polyline segments to use, based'), (70, '    // on the area spanned by the control points'), (71, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (72, '    int count = 2 + int(round(POLYLINE_FACTOR * sqrt(area) / frame_scale));'), (74, '    n_steps = min(count, MAX_STEPS);'), (166, '    flag = 0.0;')], 'deleted': [(4, 'layout (triangle_strip, max_vertices = 32) out;  // Related to MAX_STEPS below'), (31, 'const float COS_THRESHOLD = 0.999;'), (32, 'const int MAX_STEPS = 16;'), (60, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (61, '}'), (62, ''), (63, ''), (64, 'void map_to_basic(out float x0, out float x2, out float scale_factor){'), (65, '    /* Find the coordinates and scale factor such that the bezier curve'), (66, '    defined by verts[] is congruent to a section of the parabola y = x^2'), (67, '    between x0 and x2, with scale_factor'), (68, '    */'), (73, '    /*'), (74, '    Based on https://raphlinus.github.io/graphics/curves/2019/12/23/flatten-quadbez.html'), (75, '    */'), (76, '    float x0;'), (77, '    float x2;'), (78, '    float scale_factor;'), (79, '    map_to_basic(x0, x2, scale_factor);'), (80, ''), (81, '    if (normalized_joint_product(v_joint_product[1]).w > COS_THRESHOLD){'), (82, '        // Linear'), (83, '        n_steps = 2;'), (84, '    }else{'), (85, '        n_steps = MAX_STEPS;  // TODO'), (86, '    }')]}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,361817b5065f461e8e51b373ce72dfe7cc271d1a,a3469c236e10fa72eba97dab5cdf2840aadb8085,Pass fewer values to frag shader,"{'added': [(3, '// Value between -1 and 1'), (4, 'in float scaled_signed_dist_to_curve;'), (5, 'in float scaled_anti_alias_width;'), (14, '    float signed_dist_to_region = abs(scaled_signed_dist_to_curve) - 1.0;'), (15, '    frag_color.a *= smoothstep('), (16, '        scaled_anti_alias_width,'), (17, '        -scaled_anti_alias_width,'), (18, '        signed_dist_to_region'), (19, '    );')], 'deleted': [(3, 'in float signed_dist_to_curve;'), (4, 'in float uv_stroke_width;'), (5, 'in float uv_anti_alias_width;'), (11, '    if (uv_stroke_width == 0) discard;'), (15, '    float signed_dist_to_region = abs(signed_dist_to_curve) - 0.5 * uv_stroke_width;'), (16, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist_to_region / uv_anti_alias_width);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,361817b5065f461e8e51b373ce72dfe7cc271d1a,a3469c236e10fa72eba97dab5cdf2840aadb8085,Pass fewer values to frag shader,"{'added': [(19, 'out float scaled_anti_alias_width;'), (20, 'out float scaled_signed_dist_to_curve;'), (144, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (152, '    if (width == 0) scaled_anti_alias_width = 0;'), (153, '    else scaled_anti_alias_width = 2.0 * aaw / width;'), (156, '    // The frag shader will just receive a value from -1 to 1, reflecting where in the'), (157, '    // stroke that point is'), (158, '    scaled_signed_dist_to_curve = -1.0;'), (159, '    emit_gl_Position(corners[0]);'), (160, '    EmitVertex();'), (161, ''), (162, '    scaled_signed_dist_to_curve = +1.0;'), (163, '    emit_gl_Position(corners[1]);'), (164, '    EmitVertex();')], 'deleted': [(19, 'out float uv_stroke_width;'), (20, 'out float uv_anti_alias_width;'), (21, 'out float signed_dist_to_curve;'), (145, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (153, '    uv_anti_alias_width = aaw;'), (154, '    uv_stroke_width = width;'), (157, '    for(int i = 0; i < 2; i++){'), (158, '        float sign = i % 2 == 0 ? -1 : 1;'), (159, '        signed_dist_to_curve = sign * buff;'), (160, '        emit_gl_Position(corners[i]);'), (161, '        EmitVertex();'), (162, '    }')]}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,aea747b6d3de7a4cc269f3e005b8b0b62916b3b8,361817b5065f461e8e51b373ce72dfe7cc271d1a,Final refinements on polyline stroke implementations,"{'added': [(11, '    if(scaled_anti_alias_width < 0) discard;'), (17, '        0, -scaled_anti_alias_width,')], 'deleted': [(16, '        scaled_anti_alias_width,'), (17, '        -scaled_anti_alias_width,')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,aea747b6d3de7a4cc269f3e005b8b0b62916b3b8,361817b5065f461e8e51b373ce72dfe7cc271d1a,Final refinements on polyline stroke implementations,"{'added': [(33, 'const float POLYLINE_FACTOR = 30;'), (110, 'vec3 left_step(vec3 point, vec3 tangent, vec4 joint_product){'), (135, '    vec4 joint_color'), (138, '    vec4 normed_join_product = normalized_joint_product(joint_product);'), (139, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, normed_join_product);'), (143, '        normed_join_product, unit_tan, length(perp),'), (149, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in frag'), (150, '    else scaled_anti_alias_width = 2.0 * anti_alias_width * pixel_size / width;'), (153, '    // The frag shader will receive a value from -1 to 1,'), (154, '    // reflecting where in the stroke that point is'), (177, ''), (178, '    // Compute joint products'), (179, '    vec4 joint_products[MAX_STEPS];'), (200, '            mix(v_color[0], v_color[2], t)')], 'deleted': [(21, 'out float flag;'), (34, 'const float POLYLINE_FACTOR = 20;'), (111, 'vec3 get_perp(vec3 point, vec3 tangent, vec4 joint_product){'), (136, '    vec4 joint_color,'), (137, '    float aaw'), (140, '    vec4 njp = normalized_joint_product(joint_product);'), (141, '    float buff = 0.5 * width + aaw;'), (142, '    vec3 perp = buff * get_perp(point, unit_tan, njp);'), (146, '        njp, unit_tan, length(perp),'), (152, '    if (width == 0) scaled_anti_alias_width = 0;'), (153, '    else scaled_anti_alias_width = 2.0 * aaw / width;'), (156, '    // The frag shader will just receive a value from -1 to 1, reflecting where in the'), (157, '    // stroke that point is'), (161, ''), (168, '    flag = 0.0;'), (177, ''), (178, '    // Compute joint products'), (180, '    vec4 joint_products[MAX_STEPS];'), (197, '    float scaled_aaw = anti_alias_width * pixel_size;'), (206, '            mix(v_color[0], v_color[2], t),'), (207, '            scaled_aaw')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,5decf810e789d5fac13052f9599142415803e46a,aea747b6d3de7a4cc269f3e005b8b0b62916b3b8,Change default anti_alias_width to 1.5,"{'added': [(103, '        anti_alias_width: float = 1.5,')], 'deleted': [(103, '        anti_alias_width: float = 1.0,')]}",317,317
example_scenes.py,example_scenes.py,71814a118bbe5ff4718fc7325156ac8d4046cebd,d644e3b184d52f1a432966885027fe1b3840c28c,Fix dot updater in graph example,"{'added': [(491, '        dot.add_updater(lambda d: d.move_to(axes.i2gp(x_tracker.get_value(), parabola)))')], 'deleted': [(491, '        f_always('), (492, '            dot.move_to,'), (493, '            lambda: axes.i2gp(x_tracker.get_value(), parabola)'), (494, '        )')]}",23,23
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,71814a118bbe5ff4718fc7325156ac8d4046cebd,Small clean up to stroke shaders,"{'added': [(16, '    frag_color.a *= smoothstep(0, -scaled_anti_alias_width, signed_dist_to_region);')], 'deleted': [(16, '    frag_color.a *= smoothstep('), (17, '        0, -scaled_anti_alias_width,'), (18, '        signed_dist_to_region'), (19, '    );')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,71814a118bbe5ff4718fc7325156ac8d4046cebd,Small clean up to stroke shaders,"{'added': [(56, 'vec3 point_on_quadratic(float t, vec3 c0, vec3 c1, vec3 c2){'), (57, '    return c0 + c1 * t + c2 * t * t;'), (61, 'vec3 tangent_on_quadratic(float t, vec3 c1, vec3 c2){'), (62, '    return c1 + 2 * c2 * t;'), (101, '    unit_normal = normal;  // Set global unit normal'), (102, '    if(normal.z < 0) normal *= -1;  // Choose the ""outward"" normal direction'), (104, '        return normalize(cross(normal, tangent));'), (106, '        return normalize(cross(camera_position - point, tangent));'), (119, '    vec4 unit_jp = normalized_joint_product(joint_product);'), (120, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, unit_jp);'), (122, '    vec3 left = point + perp;'), (123, '    vec3 right = point - perp;'), (124, '    create_joint(unit_jp, unit_tan, length(perp), left, left, right, right);'), (134, '    emit_gl_Position(left);'), (137, '    emit_gl_Position(right);'), (141, ''), (147, '    // Coefficients such that the quadratic bezier is c0 + c1 * t  + c2 * t^2'), (148, '    vec3 c0 = verts[0];'), (149, '    vec3 c1 = 2 * (verts[1] - verts[0]);'), (150, '    vec3 c2 = verts[0] - 2 * verts[1] + verts[2];'), (151, ''), (152, '    // Estimate how many line segment the curve should be divided into'), (153, '    // based on the area of the triangle defined by these control points'), (154, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (155, '    int count = int(round(POLYLINE_FACTOR * sqrt(area) / frame_scale));'), (156, '    int n_steps = min(2 + count, MAX_STEPS);'), (157, ''), (158, '    // Compute points along the curve'), (162, '        float t = float(i) / (n_steps - 1);'), (163, '        points[i] = point_on_quadratic(t, c0, c1, c2);'), (175, '        joint_products[i] = vec4(cross(v1, v2), dot(v1, v2));'), (181, '        float t = float(i) / (n_steps - 1);'), (184, '            tangent_on_quadratic(t, c1, c2),')], 'deleted': [(56, 'vec3 point_on_curve(float t){'), (57, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (61, 'vec3 tangent_on_curve(float t){'), (62, '    return 2 * (verts[1] - verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (63, '}'), (64, ''), (65, ''), (66, 'void compute_subdivision(out int n_steps, out float subdivision[MAX_STEPS]){'), (67, '    // Crude estimate for the number of polyline segments to use, based'), (68, '    // on the area spanned by the control points'), (69, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (70, '    int count = 2 + int(round(POLYLINE_FACTOR * sqrt(area) / frame_scale));'), (71, ''), (72, '    n_steps = min(count, MAX_STEPS);'), (73, '    for(int i = 0; i < MAX_STEPS; i++){'), (74, '        if (i >= n_steps) break;'), (75, '        subdivision[i] = float(i) / (n_steps - 1);'), (76, '    }'), (114, '    // Add correction for sharp angles to prevent weird bevel effects'), (115, '    float mult = 1.0;'), (116, '    if(joint_product.w < -0.75) mult *= 4 * (joint_product.w + 1.0);'), (118, '    // Set global unit normal'), (119, '    unit_normal = normal;'), (120, '    // Choose the ""outward"" normal direction'), (121, '    if(normal.z < 0) normal *= -1;'), (123, '        return mult * normalize(cross(normal, tangent));'), (125, '        return mult * normalize(cross(camera_position - point, tangent));'), (138, '    vec4 normed_join_product = normalized_joint_product(joint_product);'), (139, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, normed_join_product);'), (141, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (142, '    create_joint('), (143, '        normed_join_product, unit_tan, length(perp),'), (144, '        corners[0], corners[0],'), (145, '        corners[1], corners[1]'), (146, '    );'), (156, '    emit_gl_Position(corners[0]);'), (159, '    emit_gl_Position(corners[1]);'), (168, '    // Compute subdivision'), (169, '    int n_steps;'), (170, '    float subdivision[MAX_STEPS];'), (171, '    compute_subdivision(n_steps, subdivision);'), (175, '        points[i] = point_on_curve(subdivision[i]);'), (187, '        joint_products[i].xyz = cross(v1, v2);'), (188, '        joint_products[i].w = dot(v1, v2);'), (194, '        float t = subdivision[i];'), (197, '            tangent_on_curve(t),')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,26249c34bb322048b2f9972c2ff93eeee3312b61,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,Have non-flat stroke operate based on projecting tangents,"{'added': [(35, 'const float MITER_LIMIT = 3.0;'), (65, 'vec4 get_joint_product(vec3 v1, vec3 v2){'), (66, '    return vec4(cross(v1, v2), dot(v1, v2));'), (67, '}'), (69, ''), (70, 'vec3 project(vec3 vect, vec3 normal){'), (71, '    /* Project the vector onto the plane perpendicular to a given unit normal */'), (72, '    return vect - dot(vect, normal) * normal;'), (73, '}'), (74, ''), (75, 'vec3 inverse_joint_product(vec3 vect, vec4 joint_product){'), (76, '    /*'), (77, '    If joint_product represents vec4(cross(v1, v2), dot(v1, v2)),'), (78, '    then given v1, this function recovers v2'), (79, '    */'), (80, '    float dp = joint_product.w;'), (81, '    if (abs(dp) > COS_THRESHOLD) return vect;'), (82, '    vec3 cp = joint_product.xyz;'), (83, '    vec3 perp = cross(cp, vect);'), (84, '    float a = dp / dot(vect, vect);'), (85, '    float b = length(cp) / length(cross(vect, perp));'), (86, '    return a * vect + b * perp;'), (90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product){'), (92, '    Step the the left of a curve.'), (93, '    First a perpendicular direction is calculated, then it is adjusted'), (94, '    so as to make a joint.'), (96, '    vec3 step = normalize(cross(unit_normal, unit_tan));'), (97, ''), (98, '    // Check if an adjustment is needed'), (99, '    float cos_angle = joint_product.w;'), (100, '    if(abs(cos_angle) > 1 - 1e-5 || int(joint_type) == NO_JOINT){'), (101, '        return step;'), (102, '    }'), (103, ''), (104, '    // Adjust based on the joint'), (105, '    float sin_angle = length(joint_product.xyz) * sign(joint_product.z);'), (106, '    float shift = (int(joint_type) == MITER_JOINT) ?'), (107, '        (cos_angle + 1.0) / sin_angle :'), (108, '        (cos_angle - 1.0) / sin_angle;'), (109, ''), (110, '    // return step + shift * unit_tan;'), (111, '    vec3 result = step + shift * unit_tan;'), (112, '    if (length(result) > MITER_LIMIT){'), (113, '        result = MITER_LIMIT * normalize(result);'), (115, '    return result;'), (126, '    // Normalize relevant vectors'), (127, '    vec3 unit_tan;'), (128, '    vec4 unit_jp;'), (129, '    vec3 unit_normal;'), (130, '    if(bool(flat_stroke)){'), (131, '        unit_tan = normalize(tangent);'), (132, '        unit_jp = normalized_joint_product(joint_product);'), (133, '        unit_normal = get_joint_unit_normal(joint_product);'), (134, '    }else{'), (135, '        unit_normal = normalize(camera_position - point);'), (136, '        unit_tan = normalize(project(tangent, unit_normal));'), (137, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (138, '        adj_tan = project(adj_tan, unit_normal);'), (139, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (140, '    }'), (141, '    if(unit_normal.z < 0) unit_normal *= -1;  // Choose the ""outward"" normal direction'), (143, '    // Figure out the step from the point to the corners of the'), (144, '    // triangle strip around the polyline'), (145, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp);'), (147, '    // Set styling'), (155, '    for (int sign = -1; sign <= 1; sign += 2){'), (156, '        scaled_signed_dist_to_curve = sign;'), (157, '        emit_gl_Position(point + 0.5 * width * sign * step);'), (158, '        EmitVertex();'), (159, '    }'), (196, '        joint_products[i] = get_joint_product(v1, v2);')], 'deleted': [(35, ''), (36, 'vec3 unit_normal = vec3(0.0, 0.0, 1.0);'), (66, 'void create_joint('), (67, '    vec4 joint_product,'), (68, '    vec3 unit_tan,'), (69, '    float buff,'), (70, '    vec3 static_c0,'), (71, '    out vec3 changing_c0,'), (72, '    vec3 static_c1,'), (73, '    out vec3 changing_c1'), (74, '){'), (75, '    float cos_angle = joint_product.w;'), (76, '    if(abs(cos_angle) > COS_THRESHOLD || int(joint_type) == NO_JOINT){'), (77, '        // No joint'), (78, '        changing_c0 = static_c0;'), (79, '        changing_c1 = static_c1;'), (80, '        return;'), (81, '    }'), (83, '    float shift;'), (84, '    float sin_angle = length(joint_product.xyz) * sign(joint_product.z);'), (85, '    if(int(joint_type) == MITER_JOINT){'), (86, '        shift = buff * (-1.0 - cos_angle) / sin_angle;'), (87, '    }else{'), (88, '        // For a Bevel joint'), (89, '        shift = buff * (1.0 - cos_angle) / sin_angle;'), (90, '    }'), (91, '    changing_c0 = static_c0 - shift * unit_tan;'), (92, '    changing_c1 = static_c1 + shift * unit_tan;'), (96, 'vec3 left_step(vec3 point, vec3 tangent, vec4 joint_product){'), (98, '    Perpendicular vectors to the left of the curve'), (100, '    vec3 normal = get_joint_unit_normal(joint_product);'), (101, '    unit_normal = normal;  // Set global unit normal'), (102, '    if(normal.z < 0) normal *= -1;  // Choose the ""outward"" normal direction'), (103, '    if(bool(flat_stroke)){'), (104, '        return normalize(cross(normal, tangent));'), (105, '    }else{'), (106, '        return normalize(cross(camera_position - point, tangent));'), (118, '    vec3 unit_tan = normalize(tangent);'), (119, '    vec4 unit_jp = normalized_joint_product(joint_product);'), (120, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, unit_jp);'), (122, '    vec3 left = point + perp;'), (123, '    vec3 right = point - perp;'), (124, '    create_joint(unit_jp, unit_tan, length(perp), left, left, right, right);'), (133, '    scaled_signed_dist_to_curve = -1.0;'), (134, '    emit_gl_Position(left);'), (135, '    EmitVertex();'), (136, '    scaled_signed_dist_to_curve = +1.0;'), (137, '    emit_gl_Position(right);'), (138, '    EmitVertex();'), (175, '        joint_products[i] = vec4(cross(v1, v2), dot(v1, v2));')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,26249c34bb322048b2f9972c2ff93eeee3312b61,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,Have non-flat stroke operate based on projecting tangents,"{'added': [(19, 'const float STROKE_WIDTH_CONVERSION = 0.015;')], 'deleted': [(19, 'const float STROKE_WIDTH_CONVERSION = 0.01;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c61c18486cc9b49101e5f7a5011384c7cc38444a,26249c34bb322048b2f9972c2ff93eeee3312b61,Don't bevel corners on inner joints of quadratic bezier curves,"{'added': [(70, 'vec3 project(vec3 vect, vec3 unit_normal){'), (72, '    return vect - dot(vect, unit_normal) * unit_normal;'), (90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (98, '    // Check if an adjustment is needed,'), (100, '    if(inner_joint || int(joint_type) == NO_JOINT || cos_angle > 1 - 1e-5){'), (114, ''), (124, '    vec4 joint_color,'), (125, '    bool inner_joint'), (131, '    vec3 to_camera = camera_position - point;'), (132, '    if(flat_stroke == 1.0){'), (137, '        unit_normal = normalize(to_camera);'), (143, '    // Choose the ""outward"" normal direction'), (144, '    if(to_camera.z * dot(unit_normal, to_camera) < 0) unit_normal *= -1;'), (148, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp, inner_joint);'), (211, '            mix(v_color[0], v_color[2], t),'), (212, '            (i > 0 && i < n_steps - 1)  // Is this an inner joint')], 'deleted': [(70, 'vec3 project(vec3 vect, vec3 normal){'), (72, '    return vect - dot(vect, normal) * normal;'), (90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product){'), (98, '    // Check if an adjustment is needed'), (100, '    if(abs(cos_angle) > 1 - 1e-5 || int(joint_type) == NO_JOINT){'), (110, '    // return step + shift * unit_tan;'), (124, '    vec4 joint_color'), (130, '    if(bool(flat_stroke)){'), (135, '        unit_normal = normalize(camera_position - point);'), (141, '    if(unit_normal.z < 0) unit_normal *= -1;  // Choose the ""outward"" normal direction'), (145, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp);'), (208, '            mix(v_color[0], v_color[2], t)')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,f363eaa2fdc42a3a235a7875349146599012d69e,c61c18486cc9b49101e5f7a5011384c7cc38444a,Add stand in for a ribboning effect,"{'added': [(150, ""    // TODO, this gives a somewhat nice effect that's like a ribbon mostly with its""), (151, '    // broad side to the camera. Currently unused by VMobject'), (152, '    if(flat_stroke == 2.0){'), (153, '        // Rotate the step towards the unit normal by an amount depending'), (154, '        // on the camera position'), (155, '        float cos_angle = dot(unit_normal, normalize(camera_position));'), (156, '        float sin_angle = sqrt(max(1 - cos_angle * cos_angle, 0));'), (157, '        step = cos_angle * step + sin_angle * unit_normal;'), (158, '    }'), (159, '')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,557819ad032305fb72011edf47a6880c02fe5161,f363eaa2fdc42a3a235a7875349146599012d69e,Remove pre-computation of curve points and joint products,"{'added': [(192, '    // Emit vertex pairs aroudn subdivided points'), (197, '        // Point and tangent'), (198, '        vec3 point = point_on_quadratic(t, c0, c1, c2);'), (199, '        vec3 tangent = tangent_on_quadratic(t, c1, c2);'), (200, ''), (201, '        // Style'), (202, '        float stroke_width = mix(v_stroke_width[0], v_stroke_width[2], t);'), (203, '        vec4 color = mix(v_color[0], v_color[2], t);'), (204, ''), (205, '        // Use middle joint product for inner points, flip cross sign for first'), (206, '        vec4 joint_product;'), (207, '        if (i == 0)               joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (208, '        else if (i < n_steps - 1) joint_product = v_joint_product[1];'), (209, '        else                      joint_product = v_joint_product[2];'), (210, ''), (211, '        // This is sent along to prevent needless joint creation'), (212, '        bool inside_curve = (i > 0 && i < n_steps - 1);'), (215, '            point, tangent, joint_product,'), (216, '            stroke_width, color,'), (217, '            inside_curve')], 'deleted': [(192, '    // Compute points along the curve'), (193, '    vec3 points[MAX_STEPS];'), (197, '        points[i] = point_on_quadratic(t, c0, c1, c2);'), (198, '    }'), (200, '    // Compute joint products'), (201, '    vec4 joint_products[MAX_STEPS];'), (202, '    joint_products[0] = v_joint_product[0];'), (203, '    joint_products[0].xyz *= -1;'), (204, '    joint_products[n_steps - 1] = v_joint_product[2];'), (205, '    for (int i = 1; i < MAX_STEPS; i++){'), (206, '        if (i >= n_steps - 1) break;'), (207, '        vec3 v1 = points[i] - points[i - 1];'), (208, '        vec3 v2 = points[i + 1] - points[i];'), (209, '        joint_products[i] = get_joint_product(v1, v2);'), (210, '    }'), (212, '    // Emit vertex pairs aroudn subdivided points'), (213, '    for (int i = 0; i < MAX_STEPS; i++){'), (214, '        if (i >= n_steps) break;'), (215, '        float t = float(i) / (n_steps - 1);'), (217, '            points[i],'), (218, '            tangent_on_quadratic(t, c1, c2),'), (219, '            joint_products[i],'), (220, '            mix(v_stroke_width[0], v_stroke_width[2], t),'), (221, '            mix(v_color[0], v_color[2], t),'), (222, '            (i > 0 && i < n_steps - 1)  // Is this an inner joint')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a5926195eed81ed0b09f94b4d68df9e2968d00f2,557819ad032305fb72011edf47a6880c02fe5161,Clean up stroke shader,"{'added': [(90, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (96, '    vec3 unit_tan = normalize(flat_stroke == 0.0 ? project(tangent, unit_normal) : tangent);'), (97, ''), (100, '    // Check if we can avoid creating a joint'), (101, '    if (inner_joint || int(joint_type) == NO_JOINT) return step;'), (102, ''), (103, '    // Find the appropriate unit joint product'), (104, '    vec4 unit_jp;'), (105, '    if (flat_stroke == 0){'), (106, '        // Figure out what joint product would be for everything projected onto'), (107, '        // the plane perpendicular to the normal direction (which here would be to_camera)'), (108, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (109, '        adj_tan = project(adj_tan, unit_normal);'), (110, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (111, '    }else {'), (112, '        unit_jp = normalized_joint_product(joint_product);'), (115, '    float cos_angle = unit_jp.w;'), (116, '    if(cos_angle > 1 - 1e-5) return step;'), (117, ''), (119, '    float sin_angle = length(unit_jp.xyz) * sign(unit_jp.z);'), (124, '    step = step + shift * unit_tan;'), (125, '    if (length(step) > MITER_LIMIT){'), (126, '        step = MITER_LIMIT * normalize(step);'), (129, '    return step;'), (143, '    vec3 unit_normal = (flat_stroke == 0.0) ?'), (144, '        normalize(to_camera) :'), (145, '        get_joint_unit_normal(joint_product);'), (151, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inner_joint);'), (165, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in the frag shader'), (211, ""        // Use middle joint product for inner points, flip sign for first one's cross product component""), (212, '        vec4 joint_product;'), (213, '        if (i == 0)            joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (214, '        else if (inside_curve) joint_product = v_joint_product[1];'), (215, '        else                   joint_product = v_joint_product[2];'), (216, '')], 'deleted': [(90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (98, '    // Check if an adjustment is needed,'), (99, '    float cos_angle = joint_product.w;'), (100, '    if(inner_joint || int(joint_type) == NO_JOINT || cos_angle > 1 - 1e-5){'), (101, '        return step;'), (105, '    float sin_angle = length(joint_product.xyz) * sign(joint_product.z);'), (110, '    vec3 result = step + shift * unit_tan;'), (111, '    if (length(result) > MITER_LIMIT){'), (112, '        result = MITER_LIMIT * normalize(result);'), (115, '    return result;'), (128, '    vec3 unit_tan;'), (129, '    vec4 unit_jp;'), (130, '    vec3 unit_normal;'), (132, '    if(flat_stroke == 1.0){'), (133, '        unit_tan = normalize(tangent);'), (134, '        unit_jp = normalized_joint_product(joint_product);'), (135, '        unit_normal = get_joint_unit_normal(joint_product);'), (136, '    }else{'), (137, '        unit_normal = normalize(to_camera);'), (138, '        unit_tan = normalize(project(tangent, unit_normal));'), (139, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (140, '        adj_tan = project(adj_tan, unit_normal);'), (141, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (142, '    }'), (148, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp, inner_joint);'), (162, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in frag'), (205, '        // Use middle joint product for inner points, flip cross sign for first'), (206, '        vec4 joint_product;'), (207, '        if (i == 0)               joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (208, '        else if (i < n_steps - 1) joint_product = v_joint_product[1];'), (209, '        else                      joint_product = v_joint_product[2];'), (210, '')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2b6ec2d95fe63467db1d37c15be11f9983f2db45,a5926195eed81ed0b09f94b4d68df9e2968d00f2,Add spacing on assert lines,"{'added': [(676, '        assert mode in (""jagged"", ""approx_smooth"", ""true_smooth"")'), (725, '        assert len(points) % 2 == 1 or len(points) == 0')], 'deleted': [(676, '        assert(mode in (""jagged"", ""approx_smooth"", ""true_smooth""))'), (725, '        assert(len(points) % 2 == 1 or len(points) == 0)')]}",317,317
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,b45c71d3c2cd332c05506b0dc088a917159c98c4,2b6ec2d95fe63467db1d37c15be11f9983f2db45,Account for Gimbal lock in panning,"{'added': [(4, 'import warnings'), (13, 'from manimlib.constants import PI'), (16, 'from manimlib.utils.simple_functions import clip'), (68, '        if np.isclose(orientation.as_quat(), [0, 0, 0, 1]).all():'), (70, '        with warnings.catch_warnings():'), (71, ""            warnings.simplefilter('ignore', UserWarning)  # Ignore UserWarnings""), (72, '            angles = orientation.as_euler(self.euler_axes)[::-1]'), (73, '        # Handle Gimble lock case'), (74, '        if np.isclose(angles[1], 0, atol=1e-2):'), (75, '            angles[0] = angles[0] + angles[2]'), (76, '            angles[2] = 0'), (77, '        return angles'), (147, '        dtheta: float = 0,'), (148, '        dphi: float = 0,'), (149, '        dgamma: float = 0,'), (153, '        new_angles = angles + np.array([dtheta, dphi, dgamma]) * units'), (154, '        new_angles[1] = clip(new_angles[1], 0, PI)  # Limit range for phi'), (155, '        new_rot = Rotation.from_euler(self.euler_axes, new_angles[::-1])'), (156, '        self.set_orientation(new_rot)')], 'deleted': [(65, '        if all(orientation.as_quat() == [0, 0, 0, 1]):'), (67, '        return orientation.as_euler(self.euler_axes)[::-1]'), (137, '        dtheta: float | None = None,'), (138, '        dphi: float | None = None,'), (139, '        dgamma: float | None = None,'), (143, '        for i, value in enumerate([dtheta, dphi, dgamma]):'), (144, '            if value is not None:'), (145, '                angles[i] += value * units'), (146, '        self.set_euler_angles(*angles)')]}",50,50
manimlib/mobject/changing.py,manimlib/mobject/changing.py,4223bb63202e5e122e0bc95c842ae5829fe6d62d,b45c71d3c2cd332c05506b0dc088a917159c98c4,Small cleanup on TracedPath,"{'added': [(108, '        super().__init__(**kwargs)'), (115, '        self.set_stroke(stroke_color, stroke_width)')], 'deleted': [(106, '        fill_opacity: float = 0.0,'), (109, '        super().__init__('), (110, '            stroke_width=stroke_width,'), (111, '            stroke_color=stroke_color,'), (112, '            fill_opacity=fill_opacity,'), (113, '            **kwargs'), (114, '        )')]}",17,17
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,4ff61ed561fed31d324dcf8613a964c7a2f7f5e0,4223bb63202e5e122e0bc95c842ae5829fe6d62d,Default approximate smoothing (non-approx has a bug in 3d),"{'added': [(700, '    def make_smooth(self, approx=True, recurse=True) -> Self:')], 'deleted': [(700, '    def make_smooth(self, approx=False, recurse=True) -> Self:')]}",317,317
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,44ec9933b7396ee20546916237622fca5211a9fb,4ff61ed561fed31d324dcf8613a964c7a2f7f5e0,Small format fix,"{'added': [(1204, '        if len(points) < 3:')], 'deleted': [(1204, '        if(len(points) < 3):')]}",317,317
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,ec88673e927af5292925ce40f18f820c12bbe9df,44ec9933b7396ee20546916237622fca5211a9fb,Fix kink issue in flat stroke,"{'added': [(119, '    float sin_angle = length(unit_jp.xyz) * sign(dot(unit_jp.xyz, unit_normal));'), (147, '    unit_normal *= sign(dot(unit_normal, to_camera));')], 'deleted': [(119, '    float sin_angle = length(unit_jp.xyz) * sign(unit_jp.z);'), (147, '    if(to_camera.z * dot(unit_normal, to_camera) < 0) unit_normal *= -1;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,edb438e5e23a670e16cc5890762f5ea7aedb5be0,ec88673e927af5292925ce40f18f820c12bbe9df,Further clean up to stroke shader,"{'added': [(35, 'const float MITER_LIMIT = 5.0;'), (42, '    float tol = 1e-8;'), (43, '    if (length(joint_product.xyz) > tol){'), (44, '        return normalize(joint_product.xyz);'), (45, '    }'), (46, '    if (length(v_joint_product[1].xyz) > tol){'), (47, '        return normalize(v_joint_product[1].xyz);'), (48, '    }'), (49, '    return vec3(0.0, 0.0, 1.0);'), (73, 'vec3 inverse_vector_product(vec3 vect, vec3 cross_product, float dot_product){'), (75, '    Suppose cross(v1, v2) = cross_product and dot(v1, v2) = dot_product.'), (76, '    Given v1, this function return v2.'), (78, '    return (vect * dot_product - cross(vect, cross_product)) / dot(vect, vect);'), (94, '    // Find the angle between'), (95, ''), (99, '        vec3 adj_tan = inverse_vector_product(tangent, joint_product.xyz, joint_product.w);'), (101, '        joint_product = get_joint_product(unit_tan, adj_tan);'), (104, '    float cos_angle = (length(joint_product) > 1e-10) ? normalize(joint_product).w : 1.0;'), (105, '    if(cos_angle > 1 - 1e-3) return step;'), (106, '    float sin_angle = sqrt(1 - cos_angle * cos_angle) * sign(dot(joint_product.xyz, unit_normal));'), (130, '    // Find unit normal'), (132, '    vec3 unit_normal;'), (133, '    if (flat_stroke == 0.0){'), (134, '        unit_normal = normalize(to_camera);'), (135, '    }else{'), (136, '        unit_normal = get_joint_unit_normal(joint_product);'), (137, '        unit_normal *= sign(dot(unit_normal, to_camera));  // Choose the ""outward"" normal direction'), (138, '    }'), (144, ""    // TODO, this gives a potentially nice effect that's like a ribbon mostly with its""), (145, '    // broad side to the camera. Currently hard to access via VMobject')], 'deleted': [(35, 'const float MITER_LIMIT = 3.0;'), (42, '    vec3 result = (joint_product.w < COS_THRESHOLD) ?'), (43, '        joint_product.xyz : v_joint_product[1].xyz;'), (44, '    float norm = length(result);'), (45, '    return (norm > 1e-5) ? result / norm : vec3(0.0, 0.0, 1.0);'), (46, '}'), (47, ''), (48, ''), (49, 'vec4 normalized_joint_product(vec4 joint_product){'), (50, '    float norm = length(joint_product);'), (51, '    return (norm > 1e-10) ? joint_product / norm : vec4(0.0, 0.0, 0.0, 1.0);'), (75, 'vec3 inverse_joint_product(vec3 vect, vec4 joint_product){'), (77, '    If joint_product represents vec4(cross(v1, v2), dot(v1, v2)),'), (78, '    then given v1, this function recovers v2'), (80, '    float dp = joint_product.w;'), (81, '    if (abs(dp) > COS_THRESHOLD) return vect;'), (82, '    vec3 cp = joint_product.xyz;'), (83, '    vec3 perp = cross(cp, vect);'), (84, '    float a = dp / dot(vect, vect);'), (85, '    float b = length(cp) / length(cross(vect, perp));'), (86, '    return a * vect + b * perp;'), (97, ''), (103, '    // Find the appropriate unit joint product'), (104, '    vec4 unit_jp;'), (108, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (110, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (111, '    }else {'), (112, '        unit_jp = normalized_joint_product(joint_product);'), (115, '    float cos_angle = unit_jp.w;'), (116, '    if(cos_angle > 1 - 1e-5) return step;'), (119, '    float sin_angle = length(unit_jp.xyz) * sign(dot(unit_jp.xyz, unit_normal));'), (141, '    // Normalize relevant vectors'), (143, '    vec3 unit_normal = (flat_stroke == 0.0) ?'), (144, '        normalize(to_camera) :'), (145, '        get_joint_unit_normal(joint_product);'), (146, '    // Choose the ""outward"" normal direction'), (147, '    unit_normal *= sign(dot(unit_normal, to_camera));'), (153, ""    // TODO, this gives a somewhat nice effect that's like a ribbon mostly with its""), (154, '    // broad side to the camera. Currently unused by VMobject')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,61a2b4d0da0fdf27d0a57a3fa9107405cb017300,edb438e5e23a670e16cc5890762f5ea7aedb5be0,Improve flat stroke for sharp corners with a smooth transition to miter joints,"{'added': [(31, 'const float COS_THRESHOLD = 0.999;'), (52, 'vec4 unit_joint_product(vec4 joint_product){'), (53, '    float tol = 1e-8;'), (54, '    float norm = length(joint_product);'), (55, '    return (norm < tol) ? vec4(0.0, 0.0, 0.0, 1.0) : joint_product / norm;'), (56, '}'), (57, ''), (58, ''), (95, '    vec4 unit_jp = unit_joint_product(joint_product);'), (96, '    float cos_angle = unit_jp.w;'), (97, ''), (98, '    // Step to stroke width bound should be perpendicular'), (99, '    // both to the tangent and the normal direction'), (102, '    // Conditions where no joint needs to be created'), (103, '    if (inner_joint || int(joint_type) == NO_JOINT || cos_angle > COS_THRESHOLD) return step;'), (108, '        vec3 adj_tan = inverse_vector_product(tangent, unit_jp.xyz, unit_jp.w);'), (110, '        vec4 flat_jp = get_joint_product(unit_tan, adj_tan);'), (111, '        cos_angle = unit_joint_product(flat_jp).w;'), (114, '    // Adjust based on the joint.'), (115, '    // Bevel for cos(angle) > -0.7, smoothly transition'), (116, '    // to miter for those with sharper angles'), (118, '    float miter_factor = (int(joint_type) == MITER_JOINT) ?'), (119, '        1.0 : smoothstep(-0.7, -0.9, cos_angle);'), (120, '    float shift = (cos_angle + mix(-1, 1, miter_factor)) / sin_angle;'), (122, '    return step + shift * unit_tan;'), (162, '    width += anti_alias_width * pixel_size;')], 'deleted': [(31, 'const float COS_THRESHOLD = 0.99;'), (35, 'const float MITER_LIMIT = 5.0;'), (91, '    // Check if we can avoid creating a joint'), (92, '    if (inner_joint || int(joint_type) == NO_JOINT) return step;'), (94, '    // Find the angle between'), (95, ''), (99, '        vec3 adj_tan = inverse_vector_product(tangent, joint_product.xyz, joint_product.w);'), (101, '        joint_product = get_joint_product(unit_tan, adj_tan);'), (104, '    float cos_angle = (length(joint_product) > 1e-10) ? normalize(joint_product).w : 1.0;'), (105, '    if(cos_angle > 1 - 1e-3) return step;'), (108, '    // Adjust based on the joint'), (109, '    float shift = (int(joint_type) == MITER_JOINT) ?'), (110, '        (cos_angle + 1.0) / sin_angle :'), (111, '        (cos_angle - 1.0) / sin_angle;'), (112, ''), (113, '    step = step + shift * unit_tan;'), (114, '    if (length(step) > MITER_LIMIT){'), (115, '        step = MITER_LIMIT * normalize(step);'), (116, '    }'), (117, ''), (118, '    return step;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0dcf6302226cbd76fa10769e654fd816a9d34ada,61a2b4d0da0fdf27d0a57a3fa9107405cb017300,Change default to non-flat stroke rendering,"{'added': [(100, '        flat_stroke: bool = False,')], 'deleted': [(100, '        flat_stroke: bool = True,')]}",317,317
manimlib/utils/bezier.py,manimlib/utils/bezier.py,e130625b9b61dcedb8b12b112a306f14e05db22b,0dcf6302226cbd76fa10769e654fd816a9d34ada,Handle edge case of single point passed into approx_smooth_quadratic_bezier_handles,"{'added': [(201, '    if len(points) == 1:'), (202, '        return points[0]'), (203, '    elif len(points) == 2:')], 'deleted': [(201, '    if len(points) == 2:')]}",51,51
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,0a43a3ff9acda0ab8d9220f8b214233d606b4f37,e130625b9b61dcedb8b12b112a306f14e05db22b,Remove unnecessary stroke vert input,"{'added': [], 'deleted': [(9, 'in vec3 joint_normal;')]}",,
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,bc91e91634ca10ffae8458e2935ffa9f23b96ade,0a43a3ff9acda0ab8d9220f8b214233d606b4f37,"In get_euler_angles, add edge case for gimbal lock on the low side","{'added': [(77, '        if np.isclose(angles[1], PI, atol=1e-2):'), (78, '            angles[0] = angles[0] - angles[2]'), (79, '            angles[2] = 0')], 'deleted': []}",51,51
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,f677a02036b19f7a90d34ce151ebd147345516cd,bc91e91634ca10ffae8458e2935ffa9f23b96ade,Allow for manually setting miter or bevel joints,"{'added': [(115, '    // If joint type is auto, it will bevel for cos(angle) > -0.7,'), (116, '    // and smoothly transition to miter for those with sharper angles'), (117, '    float miter_factor;'), (118, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(-0.7, -0.9, cos_angle);'), (119, '    else if (joint_type == BEVEL_JOINT) miter_factor = 0.0;'), (120, '    else                                miter_factor = 1.0;'), (121, '')], 'deleted': [(115, '    // Bevel for cos(angle) > -0.7, smoothly transition'), (116, '    // to miter for those with sharper angles'), (118, '    float miter_factor = (int(joint_type) == MITER_JOINT) ?'), (119, '        1.0 : smoothstep(-0.7, -0.9, cos_angle);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,70862a068f75f3846f2f35d5cbc3add394184435,f677a02036b19f7a90d34ce151ebd147345516cd,Don't buff out stroke width by antialias width,"{'added': [], 'deleted': [(165, '    width += anti_alias_width * pixel_size;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,099aaaee43f8b44f9f62a9fe42e30cad08e5b5d9,70862a068f75f3846f2f35d5cbc3add394184435,Increase polyline factor,"{'added': [(33, 'const float POLYLINE_FACTOR = 100;')], 'deleted': [(33, 'const float POLYLINE_FACTOR = 30;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bf43a648a436849d5f10256cb0dfb465922a8c98,099aaaee43f8b44f9f62a9fe42e30cad08e5b5d9,Allow for setting flat stroke in VMobject.set_stroke,"{'added': [(206, '        flat: bool | None = None,'), (225, '        if flat is not None:'), (226, '            self.set_flat_stroke(flat)'), (227, '')], 'deleted': []}",318,318
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,1ff758dea878af07c7d60e8b3b56a6c8663137c7,bf43a648a436849d5f10256cb0dfb465922a8c98,Remove (no longer necessary) specifications of non-flat stroke for 3d things,"{'added': [], 'deleted': [(533, '        flat_stroke: bool = False,'), (558, '        self.set_flat_stroke(flat_stroke)'), (559, '')]}",112,112
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,1ff758dea878af07c7d60e8b3b56a6c8663137c7,bf43a648a436849d5f10256cb0dfb465922a8c98,Remove (no longer necessary) specifications of non-flat stroke for 3d things,"{'added': [], 'deleted': [(41, '        flat_stroke: bool = False,'), (55, '        self.set_flat_stroke(flat_stroke)')]}",30,30
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c345d76de09e32e3ff3a7b125aaf77996d6accd3,1ff758dea878af07c7d60e8b3b56a6c8663137c7,Patch for glitches associated with non-flat stroke when tangency direction lines up with camera view,"{'added': [(88, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inside_curve){'), (100, '    // For non-flat stroke, there can be glitches when the tangent direction'), (101, '    // lines up very closely with the direction to the camera, treated here'), (102, '    // as the unit normal. To avoid those, this smoothly transitions to a step'), (103, '    // direction perpendicular to the true curve normal.'), (104, '    float alignment = abs(dot(normalize(tangent), unit_normal));'), (105, '    float alignment_threshold = 0.97;  // This could maybe be chosen in a more principled way based on stroke width'), (106, '    if (alignment > alignment_threshold) {'), (107, '        vec3 perp = normalize(cross(get_joint_unit_normal(joint_product), tangent));'), (108, '        step = mix(step, project(step, perp), smoothstep(alignment_threshold, 1.0, alignment));'), (109, '    }'), (110, ''), (111, '    if (inside_curve || int(joint_type) == NO_JOINT) return step;'), (112, ''), (113, '    vec4 unit_jp = unit_joint_product(joint_product);'), (114, '    float cos_angle = unit_jp.w;'), (115, ''), (116, '    if (cos_angle > COS_THRESHOLD) return step;'), (118, '    // Below here, figure out the adjustment to bevel or miter a joint'), (122, '        step = normalize(cross(unit_normal, unit_tan));  // Back to original step'), (149, '    bool inside_curve'), (163, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inside_curve);')], 'deleted': [(88, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (95, '    vec4 unit_jp = unit_joint_product(joint_product);'), (96, '    float cos_angle = unit_jp.w;'), (102, '    // Conditions where no joint needs to be created'), (103, '    if (inner_joint || int(joint_type) == NO_JOINT || cos_angle > COS_THRESHOLD) return step;'), (114, '    // Adjust based on the joint.'), (135, '    bool inner_joint'), (149, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inner_joint);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,9f54b85c4e35a09afa58ac915dcb78f305421e4f,c345d76de09e32e3ff3a7b125aaf77996d6accd3,Change miter threshold to global constant,"{'added': [(35, 'const float MITER_COS_ANGLE_THRESHOLD = -0.8;'), (130, '    // If joint type is auto, it will bevel for cos(angle) > MITER_COS_ANGLE_THRESHOLD,'), (132, '    float mcat1 = MITER_COS_ANGLE_THRESHOLD;'), (133, '    float mcat2 = 0.5 * (mcat1 - 1.0);'), (135, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(mcat1, mcat2, cos_angle);')], 'deleted': [(129, '    // If joint type is auto, it will bevel for cos(angle) > -0.7,'), (132, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(-0.7, -0.9, cos_angle);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,cff3bdf8d4f10f12bbc7cf45eed7c98979706fd7,9f54b85c4e35a09afa58ac915dcb78f305421e4f,Remove unnecessary flat stroke option,"{'added': [], 'deleted': [(168, ""    // TODO, this gives a potentially nice effect that's like a ribbon mostly with its""), (169, '    // broad side to the camera. Currently hard to access via VMobject'), (170, '    if(flat_stroke == 2.0){'), (171, '        // Rotate the step towards the unit normal by an amount depending'), (172, '        // on the camera position'), (173, '        float cos_angle = dot(unit_normal, normalize(camera_position));'), (174, '        float sin_angle = sqrt(max(1 - cos_angle * cos_angle, 0));'), (175, '        step = cos_angle * step + sin_angle * unit_normal;'), (176, '    }'), (177, ''), (178, '    // Set styling'), (179, '    color = finalize_color(joint_color, point, unit_normal);'), (180, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in the frag shader'), (181, '    else scaled_anti_alias_width = 2.0 * anti_alias_width * pixel_size / width;'), (182, '')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,31b6affabb6ae3b8d7fc9c0300adf697b731fc71,cff3bdf8d4f10f12bbc7cf45eed7c98979706fd7,Push up pointwise styling update,"{'added': [(164, '    // Set styling'), (165, '    color = finalize_color(joint_color, point, unit_normal);'), (166, '    scaled_anti_alias_width = (width == 0) ?'), (167, '        -1.0 : // Signal to discard in the frag shader'), (168, '        2.0 * anti_alias_width * pixel_size / width;'), (169, '')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a4858918ddd58069021c5c608fd39ef51344149a,31b6affabb6ae3b8d7fc9c0300adf697b731fc71,Small reformatting,"{'added': [(133, '    if (joint_type == BEVEL_JOINT){'), (134, '        miter_factor = 0.0;'), (135, '    }else if (joint_type == MITER_JOINT){'), (136, '        miter_factor = 1.0;'), (137, '    }else {'), (138, '        float mcat1 = MITER_COS_ANGLE_THRESHOLD;'), (139, '        float mcat2 = 0.5 * (mcat1 - 1.0);'), (140, '        miter_factor = smoothstep(mcat1, mcat2, cos_angle);'), (141, '    }')], 'deleted': [(132, '    float mcat1 = MITER_COS_ANGLE_THRESHOLD;'), (133, '    float mcat2 = 0.5 * (mcat1 - 1.0);'), (135, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(mcat1, mcat2, cos_angle);'), (136, '    else if (joint_type == BEVEL_JOINT) miter_factor = 0.0;'), (137, '    else                                miter_factor = 1.0;')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,a4858918ddd58069021c5c608fd39ef51344149a,Brighten up fill,"{'added': [(185, '                color *= 1.06;')], 'deleted': [(185, '                color.a *= 1.06;')]}",19,19
manimlib/camera/camera.py,manimlib/camera/camera.py,a5ba721f96479dff29b677bde1c6399fb43ce183,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,"Cease useless rendering

Change so that with a live window, rendering only happens if there has been an event (mouse motion, key press, etc.) to respond to.","{'added': [(127, '        if self.window:'), (128, '            self.window.clear()'), (232, ''), (233, '        if self.window:'), (234, '            self.window.swap_buffers()'), (235, '            if self.fbo is not self.window_fbo:'), (236, '                self.blit(self.fbo, self.window_fbo)')], 'deleted': [(230, '        if self.window is not None and self.fbo is not self.window_fbo:'), (231, '            self.blit(self.fbo, self.window_fbo)')]}",35,35
manimlib/scene/scene.py,manimlib/scene/scene.py,a5ba721f96479dff29b677bde1c6399fb43ce183,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,"Cease useless rendering

Change so that with a live window, rendering only happens if there has been an event (mouse motion, key press, etc.) to respond to.","{'added': [(217, '            return'), (272, '                self.window._has_undrawn_event = True'), (329, '        if self.window and dt == 0 and not self.window.has_undrawn_event():'), (330, ""            # In this case, there's no need for new rendering, but we""), (331, '            # shoudl still listen for new events'), (332, '            self.window._window.dispatch_events()'), (333, '            return'), (334, ''), (340, '            time.sleep(max(vt - rt, 0))'), (536, '        self.real_animation_start_time = time.time()'), (604, '            self.real_animation_start_time = time.time()')], 'deleted': [(217, '            return'), (328, '        if self.window:'), (329, '            self.window.clear()'), (333, '            self.window.swap_buffers()'), (336, '            if rt < vt:'), (337, '                self.update_frame(0)'), (599, '            self.real_animation_start_time = time.time()')]}",230,230
manimlib/window.py,manimlib/window.py,a5ba721f96479dff29b677bde1c6399fb43ce183,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,"Cease useless rendering

Change so that with a live window, rendering only happens if there has been an event (mouse motion, key press, etc.) to respond to.","{'added': [(9, 'from functools import wraps'), (43, '        self._has_undrawn_event = True'), (44, ''), (101, '    def has_undrawn_event(self) -> bool:'), (102, '        return self._has_undrawn_event'), (103, ''), (104, '    def swap_buffers(self):'), (105, '        super().swap_buffers()'), (106, '        self._has_undrawn_event = False'), (107, ''), (108, '    @staticmethod'), (109, '    def note_undrawn_event(func: Callable[..., T]) -> Callable[..., T]:'), (110, '        @wraps(func)'), (111, '        def wrapper(self, *args, **kwargs):'), (112, '            func(self, *args, **kwargs)'), (113, '            self._has_undrawn_event = True'), (114, '        return wrapper'), (115, ''), (116, '    @note_undrawn_event'), (123, '    @note_undrawn_event'), (130, '    @note_undrawn_event'), (136, '    @note_undrawn_event'), (142, '    @note_undrawn_event'), (149, '    @note_undrawn_event'), (155, '    @note_undrawn_event'), (161, '    @note_undrawn_event'), (166, '    @note_undrawn_event'), (171, '    @note_undrawn_event'), (176, '    @note_undrawn_event')], 'deleted': []}",23,23
manimlib/scene/scene.py,manimlib/scene/scene.py,65d594796663082ce26365751d264f18f7cf3643,a5ba721f96479dff29b677bde1c6399fb43ce183,Change ignore_skipping name to force_draw,"{'added': [(272, '                self.update_frame(dt=0, force_draw=True)'), (316, '        self.update_frame(force_draw=True)'), (319, '    def update_frame(self, dt: float = 0, force_draw: bool = False) -> None:'), (322, '        if self.skip_animations and not force_draw:'), (328, '        if self.window and dt == 0 and not self.window.has_undrawn_event() and not force_draw:'), (611, '            self.update_frame(dt=0, force_draw=True)')], 'deleted': [(272, '                self.window._has_undrawn_event = True'), (273, '                self.update_frame(dt=0, ignore_skipping=True)'), (317, '        self.update_frame(ignore_skipping=True)'), (320, '    def update_frame(self, dt: float = 0, ignore_skipping: bool = False) -> None:'), (323, '        if self.skip_animations and not ignore_skipping:'), (329, '        if self.window and dt == 0 and not self.window.has_undrawn_event():'), (612, '            self.update_frame(dt=0, ignore_skipping=True)')]}",231,231
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,59235d3eedef07ec5c6748e1a959f3e41eb9a302,65d594796663082ce26365751d264f18f7cf3643,"Include flat stroke in get_style, set_style, match_style","{'added': [(251, '        flat_stroke: bool = False,'), (270, '                    flat=flat_stroke,'), (278, '                    flat=flat_stroke,'), (280, '                    recurse=False,'), (296, '            ""flat_stroke"": bool(self.uniforms[""flat_stroke""]),')], 'deleted': [(276, '                    recurse=False,')]}",318,318
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,df0ae6fdc94215c0f43f3da3b24bcd386fe51f9f,59235d3eedef07ec5c6748e1a959f3e41eb9a302,Fix missing ignore_skipping -> force_draw,"{'added': [(253, '            self.scene.update_frame(force_draw=True)')], 'deleted': [(253, '            self.scene.update_frame(ignore_skipping=True)')]}",94,94
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,04347e7876dca60f004dcf3a0dcdd220f9e62e9f,df0ae6fdc94215c0f43f3da3b24bcd386fe51f9f,Fix thin stroke issue for low resolutions,"{'added': [(5, 'in float anti_alias_prop;'), (11, '    if(anti_alias_prop < 0) discard;'), (16, '    frag_color.a *= smoothstep(0, -anti_alias_prop, signed_dist_to_region);')], 'deleted': [(5, 'in float scaled_anti_alias_width;'), (11, '    if(scaled_anti_alias_width < 0) discard;'), (16, '    frag_color.a *= smoothstep(0, -scaled_anti_alias_width, signed_dist_to_region);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,04347e7876dca60f004dcf3a0dcdd220f9e62e9f,df0ae6fdc94215c0f43f3da3b24bcd386fe51f9f,Fix thin stroke issue for low resolutions,"{'added': [(19, 'out float anti_alias_prop;'), (170, '    float aaw = anti_alias_width * pixel_size;'), (171, '    anti_alias_prop = (width == 0) ? -1.0 : 2 * aaw / (width + 2 * aaw);'), (182, '        emit_gl_Position(point + 0.5 * (width + aaw) * sign * step);')], 'deleted': [(19, 'out float scaled_anti_alias_width;'), (170, '    scaled_anti_alias_width = (width == 0) ?'), (171, '        -1.0 : // Signal to discard in the frag shader'), (172, '        2.0 * anti_alias_width * pixel_size / width;'), (183, '        emit_gl_Position(point + 0.5 * width * sign * step);')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,4a6e6ca64603a4ddcf0e5c82202f9fb762868c41,04347e7876dca60f004dcf3a0dcdd220f9e62e9f,"Double the size of the fill canvas, to effectively do msaa","{'added': [(151, '    # Double the size so as to effectively to 4x multi-sample antialiasing'), (152, ""    size = (2 * cam_config['pixel_width'], 2 * cam_config['pixel_height'])"")], 'deleted': [(151, ""    size = (cam_config['pixel_width'], cam_config['pixel_height'])"")]}",19,19
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,430a88cf131a2229381607a590c1a138269e3db7,4a6e6ca64603a4ddcf0e5c82202f9fb762868c41,"Change default border width to 0, and only draw it for opacity 1","{'added': [(4, 'from functools import reduce'), (8, 'import operator as op'), (106, '        fill_border_width: float = 0.0,'), (195, '        if border_width is not None:'), (196, '            for mob in self.get_family(recurse):'), (197, '                mob.data[""fill_border_width""] = border_width'), (1393, ''), (1394, '            draw_border_width = reduce(op.and_, ['), (1395, '                (not submob._has_stroke) or submob.stroke_behind,'), (1396, ""                submob.data['fill_border_width'][0] > 0,""), (1397, ""                submob.data['fill_rgba'][0, 3] == 1""), (1398, '            ])'), (1399, '            if draw_border_width:')], 'deleted': [(104, '        fill_border_width: float = 0.5,'), (193, '        if border_width is None:'), (194, '            border_width = 0 if self.get_fill_opacity() < 1 else 0.5'), (195, '        for mob in self.get_family(recurse):'), (196, '            mob.data[""fill_border_width""] = border_width'), (442, '        fill_border_width: float = 0,'), (447, '        self.set_fill(border_width=fill_border_width)'), (453, '        fill_border_width: float = 0.5,'), (458, '        self.set_fill(border_width=fill_border_width)'), (1396, '            if (not submob._has_stroke) or submob.stroke_behind:')]}",317,317
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,174f3186028ec31a0ba2eec61f81549e4d06dc50,430a88cf131a2229381607a590c1a138269e3db7,Push _data_default initialization into init_data,"{'added': [(137, '        self._data_defaults = np.ones(1, dtype=self.data.dtype)')], 'deleted': [(113, '        self._data_defaults = np.ones(1, dtype=self.data.dtype)')]}",559,559
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,174f3186028ec31a0ba2eec61f81549e4d06dc50,Use _data_defaults for initializing fill border width,"{'added': [(197, '                data = mob.data if mob.has_points() > 0 else mob._data_defaults'), (198, '                data[""fill_border_width""] = border_width')], 'deleted': [(197, '                mob.data[""fill_border_width""] = border_width')]}",318,318
manimlib/animation/animation.py,manimlib/animation/animation.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(52, '        assert isinstance(mobject, Mobject)')], 'deleted': [(52, '        assert(isinstance(mobject, Mobject))')]}",39,39
manimlib/animation/composition.py,manimlib/animation/composition.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(136, '        assert len(self.animations) > 0')], 'deleted': [(136, '        assert(len(self.animations) > 0)')]}",36,36
manimlib/animation/creation.py,manimlib/animation/creation.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(87, '        assert isinstance(vmobject, VMobject)')], 'deleted': [(87, '        assert(isinstance(vmobject, VMobject))')]}",34,34
manimlib/animation/numbers.py,manimlib/animation/numbers.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(22, '        assert isinstance(decimal_mob, DecimalNumber)')], 'deleted': [(22, '        assert(isinstance(decimal_mob, DecimalNumber))')]}",4,4
manimlib/animation/transform.py,manimlib/animation/transform.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(182, '        assert isinstance(method.__self__, Mobject)')], 'deleted': [(182, '        assert(isinstance(method.__self__, Mobject))')]}",52,52
manimlib/camera/camera.py,manimlib/camera/camera.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(102, '        assert self.window is not None')], 'deleted': [(102, '        assert(self.window is not None)')]}",35,35
manimlib/event_handler/event_dispatcher.py,manimlib/event_handler/event_dispatcher.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(23, '        assert isinstance(event_listner, EventListener)'), (28, '        assert isinstance(event_listner, EventListener)'), (59, '                assert isinstance(listner, EventListener)')], 'deleted': [(23, '        assert(isinstance(event_listner, EventListener))'), (28, '        assert(isinstance(event_listner, EventListener))'), (59, '                assert(isinstance(listner, EventListener))')]}",33,33
manimlib/mobject/interactive.py,manimlib/mobject/interactive.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(40, '        assert isinstance(mobject, Mobject)'), (61, '        assert isinstance(mobject, Mobject)'), (122, '        assert isinstance(value, bool)'), (171, '        assert isinstance(value, bool)'), (255, '        assert self.min_value <= value <= self.max_value'), (354, '            assert isinstance(square, Square)')], 'deleted': [(40, '        assert(isinstance(mobject, Mobject))'), (61, '        assert(isinstance(mobject, Mobject))'), (122, '        assert(isinstance(value, bool))'), (171, '        assert(isinstance(value, bool))'), (255, '        assert(self.min_value <= value <= self.max_value)'), (354, '            assert(isinstance(square, Square))')]}",60,60
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(128, '        assert isinstance(other, Mobject)'), (132, '        assert isinstance(other, int)'), (231, '        assert data.dtype == self.data.dtype')], 'deleted': [(128, '        assert(isinstance(other, Mobject))'), (132, '        assert(isinstance(other, int))'), (231, '        assert(data.dtype == self.data.dtype)')]}",559,559
manimlib/mobject/mobject_update_utils.py,manimlib/mobject/mobject_update_utils.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(21, '    assert inspect.ismethod(method)'), (23, '    assert isinstance(mobject, Mobject)')], 'deleted': [(21, '    assert(inspect.ismethod(method))'), (23, '    assert(isinstance(mobject, Mobject))')]}",13,13
manimlib/mobject/probability.py,manimlib/mobject/probability.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(156, '        assert hasattr(self, ""horizontal_parts"")'), (165, '        assert hasattr(self, ""vertical_parts"")'), (174, '        assert hasattr(self, ""vertical_parts"")')], 'deleted': [(156, '        assert(hasattr(self, ""horizontal_parts""))'), (165, '        assert(hasattr(self, ""vertical_parts""))'), (174, '        assert(hasattr(self, ""vertical_parts""))')]}",39,39
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(170, '        assert isinstance(smobject, Surface)')], 'deleted': [(170, '        assert(isinstance(smobject, Surface))')]}",47,47
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(476, '        assert len(anchors) == len(handles) + 1'), (1060, '        assert isinstance(vmobject, VMobject)'), (1262, '        assert len(points) == 0 or len(points) % 2 == 1'), (1272, '        assert len(points) % 2 == 0')], 'deleted': [(476, '        assert(len(anchors) == len(handles) + 1)'), (1060, '        assert(isinstance(vmobject, VMobject))'), (1262, '        assert(len(points) == 0 or len(points) % 2 == 1)'), (1272, '        assert(len(points) % 2 == 0)')]}",318,318
manimlib/scene/scene.py,manimlib/scene/scene.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(871, '        assert self.window is not None')], 'deleted': [(871, '        assert(self.window is not None)')]}",231,231
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"{'added': [(222, '        assert self.vao is not None')], 'deleted': [(222, '        assert(self.vao is not None)')]}",59,59
manimlib/scene/scene.py,manimlib/scene/scene.py,21c0bcb8b68dc3efcfd1089bbd621c1bb8862adb,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,Don't wait for animations while skipping,"{'added': [(336, '        if self.window and not self.skip_animations:')], 'deleted': [(336, '        if self.window:')]}",232,232
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,108db870872c7aaa7519d52ad29cfd556c1f897a,21c0bcb8b68dc3efcfd1089bbd621c1bb8862adb,"Rather than ignoring border with for non-one opacity, go back to having set_fill default to setting 0 border width for intermediate opacities","{'added': [(194, '        if opacity is not None and 0 < opacity < 1 and border_width is None:'), (195, '            border_width = 0'), (197, '            self.border_width = border_width'), (1397, '            draw_border_width = op.and_('), (1399, '                (not submob._has_stroke) or submob.stroke_behind,'), (1400, '            )')], 'deleted': [(4, 'from functools import reduce'), (1395, '            draw_border_width = reduce(op.and_, ['), (1396, '                (not submob._has_stroke) or submob.stroke_behind,'), (1398, ""                submob.data['fill_rgba'][0, 3] == 1""), (1399, '            ])')]}",321,321
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,d8edccdab4a542781477adc1d1dd6cea59d0b94a,108db870872c7aaa7519d52ad29cfd556c1f897a,Fix zero stroke width issue,"{'added': [(4, 'in float dist_to_curve;'), (5, 'in float half_stroke_width;'), (6, 'in float half_anti_alias_width;'), (12, '    if(half_stroke_width == 0) discard;'), (16, '    float signed_dist_to_region = abs(dist_to_curve) - half_stroke_width;'), (17, '    frag_color.a *= smoothstep(half_anti_alias_width, -half_anti_alias_width, signed_dist_to_region);')], 'deleted': [(4, 'in float scaled_signed_dist_to_curve;'), (5, 'in float anti_alias_prop;'), (11, '    if(anti_alias_prop < 0) discard;'), (15, '    float signed_dist_to_region = abs(scaled_signed_dist_to_curve) - 1.0;'), (16, '    frag_color.a *= smoothstep(0, -anti_alias_prop, signed_dist_to_region);')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,d8edccdab4a542781477adc1d1dd6cea59d0b94a,108db870872c7aaa7519d52ad29cfd556c1f897a,Fix zero stroke width issue,"{'added': [(19, 'out float dist_to_curve;'), (20, 'out float half_stroke_width;'), (21, 'out float half_anti_alias_width;'), (171, '    half_anti_alias_width = 0.5 * anti_alias_width * pixel_size;'), (172, '    half_stroke_width = 0.5 * width;'), (182, '        dist_to_curve = sign * (half_stroke_width + half_anti_alias_width);'), (183, '        emit_gl_Position(point + dist_to_curve * step);')], 'deleted': [(19, 'out float anti_alias_prop;'), (20, 'out float scaled_signed_dist_to_curve;'), (170, '    float aaw = anti_alias_width * pixel_size;'), (171, '    anti_alias_prop = (width == 0) ? -1.0 : 2 * aaw / (width + 2 * aaw);'), (181, '        scaled_signed_dist_to_curve = sign;'), (182, '        emit_gl_Position(point + 0.5 * (width + aaw) * sign * step);')]}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,0267740bdec6f149f4dccdbd75b8103f3249555c,d8edccdab4a542781477adc1d1dd6cea59d0b94a,Change STROKE_WIDTH_CONVERSION width back to older value,"{'added': [(18, 'const float STROKE_WIDTH_CONVERSION = 0.01;')], 'deleted': [(18, 'const float STROKE_WIDTH_CONVERSION = 0.015;')]}",,
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,c20ce8d6332daa0b741b985e052d92480cca99f1,0267740bdec6f149f4dccdbd75b8103f3249555c,Have arrows default to flat stroke,"{'added': [(645, '        flat_stroke: bool = True,'), (663, '            flat_stroke=flat_stroke,')], 'deleted': []}",138,138
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bb42b66201d0c73f5e80015657659e3c81b99bed,c20ce8d6332daa0b741b985e052d92480cca99f1,Include fill border width in style,"{'added': [(250, '        fill_border_width: float | None = None,'), (267, '                    border_width=fill_border_width,'), (299, '            ""fill_border_width"": data[\'fill_border_width\'].copy(),')], 'deleted': []}",321,321
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,ccc84f4ab14b8fded450c84e4945e98f8260c7e5,bb42b66201d0c73f5e80015657659e3c81b99bed,Give Numbers a default border width,"{'added': [(33, '        fill_border_width: float = 0.5,'), (61, '            fill_border_width=fill_border_width,')], 'deleted': []}",39,39
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0efa96e399a3b6f5f9c1e30f4c195f39f04570dd,ccc84f4ab14b8fded450c84e4945e98f8260c7e5,Just use L-inf norm for point equality,"{'added': [(753, '        return all(abs(p1 - p0) < self.tolerance_for_point_equality)')], 'deleted': [(753, '        return get_norm(p1 - p0) < self.tolerance_for_point_equality')]}",321,321
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f9b9cf69fdea86f1d591613131ef7d0d18728300,0efa96e399a3b6f5f9c1e30f4c195f39f04570dd,"Update so that vbo is not recreated on each from, but is read into","{'added': [(2053, '                shader_wrapper.load_data()')], 'deleted': [(2053, '                shader_wrapper.generate_vao()')]}",559,559
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f9b9cf69fdea86f1d591613131ef7d0d18728300,0efa96e399a3b6f5f9c1e30f4c195f39f04570dd,"Update so that vbo is not recreated on each from, but is read into","{'added': [(232, '    def get_vertex_buffer_object(self):'), (233, '        self.vbo = self.ctx.buffer(self.vert_data)'), (236, '    def get_index_buffer_object(self):'), (237, '        if len(self.vert_indices) > 0:'), (241, '    def load_data(self):'), (242, '        if self.vao is None:'), (243, '            self.generate_vao()'), (244, '        elif self.vao.vertices != len(self.vert_data):'), (245, '            self.release()'), (246, '            self.generate_vao()'), (247, '        else:'), (248, '            self.vbo.write(self.vert_data)'), (249, '            if self.ibo is not None:'), (250, '                self.ibo.write(self.self.vert_indices.astype(np.uint32))'), (251, ''), (252, '    def generate_vao(self):'), (254, '        vbo = self.get_vertex_buffer_object()'), (255, '        ibo = self.get_index_buffer_object()')], 'deleted': [(232, '    def get_vertex_buffer_object(self, refresh: bool = True):'), (233, '        if refresh:'), (234, '            self.vbo = self.ctx.buffer(self.vert_data)'), (237, '    def get_index_buffer_object(self, refresh: bool = True):'), (238, '        if refresh and len(self.vert_indices) > 0:'), (242, '    def generate_vao(self, refresh: bool = True):'), (243, '        self.release()'), (245, '        vbo = self.get_vertex_buffer_object(refresh)'), (246, '        ibo = self.get_index_buffer_object(refresh)')]}",61,61
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","{'added': [], 'deleted': [(2052, '            for shader_wrapper in self.shader_wrappers:'), (2053, '                shader_wrapper.load_data()')]}",558,558
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","{'added': [(8, 'import itertools as it'), (50, 'from manimlib.shader_wrapper import VShaderWrapper'), (78, ""    fill_data_names = ['point', 'fill_rgba', 'base_point', 'unit_normal']  # Delete these""), (79, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']  # Delete these""), (1329, ''), (1331, '        self.shader_indices = np.zeros(0)'), (1332, '        self.shader_wrapper = VShaderWrapper('), (1334, '            vert_data=self.data,'), (1338, '    def get_shader_vert_indices(self):'), (1339, '        return self.get_outer_vert_indices()'), (1350, '        for submob in family:'), (1351, '            if submob._has_fill:'), (1352, '                submob.data[""base_point""] = submob.data[""point""][0]'), (1354, '        self.shader_wrapper.read_in('), (1355, '            # [sm.data for sm in family],'), (1356, '            list(it.chain(*([sm.data, sm.data[-1:]] for sm in family)))'), (1357, '            # [sm.get_shader_vert_indices() for sm in family]'), (1358, '        )'), (1359, '        rep = family[0]  # Representative family member'), (1360, '        self.shader_wrapper.bind_to_mobject_uniforms(rep.get_uniforms())'), (1361, '        self.shader_wrapper.depth_test = rep.depth_test'), (1362, '        return [self.shader_wrapper]')], 'deleted': [(49, 'from manimlib.shader_wrapper import FillShaderWrapper'), (77, ""    fill_data_names = ['point', 'fill_rgba', 'base_point', 'unit_normal']""), (78, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']""), (1329, '        dtype = self.shader_dtype'), (1330, '        fill_dtype, stroke_dtype = ('), (1331, '            np.dtype(['), (1332, '                (name, dtype[name].base, dtype[name].shape)'), (1333, '                for name in names'), (1334, '            ])'), (1335, '            for names in [self.fill_data_names, self.stroke_data_names]'), (1336, '        )'), (1337, '        fill_data = np.zeros(0, dtype=fill_dtype)'), (1338, '        stroke_data = np.zeros(0, dtype=stroke_dtype)'), (1339, '        self.fill_shader_wrapper = FillShaderWrapper('), (1340, '            ctx=ctx,'), (1341, '            vert_data=fill_data,'), (1342, '            mobject_uniforms=self.uniforms,'), (1343, '            shader_folder=self.fill_shader_folder,'), (1344, '            render_primitive=self.fill_render_primitive,'), (1345, '        )'), (1346, '        self.stroke_shader_wrapper = ShaderWrapper('), (1348, '            vert_data=stroke_data,'), (1350, '            shader_folder=self.stroke_shader_folder,'), (1351, '            render_primitive=self.stroke_render_primitive,'), (1353, '        self.back_stroke_shader_wrapper = self.stroke_shader_wrapper.copy()'), (1354, '        self.shader_wrappers = ['), (1355, '            self.back_stroke_shader_wrapper,'), (1356, '            self.fill_shader_wrapper,'), (1357, '            self.stroke_shader_wrapper,'), (1358, '        ]'), (1359, '        for sw in self.shader_wrappers:'), (1360, '            family = self.family_members_with_points()'), (1361, '            rep = family[0] if family else self'), (1362, '            for old, new in rep.shader_code_replacements.items():'), (1363, '                sw.replace_code(old, new)'), (1365, '    def refresh_shader_wrapper_id(self) -> Self:'), (1366, '        if not self._shaders_initialized:'), (1367, '            return self'), (1368, '        for wrapper in self.shader_wrappers:'), (1369, '            wrapper.refresh_id()'), (1370, '        return self'), (1380, '        fill_names = self.fill_data_names'), (1381, '        stroke_names = self.stroke_data_names'), (1382, ''), (1383, '        fill_family = (sm for sm in family if sm._has_fill)'), (1384, '        stroke_family = (sm for sm in family if sm._has_stroke)'), (1385, ''), (1386, '        # Build up fill data lists'), (1387, '        fill_datas = []'), (1388, '        fill_indices = []'), (1389, '        fill_border_datas = []'), (1390, '        for submob in fill_family:'), (1391, '            indices = submob.get_outer_vert_indices()'), (1392, '            if submob._use_winding_fill:'), (1393, '                data = submob.data[fill_names]'), (1394, '                data[""base_point""][:] = data[""point""][0]'), (1395, '                fill_datas.append(data[indices])'), (1396, '            else:'), (1397, '                fill_datas.append(submob.data[fill_names])'), (1398, '                fill_indices.append(submob.get_triangulation())'), (1400, '            draw_border_width = op.and_('), (1401, ""                submob.data['fill_border_width'][0] > 0,""), (1402, '                (not submob._has_stroke) or submob.stroke_behind,'), (1403, '            )'), (1404, '            if draw_border_width:'), (1405, '                # Add fill border'), (1406, '                submob.get_joint_products()'), (1407, '                names = list(stroke_names)'), (1408, ""                names[names.index('stroke_rgba')] = 'fill_rgba'""), (1409, ""                names[names.index('stroke_width')] = 'fill_border_width'""), (1410, '                border_stroke_data = submob.data[names].astype('), (1411, '                    self.stroke_shader_wrapper.vert_data.dtype'), (1412, '                )'), (1413, '                fill_border_datas.append(border_stroke_data[indices])'), (1414, ''), (1415, '        # Build up stroke data lists'), (1416, '        stroke_datas = []'), (1417, '        back_stroke_datas = []'), (1418, '        for submob in stroke_family:'), (1419, '            submob.get_joint_products()'), (1420, '            indices = submob.get_outer_vert_indices()'), (1421, '            if submob.stroke_behind:'), (1422, '                back_stroke_datas.append(submob.data[stroke_names][indices])'), (1423, '            else:'), (1424, '                stroke_datas.append(submob.data[stroke_names][indices])'), (1426, '        shader_wrappers = ['), (1427, '            self.back_stroke_shader_wrapper.read_in([*back_stroke_datas, *fill_border_datas]),'), (1428, '            self.fill_shader_wrapper.read_in(fill_datas, fill_indices or None),'), (1429, '            self.stroke_shader_wrapper.read_in(stroke_datas),'), (1430, '        ]'), (1431, '        for sw in shader_wrappers:'), (1432, '            rep = family[0]  # Representative family member'), (1433, '            sw.bind_to_mobject_uniforms(rep.get_uniforms())'), (1434, '            sw.depth_test = rep.depth_test'), (1435, '        return [sw for sw in shader_wrappers if len(sw.vert_data) > 0]')]}",303,303
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","{'added': [(60, '        self.init_vertex_objects()'), (82, '        self.programs = [self.program]'), (90, '    def init_vertex_objects(self):'), (99, '            # np.all(self.vert_data == shader_wrapper.vert_data),'), (113, '        result.init_vertex_objects()'), (128, '        program_id = hash("""".join(map(str, self.program_code.values())))'), (169, '            self.read_in([self.vert_data, (sw.vert_data for sw in shader_wrappers)])'), (170, '            vbos = ['), (171, '                vbo'), (172, '                for vbo in [self.vbo, *(sw.vbo for sw in shader_wrappers)]'), (173, '                if vbo is not None'), (174, '            ]'), (175, '            total_size = sum(vbo.size for vbo in vbos)'), (176, '            new_vbo = self.ctx.buffer(reserve=total_size)'), (177, '            offset = 0'), (178, '            for vbo in vbos:'), (179, '                new_vbo.write(vbo.read(), offset=offset)'), (180, '                offset += vbo.size'), (181, '            self.vbo = new_vbo'), (186, '        data_list: Iterable[np.ndarray],'), (187, '        indices_list: Iterable[np.ndarray] | None = None'), (188, '    ):'), (189, '        if indices_list is not None:'), (190, '            data_list = [data[indices] for data, indices in zip(data_list, indices_list)]'), (191, '            total_len = sum(map(len, indices_list))'), (192, '        else:'), (193, '            total_len = sum(map(len, data_list))'), (194, ''), (196, '            if self.vbo is not None:'), (197, '                self.vbo.clear()'), (198, '            return'), (199, ''), (200, '        # If possible, read concatenated data into existing list'), (201, '        if len(self.vert_data) != total_len:'), (202, '            self.vert_data = np.concatenate(data_list)'), (203, '        else:'), (204, '            np.concatenate(data_list, out=self.vert_data)'), (205, ''), (206, '        # Either create new vbo, or read data into it'), (207, '        total_size = self.vert_data.itemsize * total_len'), (208, '        if self.vbo is None:'), (209, '            self.vbo = self.ctx.buffer(self.vert_data)'), (210, '        elif self.vbo.size != total_size:'), (211, '            self.vbo.release()'), (212, '            self.vbo = self.ctx.buffer(self.vert_data)'), (213, '        else:'), (214, '            self.vbo.write(self.vert_data)'), (222, '        if self.vao is None:'), (223, '            self.generate_vao()'), (227, '        for program in self.programs:'), (228, '            if program is None:'), (229, '                continue'), (230, '            for uniforms in [self.mobject_uniforms, camera_uniforms, self.texture_names_to_ids]:'), (231, '                for name, value in uniforms.items():'), (232, '                    set_program_uniform(program, name, value)'), (235, '        if self.vbo is None:'), (236, '            self.vbo = self.ctx.buffer(self.vert_data)'), (241, '            content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (246, '        for obj in (self.vbo, self.vao):'), (253, 'class VShaderWrapper(ShaderWrapper):'), (257, '        vert_data: np.ndarray,'), (258, '        shader_folder: Optional[str] = None,'), (259, '        mobject_uniforms: Optional[UniformDict] = None,  # A dictionary mapping names of uniform variables'), (260, '        texture_paths: Optional[dict[str, str]] = None,  # A dictionary mapping names to filepaths for textures.'), (261, '        depth_test: bool = False,'), (262, '        # render_primitive: int = moderngl.TRIANGLES,'), (263, '        render_primitive: int = moderngl.TRIANGLE_STRIP,'), (265, '        super().__init__('), (266, '            ctx=ctx,'), (267, '            vert_data=vert_data,'), (268, '            shader_folder=shader_folder,'), (269, '            mobject_uniforms=mobject_uniforms,'), (270, '            texture_paths=texture_paths,'), (271, '            depth_test=depth_test,'), (272, '            render_primitive=render_primitive,'), (273, '        )'), (276, '    def init_program_code(self) -> None:'), (277, '        self.program_code = {'), (278, '            f""{vtype}_{name}"": get_shader_code_from_file('), (279, '                os.path.join(f""quadratic_bezier_{vtype}"", f""{name}.glsl"")'), (280, '            )'), (281, '            for vtype in [""stroke"", ""fill""]'), (282, '            for name in [""vert"", ""geom"", ""frag""]'), (283, '        }'), (284, ''), (285, '    def init_program(self):'), (286, '        self.stroke_program = get_shader_program('), (287, '            self.ctx,'), (288, '            vertex_shader=self.program_code[""stroke_vert""],'), (289, '            geometry_shader=self.program_code[""stroke_geom""],'), (290, '            fragment_shader=self.program_code[""stroke_frag""],'), (291, '        )'), (292, '        self.fill_program = get_shader_program('), (293, '            self.ctx,'), (294, '            vertex_shader=self.program_code[""fill_vert""],'), (295, '            geometry_shader=self.program_code[""fill_geom""],'), (296, '            fragment_shader=self.program_code[""fill_frag""],'), (297, '        )'), (298, '        self.programs = [self.stroke_program, self.fill_program]'), (299, ''), (300, '        # Full vert format looks like this (total of 4x23 = 92 bytes):'), (301, '        # point 3'), (302, '        # stroke_rgba 4'), (303, '        # stroke_width 1'), (304, '        # joint_product 4'), (305, '        # fill_rgba 4'), (306, '        # base_point 3'), (307, '        # unit_normal 3'), (308, '        # fill_border_width 1'), (309, ""        self.stroke_vert_format = '3f 4f 1f 4f 44x'""), (310, ""        self.stroke_vert_attributes = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']""), (311, ''), (312, ""        self.fill_vert_format = '3f 36x 4f 3f 3f 4x'""), (313, ""        self.fill_vert_attributes = ['point', 'fill_rgba', 'base_point', 'unit_normal']""), (314, ''), (315, '    def init_vertex_objects(self):'), (316, '        self.vbo = None'), (317, '        self.stroke_vao = None'), (318, '        self.fill_vao = None'), (319, ''), (320, '    # TODO, think about create_id, replace_code'), (321, '    def is_valid(self) -> bool:'), (322, '        return self.vert_data is not None'), (323, ''), (324, '    # TODO, motidify read in to handle triangulation case for non-winding fill?'), (325, ''), (326, '    # Rendering'), (327, '    def render_stroke(self):'), (328, '        if self.stroke_vao is None:'), (329, '            return'), (330, '        self.stroke_vao.render()'), (331, ''), (332, '    def render_fill(self):'), (333, '        if self.fill_vao is None:'), (334, '            return'), (335, ''), (336, '        # TODO, need a new test here'), (337, '        winding = True'), (338, ""        self.fill_program['winding'].value = winding""), (340, '            self.fill_vao.render()'), (356, '        self.fill_vao.render()'), (364, ''), (365, '    def render(self):'), (366, '        if self.stroke_vao is None or self.fill_vao is None:'), (367, '            self.generate_vao()'), (368, '        self.render_fill()'), (369, '        self.render_stroke()'), (370, ''), (371, '    def generate_vao(self):'), (372, '        self.stroke_vao = self.ctx.vertex_array('), (373, '            program=self.stroke_program,'), (374, '            content=[(self.vbo, self.stroke_vert_format, *self.stroke_vert_attributes)],'), (375, '            mode=self.render_primitive,'), (376, '        )'), (377, '        self.fill_vao = self.ctx.vertex_array('), (378, '            program=self.fill_program,'), (379, '            content=[(self.vbo, self.fill_vert_format, *self.fill_vert_attributes)],'), (380, '            mode=self.render_primitive,'), (381, '        )'), (382, ''), (383, '    def release(self):'), (384, '        attrs = [""vbo"", ""stroke_vao"", ""fill_vao""]'), (385, '        for attr in attrs:'), (386, '            obj = getattr(self, attr)'), (387, '            if obj is not None:'), (388, '                obj.release()'), (389, '            setattr(self, attr, None)')], 'deleted': [(39, '        vert_indices: Optional[np.ndarray] = None,'), (48, '        self.vert_indices = (vert_indices or np.zeros(0)).astype(int)'), (62, '        self.init_vao()'), (91, '    def init_vao(self):'), (93, '        self.ibo = None'), (101, '            np.all(self.vert_data == shader_wrapper.vert_data),'), (102, '            np.all(self.vert_indices == shader_wrapper.vert_indices),'), (116, '        result.vert_indices = self.vert_indices.copy()'), (117, '        result.init_vao()'), (132, '        program_id = hash("""".join('), (133, '            self.program_code[f""{name}_shader""] or """"'), (134, '            for name in (""vertex"", ""geometry"", ""fragment"")'), (135, '        ))'), (176, '            data_list = [self.vert_data, *(sw.vert_data for sw in shader_wrappers)]'), (177, '            indices_list = [self.vert_indices, *(sw.vert_indices for sw in shader_wrappers)]'), (178, '            self.read_in(data_list, indices_list)'), (183, '        data_list: List[np.ndarray],'), (184, '        indices_list: List[np.ndarray] | None = None'), (185, '    ) -> ShaderWrapper:'), (186, '        # Assume all are of the same type'), (187, '        total_len = sum(len(data) for data in data_list)'), (188, '        self.vert_data = resize_array(self.vert_data, total_len)'), (190, '            return self'), (191, ''), (192, '        # Stack the data'), (193, '        np.concatenate(data_list, out=self.vert_data)'), (194, ''), (195, '        if indices_list is None:'), (196, '            self.vert_indices = resize_array(self.vert_indices, 0)'), (197, '            return self'), (198, ''), (199, '        total_verts = sum(len(vi) for vi in indices_list)'), (200, '        if total_verts == 0:'), (201, '            return self'), (202, ''), (203, '        self.vert_indices = resize_array(self.vert_indices, total_verts)'), (204, ''), (205, '        # Stack vert_indices, but adding the appropriate offset'), (206, '        # alogn the way'), (207, '        n_points = 0'), (208, '        n_verts = 0'), (209, '        for data, indices in zip(data_list, indices_list):'), (210, '            new_n_verts = n_verts + len(indices)'), (211, '            self.vert_indices[n_verts:new_n_verts] = indices + n_points'), (212, '            n_verts = new_n_verts'), (213, '            n_points += len(data)'), (214, '        return self'), (222, '        assert self.vao is not None'), (226, '        if self.program is None:'), (227, '            return'), (228, '        for uniforms in [self.mobject_uniforms, camera_uniforms, self.texture_names_to_ids]:'), (229, '            for name, value in uniforms.items():'), (230, '                set_program_uniform(self.program, name, value)'), (231, ''), (232, '    def get_vertex_buffer_object(self):'), (233, '        self.vbo = self.ctx.buffer(self.vert_data)'), (234, '        return self.vbo'), (235, ''), (236, '    def get_index_buffer_object(self):'), (237, '        if len(self.vert_indices) > 0:'), (238, '            self.ibo = self.ctx.buffer(self.vert_indices.astype(np.uint32))'), (239, '        return self.ibo'), (240, ''), (241, '    def load_data(self):'), (242, '        if self.vao is None:'), (243, '            self.generate_vao()'), (244, '        elif self.vao.vertices != len(self.vert_data):'), (245, '            self.release()'), (246, '            self.generate_vao()'), (247, '        else:'), (248, '            self.vbo.write(self.vert_data)'), (249, '            if self.ibo is not None:'), (250, '                self.ibo.write(self.self.vert_indices.astype(np.uint32))'), (253, '        # Data buffer'), (254, '        vbo = self.get_vertex_buffer_object()'), (255, '        ibo = self.get_index_buffer_object()'), (260, '            content=[(vbo, self.vert_format, *self.vert_attributes)],'), (261, '            index_buffer=ibo,'), (264, '        return self.vao'), (267, '        for obj in (self.vbo, self.ibo, self.vao):'), (271, '        self.ibo = None'), (275, 'class FillShaderWrapper(ShaderWrapper):'), (279, '        *args,'), (280, '        **kwargs'), (282, '        super().__init__(ctx, *args, **kwargs)'), (285, '    def render(self):'), (286, '        winding = (len(self.vert_indices) == 0)'), (287, ""        self.program['winding'].value = winding""), (289, '            super().render()'), (305, '        super().render()')]}",75,75
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","{'added': [(12, 'in int v_vert_index[3];'), (60, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (61, '    // every other one needs to be rendered'), (62, '    if (v_vert_index[0] % 2 != 0) return;'), (63, ''), (68, '    // Check zero fill'), (69, '    if (vec3(v_color[0].a, v_color[1].a, v_color[2].a) == vec3(0.0, 0.0, 0.0)) return;'), (70, ''), (71, '')], 'deleted': [(11, 'in float v_vert_index[3];')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","{'added': [(12, 'out int v_vert_index;')], 'deleted': [(12, 'out float v_vert_index;')]}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","{'added': [(17, 'in int v_vert_index[3];'), (191, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (192, '    // every other one needs to be rendered'), (193, '    if (v_vert_index[0] % 2 != 0) return;'), (194, ''), (199, '    // Check null stroke'), (200, '    if (vec3(v_stroke_width[0], v_stroke_width[1], v_stroke_width[2]) == vec3(0.0, 0.0, 0.0)) return;'), (201, '    if (vec3(v_color[0].a, v_color[1].a, v_color[2].a) == vec3(0.0, 0.0, 0.0)) return;'), (202, ''), (203, '')], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","{'added': [(17, 'out int v_vert_index;'), (26, '    v_vert_index = gl_VertexID;')], 'deleted': []}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,24b160f9f9c3fde3a6c0f735f75df259173e32c3,Add border width and backstroke,"{'added': [(1350, '        stroke_behind = False'), (1354, '            if submob.stroke_behind:'), (1355, '                stroke_behind = True'), (1365, '        self.shader_wrapper.stroke_behind = stroke_behind')], 'deleted': []}",304,304
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,24b160f9f9c3fde3a6c0f735f75df259173e32c3,Add border width and backstroke,"{'added': [(264, '        stroke_behind: bool = False,'), (275, '        self.stroke_behind = stroke_behind'), (317, ""        self.fill_border_vert_format = '3f 20x 4f 4f 24x 1f'""), (318, ""        self.fill_border_vert_attributes = ['point', 'joint_product', 'stroke_rgba', 'stroke_width']""), (319, ''), (324, '        self.fill_border_vao = None'), (325, ''), (326, '    def generate_vao(self):'), (327, '        self.stroke_vao = self.ctx.vertex_array('), (328, '            program=self.stroke_program,'), (329, '            content=[(self.vbo, self.stroke_vert_format, *self.stroke_vert_attributes)],'), (330, '            mode=self.render_primitive,'), (331, '        )'), (332, '        self.fill_vao = self.ctx.vertex_array('), (333, '            program=self.fill_program,'), (334, '            content=[(self.vbo, self.fill_vert_format, *self.fill_vert_attributes)],'), (335, '            mode=self.render_primitive,'), (336, '        )'), (337, '        self.fill_border_vao = self.ctx.vertex_array('), (338, '            program=self.stroke_program,'), (339, '            content=[(self.vbo, self.fill_border_vert_format, *self.fill_border_vert_attributes)],'), (340, '            mode=self.render_primitive,'), (341, '        )'), (342, ''), (343, '    def set_backstroke(self, value: bool = True):'), (344, '        self.stroke_behind = value'), (391, '        self.fill_border_vao.render()'), (392, ''), (396, '        if self.stroke_behind:'), (397, '            self.render_stroke()'), (398, '            self.render_fill()'), (399, '        else:'), (400, '            self.render_fill()'), (401, '            self.render_stroke()')], 'deleted': [(368, '        self.render_fill()'), (369, '        self.render_stroke()'), (370, ''), (371, '    def generate_vao(self):'), (372, '        self.stroke_vao = self.ctx.vertex_array('), (373, '            program=self.stroke_program,'), (374, '            content=[(self.vbo, self.stroke_vert_format, *self.stroke_vert_attributes)],'), (375, '            mode=self.render_primitive,'), (376, '        )'), (377, '        self.fill_vao = self.ctx.vertex_array('), (378, '            program=self.fill_program,'), (379, '            content=[(self.vbo, self.fill_vert_format, *self.fill_vert_attributes)],'), (380, '            mode=self.render_primitive,'), (381, '        )')]}",77,77
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,"Reorganize, and ensure get_shader_wrapper_list works for general Groups","{'added': [(1995, '        self.shader_indices = None'), (2022, '        family = self.family_members_with_points()'), (2023, '        for submob in family:'), (2024, '            submob.get_shader_wrapper(ctx)'), (2025, '        batches = batch_by_property(family, lambda submob: submob.shader_wrapper.get_id())'), (2028, '        for submobs, sid in batches:'), (2029, '            shader_wrapper = submobs[0].shader_wrapper'), (2030, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2031, '            indices_list = [sm.get_shader_vert_indices() for sm in submobs]'), (2032, '            if indices_list[0] is None:'), (2033, '                indices_list = None'), (2034, '            shader_wrapper.read_in(data_list, indices_list)'), (2035, '            result.append(shader_wrapper)')], 'deleted': [(1995, '        self.shader_indices = np.zeros(0)'), (2015, '        self.shader_wrapper.vert_data = self.get_shader_data()'), (2016, '        self.shader_wrapper.vert_indices = self.get_shader_vert_indices()'), (2024, '        shader_wrappers = it.chain('), (2025, '            [self.get_shader_wrapper(ctx)],'), (2026, '            *[sm.get_shader_wrapper_list(ctx) for sm in self.submobjects]'), (2027, '        )'), (2028, '        batches = batch_by_property(shader_wrappers, lambda sw: sw.get_id())'), (2031, '        for wrapper_group, sid in batches:'), (2032, '            shader_wrapper = wrapper_group[0]'), (2033, '            if not shader_wrapper.is_valid():'), (2034, '                continue'), (2035, '            shader_wrapper.combine_with(*wrapper_group[1:])'), (2036, '            if len(shader_wrapper.vert_data) > 0:'), (2037, '                result.append(shader_wrapper)')]}",559,559
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,"Reorganize, and ensure get_shader_wrapper_list works for general Groups","{'added': [(1339, '        return None'), (1340, ''), (1341, '    def get_shader_data(self):'), (1342, '        # This should only come up when VMobjects appear together in a group'), (1343, '        return np.hstack([self.data, self.data[-1:]])')], 'deleted': [(1339, '        return self.get_outer_vert_indices()'), (1358, '            # [sm.data for sm in family],'), (1360, '            # [sm.get_shader_vert_indices() for sm in family]')]}",305,305
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,"Reorganize, and ensure get_shader_wrapper_list works for general Groups","{'added': [(79, '            self.programs = []'), (93, '        self.vaos = []'), (119, '            # self.vert_data is not None,'), (170, '            self.read_in([self.vert_data, *(sw.vert_data for sw in shader_wrappers)])'), (193, '        total_len = sum(map(len, data_list))'), (207, '        if self.vbo is not None and self.vbo.size != total_size:'), (208, '            self.release()  # This sets vbo to be None'), (211, '            self.generate_vaos()'), (215, '    def generate_vaos(self):'), (216, '        # Vertex array object'), (217, '        self.vaos = ['), (218, '            self.ctx.vertex_array('), (219, '                program=program,'), (220, '                content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (221, '                mode=self.render_primitive,'), (222, '            )'), (223, '            for program in self.programs'), (224, '        ]'), (225, ''), (232, '        for vao in self.vaos:'), (233, '            vao.render()'), (244, '        for obj in (self.vbo, *self.vaos):'), (247, '        self.init_vertex_objects()'), (322, '        self.vaos = []'), (324, '    def generate_vaos(self):'), (340, '        self.vaos = [self.stroke_vao, self.fill_vao, self.fill_border_vao]'), (347, ""        return self.vert_data is not None  # Isn't this always true?""), (361, '        # TODO, need a new test here...or to just kill non-winding fill?')], 'deleted': [(92, '        self.vao = None'), (118, '            self.vert_data is not None,'), (169, '            self.read_in([self.vert_data, (sw.vert_data for sw in shader_wrappers)])'), (191, '            total_len = sum(map(len, indices_list))'), (192, '        else:'), (193, '            total_len = sum(map(len, data_list))'), (210, '        elif self.vbo.size != total_size:'), (211, '            self.vbo.release()'), (212, '            self.vbo = self.ctx.buffer(self.vert_data)'), (222, '        if self.vao is None:'), (223, '            self.generate_vao()'), (224, '        self.vao.render()'), (234, '    def generate_vao(self):'), (235, '        if self.vbo is None:'), (236, '            self.vbo = self.ctx.buffer(self.vert_data)'), (237, ''), (238, '        # Vertex array object'), (239, '        self.vao = self.ctx.vertex_array('), (240, '            program=self.program,'), (241, '            content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (242, '            mode=self.render_primitive,'), (243, '        )'), (244, ''), (246, '        for obj in (self.vbo, self.vao):'), (249, '        self.vbo = None'), (250, '        self.vao = None'), (326, '    def generate_vao(self):'), (348, '        return self.vert_data is not None'), (362, '        # TODO, need a new test here'), (394, '        if self.stroke_vao is None or self.fill_vao is None:'), (395, '            self.generate_vao()'), (402, ''), (403, '    def release(self):'), (404, '        attrs = [""vbo"", ""stroke_vao"", ""fill_vao""]'), (405, '        for attr in attrs:'), (406, '            obj = getattr(self, attr)'), (407, '            if obj is not None:'), (408, '                obj.release()'), (409, '            setattr(self, attr, None)')]}",73,73
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a12fa0c03d25cd286937fb3e9766aeb084720f55,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,Remove attributes from VMobject which are now handled in VShaderWrapper,"{'added': [], 'deleted': [(66, '    fill_shader_folder: str = ""quadratic_bezier_fill""'), (67, '    stroke_shader_folder: str = ""quadratic_bezier_stroke""'), (78, ""    fill_data_names = ['point', 'fill_rgba', 'base_point', 'unit_normal']  # Delete these""), (79, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']  # Delete these""), (80, ''), (81, '    fill_render_primitive: int = moderngl.TRIANGLES'), (82, '    stroke_render_primitive: int = moderngl.TRIANGLES'), (83, '')]}",305,305
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,a12fa0c03d25cd286937fb3e9766aeb084720f55,Don't apply depth test during winding fill,"{'added': [(381, '        # Be sure not to apply depth test while rendering fill'), (382, '        # but set it back to where it was after'), (383, '        apply_depth_test = bool(gl.glGetBooleanv(gl.GL_DEPTH_TEST))'), (384, '        self.ctx.disable(moderngl.DEPTH_TEST)'), (386, '        if apply_depth_test:'), (387, '            self.ctx.enable(moderngl.DEPTH_TEST)')], 'deleted': []}",74,74
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"{'added': [(280, '            for vtype in [""stroke"", ""fill"", ""depth""]'), (297, '        self.fill_depth_program = get_shader_program('), (298, '            self.ctx,'), (299, '            vertex_shader=self.program_code[""depth_vert""],'), (300, '            geometry_shader=self.program_code[""depth_geom""],'), (301, '            fragment_shader=self.program_code[""depth_frag""],'), (302, '        )'), (303, '        self.programs = [self.stroke_program, self.fill_program, self.fill_depth_program]'), (323, ""        self.fill_depth_vert_format = '3f 52x 3f 16x'""), (324, ""        self.fill_depth_vert_attributes = ['point', 'base_point']""), (325, ''), (349, '        self.fill_depth_vao = self.ctx.vertex_array('), (350, '            program=self.fill_depth_program,'), (351, '            content=[(self.vbo, self.fill_depth_vert_format, *self.fill_depth_vert_attributes)],'), (352, '            mode=self.render_primitive,'), (353, '        )'), (354, '        self.vaos = [self.stroke_vao, self.fill_vao, self.fill_border_vao, self.fill_depth_vao]'), (383, '        texture_fbo, depth_texture_fbo, texture_vao = self.fill_canvas'), (401, '            depth_texture_fbo.clear(1.0)'), (402, '            depth_texture_fbo.use()'), (403, '            gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE)'), (404, '            gl.glBlendEquation(gl.GL_MIN)'), (405, '            self.fill_depth_vao.render()'), (408, '        # Border width is used for antialiasing. Take the maximum between these'), (409, '        # two alphas, before compositing back to the rest of the scene'), (410, '        gl.glBlendFuncSeparate('), (411, '            gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA,'), (412, '            gl.GL_ONE, gl.GL_ZERO'), (413, '        )'), (414, '        gl.glBlendEquationSeparate(gl.GL_FUNC_ADD, gl.GL_MAX)'), (415, '        self.fill_border_vao.render()'), (417, '        original_fbo.use()'), (419, '        gl.glBlendEquation(gl.GL_FUNC_ADD)'), (420, '        texture_vao.render()')], 'deleted': [(280, '            for vtype in [""stroke"", ""fill""]'), (297, '        self.programs = [self.stroke_program, self.fill_program]'), (340, '        self.vaos = [self.stroke_vao, self.fill_vao, self.fill_border_vao]'), (369, '        texture_fbo, texture_vao = self.fill_canvas'), (389, '        original_fbo.use()'), (390, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (391, ''), (392, '        texture_vao.render()'), (395, ''), (396, '        self.fill_border_vao.render()')]}",74,74
,manimlib/shaders/quadratic_bezier_depth/frag.glsl,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"{'added': [(1, '#version 330'), (2, ''), (3, 'out float frag_depth;'), (4, ''), (5, 'void main() {'), (6, '    frag_depth = gl_FragCoord.z;'), (7, '}')], 'deleted': []}",,
,manimlib/shaders/quadratic_bezier_depth/geom.glsl,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"{'added': [(1, '#version 330'), (2, ''), (3, 'layout (triangles) in;'), (4, 'layout (triangle_strip, max_vertices = 6) out;'), (5, ''), (6, 'in vec3 verts[3];'), (7, 'in vec3 v_base_point[3];'), (8, 'in int v_vert_index[3];'), (9, ''), (10, 'out float depth;'), (11, ''), (12, '#INSERT emit_gl_Position.glsl'), (13, ''), (14, ''), (15, 'void emit_triangle(vec3 points[3]){'), (16, '    for(int i = 0; i < 3; i++){'), (17, '        emit_gl_Position(points[i]);'), (18, '        // float z = gl_Position.z / gl_Position.w;'), (19, '        // depth = 0.5 * z + 0.5;'), (20, '        EmitVertex();'), (21, '    }'), (22, '    EndPrimitive();'), (23, '}'), (24, ''), (25, ''), (26, 'void main(){'), (27, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (28, '    // every other one needs to be rendered'), (29, '    if (v_vert_index[0] % 2 != 0) return;'), (30, ''), (31, '    // Curves are marked as ended when the handle after'), (32, '    // the first anchor is set equal to that anchor'), (33, '    if (verts[0] == verts[1]) return;'), (34, ''), (35, '    // Emit main triangle'), (36, '    emit_triangle(vec3[3](v_base_point[0], verts[0], verts[2]));'), (37, '    emit_triangle(vec3[3](verts[0], verts[1], verts[2]));'), (38, '}'), (39, '')], 'deleted': []}",,
,manimlib/shaders/quadratic_bezier_depth/vert.glsl,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"{'added': [(1, '#version 330'), (2, ''), (3, 'in vec3 point;'), (4, 'in vec3 base_point;'), (5, ''), (6, 'out vec3 verts;'), (7, 'out vec3 v_base_point;'), (8, 'out int v_vert_index;'), (9, ''), (10, 'void main(){'), (11, '    verts = point;'), (12, '    v_base_point = base_point;'), (13, '    v_vert_index = gl_VertexID;'), (14, '}')], 'deleted': []}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"{'added': [(151, ""    size = (cam_config['pixel_width'], cam_config['pixel_height'])""), (156, ""    depth_texture = ctx.texture(size=size, components=1, dtype='f4')""), (157, '    texture_fbo = ctx.framebuffer(texture)'), (158, '    depth_texture_fbo = ctx.framebuffer(depth_texture)'), (203, '    return (texture_fbo, depth_texture_fbo, fill_texture_vao)')], 'deleted': [(151, '    # Double the size so as to effectively to 4x multi-sample antialiasing'), (152, ""    size = (2 * cam_config['pixel_width'], 2 * cam_config['pixel_height'])""), (157, '    depth_texture = ctx.depth_texture(size=size)'), (158, '    texture_fbo = ctx.framebuffer(texture, depth_texture)'), (203, '    return (texture_fbo, fill_texture_vao)')]}",19,19
manimlib/animation/fading.py,manimlib/animation/fading.py,28eba26beef617b6f307624c008d848974023e81,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,Remove stray new line,"{'added': [], 'deleted': [(23, '')]}",23,23
manimlib/shaders/quadratic_bezier_depth/geom.glsl,manimlib/shaders/quadratic_bezier_depth/geom.glsl,39bcead679a0cdd5dc52c01fc83ce61a1e794734,28eba26beef617b6f307624c008d848974023e81,Clean up,"{'added': [(33, '    // Emit two triangles')], 'deleted': [(18, '        // float z = gl_Position.z / gl_Position.w;'), (19, '        // depth = 0.5 * z + 0.5;'), (35, '    // Emit main triangle')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,39bcead679a0cdd5dc52c01fc83ce61a1e794734,"Set default border width to 0.5, and keep it for opacities < 1","{'added': [(98, '        fill_border_width: float = 0.5,')], 'deleted': [(98, '        fill_border_width: float = 0.0,'), (187, '        if opacity is not None and 0 < opacity < 1 and border_width is None:'), (188, '            border_width = 0')]}",302,302
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,195264f079beceedf11559f1efc39130f81550b6,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,"Stop pretending to support non-winding fill in the fill shader.

Possibly, if we want to reintroduce it later on, it should have its own dedicated shader, and maybe a distinct Mobject type too","{'added': [], 'deleted': [(375, '        # TODO, need a new test here...or to just kill non-winding fill?'), (376, '        winding = True'), (377, ""        self.fill_program['winding'].value = winding""), (378, '        if not winding:'), (379, '            self.fill_vao.render()'), (380, '            return'), (381, '')]}",73,73
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,195264f079beceedf11559f1efc39130f81550b6,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,"Stop pretending to support non-winding fill in the fill shader.

Possibly, if we want to reintroduce it later on, it should have its own dedicated shader, and maybe a distinct Mobject type too","{'added': [(32, '    float a = 0.95 * frag_color.a;'), (33, '    if(orientation < 0) a = -a / (1 - a);'), (34, '    frag_color.a = a;'), (41, '    // if(!winding && orientation < 0) Fxy *= -1;')], 'deleted': [(32, '    if(winding){'), (33, '        float a = 0.95 * frag_color.a;'), (34, '        if(orientation < 0) a = -a / (1 - a);'), (35, '        frag_color.a = a;'), (36, '    }'), (43, '    if(!winding && orientation < 0) Fxy *= -1;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,195264f079beceedf11559f1efc39130f81550b6,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,"Stop pretending to support non-winding fill in the fill shader.

Possibly, if we want to reintroduce it later on, it should have its own dedicated shader, and maybe a distinct Mobject type too","{'added': [(61, '    // Emit main triangle'), (62, '    fill_all = 1.0;'), (63, '    emit_triangle('), (64, '        vec3[3](v_base_point[0], verts[0], verts[2]),'), (65, '        vec4[3](v_color[1], v_color[0], v_color[2])'), (66, '    );'), (67, '    // Edge triangle'), (68, '    fill_all = 0.0;'), (69, '    emit_triangle('), (70, '        vec3[3](verts[0], verts[1], verts[2]),'), (71, '        vec4[3](v_color[0], v_color[1], v_color[2])'), (72, '    );')], 'deleted': [(6, 'uniform bool winding;'), (7, ''), (51, 'void emit_simple_triangle(){'), (52, '    emit_triangle('), (53, '        vec3[3](verts[0], verts[1], verts[2]),'), (54, '        vec4[3](v_color[0], v_color[1], v_color[2])'), (55, '    );'), (56, '}'), (57, ''), (58, ''), (71, ''), (72, '    if(winding){'), (73, '        // Emit main triangle'), (74, '        fill_all = 1.0;'), (75, '        emit_triangle('), (76, '            vec3[3](v_base_point[0], verts[0], verts[2]),'), (77, '            vec4[3](v_color[1], v_color[0], v_color[2])'), (78, '        );'), (79, '        // Edge triangle'), (80, '        fill_all = 0.0;'), (81, '        emit_simple_triangle();'), (82, '    }else{'), (83, '        // In this case, one should fill all if the vertices are'), (84, '        // not in sequential order'), (85, '        fill_all = float('), (86, '            (v_vert_index[1] - v_vert_index[0]) != 1.0 ||'), (87, '            (v_vert_index[2] - v_vert_index[1]) != 1.0'), (88, '        );'), (89, '        emit_simple_triangle();'), (90, '    }')]}",,
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,b7337f07814f54e3bd7e9d20a1d979619d948571,195264f079beceedf11559f1efc39130f81550b6,Remove some ShaderWrapper methods which are no longer needed,"{'added': [], 'deleted': [(98, '    def __eq__(self, shader_wrapper: ShaderWrapper):'), (99, '        return all(('), (100, '            # np.all(self.vert_data == shader_wrapper.vert_data),'), (101, '            self.shader_folder == shader_wrapper.shader_folder,'), (102, '            all('), (103, '                self.mobject_uniforms[key] == shader_wrapper.mobject_uniforms[key]'), (104, '                for key in self.mobject_uniforms'), (105, '            ),'), (106, '            self.depth_test == shader_wrapper.depth_test,'), (107, '            self.render_primitive == shader_wrapper.render_primitive,'), (108, '        ))'), (109, ''), (110, '    def copy(self):'), (111, '        result = copy.copy(self)'), (112, '        result.ctx = self.ctx'), (113, '        result.vert_data = self.vert_data.copy()'), (114, '        result.init_vertex_objects()'), (115, '        return result'), (116, ''), (117, '    def is_valid(self) -> bool:'), (118, '        return all(['), (119, '            # self.vert_data is not None,'), (120, '            self.program_code[""vertex_shader""] is not None,'), (121, '            self.program_code[""fragment_shader""] is not None,'), (122, '        ])'), (123, ''), (168, '    def combine_with(self, *shader_wrappers: ShaderWrapper) -> ShaderWrapper:'), (169, '        if len(shader_wrappers) > 0:'), (170, '            self.read_in([self.vert_data, *(sw.vert_data for sw in shader_wrappers)])'), (171, '            vbos = ['), (172, '                vbo'), (173, '                for vbo in [self.vbo, *(sw.vbo for sw in shader_wrappers)]'), (174, '                if vbo is not None'), (175, '            ]'), (176, '            total_size = sum(vbo.size for vbo in vbos)'), (177, '            new_vbo = self.ctx.buffer(reserve=total_size)'), (178, '            offset = 0'), (179, '            for vbo in vbos:'), (180, '                new_vbo.write(vbo.read(), offset=offset)'), (181, '                offset += vbo.size'), (182, '            self.vbo = new_vbo'), (183, '        return self'), (184, ''), (359, '    # TODO, think about create_id, replace_code'), (360, '    def is_valid(self) -> bool:'), (361, ""        return self.vert_data is not None  # Isn't this always true?""), (362, '')]}",60,60
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"{'added': [(72, ""        ('base_normal', np.float32, (3,)),  # Every other holds base point and unit normal vector""), (909, '        self.data[""base_normal""][1::2] = normal'), (1280, '            mob.data[""base_normal""][1::2] *= -1'), (1346, '                submob.data[""base_normal""][0::2] = submob.data[""point""][0]')], 'deleted': [(72, ""        ('base_point', np.float32, (3,)),""), (73, ""        ('unit_normal', np.float32, (3,)),""), (910, '        self.data[""unit_normal""][:] = normal'), (1281, '            mob.data[""unit_normal""] *= -1'), (1347, '                submob.data[""base_point""] = submob.data[""point""][0]')]}",302,302
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"{'added': [(268, '        # base_normal 3'), (270, ""        self.stroke_vert_format = '3f 4f 1f 4f 32x'""), (273, ""        self.fill_vert_format = '3f 36x 4f 3f 4x'""), (274, ""        self.fill_vert_attributes = ['point', 'fill_rgba', 'base_normal']""), (276, ""        self.fill_border_vert_format = '3f 20x 4f 4f 12x 1f'""), (279, ""        self.fill_depth_vert_format = '3f 40x 3f 16x'""), (280, ""        self.fill_depth_vert_attributes = ['point', 'base_normal']"")], 'deleted': [(268, '        # base_point 3'), (269, '        # unit_normal 3'), (271, ""        self.stroke_vert_format = '3f 4f 1f 4f 44x'""), (274, ""        self.fill_vert_format = '3f 36x 4f 3f 3f 4x'""), (275, ""        self.fill_vert_attributes = ['point', 'fill_rgba', 'base_point', 'unit_normal']""), (277, ""        self.fill_border_vert_format = '3f 20x 4f 4f 24x 1f'""), (280, ""        self.fill_depth_vert_format = '3f 52x 3f 16x'""), (281, ""        self.fill_depth_vert_attributes = ['point', 'base_point']"")]}",60,60
manimlib/shaders/quadratic_bezier_depth/vert.glsl,manimlib/shaders/quadratic_bezier_depth/vert.glsl,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"{'added': [(4, 'in vec3 base_normal;'), (12, '    v_base_point = base_normal;')], 'deleted': [(4, 'in vec3 base_point;'), (12, '    v_base_point = base_point;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"{'added': [(8, 'in vec3 v_base_normal[3];'), (30, '    vec3 unit_normal = v_base_normal[1];'), (63, '        vec3[3](v_base_normal[0], verts[0], verts[2]),')], 'deleted': [(8, 'in vec3 v_base_point[3];'), (9, 'in vec3 v_unit_normal[3];'), (31, '    vec3 unit_normal = v_unit_normal[1];'), (64, '        vec3[3](v_base_point[0], verts[0], verts[2]),')]}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"{'added': [(5, 'in vec3 base_normal;'), (9, 'out vec3 v_base_normal;'), (15, '    v_base_normal = base_normal;')], 'deleted': [(5, 'in vec3 base_point;'), (6, 'in vec3 unit_normal;'), (10, 'out vec3 v_base_point;'), (11, 'out vec3 v_unit_normal;'), (17, '    v_base_point = base_point;'), (18, '    v_unit_normal = unit_normal;')]}",,
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,058914fdd2edf2c08d29a24e8cbd98705887b616,c064b11e2a4700b51177de6ed4b2a64e1050f344,Mildly more efficient CameraFrame.get_view_matrix(),"{'added': [(41, '        self.id4x4 = np.identity(4)'), (104, '            shift = self.id4x4.copy()'), (105, '            rotation = self.id4x4.copy()'), (107, '            scale = self.get_scale()'), (110, '            np.dot(rotation, shift, out=self.view_matrix)'), (112, '                self.view_matrix[:3, :4] /= scale')], 'deleted': [(103, '            shift = np.identity(4)'), (104, '            rotation = np.identity(4)'), (105, '            scale_mat = np.identity(4)'), (109, '            scale = self.get_scale()'), (111, '                scale_mat[:3, :3] /= self.get_scale()'), (112, ''), (113, '            self.view_matrix = np.dot(scale_mat, np.dot(rotation, shift))')]}",51,51
manimlib/animation/creation.py,manimlib/animation/creation.py,b288d5301ea40fcca958f7e6300d9f95823505b2,058914fdd2edf2c08d29a24e8cbd98705887b616,Get rid of cached _has_stroke and _has_fill parameters,"{'added': [], 'deleted': [(142, '        submob.note_changed_stroke()'), (143, '        submob.note_changed_fill()')]}",34,34
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,b288d5301ea40fcca958f7e6300d9f95823505b2,058914fdd2edf2c08d29a24e8cbd98705887b616,Get rid of cached _has_stroke and _has_fill parameters,"{'added': [], 'deleted': [(72, '        self.note_changed_stroke()')]}",129,129
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b288d5301ea40fcca958f7e6300d9f95823505b2,058914fdd2edf2c08d29a24e8cbd98705887b616,Get rid of cached _has_stroke and _has_fill parameters,"{'added': [(72, ""        ('base_normal', np.float32, (3,)),  # Base points and unit normal vectors are interleaved in this array""), (1017, '        if not self._use_winding_fill and self.has_fill():'), (1313, '            # Maybe do this on set points instead? Or on noting changed data?'), (1314, '            submob.data[""base_normal""][0::2] = submob.data[""point""][0]')], 'deleted': [(72, ""        ('base_normal', np.float32, (3,)),  # Every other holds base point and unit normal vector""), (115, '        self._has_fill = False'), (116, '        self._has_stroke = False'), (140, '    def note_changed_fill(self) -> Self:'), (141, '        for submob in self.get_family():'), (142, '            submob._has_fill = submob.has_fill()'), (143, '        return self'), (144, ''), (145, '    def note_changed_stroke(self) -> Self:'), (146, '        for submob in self.get_family():'), (147, '            submob._has_stroke = submob.has_stroke()'), (148, '        return self'), (149, ''), (167, '    def set_rgba_array('), (168, '        self,'), (169, '        rgba_array: Vect4Array,'), (170, '        name: str = ""stroke_rgba"",'), (171, '        recurse: bool = False'), (172, '    ) -> Self:'), (173, '        super().set_rgba_array(rgba_array, name, recurse)'), (174, '        self.note_changed_fill()'), (175, '        self.note_changed_stroke()'), (176, '        return self'), (177, ''), (191, '        self.note_changed_fill()'), (222, '        self.note_changed_stroke()'), (281, '        self.note_changed_fill()'), (282, '        self.note_changed_stroke()'), (1044, '        self._has_stroke = mobject1._has_stroke or mobject2._has_stroke'), (1045, '        self._has_fill = mobject1._has_fill or mobject2._has_fill'), (1046, ''), (1047, '        if self._has_fill and not self._use_winding_fill:'), (1287, '        self.note_changed_fill()'), (1288, '        self.note_changed_stroke()'), (1345, '            if submob._has_fill:'), (1346, '                submob.data[""base_normal""][0::2] = submob.data[""point""][0]')]}",294,294
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,b288d5301ea40fcca958f7e6300d9f95823505b2,Reorganize VShaderWrapper.render_fill,"{'added': [(330, '        # First, draw the border for antialiasing'), (331, '        self.fill_border_vao.render()'), (332, ''), (333, '        # Render to a separate texture, due to strange alpha compositing'), (334, '        # for the blended winding calculation'), (337, ''), (338, '        # Be sure not to apply depth test while rendering fill'), (339, '        # but set it back to where it was after'), (340, '        apply_depth_test = bool(gl.glGetBooleanv(gl.GL_DEPTH_TEST))'), (341, ''), (342, '        self.ctx.disable(moderngl.DEPTH_TEST)'), (362, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (366, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)'), (367, '        gl.glBlendEquation(gl.GL_FUNC_ADD)'), (368, '')], 'deleted': [(340, '        # Be sure not to apply depth test while rendering fill'), (341, '        # but set it back to where it was after'), (342, '        apply_depth_test = bool(gl.glGetBooleanv(gl.GL_DEPTH_TEST))'), (343, '        self.ctx.disable(moderngl.DEPTH_TEST)'), (353, '        # Border width is used for antialiasing. Take the maximum between these'), (354, '        # two alphas, before compositing back to the rest of the scene'), (355, '        gl.glBlendFuncSeparate('), (356, '            gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA,'), (357, '            gl.GL_ONE, gl.GL_ZERO'), (358, '        )'), (359, '        gl.glBlendEquationSeparate(gl.GL_FUNC_ADD, gl.GL_MAX)'), (360, '        self.fill_border_vao.render()'), (363, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)')]}",60,60
manimlib/utils/shaders.py,manimlib/utils/shaders.py,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,b288d5301ea40fcca958f7e6300d9f95823505b2,Reorganize VShaderWrapper.render_fill,"{'added': [(160, ""    simple_vert = '''""), (161, '        #version 330'), (163, '        in vec2 texcoord;'), (164, '        out vec2 uv;'), (166, '        void main() {'), (167, '            gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (168, '            uv = texcoord;'), (169, '        }'), (170, ""    '''""), (171, ""    alpha_adjust_frag = '''""), (172, '        #version 330'), (174, '        uniform sampler2D Texture;'), (175, '        uniform sampler2D DepthTexture;'), (177, '        in vec2 uv;'), (178, '        out vec4 color;'), (180, '        void main() {'), (181, '            color = texture(Texture, uv);'), (182, '            if(color.a == 0) discard;'), (184, '            // Counteract scaling in fill frag'), (185, '            color.a *= 1.06;'), (187, '            gl_FragDepth = texture(DepthTexture, uv)[0];'), (188, '        }'), (189, ""    '''""), (190, '    simple_program = ctx.program('), (191, '        vertex_shader=simple_vert,'), (192, '        fragment_shader=alpha_adjust_frag,'), (199, ""    simple_vbo = ctx.buffer(verts.astype('f4').tobytes())""), (201, ""        simple_program, simple_vbo, 'texcoord',"")], 'deleted': [(160, '    simple_program = ctx.program('), (161, ""        vertex_shader='''""), (162, '            #version 330'), (164, '            in vec2 texcoord;'), (165, '            out vec2 uv;'), (167, '            void main() {'), (168, '                gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (169, '                uv = texcoord;'), (170, '            }'), (171, ""        ''',""), (172, ""        fragment_shader='''""), (173, '            #version 330'), (175, '            uniform sampler2D Texture;'), (176, '            uniform sampler2D DepthTexture;'), (178, '            in vec2 uv;'), (179, '            out vec4 color;'), (181, '            void main() {'), (182, '                color = texture(Texture, uv);'), (183, '                if(color.a == 0) discard;'), (185, '                // Counteract scaling in fill frag'), (186, '                color *= 1.06;'), (188, '                gl_FragDepth = texture(DepthTexture, uv)[0];'), (189, '            }'), (190, ""        ''',""), (198, '        simple_program,'), (199, ""        ctx.buffer(verts.astype('f4').tobytes()),""), (200, ""        'texcoord',"")]}",19,19
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,6223623b40499ba509f94f074a91917d6af3901c,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,Ensure border width blends better within filled VMobject for opacity < 1,"{'added': [(328, '        fill_tx_fbo, fill_tx_vao, border_tx_fbo, border_tx_vao, depth_tx_fbo = self.fill_canvas'), (331, '        border_tx_fbo.clear()'), (332, '        border_tx_fbo.use()'), (337, '        fill_tx_fbo.clear()'), (338, '        fill_tx_fbo.use()'), (347, '            # With this blend function, the effect of blending alpha a with'), (348, '            # -a / (1 - a) cancels out, so we can cancel positively and negatively'), (349, '            # oriented triangles'), (350, '            gl.GL_ONE_MINUS_DST_ALPHA, gl.GL_ONE'), (353, ''), (355, '            depth_tx_fbo.clear(1.0)'), (356, '            depth_tx_fbo.use()'), (362, '        # Render fill onto the border_width fbo'), (363, '        # two alphas, before compositing back to the rest of the scene'), (364, '        border_tx_fbo.use()'), (365, '        gl.glEnable(gl.GL_BLEND)'), (366, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE)'), (367, '        gl.glBlendEquation(gl.GL_MAX)'), (368, '        fill_tx_vao.render()'), (373, '        border_tx_vao.render()')], 'deleted': [(328, '        texture_fbo, depth_texture_fbo, texture_vao = self.fill_canvas'), (335, '        texture_fbo.clear()'), (336, '        texture_fbo.use()'), (344, '            # Ordinary blending for colors'), (346, '            # The effect of blending with -a / (1 - a)'), (347, '            # should be to cancel out'), (348, '            gl.GL_ONE_MINUS_DST_ALPHA, gl.GL_ONE,'), (350, ''), (353, '            depth_texture_fbo.clear(1.0)'), (354, '            depth_texture_fbo.use()'), (362, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (363, '        gl.glBlendEquation(gl.GL_FUNC_ADD)'), (364, '        texture_vao.render()'), (365, '')]}",60,60
manimlib/utils/shaders.py,manimlib/utils/shaders.py,6223623b40499ba509f94f074a91917d6af3901c,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,Ensure border width blends better within filled VMobject for opacity < 1,"{'added': [(155, ""    fill_texture = ctx.texture(size=size, components=4, dtype='f2')""), (156, '    # Use a separate texture to firset render the antialiased border'), (157, ""    border_texture = ctx.texture(size=size, components=4, dtype='f1')""), (158, '    # Use yet another one to keep track of depth'), (160, ''), (161, '    fill_texture_fbo = ctx.framebuffer(fill_texture)'), (162, '    border_texture_fbo = ctx.framebuffer(border_texture)'), (191, '            // Cancel out what was effectively a premultiplication'), (192, '            color.rgb /= color.a;'), (197, ""    simple_frag = '''""), (198, '        #version 330'), (199, ''), (200, '        uniform sampler2D Texture;'), (201, ''), (202, '        in vec2 uv;'), (203, '        out vec4 color;'), (204, ''), (205, '        void main() {'), (206, '            color = texture(Texture, uv);'), (207, '            if(color.a == 0) discard;'), (208, '        }'), (209, ""    '''""), (210, '    fill_program = ctx.program('), (214, '    border_program = ctx.program('), (215, '        vertex_shader=simple_vert,'), (216, '        fragment_shader=simple_frag,'), (217, '    )'), (219, ""    fill_program['Texture'].value = get_texture_id(fill_texture)""), (220, ""    fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (221, ""    border_program['Texture'].value = get_texture_id(border_texture)""), (226, ""        fill_program, simple_vbo, 'texcoord',""), (227, '        mode=moderngl.TRIANGLE_STRIP'), (228, '    )'), (229, '    border_texture_vao = ctx.simple_vertex_array('), (230, ""        border_program, simple_vbo, 'texcoord',""), (233, '    return ('), (234, '        fill_texture_fbo, fill_texture_vao,'), (235, '        border_texture_fbo, border_texture_vao,'), (236, '        depth_texture_fbo,'), (237, '    )')], 'deleted': [(155, ""    texture = ctx.texture(size=size, components=4, dtype='f2')""), (157, '    texture_fbo = ctx.framebuffer(texture)'), (190, '    simple_program = ctx.program('), (195, ""    simple_program['Texture'].value = get_texture_id(texture)""), (196, ""    simple_program['DepthTexture'].value = get_texture_id(depth_texture)""), (201, ""        simple_program, simple_vbo, 'texcoord',""), (204, '    return (texture_fbo, depth_texture_fbo, fill_texture_vao)')]}",19,19
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,0b2c59ac6bd77c0ad31b5f0276acd3237b07ab1a,6223623b40499ba509f94f074a91917d6af3901c,More explicitly unpack v_base_normal,"{'added': [], 'deleted': [(41, '    // if(!winding && orientation < 0) Fxy *= -1;')]}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,0b2c59ac6bd77c0ad31b5f0276acd3237b07ab1a,6223623b40499ba509f94f074a91917d6af3901c,More explicitly unpack v_base_normal,"{'added': [(29, 'void emit_triangle(vec3 points[3], vec4 v_color[3], vec3 unit_normal){'), (58, '    vec3 base_point = v_base_normal[0];'), (59, '    vec3 unit_normal = v_base_normal[1];'), (63, '        vec3[3](base_point, verts[0], verts[2]),'), (64, '        vec4[3](v_color[1], v_color[0], v_color[2]),'), (65, '        unit_normal'), (71, '        vec4[3](v_color[0], v_color[1], v_color[2]),'), (72, '        unit_normal')], 'deleted': [(29, 'void emit_triangle(vec3 points[3], vec4 v_color[3]){'), (30, '    vec3 unit_normal = v_base_normal[1];'), (31, ''), (63, '        vec3[3](v_base_normal[0], verts[0], verts[2]),'), (64, '        vec4[3](v_color[1], v_color[0], v_color[2])'), (70, '        vec4[3](v_color[0], v_color[1], v_color[2])')]}",,
manimlib/scene/scene.py,manimlib/scene/scene.py,08e33faab8f76084e522ddc7059b7cedcdb4392a,0b2c59ac6bd77c0ad31b5f0276acd3237b07ab1a,Ensure scene properly updates on an embed,"{'added': [(219, '        self.update_frame(force_draw=True)')], 'deleted': [(219, '        self.update_frame()')]}",232,232
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","{'added': [(1947, '        for mob in self.get_family():'), (1948, '            mob.shader_code_replacements[old] = new'), (1949, '            mob._shaders_initialized = False'), (2004, '            code_replacements=self.shader_code_replacements,'), (2008, '        for submob in self.get_family():'), (2009, '            if submob._shaders_initialized:'), (2010, '                submob.shader_wrapper.depth_test = submob.depth_test'), (2011, '                submob.shader_wrapper.refresh_id()'), (2022, '        batches = batch_by_property(family, lambda sm: sm.get_shader_wrapper(ctx).get_id())'), (2027, '            data_list = list(it.chain(*(sm.get_shader_data() for sm in submobs)))'), (2028, '            shader_wrapper.read_in(data_list, indices_list=None)'), (2032, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (2033, '        indices = self.get_shader_vert_indices()'), (2034, '        if indices is not None:'), (2035, '            return [self.data[indices]]'), (2036, '        else:'), (2037, '            return [self.data]'), (2042, '    def get_shader_vert_indices(self) -> Optional[np.ndarray]:')], 'deleted': [(1947, '        self.shader_code_replacements[old] = new'), (1948, '        self._shaders_initialized = False'), (2006, '        if self._shaders_initialized:'), (2007, '            self.shader_wrapper.refresh_id()'), (2014, ''), (2015, '        self.shader_wrapper.bind_to_mobject_uniforms(self.get_uniforms())'), (2016, '        self.shader_wrapper.depth_test = self.depth_test'), (2017, '        for old, new in self.shader_code_replacements.items():'), (2018, '            self.shader_wrapper.replace_code(old, new)'), (2023, '        for submob in family:'), (2024, '            submob.get_shader_wrapper(ctx)'), (2025, '        batches = batch_by_property(family, lambda submob: submob.shader_wrapper.get_id())'), (2030, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2031, '            indices_list = [sm.get_shader_vert_indices() for sm in submobs]'), (2032, '            if indices_list[0] is None:'), (2033, '                indices_list = None'), (2034, '            shader_wrapper.read_in(data_list, indices_list)'), (2038, '    def get_shader_data(self):'), (2039, '        return self.data'), (2044, '    def get_shader_vert_indices(self):')]}",558,558
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","{'added': [(194, '                mob.refresh_shader_wrapper_id()'), (1289, '        self.shader_indices = None'), (1294, '            code_replacements=self.shader_code_replacements,'), (1295, '            stroke_behind=self.stroke_behind,'), (1296, '            depth_test=self.depth_test'), (1299, '    def refresh_shader_wrapper_id(self):'), (1300, '        for submob in self.get_family():'), (1301, '            if submob._shaders_initialized:'), (1302, '                submob.shader_wrapper.stroke_behind = submob.stroke_behind'), (1303, '        super().refresh_shader_wrapper_id()'), (1304, '        return self'), (1306, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (1307, '        # Do we want this elsewhere? Say whenever points are refreshed or something?'), (1308, '        self.data[""base_normal""][0::2] = self.data[""point""][0]'), (1309, '        return [self.data, self.data[-1:]]')], 'deleted': [(1288, '        self.shader_indices = np.zeros(0)'), (1295, '    def get_shader_vert_indices(self):'), (1296, '        return None'), (1297, ''), (1298, '    def get_shader_data(self):'), (1299, '        # This should only come up when VMobjects appear together in a group'), (1300, '        return np.hstack([self.data, self.data[-1:]])'), (1301, ''), (1302, '    def get_shader_wrapper_list(self, ctx: Context) -> list[ShaderWrapper]:'), (1303, '        if not self._shaders_initialized:'), (1304, '            self.init_shader_data(ctx)'), (1305, '            self._shaders_initialized = True'), (1306, ''), (1307, '        family = self.family_members_with_points()'), (1308, '        if not family:'), (1309, '            return []'), (1310, ''), (1311, '        stroke_behind = False'), (1312, '        for submob in family:'), (1313, '            # Maybe do this on set points instead? Or on noting changed data?'), (1314, '            submob.data[""base_normal""][0::2] = submob.data[""point""][0]'), (1315, '            if submob.stroke_behind:'), (1316, '                stroke_behind = True'), (1318, '        self.shader_wrapper.read_in('), (1319, '            list(it.chain(*([sm.data, sm.data[-1:]] for sm in family)))'), (1320, '        )'), (1321, '        rep = family[0]  # Representative family member'), (1322, '        self.shader_wrapper.bind_to_mobject_uniforms(rep.get_uniforms())'), (1323, '        self.shader_wrapper.depth_test = rep.depth_test'), (1324, '        self.shader_wrapper.stroke_behind = stroke_behind'), (1325, '        return [self.shader_wrapper]')]}",290,290
manimlib/scene/scene.py,manimlib/scene/scene.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","{'added': [(391, '            lambda m: m.get_shader_wrapper(self.camera.ctx).get_id()')], 'deleted': [(391, '            lambda m: str(type(m)) + str(m.get_uniforms())')]}",232,232
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","{'added': [(44, '        code_replacements: dict[str, str] = dict(),'), (52, '        self.texture_names_to_ids = dict()'), (58, '        for old, new in code_replacements.items():'), (59, '            self.replace_code(old, new)'), (104, '    def refresh_id(self) -> None:'), (105, '        self.id = hash("""".join(map(str, ['), (106, '            """".join(map(str, self.program_code.values())),'), (111, '        ])))'), (215, '        code_replacements: dict[str, str] = dict(),'), (218, '        self.stroke_behind = stroke_behind'), (219, '        self.fill_canvas = get_fill_canvas(ctx)'), (228, '            code_replacements=code_replacements,'), (314, '    def refresh_id(self):'), (315, '        super().refresh_id()'), (316, '        self.id = hash(str(self.id) + str(self.stroke_behind))'), (317, '')], 'deleted': [(57, '        self.texture_names_to_ids = dict()'), (101, '    def create_id(self) -> str:'), (102, '        # A unique id for a shader'), (103, '        program_id = hash("""".join(map(str, self.program_code.values())))'), (104, '        return ""|"".join(map(str, ['), (105, '            program_id,'), (110, '        ]))'), (111, ''), (112, '    def refresh_id(self) -> None:'), (113, '        self.id = self.create_id()'), (216, '        # render_primitive: int = moderngl.TRIANGLES,'), (229, '        self.stroke_behind = stroke_behind'), (230, '        self.fill_canvas = get_fill_canvas(self.ctx)')]}",61,61
manimlib/utils/color.py,manimlib/utils/color.py,5ff80ffc6c25768c09688dc7e6a5a4a036e07a06,f12b143d169610b3240c92c05264c6be6fbac814,Fix matplotlib color map import,"{'added': [(153, '    from matplotlib.cm import cmaps_listed'), (158, '        rgbs = cmaps_listed[map_name].colors  # Make more general?')], 'deleted': [(153, '    from matplotlib.cm import get_cmap'), (158, '        rgbs = get_cmap(map_name).colors  # Make more general?')]}",26,26
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,e796a0c6d61ae625dcf34f7906b7e4ec6be89e0b,5ff80ffc6c25768c09688dc7e6a5a4a036e07a06,Remove stray TODO,"{'added': [], 'deleted': [(318, '    # TODO, motidify read in to handle triangulation case for non-winding fill?'), (319, '')]}",61,61
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a8ef9629eb34813553bc5ab9ab239b047ce48c68,e796a0c6d61ae625dcf34f7906b7e4ec6be89e0b,More direct lerp in Mobject.interpolate,"{'added': [(1818, '            if path_func in self.pointlike_data_keys:'), (1819, '                self.data[key] = path_func(md1, md2, alpha)'), (1820, '            else:'), (1821, '                self.data[key] = (1 - alpha) * md1 + alpha * md2'), (1823, '        for key in self.uniforms:'), (1824, '            if key in self.locked_uniform_keys:'), (1825, '                continue'), (1828, '            self.uniforms[key] = (1 - alpha) * mobject1.uniforms[key] + alpha * mobject2.uniforms[key]'), (1829, '        self.bounding_box[:] = path_func(mobject1.bounding_box, mobject2.bounding_box, alpha)')], 'deleted': [(1813, '            func = path_func if key in self.pointlike_data_keys else interpolate'), (1819, '            self.data[key] = func(md1, md2, alpha)'), (1821, '        keys = [k for k in self.uniforms if k not in self.locked_uniform_keys]'), (1822, '        for key in keys:'), (1825, '            self.uniforms[key] = interpolate('), (1826, '                mobject1.uniforms[key],'), (1827, '                mobject2.uniforms[key],'), (1828, '                alpha'), (1829, '            )'), (1830, '        self.bounding_box[:] = path_func('), (1831, '            mobject1.bounding_box, mobject2.bounding_box, alpha'), (1832, '        )')]}",557,557
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e61957a4e0d2b8b826b867cb33cb43df6f357eea,a8ef9629eb34813553bc5ab9ab239b047ce48c68,Fix wrong check for path_func in last commit,"{'added': [(1818, '            if key in self.pointlike_data_keys:')], 'deleted': [(1818, '            if path_func in self.pointlike_data_keys:')]}",557,557
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,87ca6e56aa2fc3da6a561c479e0f9f30b533d798,e61957a4e0d2b8b826b867cb33cb43df6f357eea,Don't treat font size as a uniform,"{'added': [(11, 'from manimlib.utils.paths import straight_path'), (12, 'from manimlib.utils.bezier import interpolate'), (134, '    def interpolate('), (135, '        self,'), (136, '        mobject1: Mobject,'), (137, '        mobject2: Mobject,'), (138, '        alpha: float,'), (139, '        path_func: Callable[[np.ndarray, np.ndarray, float], np.ndarray] = straight_path'), (140, '    ) -> Self:'), (141, '        super().interpolate(mobject1, mobject2, alpha, path_func)'), (142, '        if hasattr(mobject1, ""font_size"") and hasattr(mobject2, ""font_size""):'), (143, '            self.font_size = interpolate(mobject1.font_size, mobject2.font_size, alpha)'), (146, '        return self.font_size'), (199, '        self.font_size *= scale_factor')], 'deleted': [(132, '    def init_uniforms(self) -> None:'), (133, '        super().init_uniforms()'), (134, '        self.uniforms[""font_size""] = self.font_size'), (137, '        return float(self.uniforms[""font_size""])'), (190, '        self.uniforms[""font_size""] = scale_factor * self.uniforms[""font_size""]')]}",41,41
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b9645ad1960a539c2507bf85cee1c195334eeb11,87ca6e56aa2fc3da6a561c479e0f9f30b533d798,Only update shader wrapper when stroke_behind genuinely changes,"{'added': [(193, '                if mob.stroke_behind != background:'), (194, '                    mob.refresh_shader_wrapper_id()'), (195, '                    mob.stroke_behind = background')], 'deleted': [(193, '                mob.stroke_behind = background'), (194, '                mob.refresh_shader_wrapper_id()')]}",291,291
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,0ac9ee1fbf5127d88154b35f5d7054bc39438243,b9645ad1960a539c2507bf85cee1c195334eeb11,Don't deepcopy ShaderWrapper,"{'added': [(655, '        self.parents = []'), (656, '        result.target = None'), (657, '        result.saved_state = None'), (658, '        for submob in self.get_family():'), (659, '            submob._shaders_initialized = False'), (660, '            submob._data_has_changed = True')], 'deleted': [(656, '        result._shaders_initialized = False'), (657, '        result._data_has_changed = True')]}",558,558
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,0ac9ee1fbf5127d88154b35f5d7054bc39438243,b9645ad1960a539c2507bf85cee1c195334eeb11,Don't deepcopy ShaderWrapper,"{'added': [(66, '    def __deepcopy__(self, memo):'), (67, ""        # Don't allow deepcopies, e.g. if the mobject with this ShaderWrapper as an""), (68, '        # attribute gets copies. Returning None means the parent object with this ShaderWrapper'), (69, '        # as an attribute should smoothly handle this case.'), (70, '        return None'), (71, '')], 'deleted': []}",62,62
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e0191d81d95bdcbdd85ab35f08ce69fce811c23e,0ac9ee1fbf5127d88154b35f5d7054bc39438243,"Instead of tracking _shaders_initialized, just check if self.shader_wrapper is None","{'added': [(106, '        self.shader_wrapper: Optional[ShaderWrapper] = None'), (655, '        parents = self.parents'), (658, '        self.parents = parents'), (691, '        result.shader_wrapper = None'), (1947, '            mob.shader_wrapper = None'), (1991, '    def init_shader_wrapper(self, ctx: Context):'), (2004, '            if submob.shader_wrapper is not None:'), (2010, '        if self.shader_wrapper is None:'), (2011, '            self.init_shader_wrapper(ctx)'), (2037, '        return None')], 'deleted': [(108, '        self._shaders_initialized: bool = False'), (656, '        result.target = None'), (657, '        result.saved_state = None'), (658, '        for submob in self.get_family():'), (659, '            submob._shaders_initialized = False'), (660, '            submob._data_has_changed = True'), (694, '        result._shaders_initialized = False'), (1950, '            mob._shaders_initialized = False'), (1951, '        for mob in self.get_ancestors():'), (1952, '            mob._shaders_initialized = False'), (1996, '    def init_shader_data(self, ctx: Context):'), (1997, '        self.shader_indices = None'), (2010, '            if submob._shaders_initialized:'), (2016, '        if not self._shaders_initialized:'), (2017, '            self.init_shader_data(ctx)'), (2018, '            self._shaders_initialized = True'), (2044, '        return self.shader_indices')]}",556,556
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e0191d81d95bdcbdd85ab35f08ce69fce811c23e,0ac9ee1fbf5127d88154b35f5d7054bc39438243,"Instead of tracking _shaders_initialized, just check if self.shader_wrapper is None","{'added': [(1289, '    def init_shader_wrapper(self, ctx: Context):'), (1301, '            if submob.shader_wrapper is not None:')], 'deleted': [(1289, '    def init_shader_data(self, ctx: Context):'), (1290, '        self.shader_indices = None'), (1302, '            if submob._shaders_initialized:')]}",291,291
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0414f8786c48d14cf49e57fa5c310078e40c9477,e0191d81d95bdcbdd85ab35f08ce69fce811c23e,Use Mobject.set_uniform to reassign flat_stroke,"{'added': [(268, '            ""flat_stroke"": self.get_flat_stroke(),'), (396, '        self.set_uniform(recurse, flat_stroke=flat_stroke)'), (1307, '        self.get_joint_products()')], 'deleted': [(268, '            ""flat_stroke"": bool(self.uniforms[""flat_stroke""]),'), (396, '        for mob in self.get_family(recurse):'), (397, '            mob.uniforms[""flat_stroke""] = float(flat_stroke)')]}",290,290
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,0414f8786c48d14cf49e57fa5c310078e40c9477,"When shader_id is updated, have ancestors mark data as changed","{'added': [(2007, '        for mob in (self, *self.get_ancestors()):'), (2008, '            mob._data_has_changed = True')], 'deleted': []}",557,557
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","{'added': [(533, '        flat_stroke: bool = False,'), (557, '        self.set_flat_stroke(flat_stroke)')], 'deleted': []}",112,112
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","{'added': [], 'deleted': [(645, '        flat_stroke: bool = True,'), (663, '            flat_stroke=flat_stroke,')]}",138,138
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","{'added': [(41, '        flat_stroke: bool = False,'), (53, '            flat_stroke=flat_stroke,')], 'deleted': []}",30,30
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","{'added': [(93, '        flat_stroke: bool = True,'), (396, '        self.set_uniform(recurse, flat_stroke=float(flat_stroke))')], 'deleted': [(93, '        flat_stroke: bool = False,'), (396, '        self.set_uniform(recurse, flat_stroke=flat_stroke)')]}",290,290
manimlib/scene/scene.py,manimlib/scene/scene.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","{'added': [(1052, '    def add(self, *mobjects: Mobject, set_depth_test: bool = True, perp_stroke: bool = True):'), (1056, '            if isinstance(mob, VMobject) and mob.has_stroke() and perp_stroke:'), (1057, '                mob.set_flat_stroke(False)')], 'deleted': [(1052, '    def add(self, *mobjects: Mobject, set_depth_test: bool = True):')]}",235,235
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,910f28f52eb2d75618307c463b7210ee85b2cb9c,7474ae17b054f3f2f56480d093afde19906ff29a,Don't have a default flat stroke in set_style,"{'added': [(223, '        flat_stroke: Optional[bool] = None,')], 'deleted': [(223, '        flat_stroke: bool = False,')]}",290,290
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,0a585b123c8eb4063771a4ce8a25a141294ddc8d,910f28f52eb2d75618307c463b7210ee85b2cb9c,Use stash_mobject_pointers on Mobject.deepcopy,"{'added': [(654, '    @stash_mobject_pointers'), (656, '        return copy.deepcopy(self)')], 'deleted': [(655, '        parents = self.parents'), (656, '        self.parents = []'), (657, '        result = copy.deepcopy(self)'), (658, '        self.parents = parents'), (659, '        return result')]}",557,557
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,5eb5a1149975646a55ca4f0dba21331f22976e2d,0a585b123c8eb4063771a4ce8a25a141294ddc8d,Don't have absolute stroke width change with frame size (at least temporarily),"{'added': [(23, '    // v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);'), (24, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width;')], 'deleted': [(23, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')]}",,
manimlib/shaders/quadratic_bezier_depth/frag.glsl,manimlib/shaders/quadratic_bezier/depth/frag.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_depth/geom.glsl,manimlib/shaders/quadratic_bezier/depth/geom.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_depth/vert.glsl,manimlib/shaders/quadratic_bezier/depth/vert.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier/fill/frag.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier/fill/geom.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier/fill/vert.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier/stroke/frag.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,"{'added': [], 'deleted': []}",,
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,a8784692e81491b9899c817c36dfbd4d4f235efe,0a313eb119b747bb5253b82ea8821c29422c85ff,Reference new shader file structure,"{'added': [(240, '                os.path.join(""quadratic_bezier"", f""{vtype}"", f""{name}.glsl"")')], 'deleted': [(240, '                os.path.join(f""quadratic_bezier_{vtype}"", f""{name}.glsl"")')]}",62,62
manimlib/shaders/quadratic_bezier/stroke/frag.glsl,manimlib/shaders/quadratic_bezier/stroke/frag.glsl,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,a8784692e81491b9899c817c36dfbd4d4f235efe,Fewer parameters for stroke frag shader,"{'added': [(3, '// Distance to the curve, and half the curve width, both as'), (4, '// a ratio of the antialias width'), (5, 'in float dist_to_aaw;'), (6, 'in float half_width_to_aaw;'), (14, '    float signed_dist_to_region = abs(dist_to_aaw) - half_width_to_aaw;'), (15, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist_to_region);')], 'deleted': [(3, '// Value between -1 and 1'), (4, 'in float dist_to_curve;'), (5, 'in float half_stroke_width;'), (6, 'in float half_anti_alias_width;'), (12, '    if(half_stroke_width == 0) discard;'), (14, ''), (16, '    float signed_dist_to_region = abs(dist_to_curve) - half_stroke_width;'), (17, '    frag_color.a *= smoothstep(half_anti_alias_width, -half_anti_alias_width, signed_dist_to_region);')]}",,
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,a8784692e81491b9899c817c36dfbd4d4f235efe,Fewer parameters for stroke frag shader,"{'added': [(20, 'out float dist_to_aaw;'), (21, 'out float half_width_to_aaw;'), (175, '    float aaw = max(anti_alias_width * pixel_size, 1e-8);'), (181, '        float dist_to_curve = sign * 0.5 * (width + aaw);'), (183, '        half_width_to_aaw = 0.5 * width / aaw;'), (184, '        dist_to_aaw = dist_to_curve / aaw;')], 'deleted': [(20, 'out float dist_to_curve;'), (21, 'out float half_stroke_width;'), (22, 'out float half_anti_alias_width;'), (172, '    half_anti_alias_width = 0.5 * anti_alias_width * pixel_size;'), (173, '    half_stroke_width = 0.5 * width;'), (183, '        dist_to_curve = sign * (half_stroke_width + half_anti_alias_width);')]}",,
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,304856e6e02b68165977a9b61c2547cf2ae7f6c1,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,Remove indices_list argument on ShaderWrapper.read_in,"{'added': [(2021, '            shader_wrapper.read_in(data_list)')], 'deleted': [(2021, '            shader_wrapper.read_in(data_list, indices_list=None)')]}",557,557
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,304856e6e02b68165977a9b61c2547cf2ae7f6c1,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,Remove indices_list argument on ShaderWrapper.read_in,"{'added': [(146, '    def read_in(self, data_list: Iterable[np.ndarray]):')], 'deleted': [(146, '    def read_in('), (147, '        self,'), (148, '        data_list: Iterable[np.ndarray],'), (149, '        indices_list: Iterable[np.ndarray] | None = None'), (150, '    ):'), (151, '        if indices_list is not None:'), (152, '            data_list = [data[indices] for data, indices in zip(data_list, indices_list)]'), (153, '')]}",60,60
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,7ddbd13e3869ebfd72600fbcc90810fe5ec3f48a,304856e6e02b68165977a9b61c2547cf2ae7f6c1,Ensure mobject uniforms get passed to ShaderWrapper on init,"{'added': [(1993, '            mobject_uniforms=self.uniforms,')], 'deleted': []}",557,557
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,35ce4c6704c415117867a0b98d0728a4fbbca634,7ddbd13e3869ebfd72600fbcc90810fe5ec3f48a,Use Mobject.set_uniform in Mobject.set_shading,"{'added': [(1447, '            shading = mob.uniforms[""shading""]'), (1450, '                    shading[i] = value'), (1451, '            mob.set_uniform(shading=shading, recurse=False)')], 'deleted': [(1449, '                    mob.uniforms[""shading""][i] = value')]}",557,557
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,35ce4c6704c415117867a0b98d0728a4fbbca634,Fix normal orientation on Surface,"{'added': [(157, '            points[step1] - points,')], 'deleted': [(156, '            points[step1] - points,')]}",47,47
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,"Have border width pre-multiply by alpha, and don't use a separate texture for that border width","{'added': [(252, '        self.fill_border_program = get_shader_program('), (253, '            self.ctx,'), (254, '            vertex_shader=self.program_code[""stroke_vert""],'), (255, '            geometry_shader=self.program_code[""stroke_geom""],'), (256, '            fragment_shader=self.program_code[""stroke_frag""].replace('), (257, '                ""// MODIFY FRAG COLOR"",'), (258, '                ""frag_color.a *= 0.95; frag_color.rgb *= frag_color.a;"",'), (259, '            )'), (260, '        )'), (267, '        self.programs = [self.stroke_program, self.fill_program, self.fill_border_program, self.fill_depth_program]'), (308, '            program=self.fill_border_program,'), (337, '        fill_tx_fbo, fill_tx_vao, depth_tx_fbo = self.fill_canvas'), (348, ''), (349, '        # With this blend function, the effect of blending alpha a with'), (350, '        # -a / (1 - a) cancels out, so we can cancel positively and negatively'), (351, '        # oriented triangles'), (366, '        # Now add border, just taking the max alpha'), (369, '        self.fill_border_vao.render()'), (371, '        # Take the texture we were just drawing to, and render it to'), (372, '        # the main scene. Account for how alphas have been premultiplied'), (374, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (376, '        fill_tx_vao.render()'), (377, ''), (378, '        # Return to original blending state'), (379, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)')], 'deleted': [(258, '        self.programs = [self.stroke_program, self.fill_program, self.fill_depth_program]'), (299, '            program=self.stroke_program,'), (328, '        fill_tx_fbo, fill_tx_vao, border_tx_fbo, border_tx_vao, depth_tx_fbo = self.fill_canvas'), (329, ''), (330, '        # First, draw the border for antialiasing'), (331, '        border_tx_fbo.clear()'), (332, '        border_tx_fbo.use()'), (333, '        self.fill_border_vao.render()'), (343, ''), (347, '            # With this blend function, the effect of blending alpha a with'), (348, '            # -a / (1 - a) cancels out, so we can cancel positively and negatively'), (349, '            # oriented triangles'), (362, '        # Render fill onto the border_width fbo'), (363, '        # two alphas, before compositing back to the rest of the scene'), (364, '        border_tx_fbo.use()'), (365, '        gl.glEnable(gl.GL_BLEND)'), (368, '        fill_tx_vao.render()'), (371, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)'), (373, '        border_tx_vao.render()')]}",60,60
manimlib/shaders/quadratic_bezier/stroke/frag.glsl,manimlib/shaders/quadratic_bezier/stroke/frag.glsl,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,"Have border width pre-multiply by alpha, and don't use a separate texture for that border width","{'added': [(16, '    // This line is replaced in VShaderWrapper'), (17, '    // MODIFY FRAG COLOR')], 'deleted': []}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,"Have border width pre-multiply by alpha, and don't use a separate texture for that border width","{'added': [(156, '    # Use another one to keep track of depth'), (187, '            color *= 1.06;'), (206, '    return (fill_texture_fbo, fill_texture_vao, depth_texture_fbo)')], 'deleted': [(156, '    # Use a separate texture to firset render the antialiased border'), (157, ""    border_texture = ctx.texture(size=size, components=4, dtype='f1')""), (158, '    # Use yet another one to keep track of depth'), (162, '    border_texture_fbo = ctx.framebuffer(border_texture)'), (190, '            color.a *= 1.06;'), (191, '            // Cancel out what was effectively a premultiplication'), (192, '            color.rgb /= color.a;'), (197, ""    simple_frag = '''""), (198, '        #version 330'), (199, ''), (200, '        uniform sampler2D Texture;'), (201, ''), (202, '        in vec2 uv;'), (203, '        out vec4 color;'), (204, ''), (205, '        void main() {'), (206, '            color = texture(Texture, uv);'), (207, '            if(color.a == 0) discard;'), (208, '        }'), (209, ""    '''""), (214, '    border_program = ctx.program('), (215, '        vertex_shader=simple_vert,'), (216, '        fragment_shader=simple_frag,'), (217, '    )'), (221, ""    border_program['Texture'].value = get_texture_id(border_texture)""), (229, '    border_texture_vao = ctx.simple_vertex_array('), (230, ""        border_program, simple_vbo, 'texcoord',""), (231, '        mode=moderngl.TRIANGLE_STRIP'), (232, '    )'), (233, '    return ('), (234, '        fill_texture_fbo, fill_texture_vao,'), (235, '        border_texture_fbo, border_texture_vao,'), (236, '        depth_texture_fbo,'), (237, '    )')]}",19,19
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,748780378b1c880462d443046fae64d94a6115d4,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,Have stroke_behind default to True for VMobjects with fill and no stroke,"{'added': [(88, '        stroke_behind: Optional[bool] = None,'), (143, '            behind=self.stroke_behind,'), (144, '        )'), (145, '        self.set_fill('), (146, '            color=self.fill_color,'), (147, '            opacity=self.fill_opacity,'), (148, '            border_width=self.fill_border_width,'), (168, '        if self.has_fill() and not self.has_stroke():'), (169, '            self.set_stroke(behind=True)'), (177, '        behind: bool | None = None,'), (192, '        if behind is None and self.has_stroke() and not self.has_fill():'), (193, '            behind = False'), (195, '        if behind is not None:'), (197, '                if mob.stroke_behind != behind:'), (198, '                    mob.stroke_behind = behind'), (211, '        self.set_stroke(color, width, behind=True)'), (225, '        stroke_behind: bool | None = None,'), (245, '                    behind=stroke_behind,'), (255, '                    behind=stroke_behind,'), (270, '            ""stroke_behind"": self.stroke_behind,')], 'deleted': [(88, '        stroke_behind: bool = False,'), (139, '        self.set_fill('), (140, '            color=self.fill_color,'), (141, '            opacity=self.fill_opacity,'), (142, '            border_width=self.fill_border_width,'), (143, '        )'), (148, '            background=self.stroke_behind,'), (175, '        background: bool | None = None,'), (191, '        if background is not None:'), (193, '                if mob.stroke_behind != background:'), (195, '                    mob.stroke_behind = background'), (206, '        background: bool = True'), (208, '        self.set_stroke(color, width, background=background)'), (222, '        stroke_background: bool = False,'), (242, '                    background=stroke_background,'), (252, '                    background=stroke_background,'), (267, '            ""stroke_background"": self.stroke_behind,')]}",295,295
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,79ec791fc297ff9d8def3f6bf08c2dd23360b0db,748780378b1c880462d443046fae64d94a6115d4,Move get_fill_canvas into VShaderWrapper,"{'added': [(10, 'from functools import lru_cache'), (12, 'from manimlib.config import parse_cli'), (13, 'from manimlib.config import get_configuration'), (229, '        self.fill_canvas = VShaderWrapper.get_fill_canvas(self.ctx)'), (360, '            self.ctx.enable(moderngl.DEPTH_TEST)'), (382, '    # Meant to be a static method returning one shared value across all VShaderWrappers'), (383, '    @lru_cache'), (384, '    @staticmethod'), (385, '    def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray, Framebuffer]:'), (386, '        """"""'), (387, '        Because VMobjects with fill are rendered in a funny way, using'), (388, '        alpha blending to effectively compute the winding number around'), (389, '        each pixel, they need to be rendered to a separate texture, which'), (390, '        is then composited onto the ordinary frame buffer.'), (391, ''), (392, '        This returns a texture, loaded into a frame buffer, and a vao'), (393, '        which can display that texture as a simple quad onto a screen,'), (394, '        along with the rgb value which is meant to be discarded.'), (395, '        """"""'), (396, ""        cam_config = get_configuration(parse_cli())['camera_config']""), (397, ""        size = (cam_config['pixel_width'], cam_config['pixel_height'])""), (398, ''), (399, '        # Important to make sure dtype is floating point (not fixed point)'), (400, '        # so that alpha values can be negative and are not clipped'), (401, ""        fill_texture = ctx.texture(size=size, components=4, dtype='f2')""), (402, '        # Use another one to keep track of depth'), (403, ""        depth_texture = ctx.texture(size=size, components=1, dtype='f4')""), (404, ''), (405, '        fill_texture_fbo = ctx.framebuffer(fill_texture)'), (406, '        depth_texture_fbo = ctx.framebuffer(depth_texture)'), (407, ''), (408, ""        simple_vert = '''""), (409, '            #version 330'), (410, ''), (411, '            in vec2 texcoord;'), (412, '            out vec2 uv;'), (413, ''), (414, '            void main() {'), (415, '                gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (416, '                uv = texcoord;'), (417, '            }'), (418, ""        '''""), (419, ""        alpha_adjust_frag = '''""), (420, '            #version 330'), (421, ''), (422, '            uniform sampler2D Texture;'), (423, '            uniform sampler2D DepthTexture;'), (424, ''), (425, '            in vec2 uv;'), (426, '            out vec4 color;'), (427, ''), (428, '            void main() {'), (429, '                color = texture(Texture, uv);'), (430, '                if(color.a == 0) discard;'), (431, ''), (432, '                // Counteract scaling in fill frag'), (433, '                color *= 1.06;'), (434, ''), (435, '                gl_FragDepth = texture(DepthTexture, uv)[0];'), (436, '            }'), (437, ""        '''""), (438, '        fill_program = ctx.program('), (439, '            vertex_shader=simple_vert,'), (440, '            fragment_shader=alpha_adjust_frag,'), (441, '        )'), (442, ''), (443, ""        fill_program['Texture'].value = get_texture_id(fill_texture)""), (444, ""        fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (445, ''), (446, '        verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (447, ""        simple_vbo = ctx.buffer(verts.astype('f4').tobytes())""), (448, '        fill_texture_vao = ctx.simple_vertex_array('), (449, ""            fill_program, simple_vbo, 'texcoord',""), (450, '            mode=moderngl.TRIANGLE_STRIP'), (451, '        )'), (452, ''), (453, '        return (fill_texture_fbo, fill_texture_vao, depth_texture_fbo)'), (454, '')], 'deleted': [(16, 'from manimlib.utils.shaders import get_fill_canvas'), (26, ''), (218, '        self.fill_canvas = get_fill_canvas(ctx)'), (364, '            self.ctx.enable(moderngl.DEPTH_TEST)')]}",61,61
manimlib/utils/shaders.py,manimlib/utils/shaders.py,79ec791fc297ff9d8def3f6bf08c2dd23360b0db,748780378b1c880462d443046fae64d94a6115d4,Move get_fill_canvas into VShaderWrapper,"{'added': [], 'deleted': [(10, 'from manimlib.config import parse_cli'), (11, 'from manimlib.config import get_configuration'), (136, ''), (137, ''), (138, '@lru_cache()'), (139, 'def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray]:'), (140, '    """"""'), (141, '    Because VMobjects with fill are rendered in a funny way, using'), (142, '    alpha blending to effectively compute the winding number around'), (143, '    each pixel, they need to be rendered to a separate texture, which'), (144, '    is then composited onto the ordinary frame buffer.'), (145, ''), (146, '    This returns a texture, loaded into a frame buffer, and a vao'), (147, '    which can display that texture as a simple quad onto a screen,'), (148, '    along with the rgb value which is meant to be discarded.'), (149, '    """"""'), (150, ""    cam_config = get_configuration(parse_cli())['camera_config']""), (151, ""    size = (cam_config['pixel_width'], cam_config['pixel_height'])""), (152, ''), (153, '    # Important to make sure dtype is floating point (not fixed point)'), (154, '    # so that alpha values can be negative and are not clipped'), (155, ""    fill_texture = ctx.texture(size=size, components=4, dtype='f2')""), (156, '    # Use another one to keep track of depth'), (157, ""    depth_texture = ctx.texture(size=size, components=1, dtype='f4')""), (158, ''), (159, '    fill_texture_fbo = ctx.framebuffer(fill_texture)'), (160, '    depth_texture_fbo = ctx.framebuffer(depth_texture)'), (161, ''), (162, ""    simple_vert = '''""), (163, '        #version 330'), (164, ''), (165, '        in vec2 texcoord;'), (166, '        out vec2 uv;'), (167, ''), (168, '        void main() {'), (169, '            gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (170, '            uv = texcoord;'), (171, '        }'), (172, ""    '''""), (173, ""    alpha_adjust_frag = '''""), (174, '        #version 330'), (175, ''), (176, '        uniform sampler2D Texture;'), (177, '        uniform sampler2D DepthTexture;'), (178, ''), (179, '        in vec2 uv;'), (180, '        out vec4 color;'), (181, ''), (182, '        void main() {'), (183, '            color = texture(Texture, uv);'), (184, '            if(color.a == 0) discard;'), (185, ''), (186, '            // Counteract scaling in fill frag'), (187, '            color *= 1.06;'), (188, ''), (189, '            gl_FragDepth = texture(DepthTexture, uv)[0];'), (190, '        }'), (191, ""    '''""), (192, '    fill_program = ctx.program('), (193, '        vertex_shader=simple_vert,'), (194, '        fragment_shader=alpha_adjust_frag,'), (195, '    )'), (196, ''), (197, ""    fill_program['Texture'].value = get_texture_id(fill_texture)""), (198, ""    fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (199, ''), (200, '    verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (201, ""    simple_vbo = ctx.buffer(verts.astype('f4').tobytes())""), (202, '    fill_texture_vao = ctx.simple_vertex_array('), (203, ""        fill_program, simple_vbo, 'texcoord',""), (204, '        mode=moderngl.TRIANGLE_STRIP'), (205, '    )'), (206, '    return (fill_texture_fbo, fill_texture_vao, depth_texture_fbo)')]}",18,18
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,67bedc6d1fba856f1a2348c58c4c18eae73845c8,79ec791fc297ff9d8def3f6bf08c2dd23360b0db,Fix fill_depth_vert_format,"{'added': [(287, ""        self.fill_depth_vert_format = '3f 52x 3f 4x'""), (382, '    # Static method returning one shared value across all VShaderWrappers')], 'deleted': [(287, ""        self.fill_depth_vert_format = '3f 40x 3f 16x'""), (382, '    # Meant to be a static method returning one shared value across all VShaderWrappers')]}",61,61
manimlib/animation/creation.py,manimlib/animation/creation.py,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","{'added': [(109, '        self.mobject.refresh_joint_angles()')], 'deleted': [(109, '        self.mobject.refresh_joint_products()')]}",34,34
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","{'added': [(70, ""        ('joint_angle', np.float32, (1,)),""), (118, '        self.needs_new_joint_angles = True'), (650, '        dots = np.cos(self.get_joint_angles()[0::2, :])'), (929, '                mob.get_joint_angles()'), (975, '            mob.get_joint_angles()'), (1031, '        self.data[""joint_angle""] = vmobject.data[""joint_angle""]'), (1066, '        self.data[""joint_angle""][:i1] = 0'), (1067, '        self.data[""joint_angle""][i4:] = 0'), (1157, '    def refresh_joint_angles(self) -> Self:'), (1159, '            mob.needs_new_joint_angles = True'), (1162, '    def get_joint_angles(self, refresh: bool = False) -> np.ndarray:'), (1167, '        if not self.needs_new_joint_angles and not refresh:'), (1168, '            return self.data[""joint_angle""]'), (1170, '        if ""joint_angle"" in self.locked_data_keys:'), (1171, '            return self.data[""joint_angle""]'), (1173, '        self.needs_new_joint_angles = False'), (1179, '            return self.data[""joint_angle""]'), (1206, '        to_dot_from = (vect_to_vert * vect_from_vert).sum(1)'), (1207, '        to_norm = np.sqrt((vect_to_vert * vect_to_vert).sum(1))'), (1208, '        from_norm = np.sqrt((vect_from_vert * vect_from_vert).sum(1))'), (1209, '        angles = np.arccos(to_dot_from / (to_norm * from_norm))'), (1210, ''), (1211, '        crosses = cross(vect_to_vert, vect_from_vert)'), (1212, '        unit_normal = self.get_unit_normal()'), (1213, '        angles[(crosses * unit_normal[np.newaxis, :]).sum(1) < 0] *= -1'), (1214, '        self.data[""joint_angle""][:, 0] = angles'), (1215, '        return self.data[""joint_angle""]'), (1219, '            mob.get_joint_angles()'), (1229, '                self.refresh_joint_angles()'), (1238, '            self.get_joint_angles(refresh=True)'), (1246, '        self.get_unit_normal()'), (1282, '        self.refresh_joint_angles()'), (1288, '            submob.get_joint_angles(refresh=True)'), (1314, '        self.get_joint_angles()')], 'deleted': [(70, ""        ('joint_product', np.float32, (4,)),""), (118, '        self.needs_new_joint_products = True'), (650, '        dots = self.get_joint_products()[::2, 3]'), (929, '                mob.get_joint_products()'), (975, '            mob.get_joint_products()'), (1031, '        self.data[""joint_product""] = vmobject.data[""joint_product""]'), (1066, '        self.data[""joint_product""][:i1] = [0, 0, 0, 1]'), (1067, '        self.data[""joint_product""][i4:] = [0, 0, 0, 1]'), (1121, ''), (1158, '    def refresh_joint_products(self) -> Self:'), (1160, '            mob.needs_new_joint_products = True'), (1163, '    def get_joint_products(self, refresh: bool = False) -> np.ndarray:'), (1168, '        if not self.needs_new_joint_products and not refresh:'), (1169, '            return self.data[""joint_product""]'), (1171, '        if ""joint_product"" in self.locked_data_keys:'), (1172, '            return self.data[""joint_product""]'), (1174, '        self.needs_new_joint_products = False'), (1180, '            return self.data[""joint_product""]'), (1207, '        cross('), (1208, '            vect_to_vert, vect_from_vert,'), (1209, '            out=self.data[""joint_product""][:, :3]'), (1210, '        )'), (1211, '        self.data[""joint_product""][:, 3] = (vect_to_vert * vect_from_vert).sum(1)'), (1212, '        return self.data[""joint_product""]'), (1216, '            mob.get_joint_products()'), (1226, '                self.refresh_joint_products()'), (1235, '            self.get_joint_products(refresh=True)'), (1278, '        self.refresh_joint_products()'), (1284, '            submob.get_joint_products(refresh=True)'), (1310, '        self.get_joint_products()')]}",295,295
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","{'added': [(274, '        # joint_angle 1'), (278, ""        self.stroke_vert_format = '3f 4f 1f 1f 16x 3f 4x'""), (279, ""        self.stroke_vert_attributes = ['point', 'stroke_rgba', 'stroke_width', 'joint_angle', 'unit_normal']""), (281, ""        self.fill_vert_format = '3f 24x 4f 3f 4x'""), (284, ""        self.fill_border_vert_format = '3f 20x 1f 4f 3f 1f'""), (285, ""        self.fill_border_vert_attributes = ['point', 'joint_angle', 'stroke_rgba', 'unit_normal', 'stroke_width']""), (287, ""        self.fill_depth_vert_format = '3f 40x 3f 4x'"")], 'deleted': [(274, '        # joint_product 4'), (278, ""        self.stroke_vert_format = '3f 4f 1f 4f 32x'""), (279, ""        self.stroke_vert_attributes = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']""), (281, ""        self.fill_vert_format = '3f 36x 4f 3f 4x'""), (284, ""        self.fill_border_vert_format = '3f 20x 4f 4f 12x 1f'""), (285, ""        self.fill_border_vert_attributes = ['point', 'joint_product', 'stroke_rgba', 'stroke_width']""), (287, ""        self.fill_depth_vert_format = '3f 52x 3f 4x'"")]}",61,61
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","{'added': [(14, 'in float v_joint_angle[3];'), (17, 'in vec3 v_unit_normal[3];'), (37, 'const float MITER_COS_ANGLE_THRESHOLD = -0.9;'), (59, ''), (60, 'vec3 rotate_vector(vec3 vect, vec3 unit_normal, float angle){'), (61, '    vec3 perp = cross(unit_normal, vect);'), (62, '    return cos(angle) * vect + sin(angle) * perp;'), (66, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve){'), (85, '        vec3 perp = normalize(cross(unit_normal, tangent));'), (91, '    float cos_angle = cos(joint_angle);'), (92, '    float sin_angle = sin(joint_angle);'), (101, '        vec3 adj_tan = rotate_vector(tangent, v_unit_normal[1], joint_angle);'), (103, '        cos_angle = dot(unit_tan, normalize(adj_tan));'), (104, '        sin_angle = sqrt(1 - cos_angle * cos_angle) * sign(joint_angle) * sign(dot(unit_normal, v_unit_normal[1]));'), (116, '        float mcat2 = mix(mcat1, -1.0, 0.5);'), (128, '    float joint_angle,'), (134, '    vec3 unit_normal = bool(flat_stroke) ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve);'), (178, '    float area = 0.5 * length(cross(verts[1] - verts[0], verts[2] - verts[0]));'), (199, '        float joint_angle;'), (200, '        if (i == 0){'), (201, '            joint_angle = -v_joint_angle[0];'), (202, '        }'), (203, '        else if (inside_curve){'), (204, '            joint_angle = 0;'), (205, '        }'), (206, '        else {'), (207, '            joint_angle = v_joint_angle[2];'), (208, '        }'), (211, '            point, tangent, joint_angle,')], 'deleted': [(14, 'in vec4 v_joint_product[3];'), (36, 'const float MITER_COS_ANGLE_THRESHOLD = -0.8;'), (42, 'vec3 get_joint_unit_normal(vec4 joint_product){'), (43, '    float tol = 1e-8;'), (44, '    if (length(joint_product.xyz) > tol){'), (45, '        return normalize(joint_product.xyz);'), (46, '    }'), (47, '    if (length(v_joint_product[1].xyz) > tol){'), (48, '        return normalize(v_joint_product[1].xyz);'), (49, '    }'), (50, '    return vec3(0.0, 0.0, 1.0);'), (51, '}'), (52, ''), (53, ''), (54, 'vec4 unit_joint_product(vec4 joint_product){'), (55, '    float tol = 1e-8;'), (56, '    float norm = length(joint_product);'), (57, '    return (norm < tol) ? vec4(0.0, 0.0, 0.0, 1.0) : joint_product / norm;'), (58, '}'), (59, ''), (71, 'vec4 get_joint_product(vec3 v1, vec3 v2){'), (72, '    return vec4(cross(v1, v2), dot(v1, v2));'), (73, '}'), (74, ''), (75, ''), (81, 'vec3 inverse_vector_product(vec3 vect, vec3 cross_product, float dot_product){'), (82, '    /*'), (83, '    Suppose cross(v1, v2) = cross_product and dot(v1, v2) = dot_product.'), (84, '    Given v1, this function return v2.'), (85, '    */'), (86, '    return (vect * dot_product - cross(vect, cross_product)) / dot(vect, vect);'), (90, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inside_curve){'), (109, '        vec3 perp = normalize(cross(get_joint_unit_normal(joint_product), tangent));'), (115, '    vec4 unit_jp = unit_joint_product(joint_product);'), (116, '    float cos_angle = unit_jp.w;'), (125, '        vec3 adj_tan = inverse_vector_product(tangent, unit_jp.xyz, unit_jp.w);'), (127, '        vec4 flat_jp = get_joint_product(unit_tan, adj_tan);'), (128, '        cos_angle = unit_joint_product(flat_jp).w;'), (140, '        float mcat2 = 0.5 * (mcat1 - 1.0);'), (144, '    float sin_angle = sqrt(1 - cos_angle * cos_angle) * sign(dot(joint_product.xyz, unit_normal));'), (146, ''), (154, '    vec4 joint_product,'), (160, '    vec3 to_camera = camera_position - point;'), (161, '    vec3 unit_normal;'), (162, '    if (flat_stroke == 0.0){'), (163, '        unit_normal = normalize(to_camera);'), (164, '    }else{'), (165, '        unit_normal = get_joint_unit_normal(joint_product);'), (166, '        unit_normal *= sign(dot(unit_normal, to_camera));  // Choose the ""outward"" normal direction'), (167, '    }'), (174, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inside_curve);'), (211, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (232, '        vec4 joint_product;'), (233, '        if (i == 0)            joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (234, '        else if (inside_curve) joint_product = v_joint_product[1];'), (235, '        else                   joint_product = v_joint_product[2];'), (238, '            point, tangent, joint_product,')]}",,
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","{'added': [(9, 'in float joint_angle;'), (10, 'in vec3 unit_normal;'), (16, 'out float v_stroke_width;'), (17, 'out float v_joint_angle;'), (18, 'out vec3 v_unit_normal;'), (25, '    v_color = stroke_rgba;'), (28, '    v_joint_angle = joint_angle;'), (29, '    v_unit_normal = unit_normal;')], 'deleted': [(9, 'in vec4 joint_product;'), (14, 'out vec4 v_joint_product;'), (15, 'out float v_stroke_width;'), (25, '    v_joint_product = joint_product;'), (26, '    v_color = stroke_rgba;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,941513d68c4859efb63c0a7dd17af430373a3306,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,Only recompute VMobject.get_unit_normal as needed,"{'added': [(119, '        self.needs_new_unit_normal = True'), (877, '        if not self.needs_new_unit_normal:'), (878, '            return self.data[""base_normal""][1, :]'), (879, ''), (885, '            p = self.get_points()'), (886, '            normal = get_unit_normal(p[1] - p[0], p[2] - p[1])'), (888, '        self.needs_new_unit_normal = False'), (892, '        self.needs_new_unit_normal = True'), (1241, '            self.refresh_unit_normal()'), (1248, '        self.refresh_unit_normal()')], 'deleted': [(881, '            points = self.get_points()'), (882, '            normal = get_unit_normal('), (883, '                points[1] - points[0],'), (884, '                points[2] - points[1],'), (885, '            )'), (890, '        self.get_unit_normal()'), (1239, '            self.get_unit_normal()'), (1246, '        self.get_unit_normal()')]}",296,296
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,43f1704f699c8f85bc43073bf65fe2de2ffaaad7,941513d68c4859efb63c0a7dd17af430373a3306,Fix computation of joint_angles to handle zero division case,"{'added': [(38, 'from manimlib.utils.simple_functions import fdiv'), (1189, '        # Tangent vectors into each vertex'), (1190, '        v_in = np.zeros(points.shape)'), (1191, '        # Tangent vectors out of each vertex'), (1192, '        v_out = np.zeros(points.shape)'), (1194, '        v_in[1::2] = a0_to_h'), (1195, '        v_in[2::2] = h_to_a1'), (1196, '        v_out[0:-1:2] = a0_to_h'), (1197, '        v_out[1::2] = h_to_a1'), (1204, '                v_in[start] = v_out[end - 1]'), (1205, '                v_out[end] = v_in[start + 1]'), (1207, '                v_in[start] = v_out[start]'), (1208, '                v_out[end] = v_in[end]'), (1211, '        in_dot_out = (v_in * v_out).sum(1)'), (1212, '        norm_product = np.sqrt((v_in * v_in).sum(1) * (v_out * v_out).sum(1))'), (1213, '        angles = np.arccos(fdiv(in_dot_out, norm_product, zero_over_zero_value=1))'), (1215, '        crosses = cross(v_in, v_out)')], 'deleted': [(1188, '        vect_to_vert = np.zeros(points.shape)'), (1189, '        vect_from_vert = np.zeros(points.shape)'), (1191, '        vect_to_vert[1::2] = a0_to_h'), (1192, '        vect_to_vert[2::2] = h_to_a1'), (1193, '        vect_from_vert[0:-1:2] = a0_to_h'), (1194, '        vect_from_vert[1::2] = h_to_a1'), (1201, '                vect_to_vert[start] = vect_from_vert[end - 1]'), (1202, '                vect_from_vert[end] = vect_to_vert[start + 1]'), (1204, '                vect_to_vert[start] = vect_from_vert[start]'), (1205, '                vect_from_vert[end] = vect_to_vert[end]'), (1208, '        to_dot_from = (vect_to_vert * vect_from_vert).sum(1)'), (1209, '        to_norm = np.sqrt((vect_to_vert * vect_to_vert).sum(1))'), (1210, '        from_norm = np.sqrt((vect_from_vert * vect_from_vert).sum(1))'), (1211, '        angles = np.arccos(to_dot_from / (to_norm * from_norm))'), (1213, '        crosses = cross(vect_to_vert, vect_from_vert)')]}",296,296
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0cb7a8f6911ada2ad3f0d4873dcc2c4538280dc1,43f1704f699c8f85bc43073bf65fe2de2ffaaad7,Only recompute subpath_end_indices as needed,"{'added': [(121, '        self.subpath_end_indices = None'), (508, '        if self.consider_points_equal(last_point, anchor):'), (509, '            return self'), (519, '        if self.consider_points_equal(last_point, point):'), (520, '            return self'), (754, '        if self.subpath_end_indices is None:'), (755, '            self.subpath_end_indices = self.get_subpath_end_indices_from_points(self.get_points())'), (756, '        return self.subpath_end_indices'), (1234, '    def triggers_refresh(func: Callable):'), (1239, '                self.subpath_end_indices = None'), (1242, '                self.refresh_unit_normal()'), (1246, '    @triggers_refresh'), (1247, '    def resize_points('), (1248, '        self,'), (1249, '        new_length: int,'), (1250, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1251, '    ) -> Self:'), (1252, '        return super().resize_points(new_length, resize_func)'), (1253, ''), (1254, '    @triggers_refresh'), (1257, '        return super().set_points(points)'), (1259, '    @triggers_refresh'), (1262, '        return super().append_points(points)'), (1264, '    @triggers_refresh'), (1274, '        return super().reverse_points()'), (1276, '    @triggers_refresh'), (1278, '        return super().set_data(data)'), (1281, '    @triggers_refresh'), (1293, '    @triggers_refresh'), (1295, '        return super().apply_points_function(*args, **kwargs)')], 'deleted': [(749, '        return self.get_subpath_end_indices_from_points(self.get_points())'), (1227, '    def triggers_refreshed_triangulation(func: Callable):'), (1239, '        super().set_points(points)'), (1240, '        self.refresh_triangulation()'), (1241, '        if refresh_joints:'), (1242, '            self.get_joint_angles(refresh=True)'), (1243, '            self.refresh_unit_normal()'), (1244, '        return self'), (1246, '    @triggers_refreshed_triangulation'), (1249, '        super().append_points(points)'), (1250, '        self.refresh_unit_normal()'), (1251, '        return self'), (1253, '    @triggers_refreshed_triangulation'), (1263, '        super().reverse_points()'), (1264, '        return self'), (1266, '    @triggers_refreshed_triangulation'), (1268, '        super().set_data(data)'), (1269, '        return self'), (1272, '    @triggers_refreshed_triangulation'), (1285, '        super().apply_points_function(*args, **kwargs)'), (1286, '        self.refresh_joint_angles()'), (1287, '        return self')]}",299,299
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0a89725090009e2c06d4998c3bbaeddb8c00154f,0cb7a8f6911ada2ad3f0d4873dcc2c4538280dc1,Tweaking what triggers refreshes,"{'added': [(1043, '            self.set_points(vm_points, refresh=False)'), (1078, '        self.set_points(new_points, refresh=False)'), (1247, '    def set_points(self, points: Vect3Array) -> Self:'), (1265, '            self.subpath_end_indices = None')], 'deleted': [(1043, '            self.set_points(vm_points, refresh_joints=False)'), (1078, '        self.set_points(new_points, refresh_joints=False)'), (1247, '    def resize_points('), (1248, '        self,'), (1249, '        new_length: int,'), (1250, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1251, '    ) -> Self:'), (1252, '        return super().resize_points(new_length, resize_func)'), (1253, ''), (1254, '    @triggers_refresh'), (1255, '    def set_points(self, points: Vect3Array, refresh_joints: bool = True) -> Self:'), (1264, '    @triggers_refresh')]}",298,298
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c83d03aeb7b592e14a775933fc4312139d3fda2d,0a89725090009e2c06d4998c3bbaeddb8c00154f,Simplify get_subpath_end_indices_from_points,"{'added': [(738, '        a0, h = points[0:-1:2], points[1::2]'), (741, '        is_end = (a0 == h).all(1)'), (742, '        end_indices = (2 * n for n, end in enumerate(is_end) if end)'), (743, '        return np.array([*end_indices, len(points) - 1])'), (1202, '            if start >= end - 2:'), (1203, '                continue')], 'deleted': [(738, '        atol = self.tolerance_for_point_equality'), (739, '        a0, h, a1 = points[0:-1:2], points[1::2], points[2::2]'), (742, '        # To disambiguate this from cases with many null'), (743, '        # curves in a row, we also check that the following'), (744, '        # anchor is genuinely distinct'), (745, '        is_end = np.empty(len(points) // 2 + 1, dtype=bool)'), (746, '        is_end[:-1] = (a0 == h).all(1) & (abs(h - a1) > atol).any(1)'), (747, '        is_end[-1] = True'), (748, '        # If the curve immediately after an end marker is also an'), (749, ""        # end marker, don't mark the second one""), (750, '        is_end[:-1] = is_end[:-1] & ~is_end[1:]'), (751, '        return np.array([2 * n for n, end in enumerate(is_end) if end])')]}",299,299
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,c83d03aeb7b592e14a775933fc4312139d3fda2d,Add an option for VMobject.add_line to add a null line,"{'added': [(690, '        self.add_line_to(self.get_end(), allow_null_line=True)')], 'deleted': [(690, '        self.add_line_to(self.get_end())')]}",138,138
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,c83d03aeb7b592e14a775933fc4312139d3fda2d,Add an option for VMobject.add_line to add a null line,"{'added': [(516, '    def add_line_to(self, point: Vect3, allow_null_line: bool = False) -> Self:'), (519, '        if not allow_null_line and self.consider_points_equal(last_point, point):')], 'deleted': [(516, '    def add_line_to(self, point: Vect3) -> Self:'), (519, '        if self.consider_points_equal(last_point, point):')]}",300,300
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,eea8416d57264ea108174072f8075d7a492f6b26,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,"Default to allowing null lines, except for SVGPaths","{'added': [(690, '        self.add_line_to(self.get_end())')], 'deleted': [(690, '        self.add_line_to(self.get_end(), allow_null_line=True)')]}",138,138
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,eea8416d57264ea108174072f8075d7a492f6b26,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,"Default to allowing null lines, except for SVGPaths","{'added': [(324, '            se.Line: (lambda p: self.add_line_to(p, allow_null_line=False), (""end"",)),'), (325, '            se.QuadraticBezier: (lambda c, e: self.add_quadratic_bezier_curve_to(c, e, allow_null_curve=False), (""control"", ""end"")),')], 'deleted': [(324, '            se.Line: (self.add_line_to, (""end"",)),'), (325, '            se.QuadraticBezier: (self.add_quadratic_bezier_curve_to, (""control"", ""end"")),')]}",60,60
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,eea8416d57264ea108174072f8075d7a492f6b26,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,"Default to allowing null lines, except for SVGPaths","{'added': [(505, '    def add_quadratic_bezier_curve_to(self, handle: Vect3, anchor: Vect3, allow_null_curve=True) -> Self:'), (508, '        if not allow_null_curve and self.consider_points_equal(last_point, anchor):'), (516, '    def add_line_to(self, point: Vect3, allow_null_line: bool = True) -> Self:')], 'deleted': [(505, '    def add_quadratic_bezier_curve_to(self, handle: Vect3, anchor: Vect3) -> Self:'), (508, '        if self.consider_points_equal(last_point, anchor):'), (516, '    def add_line_to(self, point: Vect3, allow_null_line: bool = False) -> Self:')]}",301,301
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,22ee13a884df4b9455f0b9989c8edf225f72c233,eea8416d57264ea108174072f8075d7a492f6b26,Have FillArrow take the place of StrokeArrow as the main Arrow,"{'added': [(638, 'class StrokeArrow(Line):'), (734, 'class Arrow(Line):'), (735, '    tickness_multiplier = 0.015'), (736, ''), (745, '        thickness: float = 3.0,'), (776, '        width = self.thickness * self.tickness_multiplier'), (777, '        w_ratio = fdiv(self.max_width_to_length_ratio, fdiv(width, length))'), (779, '            width *= w_ratio'), (781, '        tip_width = self.tip_width_ratio * width'), (791, '            points1 += width * UP / 2'), (792, '            points2 = points1[::-1] + width * DOWN'), (803, '            points1 *= (R + width / 2)'), (804, '            points2 *= (R - width / 2)')], 'deleted': [(638, 'class Arrow(Line):'), (734, 'class FillArrow(Line):'), (743, '        thickness: float = 0.05,'), (774, '        thickness = self.thickness'), (775, '        w_ratio = fdiv(self.max_width_to_length_ratio, fdiv(thickness, length))'), (777, '            thickness *= w_ratio'), (779, '        tip_width = self.tip_width_ratio * thickness'), (789, '            points1 += thickness * UP / 2'), (790, '            points2 = points1[::-1] + thickness * DOWN'), (801, '            points1 *= (R + thickness / 2)'), (802, '            points2 *= (R - thickness / 2)')]}",138,138
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,ceac4fbe1a14e4883d6507abb742ea739045285d,22ee13a884df4b9455f0b9989c8edf225f72c233,Fix up FillArrow,"{'added': [(741, '        buff: float = MED_SMALL_BUFF,'), (742, '        path_arc: float = 0,'), (764, '            path_arc=path_arc,'), (768, '    def get_key_dimensions(self, length):'), (781, '        return width, tip_width, tip_length'), (782, ''), (783, '    def set_points_by_ends('), (784, '        self,'), (785, '        start: Vect3,'), (786, '        end: Vect3,'), (787, '        buff: float = 0,'), (788, '        path_arc: float = 0'), (789, '    ) -> Self:'), (790, '        vect = end - start'), (791, '        length = max(get_norm(vect), 1e-8)  # More systematic min?'), (792, '        unit_vect = normalize(vect)'), (793, ''), (794, '        # Find the right tip length and thickness'), (795, '        width, tip_width, tip_length = self.get_key_dimensions(length - buff)'), (796, ''), (797, '        # Adjust start and end based on buff'), (798, '        if path_arc == 0:'), (799, '            start = start + buff * unit_vect'), (800, '            end = end - buff * unit_vect'), (801, '        else:'), (802, '            R = length / 2 / math.sin(path_arc / 2)'), (803, '            midpoint = 0.5 * (start + end)'), (804, '            center = midpoint + rotate_vector(0.5 * vect, PI / 2) / math.tan(path_arc / 2)'), (805, '            sign = 1'), (806, '            start = center + rotate_vector(start - center, buff / R)'), (807, '            end = center + rotate_vector(end - center, -buff / R)'), (808, '            path_arc -= (2 * buff + tip_length) / R'), (809, '        vect = end - start'), (810, '        length = get_norm(vect)'), (811, ''), (812, '        # Find points for the stem, imagining an arrow pointed to the left'), (839, '        # Reposition to match proper start and end'), (863, '    def get_start_and_end(self):'), (864, '        return (self.get_start(), self.get_end())'), (865, '')], 'deleted': [(744, '        buff: float = MED_SMALL_BUFF,'), (766, '    def set_points_by_ends('), (767, '        self,'), (768, '        start: Vect3,'), (769, '        end: Vect3,'), (770, '        buff: float = 0,'), (771, '        path_arc: float = 0'), (772, '    ) -> Self:'), (773, '        # Find the right tip length and thickness'), (774, '        vect = end - start'), (775, '        length = max(get_norm(vect), 1e-8)'), (788, '        # Find points for the stem'), (794, '            # Solve for radius so that the tip-to-tail length matches |end - start|'), (795, '            a = 2 * (1 - np.cos(path_arc))'), (796, '            b = -2 * tip_length * np.sin(path_arc)'), (797, '            c = tip_length**2 - length**2'), (798, '            R = (-b + np.sqrt(b**2 - 4 * a * c)) / (2 * a)'), (799, ''), (805, '            if path_arc < 0:'), (806, '                tip_length *= -1'), (823, '        if length > 0 and self.get_length() > 0:'), (824, '            # Final correction'), (825, '            super().scale(length / self.get_length())'), (826, '')]}",138,138
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,442206faadecf49e09d496e375f11c3729d7b70d,ceac4fbe1a14e4883d6507abb742ea739045285d,Go back to non-flat-stroke as the default,"{'added': [], 'deleted': [(533, '        flat_stroke: bool = False,'), (557, '        self.set_flat_stroke(flat_stroke)')]}",112,112
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,442206faadecf49e09d496e375f11c3729d7b70d,ceac4fbe1a14e4883d6507abb742ea739045285d,Go back to non-flat-stroke as the default,"{'added': [], 'deleted': [(41, '        flat_stroke: bool = False,'), (53, '            flat_stroke=flat_stroke,')]}",30,30
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,442206faadecf49e09d496e375f11c3729d7b70d,ceac4fbe1a14e4883d6507abb742ea739045285d,Go back to non-flat-stroke as the default,"{'added': [(94, '        flat_stroke: bool = False,')], 'deleted': [(94, '        flat_stroke: bool = True,')]}",301,301
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,d870bb29deed2351d6ceb0ba2a060610be3c1aa9,442206faadecf49e09d496e375f11c3729d7b70d,Fix the non-flat stroke edge case for tangents near line of sight,"{'added': [(85, '        vec3 perp = normalize(cross(v_unit_normal[1], tangent));')], 'deleted': [(85, '        vec3 perp = normalize(cross(unit_normal, tangent));')]}",,
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,bda894959b35a235bc18181cfca9cefada677007,d870bb29deed2351d6ceb0ba2a060610be3c1aa9,"Keeps stroke width as a function of pixels, independent of zoom level","{'added': [(26, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')], 'deleted': [(26, '    // v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);'), (27, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width;')]}",,
manimlib/animation/creation.py,manimlib/animation/creation.py,cfe70ca869c3dbe0ff42305213475e8786f2c24b,bda894959b35a235bc18181cfca9cefada677007,Don't let Write override stroke_behind default,"{'added': [(118, '                behind=self.mobject.stroke_behind,')], 'deleted': []}",34,34
manimlib/scene/scene.py,manimlib/scene/scene.py,11df2563699122acb0859e0ae273359896e437d9,cfe70ca869c3dbe0ff42305213475e8786f2c24b,Fix error rect,"{'added': [(282, '            rect = FullScreenRectangle().set_stroke(RED, 30, flat=True).set_fill(opacity=0)')], 'deleted': [(282, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)')]}",235,235
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,d5575cf1ef55e8d4139bf1ef37981c2e6890fc8e,11df2563699122acb0859e0ae273359896e437d9,Change how joint_angles are computed,"{'added': [(16, 'from manimlib.constants import PI'), (658, '        dots = np.cos(self.get_joint_angles()[0::2])'), (1171, '            return self.data[""joint_angle""][:, 0]'), (1174, '            return self.data[""joint_angle""][:, 0]'), (1179, '        # Rotate points such that positive z direction is the normal'), (1180, '        points = self.get_points() @ rotation_between_vectors(OUT, self.get_unit_normal())'), (1183, '            return self.data[""joint_angle""][:, 0]'), (1206, '            if (points[start] == points[end]).all():'), (1213, '        # Find the angles between vectors into each vertex, and out of it'), (1214, '        angles_in = np.arctan2(v_in[:, 1], v_in[:, 0])'), (1215, '        angles_out = np.arctan2(v_out[:, 1], v_out[:, 0])'), (1216, '        angle_diffs = angles_out - angles_in'), (1217, '        self.data[""joint_angle""][:, 0] = (angle_diffs + PI) % TAU - PI'), (1218, '        return self.data[""joint_angle""][:, 0]')], 'deleted': [(657, '        dots = np.cos(self.get_joint_angles()[0::2, :])'), (1170, '            return self.data[""joint_angle""]'), (1173, '            return self.data[""joint_angle""]'), (1178, '        points = self.get_points()'), (1181, '            return self.data[""joint_angle""]'), (1204, '            if self.consider_points_equal(points[start], points[end]):'), (1211, '        # Compute dot and cross products'), (1212, '        in_dot_out = (v_in * v_out).sum(1)'), (1213, '        norm_product = np.sqrt((v_in * v_in).sum(1) * (v_out * v_out).sum(1))'), (1214, '        angles = np.arccos(fdiv(in_dot_out, norm_product, zero_over_zero_value=1))'), (1215, ''), (1216, '        crosses = cross(v_in, v_out)'), (1217, '        unit_normal = self.get_unit_normal()'), (1218, '        angles[(crosses * unit_normal[np.newaxis, :]).sum(1) < 0] *= -1'), (1219, '        self.data[""joint_angle""][:, 0] = angles'), (1220, '        return self.data[""joint_angle""]')]}",301,301
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,eda7f81fb96e519d720616305688854c236ab3fc,d5575cf1ef55e8d4139bf1ef37981c2e6890fc8e,Update VMobject.is_smooth,"{'added': [(657, '    def is_smooth(self, angle_tol=1 * DEGREES) -> bool:'), (658, '        angles = np.abs(self.get_joint_angles()[0::2])'), (659, '        return (angles < angle_tol).all()')], 'deleted': [(657, '    def is_smooth(self) -> bool:'), (658, '        dots = np.cos(self.get_joint_angles()[0::2])'), (659, '        return bool((dots > 1 - 1e-3).all())')]}",301,301
manimlib/config.py,manimlib/config.py,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,eda7f81fb96e519d720616305688854c236ab3fc,Allow more file_writer configuration in default_config.yml,"{'added': [(416, '        **custom_config[""file_writer_config""],')], 'deleted': [(405, '        ""break_into_partial_movies"": custom_config[""break_into_partial_movies""],')]}",76,76
manimlib/default_config.yml,manimlib/default_config.yml,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,eda7f81fb96e519d720616305688854c236ab3fc,Allow more file_writer configuration in default_config.yml,"{'added': [(31, 'file_writer_config:'), (32, '  # If break_into_partial_movies is set to True, then many small'), (33, '  # files will be written corresponding to each Scene.play and'), (34, '  # Scene.wait call, and these files will then be combined'), (35, '  # to form the full scene.  Sometimes video-editing is made'), (36, '  # easier when working with the broken up scene, which'), (37, '  # effectively has cuts at all the places you might want.'), (38, '  break_into_partial_movies: False'), (39, '  video_codec: ""libx264""'), (40, '  pixel_format: ""yuv420p""'), (41, '  saturation: 1.0'), (42, '  gamma: 1.0')], 'deleted': [(31, '# If break_into_partial_movies is set to True, then many small'), (32, '# files will be written corresponding to each Scene.play and'), (33, '# Scene.wait call, and these files will then be combined'), (34, '# to form the full scene.  Sometimes video-editing is made'), (35, '# easier when working with the broken up scene, which'), (36, '# effectively has cuts at all the places you might want.'), (37, 'break_into_partial_movies: False')]}",,
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"{'added': [(72, '    data_dtype: np.dtype = np.dtype(['), (136, '        self.data = np.zeros(length, dtype=self.data_dtype)')], 'deleted': [(72, '    shader_dtype: np.dtype = np.dtype(['), (136, '        self.data = np.zeros(length, dtype=self.shader_dtype)')]}",557,557
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"{'added': [(29, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')], 'deleted': [(29, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]}",22,22
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"{'added': [(22, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')], 'deleted': [(22, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]}",8,8
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"{'added': [(29, '    data_dtype: np.dtype = np.dtype(['), (292, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')], 'deleted': [(29, '    shader_dtype: np.dtype = np.dtype(['), (292, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]}",47,47
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"{'added': [(68, '    data_dtype: np.dtype = np.dtype([')], 'deleted': [(68, '    shader_dtype: np.dtype = np.dtype([')]}",301,301
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"{'added': [(267, '        # if self.pixel_format.startswith(""yuv""):'), (268, ""        vf_arg += f',eq=saturation={self.saturation}:gamma={self.gamma}'"")], 'deleted': [(267, '        if self.pixel_format.startswith(""yuv""):'), (268, ""            vf_arg += f',eq=saturation={self.saturation}:gamma={self.gamma}'"")]}",93,93
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","{'added': [(31, ""        ('du_point', np.float32, (3,)),""), (32, ""        ('dv_point', np.float32, (3,)),""), (35, ""    pointlike_data_keys = ['point', 'du_point', 'dv_point']""), (51, '        epsilon: float = 1e-4,'), (100, ""        self.data['du_point'][:] = du_points""), (101, ""        self.data['dv_point'][:] = dv_points""), (133, ""            self.data['du_point'] - points,""), (134, ""            self.data['dv_point'] - points,""), (136, '        return normalize_along_axis(crosses, 1)'), (270, ""        ('du_point', np.float32, (3,)),""), (271, ""        ('dv_point', np.float32, (3,)),""), (315, ""        self.data['du_point'][:] = surf.data['du_point']""), (316, ""        self.data['dv_point'][:] = surf.data['dv_point']"")], 'deleted': [(31, ""        ('normal', np.float32, (3,)),""), (49, '        epsilon: float = 1e-5,'), (98, '        self.data[""normal""] = normalize_along_axis(cross('), (99, '            (du_points - points) / self.epsilon,'), (100, '            (dv_points - points) / self.epsilon,'), (101, '        ), 1)'), (131, '        nu, nv = self.resolution'), (132, '        indices = np.arange(nu * nv)'), (133, '        if len(indices) == 0:'), (134, '            return np.zeros((3, 0))'), (135, ''), (136, '        # For each point, find two adjacent points at indices'), (137, '        # step1 and step2, such that crossing points[step1] - points'), (138, '        # with points[step1] - points gives a normal vector'), (139, '        step1 = indices + 1'), (140, '        step2 = indices + nu'), (141, ''), (142, '        # Right edge'), (143, '        step1[nu - 1::nu] = indices[nu - 1::nu] + nu'), (144, '        step2[nu - 1::nu] = indices[nu - 1::nu] - 1'), (145, ''), (146, '        # Bottom edge'), (147, '        step1[-nu:] = indices[-nu:] - nu'), (148, '        step2[-nu:] = indices[-nu:] + 1'), (149, ''), (150, '        # Lower right point'), (151, '        step1[-1] = indices[-1] - 1'), (152, '        step2[-1] = indices[-1] - nu'), (153, ''), (156, '            points[step2] - points,'), (157, '            points[step1] - points,'), (159, '        self.data[""normal""] = normalize_along_axis(crosses, 1)'), (160, '        return self.data[""normal""]'), (294, ""        ('normal', np.float32, (3,)),""), (338, ""        self.data['normal'][:] = surf.data['normal']"")]}",46,46
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","{'added': [(6, 'in vec3 du_point;'), (7, 'in vec3 dv_point;'), (8, '// in vec3 normal;'), (19, '    vec3 normal = cross(normalize(du_point - point), normalize(dv_point - point));')], 'deleted': [(6, 'in vec3 normal;')]}",,
manimlib/shaders/textured_surface/frag.glsl,manimlib/shaders/textured_surface/frag.glsl,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","{'added': [(8, 'in vec3 v_unit_normal;'), (24, '            v_unit_normal'), (33, '        v_unit_normal')], 'deleted': [(8, 'in vec3 v_normal;'), (24, '            normalize(v_normal)'), (33, '        normalize(v_normal)')]}",,
manimlib/shaders/textured_surface/vert.glsl,manimlib/shaders/textured_surface/vert.glsl,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","{'added': [(4, 'in vec3 du_point;'), (5, 'in vec3 dv_point;'), (10, 'out vec3 v_unit_normal;'), (19, '    v_unit_normal = normalize(cross('), (20, '        normalize(du_point - point),'), (21, '        normalize(dv_point - point)'), (22, '    ));')], 'deleted': [(4, 'in vec3 normal;'), (9, 'out vec3 v_normal;'), (18, '    v_normal = normal;')]}",,
manimlib/animation/fading.py,manimlib/animation/fading.py,bd2947be2893ad2fab83f8c725bd962eb91152a2,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,Use preferred group type for FadeTransform,"{'added': [(106, '        super().__init__(mobject.get_group_class()(mobject, target_mobject.copy()), **kwargs)')], 'deleted': [(106, '        super().__init__(Group(mobject, target_mobject.copy()), **kwargs)')]}",23,23
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,ada66ee8fb0a70948fa10ca70b64b037b5683251,bd2947be2893ad2fab83f8c725bd962eb91152a2,Remove stray comment,"{'added': [], 'deleted': [(8, '// in vec3 normal;')]}",,
example_scenes.py,example_scenes.py,e4007f6915daf03766fabc8fbf2a579111dbbe9f,ada66ee8fb0a70948fa10ca70b64b037b5683251,Add glow dot to show light in SurfaceExample,"{'added': [(633, '        light_dot = GlowDot(color=WHITE, radius=0.5)'), (634, '        light_dot.always.move_to(light)'), (635, '        self.add(light, light_dot)')], 'deleted': [(633, '        self.add(light)')]}",23,23
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bcafcbf49051609c2eaa1d5db71c7af8cd9d7cc8,e4007f6915daf03766fabc8fbf2a579111dbbe9f,"Don't have VMobject refresh joint angles on shift, scale and rotate","{'added': [(1281, '    # General calls to apply_points_function should trigger a refresh'), (1282, ""    # to the joint angles, but these common ones shouldn't""), (1283, '    def dont_refresh_joint_angles(func: Callable):'), (1284, '        @wraps(func)'), (1285, '        def wrapper(self, *args, **kwargs):'), (1286, '            nnja = self.needs_new_joint_angles'), (1287, '            result = func(self, *args, **kwargs)'), (1288, '            self.needs_new_joint_angles = nnja'), (1289, '            return result'), (1290, '        return wrapper'), (1291, ''), (1292, '    @dont_refresh_joint_angles'), (1293, '    def shift(self, *args, **kwargs) -> Self:'), (1294, '        return super().shift(*args, **kwargs)'), (1295, ''), (1296, '    @dont_refresh_joint_angles'), (1297, '    def scale(self, *args, **kwargs) -> Self:'), (1298, '        return super().scale(*args, **kwargs)'), (1299, ''), (1300, '    @dont_refresh_joint_angles'), (1301, '    def rotate(self, *args, **kwargs) -> Self:'), (1302, '        return super().rotate(*args, **kwargs)'), (1303, '')], 'deleted': []}",306,306
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a08523d746375c7e648e03690be4c565cc50d284,bcafcbf49051609c2eaa1d5db71c7af8cd9d7cc8,Fix get_subpath_end_indices_from_points,"{'added': [(739, '        atol = self.tolerance_for_point_equality'), (740, '        a0, h, a1 = points[0:-1:2], points[1::2], points[2::2]'), (743, '        # To disambiguate this from cases with many null'), (744, '        # curves in a row, we also check that the following'), (745, '        # anchor is genuinely distinct'), (746, '        is_end = (a0 == h).all(1) & (abs(h - a1) > atol).any(1)')], 'deleted': [(739, '        a0, h = points[0:-1:2], points[1::2]'), (742, '        is_end = (a0 == h).all(1)')]}",306,306
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,5d6a1f30c40b8381bd2e835a9f687c86cd163e40,a08523d746375c7e648e03690be4c565cc50d284,Count joints near 180 degrees as straight,"{'added': [(94, '    if (abs(cos_angle) > COS_THRESHOLD) return step;')], 'deleted': [(94, '    if (cos_angle > COS_THRESHOLD) return step;')]}",,
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c26ebfc10f00006556004c684c91cd6a8f74ef8b,5d6a1f30c40b8381bd2e835a9f687c86cd163e40,Have is_closed use the last path,"{'added': [(582, '        ends = self.get_subpath_end_indices()'), (583, '        last_path_start = self.get_points()[0 if len(ends) == 1 else ends[-2] + 2]'), (592, '        ends = self.get_subpath_end_indices()'), (593, '        last_path_start = points[0 if len(ends) == 1 else ends[-2] + 2]'), (594, '        return self.consider_points_equal(last_path_start, points[-1])')], 'deleted': [(582, '        last_path_start = self.get_subpaths()[-1][0]'), (591, '        return self.consider_points_equal(points[0], points[-1])')]}",308,308
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e939e1de0942cbe7bb721daf5f7a8308d699281b,c26ebfc10f00006556004c684c91cd6a8f74ef8b,Tweak the correction for angle_diffs in get_joint_angles,"{'added': [(1224, '        angle_diffs[angle_diffs < -PI] += TAU'), (1225, '        angle_diffs[angle_diffs > PI] -= TAU'), (1226, '        self.data[""joint_angle""][:, 0] = angle_diffs')], 'deleted': [(1224, '        self.data[""joint_angle""][:, 0] = (angle_diffs + PI) % TAU - PI')]}",308,308
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,487c714d9b49aa3396593ed82e55bebc349c363a,e939e1de0942cbe7bb721daf5f7a8308d699281b,Remove stray new line,"{'added': [], 'deleted': [(30, '')]}",60,60
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,499803159c06ec49c9951e7ebfed5d8753d4502d,487c714d9b49aa3396593ed82e55bebc349c363a,Remove methods and tracking associated with triangulation and non-winding fill,"{'added': [], 'deleted': [(311, '            if not self._use_winding_fill:'), (312, '                self.subdivide_intersections()')]}",59,59
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,499803159c06ec49c9951e7ebfed5d8753d4502d,487c714d9b49aa3396593ed82e55bebc349c363a,Remove methods and tracking associated with triangulation and non-winding fill,"{'added': [(432, '        # Only keeping this here because some old scene call it'), (1075, ""            return np.zeros(0, dtype='i4')"")], 'deleted': [(100, '        use_winding_fill: bool = True,'), (116, '        self._use_winding_fill = use_winding_fill'), (118, '        self.needs_new_triangulation = True'), (119, ""        self.triangulation = np.zeros(0, dtype='i4')""), (435, '    @Mobject.affects_family_data'), (437, '        for submob in self.get_family(recurse):'), (438, '            submob._use_winding_fill = value'), (439, '            if not value and submob.has_points():'), (440, '                submob.subdivide_intersections()'), (923, '        winding = self._use_winding_fill and vmobject._use_winding_fill'), (924, '        if winding != self._use_winding_fill:'), (925, '            self.use_winding_fill(winding)'), (926, '        if winding != vmobject._use_winding_fill:'), (927, '            vmobject.use_winding_fill(winding)'), (929, '            # If both have fill, and they have the same shape, just'), (930, ""            # give them the same triangulation so that it's not recalculated""), (931, '            # needlessly throughout an animation'), (932, '            match_tris = not self._use_winding_fill and \\'), (933, '                         self.has_fill() and \\'), (934, '                         vmobject.has_fill() and \\'), (935, '                         self.has_same_shape_as(vmobject)'), (936, '            if match_tris:'), (937, '                vmobject.triangulation = self.triangulation'), (1022, '    def interpolate('), (1023, '        self,'), (1024, '        mobject1: VMobject,'), (1025, '        mobject2: VMobject,'), (1026, '        alpha: float,'), (1027, '        *args, **kwargs'), (1028, '    ) -> Self:'), (1029, '        super().interpolate(mobject1, mobject2, alpha, *args, **kwargs)'), (1030, ''), (1031, '        if not self._use_winding_fill and self.has_fill():'), (1032, '            tri1 = mobject1.get_triangulation()'), (1033, '            tri2 = mobject2.get_triangulation()'), (1034, '            if not arrays_match(tri1, tri2):'), (1035, '                self.refresh_triangulation()'), (1036, '        return self'), (1037, ''), (1106, '    def refresh_triangulation(self) -> Self:'), (1107, '        for mob in self.get_family():'), (1108, '            mob.needs_new_triangulation = True'), (1109, '        return self'), (1110, ''), (1115, '        if not self.needs_new_triangulation:'), (1116, '            return self.triangulation'), (1117, ''), (1121, ""            self.triangulation = np.zeros(0, dtype='i4')""), (1122, '            self.needs_new_triangulation = False'), (1123, '            return self.triangulation'), (1163, '        self.triangulation = tri_indices'), (1164, '        self.needs_new_triangulation = False'), (1241, '                self.refresh_triangulation()'), (1317, '            if not submob._use_winding_fill:'), (1318, '                submob.get_triangulation()')]}",290,290
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,566fc87a60e839a7a74be0c5d986d3be7d1a7bb2,499803159c06ec49c9951e7ebfed5d8753d4502d,Don't keep an outer_vert_indices attribute,"{'added': [(1051, '        n_curves = self.get_num_curves()'), (1052, '        # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1053, '        return (np.arange(1, 3 * n_curves + 1) * 2) // 3')], 'deleted': [(119, ""        self.outer_vert_indices = np.zeros(0, dtype='i4')""), (1048, '    def resize_points('), (1049, '        self,'), (1050, '        new_length: int,'), (1051, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1052, '    ) -> Self:'), (1053, '        super().resize_points(new_length, resize_func)'), (1054, ''), (1055, '        n_curves = self.get_num_curves()'), (1056, '        # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1057, '        self.outer_vert_indices = (np.arange(1, 3 * n_curves + 1) * 2) // 3'), (1058, '        return self'), (1059, ''), (1064, '        return self.outer_vert_indices')]}",289,289
manimlib/scene/scene.py,manimlib/scene/scene.py,fcc5dc00f9c6bc8f11f93d29a04d24bafb40e8d2,566fc87a60e839a7a74be0c5d986d3be7d1a7bb2,Treat objects fixed in frame as having flat stroke,"{'added': [(282, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)')], 'deleted': [(282, '            rect = FullScreenRectangle().set_stroke(RED, 30, flat=True).set_fill(opacity=0)')]}",235,235
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,fcc5dc00f9c6bc8f11f93d29a04d24bafb40e8d2,566fc87a60e839a7a74be0c5d986d3be7d1a7bb2,Treat objects fixed in frame as having flat stroke,"{'added': [(7, 'uniform float flat_stroke_float;'), (66, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve, bool flat_stroke){'), (72, '    vec3 unit_tan = normalize(flat_stroke ? tangent : project(tangent, unit_normal));'), (97, '    if (!flat_stroke){'), (131, '    bool inside_curve,'), (132, '    bool flat_stroke'), (135, '    vec3 unit_normal = flat_stroke ? v_unit_normal[1] : normalize(camera_position - point);'), (142, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve, flat_stroke);'), (171, '    bool flat_stroke = bool(flat_stroke_float) || bool(is_fixed_in_frame);'), (215, '            inside_curve, flat_stroke')], 'deleted': [(7, 'uniform float flat_stroke;'), (66, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve){'), (72, '    vec3 unit_tan = normalize(flat_stroke == 0.0 ? project(tangent, unit_normal) : tangent);'), (97, '    if (flat_stroke == 0){'), (131, '    bool inside_curve'), (134, '    vec3 unit_normal = bool(flat_stroke) ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve);'), (213, '            inside_curve')]}",,
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,513de196574d70716207b0debae1b1acf5db848d,fcc5dc00f9c6bc8f11f93d29a04d24bafb40e8d2,Clarify that ShaderWrapper id is an int,"{'added': [(108, '    def get_id(self) -> int:')], 'deleted': [(108, '    def get_id(self) -> str:')]}",61,61
manimlib/scene/scene.py,manimlib/scene/scene.py,a823901b980ff4184b9d46eb24cbe9a0c97f6bb5,513de196574d70716207b0debae1b1acf5db848d,"Only form render groups from Mobjects of the same type

I.e. bias against forming such groups","{'added': [(391, '            lambda m: str(type(m)) + str(m.get_shader_wrapper(self.camera.ctx).get_id())'), (397, '            batch[0].get_group_class()(*batch) if len(batch) > 1 else batch[0]')], 'deleted': [(391, '            lambda m: m.get_shader_wrapper(self.camera.ctx).get_id()'), (397, '            batch[0].get_group_class()(*batch)')]}",236,236
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,8785eb1844d80f1dfb0bbae5c2ff8368290abbda,a823901b980ff4184b9d46eb24cbe9a0c97f6bb5,Don't have quiet default changes to stroke_behind,"{'added': [(90, '        stroke_behind: bool = False,')], 'deleted': [(90, '        stroke_behind: Optional[bool] = None,'), (167, '        if self.has_fill() and not self.has_stroke():'), (168, '            self.set_stroke(behind=True)'), (191, '        if behind is None and self.has_stroke() and not self.has_fill():'), (192, '            behind = False')]}",284,284
manimlib/scene/scene.py,manimlib/scene/scene.py,51de1fb6509f0fb2bf05523e49c71e9fa88c62f1,8785eb1844d80f1dfb0bbae5c2ff8368290abbda,For some reason RenderGroups must be groups for camera reorientation to function,"{'added': [(397, '            batch[0].get_group_class()(*batch)')], 'deleted': [(397, '            batch[0].get_group_class()(*batch) if len(batch) > 1 else batch[0]')]}",235,235
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,441ac77eae476897834e939a2950abc1a007e901,51de1fb6509f0fb2bf05523e49c71e9fa88c62f1,Change Euler axis limits for xz flat plane,"{'added': [(75, '        if self.euler_axes == ""zxz"":'), (76, '            if np.isclose(angles[1], 0, atol=1e-2):'), (77, '                angles[0] = angles[0] + angles[2]'), (78, '                angles[2] = 0'), (79, '            if np.isclose(angles[1], PI, atol=1e-2):'), (80, '                angles[0] = angles[0] - angles[2]'), (81, '                angles[2] = 0'), (157, ''), (158, '        # Limit range for phi'), (159, '        if self.euler_axes == ""zxz"":'), (160, '            new_angles[1] = clip(new_angles[1], 0, PI)'), (161, '        elif self.euler_axes == ""zxy"":'), (162, '            new_angles[1] = clip(new_angles[1], -PI / 2, PI / 2)'), (163, '')], 'deleted': [(75, '        if np.isclose(angles[1], 0, atol=1e-2):'), (76, '            angles[0] = angles[0] + angles[2]'), (77, '            angles[2] = 0'), (78, '        if np.isclose(angles[1], PI, atol=1e-2):'), (79, '            angles[0] = angles[0] - angles[2]'), (80, '            angles[2] = 0'), (156, '        new_angles[1] = clip(new_angles[1], 0, PI)  # Limit range for phi')]}",54,54
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,827f4db5e2055fdfba500535203652a997e30a27,441ac77eae476897834e939a2950abc1a007e901,Clarify where normal is being inverted,"{'added': [(1199, '            mob.data[""base_normal""][1::2] *= -1  # Invert normal vector')], 'deleted': [(1199, '            mob.data[""base_normal""][1::2] *= -1')]}",284,284
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,cd5c436ce46b1ecda86a02b0ce9be48a5ef7e5e3,827f4db5e2055fdfba500535203652a997e30a27,"Tighter (albeit arbitrary) constraint on path end detection

This is really not great","{'added': [(729, '        atol = 1e-4  # TODO, this is too unsystematic')], 'deleted': [(729, '        atol = self.tolerance_for_point_equality')]}",284,284
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,36ea70d99044bf040c2db9e4fba3f436f647160b,cd5c436ce46b1ecda86a02b0ce9be48a5ef7e5e3,Remove whitespace,"{'added': [(723, '        return (points[2 * i:2 * i + 3] for i in range(n_curves))')], 'deleted': [(723, '        return (points[2 * i : 2 * i + 3] for i in range(n_curves))')]}",284,284
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,5cf5e497e7a5855c8028fba324416f5f387051f6,7519ce15da200b692f8620964fecfa99778b6c3f,"Don't have joint_angles, unit_normal and path_end_indices get refreshed for shift/scale/rotate

Change unit_normal directly in rotate
In general, don't trigger refresh on apply_points_function","{'added': [(49, 'from manimlib.utils.space_ops import rotation_matrix_transpose'), (869, '    def get_unit_normal(self, refresh: bool = False) -> Vect3:'), (873, '        if not self.needs_new_unit_normal and not refresh:'), (1222, '    def stretch(self, *args, **kwargs) -> Self:'), (1223, '        return super().stretch(*args, **kwargs)'), (1225, '    @triggers_refresh'), (1226, '    def apply_matrix(self, *args, **kwargs) -> Self:'), (1227, '        return super().apply_matrix(*args, **kwargs)'), (1229, '    def rotate('), (1230, '        self,'), (1231, '        angle: float,'), (1232, '        axis: Vect3 = OUT,'), (1233, '        about_point: Vect3 | None = None,'), (1234, '        **kwargs'), (1235, '    ) -> Self:'), (1236, '        rot_matrix_T = rotation_matrix_transpose(angle, axis)'), (1237, '        self.apply_points_function('), (1238, '            lambda points: np.dot(points, rot_matrix_T),'), (1239, '            about_point,'), (1240, '            **kwargs'), (1241, '        )'), (1242, '        self.data[""base_normal""][1::2] = np.dot(self.data[""base_normal""][1::2], rot_matrix_T)'), (1243, '        return self')], 'deleted': [(868, '    def get_unit_normal(self) -> Vect3:'), (872, '        if not self.needs_new_unit_normal:'), (1221, '    def apply_points_function(self, *args, **kwargs) -> Self:'), (1222, '        return super().apply_points_function(*args, **kwargs)'), (1224, '    # General calls to apply_points_function should trigger a refresh'), (1225, ""    # to the joint angles, but these common ones shouldn't""), (1226, '    def dont_refresh_joint_angles(func: Callable):'), (1227, '        @wraps(func)'), (1228, '        def wrapper(self, *args, **kwargs):'), (1229, '            nnja = self.needs_new_joint_angles'), (1230, '            result = func(self, *args, **kwargs)'), (1231, '            self.needs_new_joint_angles = nnja'), (1232, '            return result'), (1233, '        return wrapper'), (1234, ''), (1235, '    @dont_refresh_joint_angles'), (1236, '    def shift(self, *args, **kwargs) -> Self:'), (1237, '        return super().shift(*args, **kwargs)'), (1238, ''), (1239, '    @dont_refresh_joint_angles'), (1240, '    def scale(self, *args, **kwargs) -> Self:'), (1241, '        return super().scale(*args, **kwargs)'), (1243, '    @dont_refresh_joint_angles'), (1244, '    def rotate(self, *args, **kwargs) -> Self:'), (1245, '        return super().rotate(*args, **kwargs)')]}",282,282
manimlib/scene/scene.py,manimlib/scene/scene.py,55a798676ac2bc6737c425f3d018713c1b560985,5cf5e497e7a5855c8028fba324416f5f387051f6,Always stop skipping after checkpoint_paste,"{'added': [(796, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (818, '        self.stop_skipping()')], 'deleted': [(796, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (803, '        prev_skipping = self.skip_animations'), (819, '        self.skip_animations = prev_skipping')]}",235,235
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,22a6b47ec99e4e613f2a1ffacabcdcb29e53c19b,55a798676ac2bc6737c425f3d018713c1b560985,Always recompute unit normals on rotate,"{'added': [(1242, '        for mob in self.get_family():'), (1243, '            mob.get_unit_normal(refresh=True)')], 'deleted': [(1242, '        self.data[""base_normal""][1::2] = np.dot(self.data[""base_normal""][1::2], rot_matrix_T)')]}",283,283
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,e85a1ce1b792333b535b8d457037605d8a952d3a,22a6b47ec99e4e613f2a1ffacabcdcb29e53c19b,Add Arrow.set_perpendicular_to_camera,"{'added': [(32, 'from manimlib.utils.space_ops import rotation_between_vectors'), (886, '    def set_perpendicular_to_camera(self, camera_frame):'), (887, '        to_cam = camera_frame.get_implied_camera_location() - self.get_center()'), (888, '        normal = self.get_unit_normal()'), (889, '        axis = normalize(self.get_vector())'), (890, '        # Project to be perpendicular to axis'), (891, '        trg_normal = to_cam - np.dot(to_cam, axis) * axis'), (892, '        mat = rotation_between_vectors(normal, trg_normal)'), (893, '        self.apply_matrix(mat)'), (894, '        return self'), (895, '')], 'deleted': []}",139,139
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,1e996dcd27455a2649801e292b560675cc80ad45,e85a1ce1b792333b535b8d457037605d8a952d3a,Fix Arrow.set_perpendicular_to_camera,"{'added': [(893, '        self.apply_matrix(mat, about_point=self.get_start())')], 'deleted': [(893, '        self.apply_matrix(mat)')]}",139,139
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,04d77f2bec15e3fe4a3f97cf8dc7c3e8e1a7fa66,1e996dcd27455a2649801e292b560675cc80ad45,Fix joint angle for lines,"{'added': [(1147, '            if start == end:')], 'deleted': [(1147, '            if start >= end - 2:')]}",283,283
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,054261d86f792dbac164d42675cc65ae125be31f,04d77f2bec15e3fe4a3f97cf8dc7c3e8e1a7fa66,Add zero point edge case for point_from_proportion,"{'added': [(808, '        if self.get_num_points() == 0:'), (809, '            return self.get_center()')], 'deleted': []}",284,284
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f378d33d0171807545af33bd10891471d224dad6,054261d86f792dbac164d42675cc65ae125be31f,Use doubled fill canvas so antialiasing doesn't depend on border width,"{'added': [(398, '        double_size = (2 * size[0], 2 * size[1])'), (402, ""        fill_texture = ctx.texture(size=double_size, components=4, dtype='f2')"")], 'deleted': [(401, ""        fill_texture = ctx.texture(size=size, components=4, dtype='f2')"")]}",61,61
manimlib/animation/creation.py,manimlib/animation/creation.py,2836acc3c7a990765ecdc1753f2cae7a989a62be,f378d33d0171807545af33bd10891471d224dad6,Have Write default stroke color match that of the mobject,"{'added': [(152, '        stroke_color: ManimColor = None,'), (155, '        if stroke_color is None:'), (156, '            stroke_color = vmobject.get_color()')], 'deleted': [(152, '        stroke_color: ManimColor = WHITE,')]}",35,35
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a713868f3d5e94740915e25b5995a5cb1099fe73,2836acc3c7a990765ecdc1753f2cae7a989a62be,Add Mobject.get_opacities,"{'added': [(1407, '    def get_opacities(self) -> float:'), (1408, '        return self.data[""rgba""][:, 3]'), (1409, '')], 'deleted': []}",558,558
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,76fdd02db05a6cdd6236c3b0a7a8ebace9586a7d,a713868f3d5e94740915e25b5995a5cb1099fe73,"Go back to default fill border width of 0, except for String","{'added': [(100, '        fill_border_width: float = 0.0,')], 'deleted': [(100, '        fill_border_width: float = 0.5,')]}",284,284
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,e7c540f4159e1dc0ba25e3f4273907942aa50c61,76fdd02db05a6cdd6236c3b0a7a8ebace9586a7d,"Move texture id tracking to ShaderWrapper

Rather than having a globally unique id for each texture, dynamically allocate new texure ids within each ShaderWrapper, so that there is no upper bound on how many textures can be used.","{'added': [(51, '        self.texture_paths = texture_paths or dict()'), (60, '        self.init_textures()'), (92, '    def init_textures(self):'), (93, '        self.texture_names_to_ids = dict()'), (94, '        self.textures = []'), (95, '        for name, path in self.texture_paths.items():'), (96, '            self.add_texture(name, image_path_to_texture(path, self.ctx))'), (102, '    def add_texture(self, name: str, texture: moderngl.Texture):'), (103, ""        max_units = self.ctx.info['GL_MAX_TEXTURE_IMAGE_UNITS']""), (104, '        if len(self.textures) >= max_units:'), (105, '            raise ValueError(f""Unable to use more than {max_units} textures for a program"")'), (106, '        # The position in the list determines its id'), (107, '        self.texture_names_to_ids[name] = len(self.textures)'), (108, '        self.textures.append(texture)'), (109, ''), (122, '            self.texture_paths,'), (190, '        for tid, texture in enumerate(self.textures):'), (191, '            texture.use(tid)'), (211, '    def release_textures(self):'), (212, '        for texture in self.textures:'), (213, '            texture.release()'), (214, '            del texture'), (215, '        self.textures = []'), (216, '        self.texture_names_to_ids = dict()'), (217, ''), (244, ""        self.add_texture('Texture', self.fill_canvas[0].color_attachments[0])""), (245, ""        self.add_texture('DepthTexture', self.fill_canvas[2].color_attachments[0])"")], 'deleted': [(18, 'from manimlib.utils.shaders import get_texture_id'), (19, 'from manimlib.utils.shaders import release_texture'), (53, '        self.texture_names_to_ids = dict()'), (62, '        if texture_paths is not None:'), (63, '            self.init_textures(texture_paths)'), (95, '    def init_textures(self, texture_paths: dict[str, str]):'), (96, '        self.texture_names_to_ids = {'), (97, '            name: get_texture_id(image_path_to_texture(path, self.ctx))'), (98, '            for name, path in texture_paths.items()'), (99, '        }'), (117, '            self.texture_names_to_ids,'), (444, ""        fill_program['Texture'].value = get_texture_id(fill_texture)""), (445, ""        fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (446, '')]}",66,66
manimlib/utils/shaders.py,manimlib/utils/shaders.py,e7c540f4159e1dc0ba25e3f4273907942aa50c61,76fdd02db05a6cdd6236c3b0a7a8ebace9586a7d,"Move texture id tracking to ShaderWrapper

Rather than having a globally unique id for each texture, dynamically allocate new texure ids within each ShaderWrapper, so that there is no upper bound on how many textures can be used.","{'added': [(22, '# Global maps to reflect uniform status')], 'deleted': [(22, '# Global maps updated as textures are allocated'), (23, 'ID_TO_TEXTURE: dict[int, moderngl.Texture] = dict()'), (37, 'def get_texture_id(texture: moderngl.Texture) -> int:'), (38, '    tid = 0'), (39, '    while tid in ID_TO_TEXTURE:'), (40, '        tid += 1'), (41, '    ID_TO_TEXTURE[tid] = texture'), (42, '    texture.use(location=tid)'), (43, '    return tid'), (44, ''), (45, ''), (46, 'def release_texture(texture_id: int):'), (47, '    texture = ID_TO_TEXTURE.pop(texture_id, None)'), (48, '    if texture is not None:'), (49, '        texture.release()'), (50, ''), (51, '')]}",14,14
manimlib/camera/camera.py,manimlib/camera/camera.py,8f1299929fd97543711169e3e61cf25fe77fa1fe,e7c540f4159e1dc0ba25e3f4273907942aa50c61,Swap window buffer after blit from another fbo,"{'added': [(237, '                self.window.swap_buffers()')], 'deleted': []}",35,35
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,133cec97259dbeceb4b91165d59ee0fc01af06eb,0b5e9d4a8bda88a9ccd69477e3d80b5512c61160,zorder -> z_index,"{'added': [(86, '        z_index: int = 0,')], 'deleted': [(86, '        zorder: int = 0,')]}",546,546
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c8326d1ccefe8fc32377040d3af33aecda91bf50,133cec97259dbeceb4b91165d59ee0fc01af06eb,zorder -> z_index,"{'added': [(94, '        self.z_index = z_index')], 'deleted': [(94, '        self.zorder = zorder')]}",546,546
manimlib/scene/scene.py,manimlib/scene/scene.py,08f7cb8d3e82e553ba481077391cea0d003be789,c8326d1ccefe8fc32377040d3af33aecda91bf50,zorder -> z_index,"{'added': [(423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.z_index, m._scene_order))')], 'deleted': [(423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.zorder,m._scene_order))')]}",228,228
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,1f55832a6afe166b054a8497daf85e264582de66,aebf2220a6c5b840bbebea1501b8806a38a083b7,Clean up around z_index,"{'added': [(32, '        # This keeps it ordered first in a scene'), (33, '        z_index=-1,'), (36, '        super().__init__(z_index=z_index, **kwargs)')], 'deleted': [(34, '        super().__init__(**kwargs)')]}",54,54
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1f55832a6afe166b054a8497daf85e264582de66,aebf2220a6c5b840bbebea1501b8806a38a083b7,Clean up around z_index,"{'added': [(1248, '    def set_z_index(self, z_index: int) -> Self:'), (1249, '        self.z_index = z_index'), (1250, '        return self'), (1251, '')], 'deleted': [(97, '        self._scene_order = 0')]}",559,559
manimlib/scene/scene.py,manimlib/scene/scene.py,1f55832a6afe166b054a8497daf85e264582de66,aebf2220a6c5b840bbebea1501b8806a38a083b7,Clean up around z_index,"{'added': [(418, ''), (419, '        # Reorder based on z_index'), (420, '        id_to_scene_order = {id(m): idx for idx, m in enumerate(self.mobjects)}'), (421, '        self.mobjects.sort(key=lambda m: (m.z_index, id_to_scene_order[id(m)]))'), (422, '')], 'deleted': [(417, '        idx = 0'), (418, '        scene_order = len(self.mobjects)'), (419, '        for m in new_mobjects:'), (420, '            m._scene_order = scene_order+idx'), (421, '            idx += 1'), (423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.z_index, m._scene_order))')]}",236,236
manimlib/camera/camera.py,manimlib/camera/camera.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"{'added': [(9, 'from manimlib.constants import ASPECT_RATIO'), (13, 'from manimlib.constants import FRAME_HEIGHT'), (250, '            frame_rescale_factors=('), (251, '                2.0 / FRAME_WIDTH,'), (252, '                2.0 / FRAME_HEIGHT,'), (253, '                frame.get_scale() / frame.get_focal_distance(),'), (254, '            ),')], 'deleted': [(247, '            focal_distance=frame.get_focal_distance() / frame.get_scale(),')]}",35,35
manimlib/config.py,manimlib/config.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"{'added': [(526, ''), (530, ''), (535, ''), (540, ''), (543, ""    return cam_config['pixel_height']"")], 'deleted': [(539, ""    return cam_config['pixel_height']"")]}",80,80
manimlib/constants.py,manimlib/constants.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"{'added': [(4, 'from manimlib.config import get_aspect_ratio'), (5, 'from manimlib.config import get_default_pixel_width'), (6, 'from manimlib.config import get_default_pixel_height'), (7, 'from manimlib.config import get_frame_height')], 'deleted': [(4, 'from manimlib.config import get_aspect_ratio,get_default_pixel_width,get_default_pixel_height,get_frame_height')]}",0,0
manimlib/shaders/inserts/emit_gl_Position.glsl,manimlib/shaders/inserts/emit_gl_Position.glsl,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"{'added': [(4, 'uniform vec3 frame_rescale_factors;'), (11, '    result.xyz *= frame_rescale_factors;')], 'deleted': [(4, ''), (5, 'const float DEFAULT_FRAME_HEIGHT = 8.0;'), (6, 'const float ASPECT_RATIO = 16.0 / 9.0;'), (7, 'const float X_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT / ASPECT_RATIO;'), (8, 'const float Y_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT;'), (15, '    result.x *= X_SCALE;'), (16, '    result.y *= Y_SCALE;'), (17, '    result.z /= focal_distance;')]}",,
manimlib/utils/shaders.py,manimlib/utils/shaders.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"{'added': [], 'deleted': [(10, 'from manimlib.config import parse_cli'), (11, 'from manimlib.config import get_configuration'), (12, 'from manimlib.constants import ASPECT_RATIO'), (101, ''), (102, '        result = re.sub(r""\\s+ASPECT_RATIO\\s+=\\s+[\\s0-9/.]+"", f"" ASPECT_RATIO = {ASPECT_RATIO}"", result)')]}",14,14
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,9eda000a9778c733ba37497f032931a4a3e21b1d,Tweak moderngl import in ImageMobject,"{'added': [(4, 'import moderngl'), (28, '    render_primitive: int = moderngl.TRIANGLES')], 'deleted': [(5, 'from moderngl import TRIANGLES'), (28, '    render_primitive: int = TRIANGLES')]}",8,8
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,"{'added': [(145, '            ""clip_plane"": np.zeros(4),'), (1950, '    def set_clip_plane('), (1951, '        self,'), (1952, '        vect: Vect3 | None = None,'), (1953, '        threshold: float | None = None'), (1954, '    ) -> Self:'), (1955, '        if vect is not None:'), (1956, '            self.uniforms[""clip_plane""][:3] = vect'), (1957, '        if threshold is not None:'), (1958, '            self.uniforms[""clip_plane""][3] = threshold'), (1959, '        return self'), (1960, ''), (1961, '    def deactivate_clip_plane(self) -> Self:'), (1962, '        self.uniforms[""clip_plane""][:] = 0'), (1963, '        return self'), (1964, '')], 'deleted': []}",563,563
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,"{'added': [], 'deleted': [(68, '    def init_uniforms(self):'), (69, '        super().init_uniforms()'), (70, '        self.uniforms[""clip_plane""] = np.zeros(4)'), (71, ''), (219, '    def set_clip_plane('), (220, '        self,'), (221, '        vect: Vect3 | None = None,'), (222, '        threshold: float | None = None'), (223, '    ) -> Self:'), (224, '        if vect is not None:'), (225, '            self.uniforms[""clip_plane""][:3] = vect'), (226, '        if threshold is not None:'), (227, '            self.uniforms[""clip_plane""][3] = threshold'), (228, '        return self'), (229, ''), (230, '    def deactivate_clip_plane(self) -> Self:'), (231, '        self.uniforms[""clip_plane""][:] = 0'), (232, '        return self'), (233, '')]}",41,41
manimlib/shaders/inserts/emit_gl_Position.glsl,manimlib/shaders/inserts/emit_gl_Position.glsl,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,"{'added': [(5, 'uniform vec4 clip_plane;'), (17, ''), (18, '    if(clip_plane.xyz != vec3(0.0, 0.0, 0.0)){'), (19, '        gl_ClipDistance[0] = dot(vec4(point, 1.0), clip_plane);'), (20, '    }')], 'deleted': []}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,"{'added': [], 'deleted': [(3, 'uniform vec4 clip_plane;'), (4, ''), (20, ''), (21, '    if(clip_plane.xyz != vec3(0.0, 0.0, 0.0)){'), (22, '        gl_ClipDistance[0] = dot(vec4(point, 1.0), clip_plane);'), (23, '    }')]}",,
manimlib/utils/debug.py,manimlib/utils/debug.py,3e7244b90bd0d8ecee51d457f41678d8c40544f8,95fca885c920e469ca718e72d383f8790e3a6dca,Fix bad argument,"{'added': [(30, '        label.set_backstroke(BLACK, 5)')], 'deleted': [(30, '        label.set_stroke(BLACK, 5, background=True)')]}",4,4
manimlib/utils/iterables.py,manimlib/utils/iterables.py,62a4ea5165617bf8f0472b1d5f1cbaf504d0a943,3e7244b90bd0d8ecee51d457f41678d8c40544f8,Update description of remove_list_redundancies,"{'added': [(19, '    Remove duplicate elements while preserving order.')], 'deleted': [(19, '    Used instead of list(set(l)) to maintain order')]}",46,46
manimlib/utils/shaders.py,manimlib/utils/shaders.py,080410930158588e380a8d8b3f462d9001afad89,62a4ea5165617bf8f0472b1d5f1cbaf504d0a943,Flatten uniform arrays,"{'added': [(70, '        value = tuple(value.flatten())')], 'deleted': [(70, '        value = tuple(value)')]}",14,14
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,217eb6b486cf0d1c8f6e0d9d6fb06593165bab3c,080410930158588e380a8d8b3f462d9001afad89,Move new VectorField from optics projects into main repo,"{'added': [(8, 'from manimlib.constants import BLUE, WHITE'), (9, 'from manimlib.constants import ORIGIN'), (19, 'from manimlib.utils.iterables import cartesian_product'), (123, ''), (124, 'class VectorField(VMobject):'), (125, '    def __init__('), (126, '        self,'), (127, '        func,'), (128, '        stroke_color: ManimColor = BLUE,'), (129, '        stroke_opacity: float = 1.0,'), (130, '        center: Vect3 = ORIGIN,'), (131, '        sample_points: Optional[Vect3Array] = None,'), (132, '        x_density: float = 2.0,'), (133, '        y_density: float = 2.0,'), (134, '        z_density: float = 2.0,'), (135, '        width: float = 14.0,'), (136, '        height: float = 8.0,'), (137, '        depth: float = 0.0,'), (138, '        stroke_width: float = 2,'), (139, '        tip_width_ratio: float = 4,'), (140, '        tip_len_to_width: float = 0.01,'), (141, '        max_vect_len: float | None = None,'), (142, '        min_drawn_norm: float = 1e-2,'), (143, '        flat_stroke: bool = False,'), (144, '        norm_to_opacity_func=None,'), (145, '        norm_to_rgb_func=None,'), (146, '        **kwargs'), (147, '    ):'), (148, '        self.func = func'), (149, '        self.stroke_width = stroke_width'), (150, '        self.tip_width_ratio = tip_width_ratio'), (151, '        self.tip_len_to_width = tip_len_to_width'), (152, '        self.min_drawn_norm = min_drawn_norm'), (153, '        self.norm_to_opacity_func = norm_to_opacity_func'), (154, '        self.norm_to_rgb_func = norm_to_rgb_func'), (155, ''), (156, '        if max_vect_len is not None:'), (157, '            self.max_vect_len = max_vect_len'), (158, '        else:'), (159, '            densities = np.array([x_density, y_density, z_density])'), (160, '            dims = np.array([width, height, depth])'), (161, '            self.max_vect_len = 1.0 / densities[dims > 0].mean()'), (162, ''), (163, '        if sample_points is None:'), (164, '            self.sample_points = self.get_sample_points('), (165, '                center, width, height, depth,'), (166, '                x_density, y_density, z_density'), (167, '            )'), (168, '        else:'), (169, '            self.sample_points = sample_points'), (170, ''), (171, '        self.init_base_stroke_width_array(len(self.sample_points))'), (172, ''), (173, '        super().__init__('), (174, '            stroke_color=stroke_color,'), (175, '            stroke_opacity=stroke_opacity,'), (176, '            flat_stroke=flat_stroke,'), (177, '            **kwargs'), (178, '        )'), (179, ''), (180, '        n_samples = len(self.sample_points)'), (181, '        self.set_points(np.zeros((8 * n_samples - 1, 3)))'), (182, '        self.set_stroke(width=stroke_width)'), (183, ""        self.set_joint_type('no_joint')""), (184, '        self.update_vectors()'), (185, ''), (186, '    def get_sample_points('), (187, '        self,'), (188, '        center: np.ndarray,'), (189, '        width: float,'), (190, '        height: float,'), (191, '        depth: float,'), (192, '        x_density: float,'), (193, '        y_density: float,'), (194, '        z_density: float'), (195, '    ) -> np.ndarray:'), (196, '        to_corner = np.array([width / 2, height / 2, depth / 2])'), (197, '        spacings = 1.0 / np.array([x_density, y_density, z_density])'), (198, '        to_corner = spacings * (to_corner / spacings).astype(int)'), (199, '        lower_corner = center - to_corner'), (200, '        upper_corner = center + to_corner + spacings'), (201, '        return cartesian_product(*('), (202, '            np.arange(low, high, space)'), (203, '            for low, high, space in zip(lower_corner, upper_corner, spacings)'), (204, '        ))'), (205, ''), (206, '    def init_base_stroke_width_array(self, n_sample_points):'), (207, '        arr = np.ones(8 * n_sample_points - 1)'), (208, '        arr[4::8] = self.tip_width_ratio'), (209, '        arr[5::8] = self.tip_width_ratio * 0.5'), (210, '        arr[6::8] = 0'), (211, '        arr[7::8] = 0'), (212, '        self.base_stroke_width_array = arr'), (213, ''), (214, '    def set_sample_points(self, sample_points: Vect3Array):'), (215, '        self.sample_points = sample_points'), (216, '        return self'), (217, ''), (218, '    def set_stroke(self, color=None, width=None, opacity=None, behind=None, flat=None, recurse=True):'), (219, '        super().set_stroke(color, None, opacity, behind, flat, recurse)'), (220, '        if width is not None:'), (221, '            self.set_stroke_width(float(width))'), (222, '        return self'), (223, ''), (224, '    def set_stroke_width(self, width: float):'), (225, '        if self.get_num_points() > 0:'), (226, '            self.get_stroke_widths()[:] = width * self.base_stroke_width_array'), (227, '            self.stroke_width = width'), (228, '        return self'), (229, ''), (230, '    def update_vectors(self):'), (231, '        tip_width = self.tip_width_ratio * self.stroke_width'), (232, '        tip_len = self.tip_len_to_width * tip_width'), (233, '        samples = self.sample_points'), (234, ''), (235, '        # Get raw outputs and lengths'), (236, '        outputs = self.func(samples)'), (237, '        norms = np.linalg.norm(outputs, axis=1)[:, np.newaxis]'), (238, ''), (239, '        # How long should the arrows be drawn?'), (240, '        max_len = self.max_vect_len'), (241, '        if max_len < np.inf:'), (242, '            drawn_norms = max_len * np.tanh(norms / max_len)'), (243, '        else:'), (244, '            drawn_norms = norms'), (245, ''), (246, ""        # What's the distance from the base of an arrow to""), (247, '        # the base of its head?'), (248, '        dist_to_head_base = np.clip(drawn_norms - tip_len, 0, np.inf)'), (249, ''), (250, '        # Set all points'), (251, '        unit_outputs = np.zeros_like(outputs)'), (252, '        np.true_divide(outputs, norms, out=unit_outputs, where=(norms > self.min_drawn_norm))'), (253, ''), (254, '        points = self.get_points()'), (255, '        points[0::8] = samples'), (256, '        points[2::8] = samples + dist_to_head_base * unit_outputs'), (257, '        points[4::8] = points[2::8]'), (258, '        points[6::8] = samples + drawn_norms * unit_outputs'), (259, '        for i in (1, 3, 5):'), (260, '            points[i::8] = 0.5 * (points[i - 1::8] + points[i + 1::8])'), (261, '        points[7::8] = points[6:-1:8]'), (262, ''), (263, '        # Adjust stroke widths'), (264, '        width_arr = self.stroke_width * self.base_stroke_width_array'), (265, '        width_scalars = np.clip(drawn_norms / tip_len, 0, 1)'), (266, '        width_scalars = np.repeat(width_scalars, 8)[:-1]'), (267, '        self.get_stroke_widths()[:] = width_scalars * width_arr'), (268, ''), (269, '        # Potentially adjust opacity and color'), (270, '        if self.norm_to_opacity_func is not None:'), (271, '            self.get_stroke_opacities()[:] = self.norm_to_opacity_func('), (272, '                np.repeat(norms, 8)[:-1]'), (273, '            )'), (274, '        if self.norm_to_rgb_func is not None:'), (275, '            self.get_stroke_colors()'), (276, ""            self.data['stroke_rgba'][:, :3] = self.norm_to_rgb_func(""), (277, '                np.repeat(norms, 8)[:-1]'), (278, '            )'), (279, ''), (280, '        self.note_changed_data()'), (281, '        return self'), (282, ''), (283, ''), (284, 'class TimeVaryingVectorField(VectorField):'), (285, '    def __init__('), (286, '        self,'), (287, '        # Takes in an array of points and a float for time'), (288, '        time_func,'), (289, '        **kwargs'), (290, '    ):'), (291, '        self.time = 0'), (292, '        super().__init__(func=lambda p: time_func(p, self.time), **kwargs)'), (293, '        self.add_updater(lambda m, dt: m.increment_time(dt))'), (294, '        always(self.update_vectors)'), (295, ''), (296, '    def increment_time(self, dt):'), (297, '        self.time += dt'), (298, ''), (299, ''), (300, 'class OldVectorField(VGroup):')], 'deleted': [(8, 'from manimlib.constants import WHITE'), (121, 'class VectorField(VGroup):')]}",55,55
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1f8ad5be167081293b394bd89b0e71442a2a6eda,217eb6b486cf0d1c8f6e0d9d6fb06593165bab3c,Fix pfp for null curves,"{'added': [(769, '        if num_curves == 0:'), (770, '            return self.get_center()')], 'deleted': []}",285,285
manimlib/scene/scene.py,manimlib/scene/scene.py,ccb9977a67f65b6a957cdc83be726655fcf7fa50,9eda000a9778c733ba37497f032931a4a3e21b1d,"Update scene.py to make scene.time more accurate

When the time intervals are (0, dt, 2dt, ...), during the first frame processing, only the video is inserted, but the update parameter is 0, which causes scene.time to be inaccurate. The correct time intervals should be (dt, 2dt, ...)","{'added': [(555, '        times = np.arange(0, run_time, 1 / self.camera.fps) + 1 / self.camera.fps')], 'deleted': [(555, '        times = np.arange(0, run_time, 1 / self.camera.fps)')]}",236,236
manimlib/animation/animation.py,manimlib/animation/animation.py,fea7096cbe5eb1fb77d96ed1a1bc6a429366fe11,1f8ad5be167081293b394bd89b0e71442a2a6eda,Change default animation behavior to suspend_mobject_updating=False,"{'added': [(7, 'from manimlib.utils.iterables import remove_list_redundancies'), (41, '        # If set to True, the mobject itself will have its internal updaters called,'), (42, '        # but the start or target mobjects would not be suspended. To completely suspend'), (43, '        # updating, call mobject.suspend_updating() before the animation'), (44, '        suspend_mobject_updating: bool = False,'), (106, '        Transforms) target_mobject.'), (113, '        # updating of self.mobject.'), (118, '        items = remove_list_redundancies(items)')], 'deleted': [(40, '        suspend_mobject_updating: bool = True,'), (68, ""            # All calls to self.mobject's internal updaters""), (69, '            # during the animation, either from this Animation'), (70, '            # or from the surrounding scene, should do nothing.'), (71, '            # It is, however, okay and desirable to call'), (72, '            # the internal updaters of self.starting_mobject,'), (73, '            # or any others among self.get_all_mobjects()'), (108, '        Transforms) target_mobject.  Note, since typically'), (109, '        (always?) self.mobject will have its updating'), (110, '        suspended during the animation, this will do'), (111, '        nothing to self.mobject.'), (118, '        # updating of self.mobject.  Besides, in'), (119, '        # most cases its updating is suspended anyway'), (124, '        items = list(set(items))')]}",41,41
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [(1277, '        return [self.data[self.get_outer_vert_indices()]]')], 'deleted': [(1277, '        return [self.data, self.data[-1:]]')]}",284,284
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [(228, '        render_primitive: int = moderngl.TRIANGLES,')], 'deleted': [(228, '        render_primitive: int = moderngl.TRIANGLE_STRIP,')]}",66,66
manimlib/shaders/quadratic_bezier/depth/geom.glsl,manimlib/shaders/quadratic_bezier/depth/geom.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [], 'deleted': [(8, 'in int v_vert_index[3];'), (25, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (26, '    // every other one needs to be rendered'), (27, '    if (v_vert_index[0] % 2 != 0) return;'), (28, '')]}",,
manimlib/shaders/quadratic_bezier/depth/vert.glsl,manimlib/shaders/quadratic_bezier/depth/vert.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [], 'deleted': [(8, 'out int v_vert_index;'), (13, '    v_vert_index = gl_VertexID;')]}",,
manimlib/shaders/quadratic_bezier/fill/geom.glsl,manimlib/shaders/quadratic_bezier/fill/geom.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [], 'deleted': [(9, 'in int v_vert_index[3];'), (47, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (48, '    // every other one needs to be rendered'), (49, '    if (v_vert_index[0] % 2 != 0) return;'), (50, '')]}",,
manimlib/shaders/quadratic_bezier/fill/vert.glsl,manimlib/shaders/quadratic_bezier/fill/vert.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [], 'deleted': [(10, 'out int v_vert_index;'), (16, '    v_vert_index = gl_VertexID;')]}",,
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [], 'deleted': [(18, 'in int v_vert_index[3];'), (159, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (160, '    // every other one needs to be rendered'), (161, '    if (v_vert_index[0] % 2 != 0) return;'), (162, '')]}",,
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"{'added': [], 'deleted': [(19, 'out int v_vert_index;'), (29, '    v_vert_index = gl_VertexID;')]}",,
manimlib/mobject/svg/special_tex.py,manimlib/mobject/svg/special_tex.py,bddd9c35eaf27e70d5c9d4770df6dd1aa9eeab73,fea7096cbe5eb1fb77d96ed1a1bc6a429366fe11,Tiny formatting,"{'added': [], 'deleted': [(18, '')]}",10,10
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,cf37f34e1fdca0f39af8dd9de4e3b7de4453a978,bddd9c35eaf27e70d5c9d4770df6dd1aa9eeab73,Add copy cursor position option,"{'added': [(510, '        elif char == ""c"" and modifiers == SHIFT_MODIFIER:'), (511, '            self.copy_cursor_position()'), (636, ''), (637, '    def copy_cursor_position(self):'), (638, '        pyperclip.copy(str(tuple(self.mouse_point.get_center().round(2))))')], 'deleted': []}",164,164
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,512fb897264ea094073120ebb3b4b8297dbac2cc,f0bf50eb7f5f71136564f1c489d013a805a9992c,Save VMobject. outer_vert_indices,"{'added': [(1051, '        if self.outer_vert_indices is None:'), (1052, '            # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1053, '            self.outer_vert_indices = (np.arange(1, 3 * n_curves + 1) * 2) // 3'), (1054, '        return self.outer_vert_indices'), (1212, '    def resize_points('), (1213, '        self,'), (1214, '        new_length: int,'), (1215, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1216, '    ) -> Self:'), (1217, '        self.outer_vert_indices = None'), (1218, '        return super().resize_points(new_length, resize_func)'), (1219, '')], 'deleted': [(1051, '        # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1052, '        return (np.arange(1, 3 * n_curves + 1) * 2) // 3')]}",286,286
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,95bb67c47fb799bd6283bd88cd937938b1909a45,512fb897264ea094073120ebb3b4b8297dbac2cc,Change return type for Mobject.get_shader_data,"{'added': [(2032, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2037, '    def get_shader_data(self) -> np.ndarray:'), (2040, '            return self.data[indices]'), (2042, '            return self.data')], 'deleted': [(2032, '            data_list = list(it.chain(*(sm.get_shader_data() for sm in submobs)))'), (2037, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (2040, '            return [self.data[indices]]'), (2042, '            return [self.data]')]}",559,559
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,95bb67c47fb799bd6283bd88cd937938b1909a45,512fb897264ea094073120ebb3b4b8297dbac2cc,Change return type for Mobject.get_shader_data,"{'added': [(1283, '    def get_shader_data(self) -> np.ndarray:'), (1287, '        return self.data[self.get_outer_vert_indices()]')], 'deleted': [(1283, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (1287, '        return [self.data[self.get_outer_vert_indices()]]')]}",286,286
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f737823bacfa83785adc32645eb97919d4039857,95bb67c47fb799bd6283bd88cd937938b1909a45,Add VMobject. get_shader_vert_indices,"{'added': [(1287, '        return super().get_shader_data()'), (1288, ''), (1289, '    def get_shader_vert_indices(self) -> Optional[np.ndarray]:'), (1290, '        return self.get_outer_vert_indices()')], 'deleted': [(1287, '        return self.data[self.get_outer_vert_indices()]')]}",287,287
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,641c03a95b2349c6f91c091e3ad3769fad49cb5c,f737823bacfa83785adc32645eb97919d4039857,Change condition for updating VMobject. outer_vert_indices,"{'added': [(120, '        self.outer_vert_indices = np.zeros(0, dtype=int)'), (1052, '        if len(self.outer_vert_indices) != 3 * n_curves:')], 'deleted': [(1051, '        if self.outer_vert_indices is None:'), (1212, '    def resize_points('), (1213, '        self,'), (1214, '        new_length: int,'), (1215, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1216, '    ) -> Self:'), (1217, '        self.outer_vert_indices = None'), (1218, '        return super().resize_points(new_length, resize_func)'), (1219, '')]}",286,286
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,29cb6f76fe89be8ede82b3c82ebf0e93c025b3ef,09e9e65ba48dab9844df74f47648e109ee95dbc0,Write scene insertions into a subdirectory,"{'added': [(12, 'from pathlib import Path'), (303, '    def get_insert_file_path(self, index: int) -> Path:'), (304, '        movie_path = Path(self.get_movie_file_path())'), (305, '        scene_name = movie_path.stem'), (306, '        insert_dir = Path(movie_path.parent, ""inserts"")'), (307, '        guarantee_existence(str(insert_dir))'), (308, '        return Path(insert_dir, f""{scene_name}_{index}{movie_path.suffix}"")'), (309, ''), (314, '        index = 0'), (315, '        while (insert_path := self.get_insert_file_path(index)).exists():'), (316, '            index += 1'), (317, '        self.inserted_file_path = str(insert_path)')], 'deleted': [(306, '        movie_path = self.get_movie_file_path()'), (307, '        count = 0'), (308, '        while os.path.exists(name := movie_path.replace(""."", f""_insert_{count}."")):'), (309, '            count += 1'), (310, '        self.inserted_file_path = name')]}",94,94
manimlib/scene/scene.py,manimlib/scene/scene.py,154a473a128b001c641649c3f9f0cd769d53cbf2,29cb6f76fe89be8ede82b3c82ebf0e93c025b3ef,"Get rid of globals update locals hack

It seems this issues is no longer there in the case of list constructors(?). Although it still exists for functions defined within a cell, that can be circumvented with more explicit function arguments.","{'added': [], 'deleted': [(258, ""        # This is hacky, but there's an issue with ipython which is that""), (259, ""        # when you define lambda's or list comprehensions during a shell session,""), (260, '        # they are not aware of local variables in the surrounding scope. Because'), (261, '        # That comes up a fair bit during scene construction, to get around this,'), (262, '        # we (admittedly sketchily) update the global namespace to match the local'), (263, '        # namespace, since this is just a shell session anyway.'), (264, '        shell.events.register('), (265, '            ""pre_run_cell"",'), (266, '            lambda *args, **kwargs: shell.user_global_ns.update(shell.user_ns)'), (267, '        )'), (268, '')]}",236,236
manimlib/mobject/boolean_ops.py,manimlib/mobject/boolean_ops.py,99493fc4f783d41988af38ad9d5f0215cfbe174a,154a473a128b001c641649c3f9f0cd769d53cbf2,"Fix issue with Difference

https://github.com/3b1b/manim/issues/2174","{'added': [(14, '    for submob in vmobject.family_members_with_points():'), (15, '        for subpath in submob.get_subpaths():'), (16, '            quads = vmobject.get_bezier_tuples_from_points(subpath)'), (17, '            start = subpath[0]'), (18, '            path.moveTo(*start[:2])'), (19, '            for p0, p1, p2 in quads:'), (20, '                path.quadTo(*p1[:2], *p2[:2])'), (21, '            if vmobject.consider_points_equal(subpath[0], subpath[-1]):'), (22, '                path.close()')], 'deleted': [(14, '    subpaths = vmobject.get_subpaths_from_points(vmobject.get_all_points())'), (15, '    for subpath in subpaths:'), (16, '        quads = vmobject.get_bezier_tuples_from_points(subpath)'), (17, '        start = subpath[0]'), (18, '        path.moveTo(*start[:2])'), (19, '        for p0, p1, p2 in quads:'), (20, '            path.quadTo(*p1[:2], *p2[:2])'), (21, '        if vmobject.consider_points_equal(subpath[0], subpath[-1]):'), (22, '            path.close()')]}",23,23
README.md,README.md,23c9e67fa41ce0b7e43405e4952b3a5bdb08b3a8,cce4ffbb60c2722e99fb32a2fb79497ad8f9b149,Reference workflow documentation,"{'added': [(94, ""Look through the [example scenes](https://3b1b.github.io/manim/getting_started/example_scenes.html) to see examples of the library's syntax, animation types and object types. In the [3b1b/videos](https://github.com/3b1b/videos) repo, you can see all the code for 3blue1brown videos, though code from older videos may not be compatible with the most recent version of manim. The readme of that repo also outlines some details for how to set up a more interactive workflow, as shown in [this manim demo video](https://www.youtube.com/watch?v=rbu7Zu5X1zI) for example.""), (95, ''), (96, 'When running in the CLI, some useful flags include:')], 'deleted': [(94, 'Some useful flags include:'), (104, 'Look through the [example scenes](https://3b1b.github.io/manim/getting_started/example_scenes.html) to get a sense of how it is used, and feel free to look through the code behind [3blue1brown videos](https://github.com/3b1b/videos) for a much larger set of example. Note, however, that developments are often made to the library without considering backwards compatibility with those old videos. To run an old project with a guarantee that it will work, you will have to go back to the commit which completed that project.'), (105, '')]}",,
manimlib/scene/scene.py,manimlib/scene/scene.py,2dd0256af623cbe00bb59a5e6f2ff634193e9582,d4080b8978e94477b590c5e8f82d223b1d2395f0,Instantiate the IPython shell without a local ns,"{'added': [(223, '        # Create embedded IPython terminal configured to have access to'), (224, '        # the local namespace of the caller'), (226, '        module = get_module(caller_frame.f_globals[""__file__""])'), (227, '        shell = InteractiveShellEmbed(user_module=module)'), (229, '        # Add a few custom shortcuts to that local namespace'), (230, '        local_ns = dict(caller_frame.f_locals)'), (247, ""        # Update the shell module with the caller's locals + shortcuts""), (248, '        module.__dict__.update(local_ns)'), (249, ''), (284, '        shell()')], 'deleted': [(223, '        # Create embedded IPython terminal to be configured'), (224, '        shell = InteractiveShellEmbed.instance()'), (225, ''), (226, '        # Use the locals namespace of the caller'), (228, '        local_ns = dict(caller_frame.f_locals)'), (230, '        # Add a few custom shortcuts'), (281, '        shell('), (282, '            local_ns=local_ns,'), (283, ""            # Pretend like we're embeding in the caller function, not here""), (284, '            stack_depth=2,'), (285, ""            # Specify that the present module is the caller's, not here""), (286, '            module=get_module(caller_frame.f_globals[""__file__""])'), (287, '        )')]}",236,236
requirements.txt,requirements.txt,aa18373eb7487895b0d91e21067d70d373d2be84,d499544366570b67a070dcfcb303f31ce4483712,Update ManimPango requirement,"{'added': [(5, 'manimpango>=0.6.0')], 'deleted': [(5, 'manimpango>=0.4.0.post0,<0.5.0')]}",,
manimlib/shaders/textured_surface/frag.glsl,manimlib/shaders/textured_surface/frag.glsl,aaa28a2712d00288b668ad0344dbe4cf8dab3b87,d499544366570b67a070dcfcb303f31ce4483712,Discard transparent parts of textured surfaces,"{'added': [(29, '    if (color.a == 0) discard;')], 'deleted': []}",,
requirements.txt,requirements.txt,e3e87f611096c10c7b019df65fa116ffdea2dd99,aaa28a2712d00288b668ad0344dbe4cf8dab3b87,Update Pango requirement,"{'added': [(5, 'manimpango>=0.6.0')], 'deleted': [(5, 'manimpango>=0.4.0.post0,<0.5.0')]}",,
setup.cfg,setup.cfg,a34c4482f6a7896be33b4384f9f783049e94aa63,d499544366570b67a070dcfcb303f31ce4483712,Update setup.cfg,"{'added': [(3, 'version = 1.7.0'), (33, '    ipython>=8.18.0'), (35, '    fontTools'), (36, '    manimpango>=0.6.0'), (54, '    typing-extensions; python_version < ""3.11""')], 'deleted': [(3, 'version = 1.6.1'), (33, '    ipython'), (35, '    manimpango>=0.4.0.post0,<0.5.0'), (36, '    mapbox-earcut')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,04295ec177ed13ce6bdcea20f02f79fc4ce65c24,1a65498f977aab7ed505fa7bb660399fa64c19af,Minor Bug fixed: window's bg color now changing.,"{'added': [(129, '            self.window.clear(*self.background_rgba)'), (223, '        self.frame.set_height(frame_height, stretch=True)'), (224, '        self.frame.set_width(frame_width, stretch=True)')], 'deleted': [(9, 'from manimlib.constants import ASPECT_RATIO'), (130, '            self.window.clear()'), (224, '        self.frame.set_height(frame_height, stretch=true)'), (225, '        self.frame.set_width(frame_width, stretch=true)')]}",35,35
setup.cfg,setup.cfg,5505fc1d547b910fe62e7b8966edae7ce64fed58,1a65498f977aab7ed505fa7bb660399fa64c19af,Add mapbox-earcut dependency,"{'added': [(36, '    mapbox-earcut')], 'deleted': []}",,
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,199395b6e35ca0a0c80c07abd31e0a1461c845de,837bb14c03cd30b58ed65c0ae33eb20e1987f8d8,"Fix negative winding issue

https://github.com/3b1b/manim/issues/2146","{'added': [(449, '                if(color.a < 0){'), (450, '                    color.a = -color.a / (1.0 - color.a);'), (451, '                    color.rgb *= (color.a - 1);'), (452, '                }'), (453, '')], 'deleted': []}",66,66
setup.cfg,setup.cfg,371fca147be663a8f950de2893a25e608efd6a67,e1816c2ac53ea99047d47ac889c4d176d025c032,Update version in setup.cfg,"{'added': [(3, 'version = 1.7.1')], 'deleted': [(3, 'version = 1.7.0')]}",,
manimlib/camera/camera.py,manimlib/camera/camera.py,e5cf0558d87943103541c12d792fbaa0114030d1,1139b545f9e766e7282f8cf64e68e225a4f25eb1,fix 3D bad overlapping,"{'added': [(17, 'from manimlib.utils.family_ops import extract_mobject_family_members'), (232, '        for mobject in extract_mobject_family_members(mobjects, True):')], 'deleted': [(231, '        for mobject in mobjects:')]}",35,35
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e5cf0558d87943103541c12d792fbaa0114030d1,1139b545f9e766e7282f8cf64e68e225a4f25eb1,fix 3D bad overlapping,"{'added': [(2042, '        if len(self.get_points()) == 0:'), (2043, '            return []'), (2044, '        shader_wrapper = self.get_shader_wrapper(ctx)'), (2045, '        shader_wrapper.read_in([self.get_shader_data()])'), (2046, '        return [shader_wrapper]')], 'deleted': [(2042, '        family = self.family_members_with_points()'), (2043, '        batches = batch_by_property(family, lambda sm: sm.get_shader_wrapper(ctx).get_id())'), (2044, ''), (2045, '        result = []'), (2046, '        for submobs, sid in batches:'), (2047, '            shader_wrapper = submobs[0].shader_wrapper'), (2048, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2049, '            shader_wrapper.read_in(data_list)'), (2050, '            result.append(shader_wrapper)'), (2051, '        return result')]}",562,562
manimlib/constants.py,manimlib/constants.py,dc731f8bf28894ba2a327a19077b0622dabfe468,1139b545f9e766e7282f8cf64e68e225a4f25eb1,Properly check modifier keys.,"{'added': [], 'deleted': [(95, 'SHIFT_MODIFIER: int = 1'), (96, 'CTRL_MODIFIER: int = 2'), (97, 'COMMAND_MODIFIER: int = 64'), (98, '')]}",0,0
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,dc731f8bf28894ba2a327a19077b0622dabfe468,1139b545f9e766e7282f8cf64e68e225a4f25eb1,Properly check modifier keys.,"{'added': [(7, 'from pyglet.window import key as PygletWindowKeys'), (53, 'ALL_MODIFIERS = PygletWindowKeys.MOD_CTRL | PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_SHIFT'), (474, '        if char == SELECT_KEY and (modifiers & ALL_MODIFIERS) == 0:'), (478, '        elif char in GRAB_KEYS and (modifiers & ALL_MODIFIERS) == 0:'), (480, '        elif char == RESIZE_KEY and (modifiers & PygletWindowKeys.MOD_SHIFT):'), (481, '            self.prepare_resizing(about_corner=((modifiers & PygletWindowKeys.MOD_SHIFT) > 0))'), (485, '        elif char == COLOR_KEY and (modifiers & ALL_MODIFIERS) == 0:'), (487, '        elif char == INFORMATION_KEY and (modifiers & ALL_MODIFIERS) == 0:'), (489, '        elif char == ""c"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (491, '        elif char == ""v"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (493, '        elif char == ""x"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (498, '        elif char == ""a"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (501, '        elif char == ""g"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (503, '        elif char == ""g"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL | PygletWindowKeys.MOD_SHIFT)):'), (505, '        elif char == ""t"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (507, '        elif char == ""s"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (509, '        elif char == ""d"" and (modifiers & PygletWindowKeys.MOD_SHIFT):'), (511, '        elif char == ""c"" and (modifiers & PygletWindowKeys.MOD_SHIFT):'), (516, '                large=(modifiers & PygletWindowKeys.MOD_SHIFT),')], 'deleted': [(10, 'from manimlib.constants import COMMAND_MODIFIER, SHIFT_MODIFIER'), (473, '        if char == SELECT_KEY and modifiers == 0:'), (477, '        elif char in GRAB_KEYS and modifiers == 0:'), (479, '        elif char == RESIZE_KEY and modifiers in [0, SHIFT_MODIFIER]:'), (480, '            self.prepare_resizing(about_corner=(modifiers == SHIFT_MODIFIER))'), (484, '        elif char == COLOR_KEY and modifiers == 0:'), (486, '        elif char == INFORMATION_KEY and modifiers == 0:'), (488, '        elif char == ""c"" and modifiers == COMMAND_MODIFIER:'), (490, '        elif char == ""v"" and modifiers == COMMAND_MODIFIER:'), (492, '        elif char == ""x"" and modifiers == COMMAND_MODIFIER:'), (497, '        elif char == ""a"" and modifiers == COMMAND_MODIFIER:'), (500, '        elif char == ""g"" and modifiers == COMMAND_MODIFIER:'), (502, '        elif char == ""g"" and modifiers == COMMAND_MODIFIER | SHIFT_MODIFIER:'), (504, '        elif char == ""t"" and modifiers == COMMAND_MODIFIER:'), (506, '        elif char == ""s"" and modifiers == COMMAND_MODIFIER:'), (508, '        elif char == ""d"" and modifiers == SHIFT_MODIFIER:'), (510, '        elif char == ""c"" and modifiers == SHIFT_MODIFIER:'), (515, '                large=(modifiers & SHIFT_MODIFIER),')]}",164,164
manimlib/scene/scene.py,manimlib/scene/scene.py,dc731f8bf28894ba2a327a19077b0622dabfe468,1139b545f9e766e7282f8cf64e68e225a4f25eb1,Properly check modifier keys.,"{'added': [(16, 'from pyglet.window import key as PygletWindowKeys'), (964, '        elif char == ""z"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (966, '        elif char == ""z"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL | PygletWindowKeys.MOD_SHIFT)):'), (969, '        elif char == QUIT_KEY and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):')], 'deleted': [(27, 'from manimlib.constants import COMMAND_MODIFIER'), (28, 'from manimlib.constants import SHIFT_MODIFIER'), (965, '        elif char == ""z"" and modifiers == COMMAND_MODIFIER:'), (967, '        elif char == ""z"" and modifiers == COMMAND_MODIFIER | SHIFT_MODIFIER:'), (970, '        elif char == QUIT_KEY and modifiers == COMMAND_MODIFIER:')]}",236,236
manimlib/scene/scene.py,manimlib/scene/scene.py,1738876f4395e735908b11ef464fee703e207301,1139b545f9e766e7282f8cf64e68e225a4f25eb1,fix bad 3D overlapping using z_index,"{'added': [(376, '            sorted(self.mobjects, key=lambda m: m.z_index),'), (377, '            lambda m: str(type(m)) + str(m.get_shader_wrapper(self.camera.ctx).get_id()) + str(m.z_index)')], 'deleted': [(376, '            self.mobjects,'), (377, '            lambda m: str(type(m)) + str(m.get_shader_wrapper(self.camera.ctx).get_id())')]}",236,236
manimlib/camera/camera.py,manimlib/camera/camera.py,693a859cafa8e752c4e9efed5fab330cc572610c,52948f846ea6d7d0ea8db7946dc810340924d4b4,revert changes in mobject.py and camera.py,"{'added': [(231, '        for mobject in mobjects:')], 'deleted': [(17, 'from manimlib.utils.family_ops import extract_mobject_family_members'), (232, '        for mobject in extract_mobject_family_members(mobjects, True):')]}",35,35
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,693a859cafa8e752c4e9efed5fab330cc572610c,52948f846ea6d7d0ea8db7946dc810340924d4b4,revert changes in mobject.py and camera.py,"{'added': [(2042, '        family = self.family_members_with_points()'), (2043, '        batches = batch_by_property(family, lambda sm: sm.get_shader_wrapper(ctx).get_id())'), (2044, ''), (2045, '        result = []'), (2046, '        for submobs, sid in batches:'), (2047, '            shader_wrapper = submobs[0].shader_wrapper'), (2048, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2049, '            shader_wrapper.read_in(data_list)'), (2050, '            result.append(shader_wrapper)'), (2051, '        return result')], 'deleted': [(2042, '        if len(self.get_points()) == 0:'), (2043, '            return []'), (2044, '        shader_wrapper = self.get_shader_wrapper(ctx)'), (2045, '        shader_wrapper.read_in([self.get_shader_data()])'), (2046, '        return [shader_wrapper]')]}",563,563
manimlib/scene/scene.py,manimlib/scene/scene.py,693a859cafa8e752c4e9efed5fab330cc572610c,52948f846ea6d7d0ea8db7946dc810340924d4b4,revert changes in mobject.py and camera.py,"{'added': [(376, '            self.mobjects,')], 'deleted': [(376, '            sorted(self.mobjects, key=lambda m: m.z_index),')]}",236,236
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,9475fcd19eaaf2eff564368cd4468f8b93b275ef,003c4d86262565bb21001f74f67e6788cae62df4,Have clip plane recurse through family,"{'added': [(1953, '        threshold: float | None = None,'), (1954, '        recurse=True'), (1956, '        for submob in self.get_family(recurse):'), (1957, '            if vect is not None:'), (1958, '                submob.uniforms[""clip_plane""][:3] = vect'), (1959, '            if threshold is not None:'), (1960, '                submob.uniforms[""clip_plane""][3] = threshold')], 'deleted': [(1953, '        threshold: float | None = None'), (1955, '        if vect is not None:'), (1956, '            self.uniforms[""clip_plane""][:3] = vect'), (1957, '        if threshold is not None:'), (1958, '            self.uniforms[""clip_plane""][3] = threshold')]}",564,564
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,b84376d6fd08435f5ab7b55c0592e3232f822c4f,9475fcd19eaaf2eff564368cd4468f8b93b275ef,Add Cone,"{'added': [(172, 'class Cone(Cylinder):'), (173, '    def __init__('), (174, '        self,'), (175, '        u_range: Tuple[float, float] = (0, TAU),'), (176, '        v_range: Tuple[float, float] = (0, 1),'), (177, '        *args,'), (178, '        **kwargs,'), (179, '    ):'), (180, '        super().__init__(u_range=u_range, v_range=v_range, *args, **kwargs)'), (181, ''), (182, '    def uv_func(self, u: float, v: float) -> np.ndarray:'), (183, '        return np.array([(1 - v) * np.cos(u), (1 - v) * np.sin(u), v])'), (184, ''), (185, '')], 'deleted': []}",32,32
manimlib/scene/scene.py,manimlib/scene/scene.py,97b6e39abb2a055a38e7034d2078535f0e1a8ec4,003c4d86262565bb21001f74f67e6788cae62df4,Init new focus() command,"{'added': [(237, '            focus=self.focus,'), (989, '    def focus(self) -> None:'), (990, '        if not self.window:'), (991, '            return'), (992, '        self.window.focus()'), (993, '')], 'deleted': []}",238,238
manimlib/window.py,manimlib/window.py,97b6e39abb2a055a38e7034d2078535f0e1a8ec4,003c4d86262565bb21001f74f67e6788cae62df4,Init new focus() command,"{'added': [(52, '    def focus(self):'), (53, '        """"""'), (54, '        Puts focus on this window by hiding and showing it again.'), (55, ''), (56, ""        Note that the pyglet `activate()` method didn't work as expected here,""), (57, ""        so that's why we have to use this workaround. This will produce a small""), (58, '        flicker on the window but at least reliably focuses it. It may also'), (59, '        offset the window position slightly.'), (60, '        """"""'), (61, '        self._window.set_visible(False)'), (62, '        self._window.set_visible(True)'), (63, '')], 'deleted': []}",24,24
manimlib/scene/scene.py,manimlib/scene/scene.py,af923a2327f4b6c9a306f2e626eddb6ce59f906b,97b6e39abb2a055a38e7034d2078535f0e1a8ec4,Add docstring to user-facing focus() method,"{'added': [(990, '        """"""'), (991, '        Puts focus on the ManimGL window.'), (992, '        """"""')], 'deleted': []}",238,238
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,64ae1364ca25550873c5cc37e2ef30756de9469d,b84376d6fd08435f5ab7b55c0592e3232f822c4f,Update the Vector Field interface,"{'added': [(48, 'def full_range_specifier(range_args):'), (49, '    if len(range_args) == 2:'), (50, '        return (*range_args, 1)'), (51, '    return range_args'), (52, ''), (53, ''), (66, '        self.x_range = full_range_specifier(x_range)'), (67, '        self.y_range = full_range_specifier(y_range)'), (545, '        self.z_range = full_range_specifier(z_range)')], 'deleted': [(60, '        self.x_range = x_range'), (61, '        self.y_range = y_range'), (539, '        self.z_range = z_range')]}",115,115
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,64ae1364ca25550873c5cc37e2ef30756de9469d,b84376d6fd08435f5ab7b55c0592e3232f822c4f,Update the Vector Field interface,"{'added': [(18, 'from manimlib.utils.color import get_color_map'), (29, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect3Array, Vect4Array'), (37, '#### Delete these two ###'), (57, ''), (68, '####'), (113, 'def get_sample_coords('), (115, '    step_multiple: float = 1.0'), (122, '    return np.array(list(it.product(*ranges)))'), (131, '        func: Callable[Sequence[float], Sequence[float]],'), (132, '        coordinate_system: CoordinateSystem,'), (133, '        step_multiple: float = 0.5,'), (134, '        magnitude_range: Optional[Tuple[float, float]] = None,'), (135, '        color_map_name: Optional[str] = ""3b1b_colormap"",'), (136, '        color_map: Optional[Callable[Sequence[float]], Vect4Array] = None,'), (144, '        norm_to_opacity_func=None,  # TODO, check on this'), (148, '        self.coordinate_system = coordinate_system'), (154, '        # Search for sample_points'), (155, '        self.sample_coords = get_sample_coords(coordinate_system, step_multiple)'), (156, '        self.update_sample_points()'), (157, ''), (158, '        if max_vect_len is None:'), (159, '            self.max_displayed_vect_len = get_norm(self.sample_points[1] - self.sample_points[0])'), (161, '            self.max_displayed_vect_len = max_vect_len * coordinate_system.get_x_unit_size()'), (162, ''), (163, '        # Prepare the color map'), (164, '        if magnitude_range is None:'), (165, '            max_value = max(map(get_norm, func(self.sample_coords)))'), (166, '            magnitude_range = (0, max_value)'), (167, ''), (168, '        self.magnitude_range = magnitude_range'), (169, ''), (170, '        if color_map is not None:'), (171, '            self.color_map = color_map'), (172, '        elif color_map_name is not None:'), (173, '            self.color_map = get_color_map(color_map_name)'), (175, '            self.color_map = None'), (177, '        self.init_base_stroke_width_array(len(self.sample_coords))'), (186, '        n_samples = len(self.sample_coords)'), (220, '    def set_sample_coords(self, sample_points: VectArray):'), (221, '        self.sample_coords = sample_coords'), (236, '    def update_sample_points(self):'), (237, '        self.sample_points = self.coordinate_system.c2p(*self.sample_coords.T)'), (238, ''), (243, '        # Outputs in the coordinate system'), (244, '        outputs = self.func(self.sample_coords)'), (245, '        output_norms = np.linalg.norm(outputs, axis=1)[:, np.newaxis]'), (246, ''), (247, '        # Corresponding vector values in global coordinates'), (248, '        out_vects = self.coordinate_system.c2p(*outputs.T) - self.coordinate_system.get_origin()'), (249, '        out_vect_norms = np.linalg.norm(out_vects, axis=1)[:, np.newaxis]'), (250, '        unit_outputs = np.zeros_like(out_vects)'), (251, '        np.true_divide(out_vects, out_vect_norms, out=unit_outputs, where=(out_vect_norms > 0))'), (253, '        # How long should the arrows be drawn, in global coordinates'), (254, '        max_len = self.max_displayed_vect_len'), (256, '            drawn_norms = max_len * np.tanh(out_vect_norms / max_len)'), (258, '            drawn_norms = out_vect_norms'), (262, '        dist_to_head_base = np.clip(drawn_norms - tip_len, 0, np.inf)  # Mixing units!'), (266, '        points[0::8] = self.sample_points'), (267, '        points[2::8] = self.sample_points + dist_to_head_base * unit_outputs'), (269, '        points[6::8] = self.sample_points + drawn_norms * unit_outputs'), (281, '        if self.color_map is not None:'), (282, '            self.get_stroke_colors()  # Ensures the array is updated to appropriate length'), (283, '            low, high = self.magnitude_range'), (284, ""            self.data['stroke_rgba'][:] = self.color_map(""), (285, '                inverse_interpolate(low, high, np.repeat(output_norms, 8)[:-1])'), (286, '            )'), (287, ''), (290, '                np.repeat(output_norms, 8)[:-1]'), (337, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (341, '        samples = get_sample_coords('), (454, '        sample_coords = get_sample_coords(')], 'deleted': [(28, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect3Array'), (109, 'def get_sample_points_from_coordinate_system('), (111, '    step_multiple: float'), (118, '    return it.product(*ranges)'), (127, '        func,'), (130, '        center: Vect3 = ORIGIN,'), (131, '        sample_points: Optional[Vect3Array] = None,'), (132, '        x_density: float = 2.0,'), (133, '        y_density: float = 2.0,'), (134, '        z_density: float = 2.0,'), (135, '        width: float = 14.0,'), (136, '        height: float = 8.0,'), (137, '        depth: float = 0.0,'), (142, '        min_drawn_norm: float = 1e-2,'), (144, '        norm_to_opacity_func=None,'), (145, '        norm_to_rgb_func=None,'), (152, '        self.min_drawn_norm = min_drawn_norm'), (154, '        self.norm_to_rgb_func = norm_to_rgb_func'), (156, '        if max_vect_len is not None:'), (157, '            self.max_vect_len = max_vect_len'), (159, '            densities = np.array([x_density, y_density, z_density])'), (160, '            dims = np.array([width, height, depth])'), (161, '            self.max_vect_len = 1.0 / densities[dims > 0].mean()'), (162, ''), (163, '        if sample_points is None:'), (164, '            self.sample_points = self.get_sample_points('), (165, '                center, width, height, depth,'), (166, '                x_density, y_density, z_density'), (167, '            )'), (169, '            self.sample_points = sample_points'), (171, '        self.init_base_stroke_width_array(len(self.sample_points))'), (180, '        n_samples = len(self.sample_points)'), (214, '    def set_sample_points(self, sample_points: Vect3Array):'), (215, '        self.sample_points = sample_points'), (233, '        samples = self.sample_points'), (235, '        # Get raw outputs and lengths'), (236, '        outputs = self.func(samples)'), (237, '        norms = np.linalg.norm(outputs, axis=1)[:, np.newaxis]'), (239, '        # How long should the arrows be drawn?'), (240, '        max_len = self.max_vect_len'), (242, '            drawn_norms = max_len * np.tanh(norms / max_len)'), (244, '            drawn_norms = norms'), (248, '        dist_to_head_base = np.clip(drawn_norms - tip_len, 0, np.inf)'), (251, '        unit_outputs = np.zeros_like(outputs)'), (252, '        np.true_divide(outputs, norms, out=unit_outputs, where=(norms > self.min_drawn_norm))'), (253, ''), (255, '        points[0::8] = samples'), (256, '        points[2::8] = samples + dist_to_head_base * unit_outputs'), (258, '        points[6::8] = samples + drawn_norms * unit_outputs'), (272, '                np.repeat(norms, 8)[:-1]'), (273, '            )'), (274, '        if self.norm_to_rgb_func is not None:'), (275, '            self.get_stroke_colors()'), (276, ""            self.data['stroke_rgba'][:, :3] = self.norm_to_rgb_func(""), (277, '                np.repeat(norms, 8)[:-1]'), (324, '        self.value_to_rgb = get_rgb_gradient_function('), (328, '        samples = get_sample_points_from_coordinate_system('), (441, '        sample_coords = get_sample_points_from_coordinate_system(')]}",58,58
manimlib/utils/color.py,manimlib/utils/color.py,64ae1364ca25550873c5cc37e2ef30756de9469d,b84376d6fd08435f5ab7b55c0592e3232f822c4f,Update the Vector Field interface,"{'added': [(17, '    from typing import Iterable, Sequence, Callable'), (18, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Vect4Array, NDArray'), (137, 'def get_colormap_from_colors(colors: Iterable[ManimColor]) -> Callable[[Sequence[float]], Vect4Array]:'), (138, '    """"""'), (139, '    Returns a funciton which takes in values between 0 and 1, and returns'), (140, '    a corresponding list of rgba values'), (141, '    """"""'), (142, '    rgbas = np.array([color_to_rgba(color) for color in colors])'), (143, ''), (144, '    def func(values):'), (145, '        alphas = np.clip(values, 0, 1)'), (146, '        scaled_alphas = alphas * (len(rgbas) - 1)'), (147, '        indices = scaled_alphas.astype(int)'), (148, '        next_indices = np.clip(indices + 1, 0, len(rgbas) - 1)'), (149, '        inter_alphas = scaled_alphas % 1'), (150, '        inter_alphas = inter_alphas.repeat(4).reshape((len(indices), 4))'), (151, '        result = interpolate(rgbas[indices], rgbas[next_indices], inter_alphas)'), (152, '        return result'), (153, ''), (154, '    return func'), (155, ''), (156, ''), (157, 'def get_color_map(map_name: str) -> Callable[[Sequence[float]], Vect4Array]:'), (158, '    if map_name == ""3b1b_colormap"":'), (159, '        return get_colormap_from_colors(COLORMAP_3B1B)'), (160, '    return plt.get_cmap(map_name)'), (161, ''), (162, ''), (163, '# Delete this?')], 'deleted': [(17, '    from typing import Iterable, Sequence'), (18, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array')]}",31,31
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,0ad5a0e76e8c075380b94be753efd6f1eb47bf65,64ae1364ca25550873c5cc37e2ef30756de9469d,Further development on VectorField,"{'added': [(6, 'from scipy.integrate import solve_ivp'), (30, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect2Array, Vect3Array, Vect4Array'), (72, 'def ode_solution_points(function, state0, time, dt=0.01):'), (73, '    solution = solve_ivp('), (74, '        lambda t, state: function(state),'), (75, '        t_span=(0, time),'), (76, '        y0=state0,'), (77, '        t_eval=np.arange(0, time, dt)'), (78, '    )'), (79, '    return solution.y.T'), (80, ''), (81, ''), (142, '        func: Callable[[VectArray], VectArray],'), (147, '        color_map: Optional[Callable[[Sequence[float]], Vect4Array]] = None,'), (295, ""            self.data['stroke_rgba'][:, :3] = self.color_map(""), (297, '            )[:, :3]'), (327, '        func: Callable[[VectArray], VectArray],'), (333, '        solution_time: float = 3,'), (355, '        self.solution_time = solution_time'), (372, '    def point_func(self, points: Vect3Array) -> Vect3:'), (373, '        in_coords = np.array(self.coordinate_system.p2c(points)).T'), (374, '        out_coords = self.func(in_coords)'), (375, '        origin = self.coordinate_system.get_origin()'), (376, '        return self.coordinate_system.c2p(*out_coords.T) - origin'), (381, ''), (382, '        # Todo, it feels like coordinate system should just have'), (383, '        # the ODE solver built into it, no?'), (384, '        lines = []'), (385, '        for coords in self.get_sample_coords():'), (386, '            solution_coords = ode_solution_points(self.func, coords, self.solution_time, self.dt)'), (388, '            line.set_points_smoothly(self.coordinate_system.c2p(*solution_coords.T))'), (389, '            # TODO, account for arc length somehow?'), (390, '            line.virtual_time = self.solution_time'), (394, '    def get_sample_coords(self):'), (395, '        cs = self.coordinate_system'), (396, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (397, ''), (398, '        noise_factor = self.noise_factor'), (399, '        if noise_factor is None:'), (400, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5'), (401, ''), (402, '        return np.array(['), (403, '            coords + noise_factor * np.random.random(coords.shape)'), (404, '            for n in range(self.n_repeats)'), (405, '            for coords in sample_coords'), (406, '        ])'), (407, ''), (410, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (414, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5'), (453, '        rate_multiple: float = 1.0,'), (466, '                run_time=line.virtual_time / rate_multiple,'), (481, ''), (482, ''), (483, 'class OldVectorField(VGroup):'), (484, '    def __init__('), (485, '        self,'), (486, '        func: Callable[[float, float], Sequence[float]],'), (487, '        coordinate_system: CoordinateSystem,'), (488, '        step_multiple: float = 0.5,'), (489, '        magnitude_range: Tuple[float, float] = (0, 2),'), (490, '        color_map: str = ""3b1b_colormap"",'), (491, '        # Takes in actual norm, spits out displayed norm'), (492, '        length_func: Callable[[float], float] = lambda norm: 0.45 * sigmoid(norm),'), (493, '        opacity: float = 1.0,'), (494, '        vector_config: dict = dict(),'), (495, '        **kwargs'), (496, '    ):'), (497, '        super().__init__(**kwargs)'), (498, '        self.func = func'), (499, '        self.coordinate_system = coordinate_system'), (500, '        self.step_multiple = step_multiple'), (501, '        self.magnitude_range = magnitude_range'), (502, '        self.color_map = color_map'), (503, '        self.length_func = length_func'), (504, '        self.opacity = opacity'), (505, '        self.vector_config = dict(vector_config)'), (506, ''), (507, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (508, '            *self.magnitude_range, self.color_map,'), (509, '        )'), (510, ''), (511, '        samples = get_sample_coords('), (512, '            coordinate_system, self.step_multiple'), (513, '        )'), (514, '        self.add(*('), (515, '            self.get_vector(coords)'), (516, '            for coords in samples'), (517, '        ))'), (518, ''), (519, '    def get_vector(self, coords: Iterable[float], **kwargs) -> Arrow:'), (520, '        vector_config = merge_dicts_recursively('), (521, '            self.vector_config,'), (522, '            kwargs'), (523, '        )'), (524, ''), (525, '        output = np.array(self.func(*coords))'), (526, '        norm = get_norm(output)'), (527, '        if norm > 0:'), (528, '            output *= self.length_func(norm) / norm'), (529, ''), (530, '        origin = self.coordinate_system.get_origin()'), (531, '        _input = self.coordinate_system.c2p(*coords)'), (532, '        _output = self.coordinate_system.c2p(*output)'), (533, ''), (534, '        vect = Arrow('), (535, '            origin, _output, buff=0,'), (536, '            **vector_config'), (537, '        )'), (538, '        vect.shift(_input - origin)'), (539, '        vect.set_color('), (540, '            rgb_to_color(self.value_to_rgb(norm)),'), (541, '            opacity=self.opacity,'), (542, '        )'), (543, '        return vect')], 'deleted': [(29, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect3Array, Vect4Array'), (131, '        func: Callable[Sequence[float], Sequence[float]],'), (136, '        color_map: Optional[Callable[Sequence[float]], Vect4Array] = None,'), (284, ""            self.data['stroke_rgba'][:] = self.color_map(""), (286, '            )'), (313, 'class OldVectorField(VGroup):'), (314, '    def __init__('), (315, '        self,'), (316, '        func: Callable[[float, float], Sequence[float]],'), (317, '        coordinate_system: CoordinateSystem,'), (318, '        step_multiple: float = 0.5,'), (319, '        magnitude_range: Tuple[float, float] = (0, 2),'), (320, '        color_map: str = ""3b1b_colormap"",'), (321, '        # Takes in actual norm, spits out displayed norm'), (322, '        length_func: Callable[[float], float] = lambda norm: 0.45 * sigmoid(norm),'), (323, '        opacity: float = 1.0,'), (324, '        vector_config: dict = dict(),'), (325, '        **kwargs'), (326, '    ):'), (327, '        super().__init__(**kwargs)'), (328, '        self.func = func'), (329, '        self.coordinate_system = coordinate_system'), (330, '        self.step_multiple = step_multiple'), (331, '        self.magnitude_range = magnitude_range'), (332, '        self.color_map = color_map'), (333, '        self.length_func = length_func'), (334, '        self.opacity = opacity'), (335, '        self.vector_config = dict(vector_config)'), (336, ''), (337, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (338, '            *self.magnitude_range, self.color_map,'), (339, '        )'), (340, ''), (341, '        samples = get_sample_coords('), (342, '            coordinate_system, self.step_multiple'), (343, '        )'), (344, '        self.add(*('), (345, '            self.get_vector(coords)'), (346, '            for coords in samples'), (347, '        ))'), (348, ''), (349, '    def get_vector(self, coords: Iterable[float], **kwargs) -> Arrow:'), (350, '        vector_config = merge_dicts_recursively('), (351, '            self.vector_config,'), (352, '            kwargs'), (353, '        )'), (354, ''), (355, '        output = np.array(self.func(*coords))'), (356, '        norm = get_norm(output)'), (357, '        if norm > 0:'), (358, '            output *= self.length_func(norm) / norm'), (359, ''), (360, '        origin = self.coordinate_system.get_origin()'), (361, '        _input = self.coordinate_system.c2p(*coords)'), (362, '        _output = self.coordinate_system.c2p(*output)'), (363, ''), (364, '        vect = Arrow('), (365, '            origin, _output, buff=0,'), (366, '            **vector_config'), (367, '        )'), (368, '        vect.shift(_input - origin)'), (369, '        vect.set_color('), (370, '            rgb_to_color(self.value_to_rgb(norm)),'), (371, '            opacity=self.opacity,'), (372, '        )'), (373, '        return vect'), (374, ''), (375, ''), (379, '        func: Callable[[float, float], Sequence[float]],'), (422, '    def point_func(self, point: Vect3) -> Vect3:'), (423, '        in_coords = self.coordinate_system.p2c(point)'), (424, '        out_coords = self.func(*in_coords)'), (425, '        return self.coordinate_system.c2p(*out_coords)'), (430, '        for point in self.get_start_points():'), (431, '            points = [point]'), (432, '            total_arc_len = 0'), (433, '            time = 0'), (434, '            for x in range(self.max_time_steps):'), (435, '                time += self.dt'), (436, '                last_point = points[-1]'), (437, '                new_point = last_point + self.dt * (self.point_func(last_point) - origin)'), (438, '                points.append(new_point)'), (439, '                total_arc_len += get_norm(new_point - last_point)'), (440, '                if get_norm(last_point) > self.cutoff_norm:'), (441, '                    break'), (442, '                if total_arc_len > self.arc_len:'), (443, '                    break'), (445, '            line.virtual_time = time'), (446, '            step = max(1, int(len(points) / self.n_samples_per_line))'), (447, '            line.set_points_as_corners(points[::step])'), (448, '            line.make_smooth(approx=True)'), (454, '        sample_coords = get_sample_coords('), (455, '            cs, self.step_multiple,'), (456, '        )'), (460, '            noise_factor = cs.x_range[2] * self.step_multiple * 0.5'), (511, '                run_time=line.virtual_time,')]}",60,60
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,e80b9d0e47fd2078630a6a77836ecc29988ab6e7,0ad5a0e76e8c075380b94be753efd6f1eb47bf65,Less collision-prone file names for downloads,"{'added': [(4, 'from pathlib import Path'), (5, 'import hashlib'), (40, '        suffix = Path(file_name).suffix'), (41, ""        file_hash = hashlib.sha256(file_name.encode('utf-8')).hexdigest()[:32]""), (43, ''), (44, '        path = Path(folder, file_hash).with_suffix(suffix)')], 'deleted': [(38, '        stem, name = os.path.split(file_name)'), (40, '        path = os.path.join(folder, name)')]}",24,24
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,55b12c902ca8560ce6fcb6708501b87d1e6167a9,e80b9d0e47fd2078630a6a77836ecc29988ab6e7,Use density as a parameter instead of step_multiple,"{'added': [(126, '    density: float = 1.0'), (131, '        step /= density'), (136, 'def vectorize(pointwise_function: Callable[Tuple, Tuple]):'), (137, '    def v_func(coords_array: VectArray) -> VectArray:'), (138, '        return np.array([pointwise_function(*coords) for coords in coords_array])'), (139, ''), (140, '    return v_func'), (141, ''), (142, ''), (149, '        # Vectorized function: Takes in an array of coordinates, returns an array of outputs.'), (151, '        # Typically a set of Axes or NumberPlane'), (153, '        density: float = 2.0,  # Describe as a density instead?'), (175, '        self.sample_coords = get_sample_coords(coordinate_system, density)'), (338, '        density: float = 1.0,'), (361, '        self.density = density'), (405, '        sample_coords = get_sample_coords(cs, self.density)'), (409, '            noise_factor = (cs.get_x_unit_size() / self.density) * 0.5')], 'deleted': [(126, '    step_multiple: float = 1.0'), (131, '        step *= step_multiple'), (144, '        step_multiple: float = 0.5,'), (166, '        self.sample_coords = get_sample_coords(coordinate_system, step_multiple)'), (329, '        step_multiple: float = 0.5,'), (352, '        self.step_multiple = step_multiple'), (396, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (400, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5')]}",63,63
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,753a042dbe5d6987c6036216c69eee9bb7b90fe4,55b12c902ca8560ce6fcb6708501b87d1e6167a9,Remove unused method,"{'added': [], 'deleted': [(417, '    def get_start_points(self) -> Vect3Array:'), (418, '        cs = self.coordinate_system'), (419, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (420, ''), (421, '        noise_factor = self.noise_factor'), (422, '        if noise_factor is None:'), (423, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5'), (424, ''), (425, '        return np.array(['), (426, '            cs.c2p(*coords) + noise_factor * np.random.random(3)'), (427, '            for n in range(self.n_repeats)'), (428, '            for coords in sample_coords'), (429, '        ])'), (430, '')]}",59,59
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,1d0deb8a335490697ed013093aaee21296851319,753a042dbe5d6987c6036216c69eee9bb7b90fe4,Remove OldVectorfield,"{'added': [], 'deleted': [(476, ''), (477, ''), (478, 'class OldVectorField(VGroup):'), (479, '    def __init__('), (480, '        self,'), (481, '        func: Callable[[float, float], Sequence[float]],'), (482, '        coordinate_system: CoordinateSystem,'), (483, '        step_multiple: float = 0.5,'), (484, '        magnitude_range: Tuple[float, float] = (0, 2),'), (485, '        color_map: str = ""3b1b_colormap"",'), (486, '        # Takes in actual norm, spits out displayed norm'), (487, '        length_func: Callable[[float], float] = lambda norm: 0.45 * sigmoid(norm),'), (488, '        opacity: float = 1.0,'), (489, '        vector_config: dict = dict(),'), (490, '        **kwargs'), (491, '    ):'), (492, '        super().__init__(**kwargs)'), (493, '        self.func = func'), (494, '        self.coordinate_system = coordinate_system'), (495, '        self.step_multiple = step_multiple'), (496, '        self.magnitude_range = magnitude_range'), (497, '        self.color_map = color_map'), (498, '        self.length_func = length_func'), (499, '        self.opacity = opacity'), (500, '        self.vector_config = dict(vector_config)'), (501, ''), (502, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (503, '            *self.magnitude_range, self.color_map,'), (504, '        )'), (505, ''), (506, '        samples = get_sample_coords('), (507, '            coordinate_system, self.step_multiple'), (508, '        )'), (509, '        self.add(*('), (510, '            self.get_vector(coords)'), (511, '            for coords in samples'), (512, '        ))'), (513, ''), (514, '    def get_vector(self, coords: Iterable[float], **kwargs) -> Arrow:'), (515, '        vector_config = merge_dicts_recursively('), (516, '            self.vector_config,'), (517, '            kwargs'), (518, '        )'), (519, ''), (520, '        output = np.array(self.func(*coords))'), (521, '        norm = get_norm(output)'), (522, '        if norm > 0:'), (523, '            output *= self.length_func(norm) / norm'), (524, ''), (525, '        origin = self.coordinate_system.get_origin()'), (526, '        _input = self.coordinate_system.c2p(*coords)'), (527, '        _output = self.coordinate_system.c2p(*output)'), (528, ''), (529, '        vect = Arrow('), (530, '            origin, _output, buff=0,'), (531, '            **vector_config'), (532, '        )'), (533, '        vect.shift(_input - origin)'), (534, '        vect.set_color('), (535, '            rgb_to_color(self.value_to_rgb(norm)),'), (536, '            opacity=self.opacity,'), (537, '        )'), (538, '        return vect')]}",55,55
manimlib/utils/color.py,manimlib/utils/color.py,ed2f9f3305fd73dd5eb8bf7a4691fc735e2342b4,1d0deb8a335490697ed013093aaee21296851319,Fix import of pyplot,"{'added': [(8, 'from matplotlib import pyplot'), (161, '    return pyplot.get_cmap(map_name)')], 'deleted': [(160, '    return plt.get_cmap(map_name)')]}",31,31
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,90ab2f64bb781c31641b5d73ecff498cd36cc858,ed2f9f3305fd73dd5eb8bf7a4691fc735e2342b4,Clean up style arguments on VectorField,"{'added': [(153, '        density: float = 2.0,'), (155, '        color: Optional[ManimColor] = None,'), (159, '        stroke_width: float = 3,'), (163, '        max_vect_len_to_step_size: float = 0.8,'), (180, '            step_size = get_norm(self.sample_points[1] - self.sample_points[0])'), (181, '            self.max_displayed_vect_len = max_vect_len_to_step_size * step_size'), (192, '        if color is not None:'), (194, '        else:'), (195, '            self.color_map = color_map or get_color_map(color_map_name)'), (204, '        self.set_stroke(color, stroke_width)'), (205, '        self.update_vectors()'), (207, '    def init_points(self):')], 'deleted': [(153, '        density: float = 2.0,  # Describe as a density instead?'), (157, '        stroke_color: ManimColor = BLUE,'), (159, '        stroke_width: float = 2,'), (179, '            self.max_displayed_vect_len = get_norm(self.sample_points[1] - self.sample_points[0])'), (190, '        if color_map is not None:'), (191, '            self.color_map = color_map'), (192, '        elif color_map_name is not None:'), (193, '            self.color_map = get_color_map(color_map_name)'), (194, '        else:'), (200, '            stroke_color=stroke_color,'), (208, '        self.set_stroke(width=stroke_width)'), (210, '        self.update_vectors()')]}",56,56
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,c6b9826f847eafbde96539f828d060d916cae34d,90ab2f64bb781c31641b5d73ecff498cd36cc858,Update TimeVaryingVectorField to match new VectorField configuration,"{'added': [(321, '        time_func: Callable[[VectArray, float], VectArray],'), (322, '        coordinate_system: CoordinateSystem,'), (326, ''), (327, '        def func(coords):'), (328, '            return time_func(coords, self.time)'), (329, ''), (330, '        super().__init__(func, coordinate_system, **kwargs)'), (332, '        self.always.update_vectors()')], 'deleted': [(321, '        time_func,'), (325, '        super().__init__(func=lambda p: time_func(p, self.time), **kwargs)'), (327, '        always(self.update_vectors)')]}",57,57
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,5b88d2347cdf3ba1d1670c64a96568aa4602847f,c6b9826f847eafbde96539f828d060d916cae34d,"Allow for LaTeX in DecimalNumber, e.g. for units","{'added': [(25, '    if ""\\\\"" in char:'), (26, '        # This is for when the ""character"" is a LaTeX command'), (27, '        # like ^\\circ or \\dots'), (28, '        return Tex(char, **text_config)'), (29, '    else:'), (30, '        return Text(char, **text_config)')], 'deleted': [(25, '    return Text(char, **text_config)')]}",42,42
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,e19ceaaff020b94825e928d2709e26aa4d863395,5b88d2347cdf3ba1d1670c64a96568aa4602847f,Have TexMobject keep track of font_size,"{'added': [(51, '        self.font_size = font_size'), (90, '    def _handle_scale_side_effects(self, scale_factor: float) -> Self:'), (91, '        self.font_size *= scale_factor'), (92, '        return self'), (93, '')], 'deleted': []}",53,53
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,54c8a9014b1b5bca7a3020335f79179e870b0d5b,e19ceaaff020b94825e928d2709e26aa4d863395,Add scale_stroke_with_zoom option to VMobject,"{'added': [(97, '        scale_stroke_with_zoom: bool = False,'), (114, '        self.scale_stroke_with_zoom = scale_stroke_with_zoom'), (131, '        self.uniforms.update('), (132, '            anti_alias_width=self.anti_alias_width,'), (133, '            joint_type=JOINT_TYPE_MAP[self.joint_type],'), (134, '            flat_stroke=float(self.flat_stroke),'), (135, '            scale_stroke_with_zoom=float(self.scale_stroke_with_zoom)'), (136, '        )'), (407, '    def set_scale_stroke_with_zoom(self, scale_stroke_with_zoom: bool = True, recurse: bool = True) -> Self:'), (408, '        self.set_uniform(recurse, scale_stroke_with_zoom=float(scale_stroke_with_zoom))'), (409, '        pass'), (410, ''), (411, '    def get_scale_stroke_with_zoom(self) -> bool:'), (412, '        return self.uniforms[""flat_stroke""] == 1.0'), (413, '')], 'deleted': [(129, '        self.uniforms[""anti_alias_width""] = self.anti_alias_width'), (130, '        self.uniforms[""joint_type""] = JOINT_TYPE_MAP[self.joint_type]'), (131, '        self.uniforms[""flat_stroke""] = float(self.flat_stroke)')]}",289,289
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,54c8a9014b1b5bca7a3020335f79179e870b0d5b,e19ceaaff020b94825e928d2709e26aa4d863395,Add scale_stroke_with_zoom option to VMobject,"{'added': [(5, 'uniform float scale_stroke_with_zoom;'), (26, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, scale_stroke_with_zoom);')], 'deleted': [(25, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')]}",,
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,9cd6a87ff88dd7f1805e0394661d79f63b67013c,54c8a9014b1b5bca7a3020335f79179e870b0d5b,Make sure VMobject uniform flat_stroke matches the use inside the quadratic_bezier/stroke/geom.glsl code,"{'added': [(7, 'uniform float flat_stroke;'), (65, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve, bool draw_flat){'), (71, '    vec3 unit_tan = normalize(draw_flat ? tangent : project(tangent, unit_normal));'), (96, '    if (!draw_flat){'), (131, '    bool draw_flat'), (134, '    vec3 unit_normal = draw_flat ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve, draw_flat);'), (166, '    bool draw_flat = bool(flat_stroke) || bool(is_fixed_in_frame);'), (210, '            inside_curve, draw_flat')], 'deleted': [(7, 'uniform float flat_stroke_float;'), (65, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve, bool flat_stroke){'), (71, '    vec3 unit_tan = normalize(flat_stroke ? tangent : project(tangent, unit_normal));'), (96, '    if (!flat_stroke){'), (131, '    bool flat_stroke'), (134, '    vec3 unit_normal = flat_stroke ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve, flat_stroke);'), (166, '    bool flat_stroke = bool(flat_stroke_float) || bool(is_fixed_in_frame);'), (210, '            inside_curve, flat_stroke')]}",,
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,dd51b696e5c473c55dc20ed51ed7ad0cefee29b9,9cd6a87ff88dd7f1805e0394661d79f63b67013c,Only apply non-flat-stroke correction in non-zero joint angle vertices,"{'added': [(81, '    if(joint_angle != 0){'), (82, '        float alignment = abs(dot(normalize(tangent), unit_normal));'), (83, '        float alignment_threshold = 0.97;  // This could maybe be chosen in a more principled way based on stroke width'), (84, '        if (alignment > alignment_threshold) {'), (85, '            vec3 perp = normalize(cross(v_unit_normal[1], tangent));'), (86, '            step = mix(step, project(step, perp), smoothstep(alignment_threshold, 1.0, alignment));'), (87, '        }')], 'deleted': [(81, '    float alignment = abs(dot(normalize(tangent), unit_normal));'), (82, '    float alignment_threshold = 0.97;  // This could maybe be chosen in a more principled way based on stroke width'), (83, '    if (alignment > alignment_threshold) {'), (84, '        vec3 perp = normalize(cross(v_unit_normal[1], tangent));'), (85, '        step = mix(step, project(step, perp), smoothstep(alignment_threshold, 1.0, alignment));')]}",,
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,fbce0b132ccbdd05da903d7147b6583f10ef6cc4,dd51b696e5c473c55dc20ed51ed7ad0cefee29b9,"Temporary band-aide for degenerate normal vector calculations

This solution is a bit too specific to the case of spheres.","{'added': [(14, 'const float EPSILON = 1e-10;'), (15, ''), (18, '    vec3 du = (du_point - point);'), (19, '    vec3 dv = (dv_point - point);'), (20, '    vec3 normal = cross(du, dv);'), (21, '    float mag = length(normal);'), (22, '    vec3 unit_normal = (mag < EPSILON) ? vec3(0, 0, sign(point.z)) : normal / mag;'), (23, '    v_color = finalize_color(rgba, point, unit_normal);')], 'deleted': [(16, '    vec3 normal = cross(normalize(du_point - point), normalize(dv_point - point));'), (17, '    v_color = finalize_color(rgba, point, normalize(normal));')]}",,
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,85638d88dc7f26d0e5de8074465c754821c295b9,fbce0b132ccbdd05da903d7147b6583f10ef6cc4,Update parameter range for sphere,"{'added': [(97, '        v_range: Tuple[float, float] = (0, PI),')], 'deleted': [(97, '        v_range: Tuple[float, float] = (1e-5, PI - 1e-5),'), (161, '')]}",32,32
manimlib/__main__.py,manimlib/__main__.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug ð)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","{'added': [(6, 'from manimlib.reload_manager import reload_manager'), (10, '    """"""'), (11, '    Main entry point for ManimGL.'), (12, '    """"""'), (23, '        return'), (25, '    reload_manager.args = args'), (26, '    reload_manager.run()')], 'deleted': [(4, 'import manimlib.extract_scene'), (20, '    else:'), (21, '        config = manimlib.config.get_configuration(args)'), (22, '        scenes = manimlib.extract_scene.main(config)'), (24, '        for scene in scenes:'), (25, '            scene.run()')]}",5,5
,manimlib/reload_manager.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug ð)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","{'added': [(1, 'from typing import Any'), (2, 'from IPython.terminal.embed import KillEmbedded'), (3, ''), (4, ''), (5, 'class ReloadManager:'), (6, '    """"""'), (7, '    Manages the loading and running of scenes and is called directly from the'), (8, '    main entry point of ManimGL.'), (9, ''), (10, '    The name ""reload"" comes from the fact that this class handles the'), (11, '    reinitialization of scenes when requested by the user via the `reload()`'), (12, '    command in the IPython shell.'), (13, '    """"""'), (14, ''), (15, '    args: Any = None'), (16, '    scenes: list[Any] = []'), (17, '    window = None'), (18, ''), (19, '    # The line number to load the scene from when reloading'), (20, '    start_at_line = None'), (21, ''), (22, '    def set_new_start_at_line(self, start_at_line):'), (23, '        """"""'), (24, '        Sets/Updates the line number to load the scene from when reloading.'), (25, '        """"""'), (26, '        self.start_at_line = start_at_line'), (27, ''), (28, '    def run(self):'), (29, '        """"""'), (30, '        Runs the scenes in a loop and detects when a scene reload is requested.'), (31, '        """"""'), (32, '        while True:'), (33, '            try:'), (34, '                # blocking call since a scene will init an IPython shell()'), (35, '                self.retrieve_scenes_and_run(self.start_at_line)'), (36, '                return'), (37, '            except KillEmbedded:'), (38, '                # Requested via the `exit_raise` IPython runline magic'), (39, '                # by means of our scene.reload() command'), (40, '                print(""Reloading..."")'), (41, ''), (42, '                for scene in self.scenes:'), (43, '                    scene.tear_down()'), (44, ''), (45, '                self.scenes = []'), (46, ''), (47, '            except KeyboardInterrupt:'), (48, '                break'), (49, ''), (50, '    def retrieve_scenes_and_run(self, overwrite_start_at_line: int | None = None):'), (51, '        """"""'), (52, '        Creates a new configuration based on the CLI args and runs the scenes.'), (53, '        """"""'), (54, '        import manimlib.config'), (55, '        import manimlib.extract_scene'), (56, ''), (57, '        # Args'), (58, '        if self.args is None:'), (59, '            raise RuntimeError(""Fatal error: No args were passed to the ReloadManager"")'), (60, '        if overwrite_start_at_line is not None:'), (61, '            self.args.embed = str(overwrite_start_at_line)'), (62, ''), (63, '        # Args to Config'), (64, '        config = manimlib.config.get_configuration(self.args)'), (65, '        if self.window:'), (66, '            config[""existing_window""] = self.window  # see scene initialization'), (67, ''), (68, '        # Scenes'), (69, '        self.scenes = manimlib.extract_scene.main(config)'), (70, '        if len(self.scenes) == 0:'), (71, '            print(""No scenes found to run"")'), (72, '            return'), (73, ''), (74, '        # Find first available window'), (75, '        for scene in self.scenes:'), (76, '            if scene.window is not None:'), (77, '                self.window = scene.window'), (78, '                break'), (79, ''), (80, '        for scene in self.scenes:'), (81, '            scene.run()'), (82, ''), (83, ''), (84, 'reload_manager = ReloadManager()')], 'deleted': []}",,14
manimlib/scene/scene.py,manimlib/scene/scene.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug ð)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","{'added': [(31, 'from manimlib.reload_manager import reload_manager'), (43, 'from manimlib.window import Window'), (92, '        existing_window: Window | None = None,'), (111, '        # Initialize window, if applicable (and reuse window if provided during'), (112, '        # reload by means of the ReloadManager)'), (114, '            if existing_window:'), (115, '                self.window = existing_window'), (116, '                self.window.update_scene(self)'), (117, '            else:'), (118, '                self.window = Window(scene=self, **self.window_config)'), (119, '                self.camera_config[""fps""] = 30  # Where\'s that 30 from?'), (161, '    def get_window(self) -> Window | None:'), (162, '        return self.window'), (163, ''), (236, '        self.shell = shell'), (248, '            reload=self.reload,'), (772, '        if self.shell is None or self.window is None:'), (813, '        self.shell.run_cell(pasted)'), (998, '    def reload(self, start_at_line: int | None = None) -> None:'), (999, '        """"""'), (1000, '        Reloads the scene just like the `manimgl` command would do with the'), (1001, '        same arguments that were provided for the initial startup. This allows'), (1002, ""        for quick iteration during scene development since we don't have to exit""), (1003, '        the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (1004, '        open during the reload.'), (1005, ''), (1006, '        If `start_at_line` is provided, the scene will be reloaded at that line'), (1007, '        number. This corresponds to the `linemarker` param of the'), (1008, '        `config.get_module_with_inserted_embed_line()` method.'), (1009, ''), (1010, '        Before reload, the scene is cleared and the entire state is reset, such'), (1011, '        that we can start from a clean slate. This is taken care of by the'), (1012, '        ReloadManager, which will catch the error raised by the `exit_raise`'), (1013, '        magic command that we invoke here.'), (1014, '        Note that we cannot define a custom exception class for this error,'), (1015, '        since the IPython kernel will swallow any exception. While we can catch'), (1016, '        such an exception in our custom exception handler registered with the'), (1017, '        `set_custom_exc` method, we cannot break out of the IPython shell by'), (1018, '        this means.'), (1019, '        """"""'), (1020, '        reload_manager.set_new_start_at_line(start_at_line)'), (1021, '        self.shell.run_line_magic(""exit_raise"", """")'), (1022, '')], 'deleted': [(15, 'from IPython.core.getipython import get_ipython'), (109, '        # Initialize window, if applicable'), (111, '            from manimlib.window import Window'), (112, '            self.window = Window(scene=self, **self.window_config)'), (114, '            self.camera_config[""fps""] = 30  # Where\'s that 30 from?'), (761, '        shell = get_ipython()'), (762, '        if shell is None or self.window is None:'), (803, '        shell.run_cell(pasted)')]}",241,241
manimlib/window.py,manimlib/window.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug ð)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","{'added': [(41, '        self.update_scene(scene)'), (42, ''), (43, '    def update_scene(self, scene: Scene):'), (44, '        """"""'), (45, '        Resets the state and updates the scene associated to this window.'), (46, ''), (47, '        This is necessary when we want to reuse an *existing* window after a'), (48, '        `scene.reload()` was requested, which will create new scene instances.'), (49, '        """"""'), (50, '        self.pressed_keys.clear()'), (53, '        self.scene = scene'), (54, '        self.title = str(scene)'), (55, ''), (56, '        self.init_mgl_context()'), (57, ''), (60, '        mglw.activate_context(window=self, ctx=self.ctx)')], 'deleted': [(38, '        self.scene = scene'), (40, '        self.title = str(scene)'), (45, '        mglw.activate_context(window=self)')]}",25,25
README.md,README.md,8239f1bf3510cd327c58d470b3808b5f4ce33720,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,Update README.md for better readability (#2246),"{'added': [(18, '> [!Warning]'), (19, '> **WARNING:** These instructions are for ManimGL _only_. Trying to use these instructions to install [Manim Community/manim](https://github.com/ManimCommunity/manim) or instructions there to install this version will cause problems. You should first decide which version you wish to install, then only follow the instructions for your desired version.'), (20, ''), (21, '> [!Note]')], 'deleted': [(18, '> **WARNING:** These instructions are for ManimGL _only_. Trying to use these instructions to install [ManimCommunity/manim](https://github.com/ManimCommunity/manim) or instructions there to install this version will cause problems. You should first decide which version you wish to install, then only follow the instructions for your desired version.'), (19, '>')]}",,
manimlib/reload_manager.py,manimlib/reload_manager.py,d78fe9374397ba73f16c7ba21b1b1b879a73400b,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Remove print(""Reloading..."")","{'added': [], 'deleted': [(40, '                print(""Reloading..."")'), (41, '')]}",14,14
manimlib/scene/scene.py,manimlib/scene/scene.py,f8280a12be5c80faffbcf2979cb2eef9c3a31fdc,d78fe9374397ba73f16c7ba21b1b1b879a73400b,"Change where exception mode is set, to be quieter","{'added': [(235, '        shell = InteractiveShellEmbed('), (236, '            user_module=module,'), (237, '            display_banner=False,'), (238, '            xmode=self.embed_exception_mode'), (239, '        )')], 'deleted': [(235, '        shell = InteractiveShellEmbed(user_module=module)'), (291, '        # Set desired exception mode'), (292, '        shell.magic(f""xmode {self.embed_exception_mode}"")'), (293, '')]}",241,241
manimlib/config.py,manimlib/config.py,671a31b298ede5e51bf91f8b143813e1079873e0,f8280a12be5c80faffbcf2979cb2eef9c3a31fdc,Add default fallback monitor for when no monitors are detected,"{'added': [(438, '        # Default fallback'), (439, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]')], 'deleted': [(438, '        pass')]}",80,80
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","{'added': [(69, '        svg_string = self.get_svg_string()'), (70, '        super().__init__(svg_string=svg_string, **kwargs)'), (75, '    def get_svg_string(self, is_labelled: bool = False) -> str:'), (76, '        content = self.get_content(is_labelled or self.use_labelled_svg)'), (77, '        return self.get_svg_string_by_content(content)'), (80, '    def get_svg_string_by_content(self, content: str) -> str:'), (113, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (114, '        submobs = super().mobjects_from_svg_string(svg_string)')], 'deleted': [(69, '        super().__init__(**kwargs)'), (74, '    def get_file_path(self, is_labelled: bool = False) -> str:'), (75, '        is_labelled = is_labelled or self.use_labelled_svg'), (76, '        return self.get_file_path_by_content(self.get_content(is_labelled))'), (79, '    def get_file_path_by_content(self, content: str) -> str:'), (112, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (113, '        submobs = super().mobjects_from_file(file_path)')]}",129,129
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","{'added': [(9, 'from pathlib import Path'), (47, '        svg_string: str = """",'), (72, '        if svg_string != """":'), (73, '            self.svg_string = svg_string'), (74, '        elif file_name != """":'), (75, '            self.svg_string = self.file_name_to_svg_string(file_name)'), (76, '        elif self.file_name != """":'), (77, '            self.file_name_to_svg_string(self.file_name)'), (78, '        else:'), (79, '            raise Exception(""Must specify either a file_name or svg_string SVGMobject"")'), (80, ''), (84, '        super().__init__(**kwargs)'), (114, '            submobs = self.mobjects_from_svg_string(self.svg_string)'), (128, '            self.svg_string'), (131, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (132, '        element_tree = ET.ElementTree(ET.fromstring(svg_string))'), (144, '    def file_name_to_svg_string(self, file_name: str) -> str:'), (145, '        return Path(get_full_vector_image_path(file_name)).read_text()')], 'deleted': [(70, '        self.file_name = file_name or self.file_name'), (74, '        super().__init__(**kwargs )'), (104, '            submobs = self.mobjects_from_file(self.get_file_path())'), (118, '            self.file_name'), (121, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (122, '        element_tree = ET.parse(file_path)'), (134, '    def get_file_path(self) -> str:'), (135, '        if self.file_name is None:'), (136, '            raise Exception(""Must specify file for SVGMobject"")'), (137, '        return get_full_vector_image_path(self.file_name)')]}",60,60
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","{'added': [(4, 'from pathlib import Path'), (86, '    def get_svg_string_by_content(self, content: str) -> str:'), (87, '        # TODO, implement this without writing to a file'), (88, '        file_path = tex_content_to_svg_file('), (91, '        return Path(file_path).read_text()')], 'deleted': [(85, '    def get_file_path_by_content(self, content: str) -> str:'), (86, '        return tex_content_to_svg_file(')]}",53,53
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","{'added': [(7, 'import tempfile'), (8, 'import hashlib'), (174, '    def get_svg_string_by_content(self, content: str) -> str:'), (175, '        # TODO, check the cache'), (183, '        # hash_string(hash_content)'), (184, '        key = hashlib.sha256(hash_content.encode()).hexdigest()'), (185, '        return self.markup_to_svg_string(content)'), (187, '    def markup_to_svg_string(self, markup_str: str) -> str:'), (198, ""        with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (199, '            manimpango.MarkupUtils.text2svg('), (200, '                text=markup_str,'), (201, '                font="""",                     # Already handled'), (202, '                slant=""NORMAL"",              # Already handled'), (203, '                weight=""NORMAL"",             # Already handled'), (204, '                size=1,                      # Already handled'), (205, '                _=0,                         # Empty parameter'), (206, '                disable_liga=False,'), (207, '                file_name=tmp.name,'), (208, '                START_X=0,'), (209, '                START_Y=0,'), (210, '                width=DEFAULT_CANVAS_WIDTH,'), (211, '                height=DEFAULT_CANVAS_HEIGHT,'), (212, '                justify=self.justify,'), (213, '                indent=self.indent,'), (214, '                line_spacing=None,           # Already handled'), (215, '                alignment=alignment,'), (216, '                pango_width=pango_width'), (217, '            )'), (218, ''), (219, '            # Read the contents'), (220, '            tmp.seek(0)'), (221, '            return tmp.read()')], 'deleted': [(172, '    def get_file_path_by_content(self, content: str) -> str:'), (180, '        svg_file = os.path.join('), (181, '            get_text_dir(), hash_string(hash_content) + "".svg""'), (182, '        )'), (183, '        if not os.path.exists(svg_file):'), (184, '            self.markup_to_svg(content, svg_file)'), (185, '        return svg_file'), (187, '    def markup_to_svg(self, markup_str: str, file_name: str) -> str:'), (198, '        return manimpango.MarkupUtils.text2svg('), (199, '            text=markup_str,'), (200, '            font="""",                     # Already handled'), (201, '            slant=""NORMAL"",              # Already handled'), (202, '            weight=""NORMAL"",             # Already handled'), (203, '            size=1,                      # Already handled'), (204, '            _=0,                         # Empty parameter'), (205, '            disable_liga=False,'), (206, '            file_name=file_name,'), (207, '            START_X=0,'), (208, '            START_Y=0,'), (209, '            width=DEFAULT_CANVAS_WIDTH,'), (210, '            height=DEFAULT_CANVAS_HEIGHT,'), (211, '            justify=self.justify,'), (212, '            indent=self.indent,'), (213, '            line_spacing=None,           # Already handled'), (214, '            alignment=alignment,'), (215, '            pango_width=pango_width'), (216, '        )')]}",76,76
manimlib/__init__.py,manimlib/__init__.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","{'added': [(64, 'from manimlib.utils.cache import *')], 'deleted': []}",0,0
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","{'added': [(10, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (79, '    def get_svg_string_by_content(self, content: str) -> str:'), (80, '        return get_cached_value('), (81, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (82, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),'), (83, '            message=f""Writing {self.tex_string}...""')], 'deleted': [(10, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (79, '    def get_file_path(self) -> str:'), (80, '        content = self.get_tex_file_body(self.tex_string)'), (81, '        file_path = tex_content_to_svg_file('), (82, '            content, self.template, self.additional_preamble, self.tex_string'), (84, '        return file_path')]}",60,60
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","{'added': [], 'deleted': [(23, 'from manimlib.utils.simple_functions import hash_string')]}",60,60
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","{'added': [(9, 'from manimlib.utils.cache import get_cached_value'), (12, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (14, 'from manimlib.utils.simple_functions import hash_string'), (89, '        return get_cached_value('), (90, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (91, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),'), (92, '            message=f""Writing {self.tex_string}...""')], 'deleted': [(11, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (87, '        # TODO, implement this without writing to a file'), (88, '        file_path = tex_content_to_svg_file('), (89, '            content, self.template, self.additional_preamble, self.tex_string'), (91, '        return Path(file_path).read_text()')]}",53,53
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","{'added': [(19, 'from manimlib.utils.cache import get_cached_value'), (22, 'from manimlib.utils.customization import get_customization'), (176, '        key = hash_string(str(('), (182, '        )))'), (183, '        return get_cached_value(key, lambda: self.markup_to_svg_string(content))')], 'deleted': [(19, 'from manimlib.utils.customization import get_customization'), (175, '        # TODO, check the cache'), (176, '        hash_content = str(('), (182, '        ))'), (183, '        # hash_string(hash_content)'), (184, '        key = hashlib.sha256(hash_content.encode()).hexdigest()'), (185, '        return self.markup_to_svg_string(content)')]}",76,76
,manimlib/utils/cache.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","{'added': [(1, 'import appdirs'), (2, 'import os'), (3, 'from diskcache import Cache'), (4, 'from contextlib import contextmanager'), (5, ''), (6, ''), (7, 'CACHE_SIZE = 1e9  # 1 Gig'), (8, ''), (9, ''), (10, 'def get_cached_value(key, value_func, message=""""):'), (11, '    cache_dir = appdirs.user_cache_dir(""manim"")'), (12, '    cache = Cache(cache_dir, size_limit=CACHE_SIZE)'), (13, ''), (14, '    value = cache.get(key)'), (15, '    if value is None:'), (16, '        with display_during_execution(message):'), (17, '            value = value_func()'), (18, '        cache.set(key, value)'), (19, '    return value'), (20, ''), (21, ''), (22, '@contextmanager'), (23, 'def display_during_execution(message: str):'), (24, '    # Merge into a single line'), (25, '    to_print = message.replace(""\\n"", "" "")'), (26, '    max_characters = os.get_terminal_size().columns - 1'), (27, '    if len(to_print) > max_characters:'), (28, '        to_print = to_print[:max_characters - 3] + ""...""'), (29, '    try:'), (30, '        print(to_print, end=""\\r"")'), (31, '        yield'), (32, '    finally:'), (33, '        print("" "" * len(to_print), end=""\\r"")')], 'deleted': []}",,5
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","{'added': [(7, 'from pathlib import Path'), (8, 'import tempfile'), (9, ''), (56, 'def tex_to_svg('), (57, '    content: str,'), (58, '    template: str,'), (59, '    additional_preamble: str,'), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (81, '        create_tex_svg(full_tex, tmp.name, compiler)'), (82, '        # Read the contents'), (83, '        tmp.seek(0)'), (84, '        return tmp.read()')], 'deleted': [(3, 'from contextlib import contextmanager'), (54, 'def tex_content_to_svg_file('), (55, '    content: str, template: str, additional_preamble: str,'), (56, '    short_tex: str'), (77, '    svg_file = os.path.join('), (78, '        get_tex_dir(), hash_string(full_tex) + "".svg""'), (79, '    )'), (80, '    if not os.path.exists(svg_file):'), (81, ""        # If svg doesn't exist, create it""), (82, '        with display_during_execution(""Writing "" + short_tex):'), (83, '            create_tex_svg(full_tex, svg_file, compiler)'), (84, '    return svg_file'), (148, '# TODO, perhaps this should live elsewhere'), (149, '@contextmanager'), (150, 'def display_during_execution(message: str):'), (151, '    # Merge into a single line'), (152, '    to_print = message.replace(""\\n"", "" "")'), (153, '    max_characters = os.get_terminal_size().columns - 1'), (154, '    if len(to_print) > max_characters:'), (155, '        to_print = to_print[:max_characters - 3] + ""...""'), (156, '    try:'), (157, '        print(to_print, end=""\\r"")'), (158, '        yield'), (159, '    finally:'), (160, '        print("" "" * len(to_print), end=""\\r"")'), (161, ''), (162, '')]}",15,15
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,ac01b144e8d1916645122f40885f816aa8f7e64c,129e512b0c1258de621eba14e01594dfa1c5847b,Clean up tex_file_writing,"{'added': [(10, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (82, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),')], 'deleted': [(10, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (82, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),')]}",60,60
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,ac01b144e8d1916645122f40885f816aa8f7e64c,129e512b0c1258de621eba14e01594dfa1c5847b,Clean up tex_file_writing,"{'added': [(12, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (91, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),')], 'deleted': [(12, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (91, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),')]}",53,53
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,ac01b144e8d1916645122f40885f816aa8f7e64c,129e512b0c1258de621eba14e01594dfa1c5847b,Clean up tex_file_writing,"{'added': [(6, 'import subprocess'), (23, '    template_path = os.path.join(get_manim_dir(), ""manimlib"", ""tex_templates.yml"")'), (24, '    with open(template_path, encoding=""utf-8"") as tex_templates_file:'), (56, 'def get_full_tex(content: str, preamble: str = """"):'), (57, '    return ""\\n\\n"".join(('), (66, 'def latex_to_svg('), (67, '    latex: str,'), (68, '    template: str = """",'), (69, '    additional_preamble: str = """"'), (70, ') -> str:'), (71, '    """"""Convert LaTeX string to SVG string.'), (72, ''), (73, '    Args:'), (74, '        latex: LaTeX source code'), (75, '        template: Path to a template LaTeX file'), (76, '        additional_preamble: String including any added ""\\\\usepackage{...}"" style imports'), (77, ''), (78, '    Returns:'), (79, '        str: SVG source code'), (80, ''), (81, '    Raises:'), (82, '        LatexError: If LaTeX compilation fails'), (83, '        NotImplementedError: If compiler is not supported'), (84, '    """"""'), (85, '    tex_config = get_tex_config()'), (86, '    if template and template != tex_config[""template""]:'), (87, '        tex_config = get_tex_template_config(template)'), (88, ''), (89, '    compiler = tex_config[""compiler""]'), (98, '        raise NotImplementedError(f""Compiler \'{compiler}\' is not implemented"")'), (99, ''), (100, '    preamble = tex_config[""preamble""] + ""\\n"" + additional_preamble'), (101, '    full_tex = get_full_tex(latex, preamble)'), (102, ''), (103, '    # Write intermediate files to a temporary directory'), (104, '    with tempfile.TemporaryDirectory() as temp_dir:'), (105, '        base_path = os.path.join(temp_dir, ""working"")'), (106, '        tex_path = base_path + "".tex""'), (107, '        dvi_path = base_path + dvi_ext'), (108, ''), (109, '        # Write tex file'), (110, '        with open(tex_path, ""w"", encoding=""utf-8"") as tex_file:'), (111, '            tex_file.write(full_tex)'), (112, ''), (113, '        # Run latex compiler'), (114, '        process = subprocess.run('), (115, '            ['), (116, '                program.split()[0],  # Split for xelatex case'), (117, '                ""-interaction=batchmode"",'), (118, '                ""-halt-on-error"",'), (119, '                ""-output-directory="" + temp_dir,'), (120, '                tex_path'), (121, '            ] + ([""--no-pdf""] if compiler == ""xelatex"" else []),'), (122, '            capture_output=True,'), (123, '            text=True'), (126, '        if process.returncode != 0:'), (127, '            # Handle error'), (128, '            error_str = """"'), (129, '            log_path = base_path + "".log""'), (130, '            if os.path.exists(log_path):'), (131, '                with open(log_path, ""r"", encoding=""utf-8"") as log_file:'), (132, '                    content = log_file.read()'), (133, '                    error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (134, '                    if error_match:'), (135, '                        error_str = error_match.group()'), (136, '            raise LatexError(error_str or ""LaTeX compilation failed"")'), (137, ''), (138, '        # Run dvisvgm and capture output directly'), (139, '        process = subprocess.run('), (140, '            ['), (141, '                ""dvisvgm"",'), (142, '                dvi_path,'), (143, '                ""-n"",  # no fonts'), (144, '                ""-v"", ""0"",  # quiet'), (145, '                ""--stdout"",  # output to stdout instead of file'), (146, '            ],'), (147, '            capture_output=True'), (149, ''), (150, '        # Return SVG string'), (151, ""        return process.stdout.decode('utf-8')"")], 'deleted': [(22, '    with open(os.path.join('), (23, '        get_manim_dir(), ""manimlib"", ""tex_templates.yml""'), (24, '    ), encoding=""utf-8"") as tex_templates_file:'), (56, 'def tex_to_svg('), (57, '    content: str,'), (58, '    template: str,'), (59, '    additional_preamble: str,'), (60, ') -> str:'), (61, '    tex_config = get_tex_config()'), (62, '    if not template or template == tex_config[""template""]:'), (63, '        compiler = tex_config[""compiler""]'), (64, '        preamble = tex_config[""preamble""]'), (65, '    else:'), (66, '        config = get_tex_template_config(template)'), (67, '        compiler = config[""compiler""]'), (68, '        preamble = config[""preamble""]'), (69, ''), (70, '    if additional_preamble:'), (71, '        preamble += ""\\n"" + additional_preamble'), (72, '    full_tex = ""\\n\\n"".join(('), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (81, '        create_tex_svg(full_tex, tmp.name, compiler)'), (82, '        # Read the contents'), (83, '        tmp.seek(0)'), (84, '        return tmp.read()'), (87, 'def create_tex_svg(full_tex: str, svg_file: str, compiler: str) -> None:'), (95, '        raise NotImplementedError('), (96, '            f""Compiler \'{compiler}\' is not implemented""'), (99, '    # Write tex file'), (100, '    root, _ = os.path.splitext(svg_file)'), (101, '    with open(root + "".tex"", ""w"", encoding=""utf-8"") as tex_file:'), (102, '        tex_file.write(full_tex)'), (103, ''), (104, '    # tex to dvi'), (105, '    if os.system("" "".join(('), (106, '        program,'), (107, '        ""-interaction=batchmode"",'), (108, '        ""-halt-on-error"",'), (109, '        f""-output-directory=\\""{os.path.dirname(svg_file)}\\"""",'), (110, '        f""\\""{root}.tex\\"""",'), (111, '        "">"",'), (112, '        os.devnull'), (113, '    ))):'), (114, '        log.error('), (115, '            ""LaTeX Error!  Not a worry, it happens to the best of us.""'), (117, '        error_str = """"'), (118, '        with open(root + "".log"", ""r"", encoding=""utf-8"") as log_file:'), (119, '            error_match_obj = re.search(r""(?<=\\n! ).*\\n.*\\n"", log_file.read())'), (120, '            if error_match_obj:'), (121, '                error_str = error_match_obj.group()'), (122, '                log.debug('), (123, '                    f""The error could be:\\n`{error_str}`"",'), (124, '                )'), (125, '        raise LatexError(error_str)'), (126, ''), (127, '    # dvi to svg'), (128, '    os.system("" "".join(('), (129, '        ""dvisvgm"",'), (130, '        f""\\""{root}{dvi_ext}\\"""",'), (131, '        ""-n"",'), (132, '        ""-v"",'), (133, '        ""0"",'), (134, '        ""-o"",'), (135, '        f""\\""{svg_file}\\"""",'), (136, '        "">"",'), (137, '        os.devnull'), (138, '    )))'), (139, ''), (140, '    # Cleanup superfluous documents'), (141, '    for ext in ("".tex"", dvi_ext, "".log"", "".aux""):'), (142, '        try:'), (143, '            os.remove(root + ext)'), (144, '        except FileNotFoundError:'), (145, '            pass')]}",15,15
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,0c385e820fe6fedec627626cf4a735fd5d03599a,ac01b144e8d1916645122f40885f816aa8f7e64c,Get rid of get_tex_dir and get_text_dir,"{'added': [], 'deleted': [(24, 'from manimlib.utils.directories import get_text_dir')]}",76,76
manimlib/utils/directories.py,manimlib/utils/directories.py,0c385e820fe6fedec627626cf4a735fd5d03599a,ac01b144e8d1916645122f40885f816aa8f7e64c,Get rid of get_tex_dir and get_text_dir,"{'added': [], 'deleted': [(17, 'def get_tex_dir() -> str:'), (18, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Tex""))'), (19, ''), (20, ''), (21, 'def get_text_dir() -> str:'), (22, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Text""))'), (23, ''), (24, '')]}",9,9
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,0c385e820fe6fedec627626cf4a735fd5d03599a,ac01b144e8d1916645122f40885f816aa8f7e64c,Get rid of get_tex_dir and get_text_dir,"{'added': [], 'deleted': [(14, 'from manimlib.utils.directories import get_tex_dir')]}",15,15
manimlib/default_config.yml,manimlib/default_config.yml,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"{'added': [(14, '  # For certain object types, especially Tex and Text, manim will save information'), (15, '  # to file to prevent the need to re-compute, e.g. recompiling the latex. By default,'), (16, '  # it stores this saved data to whatever directory appdirs.user_cache_dir(""manim"") returns,'), (17, '  # but here a user can specify a different cache location'), (18, '  cache: """"')], 'deleted': [(13, '  # Manim often generates tex_files or other kinds of serialized data'), (14, '  # to keep from having to generate the same thing too many times.  By'), (15, '  # default, these will be stored at tempfile.gettempdir(), e.g. this might'), (16, '  # return whatever is at to the TMPDIR environment variable.  If you want to'), (17, '  # specify them elsewhere,')]}",,
manimlib/utils/cache.py,manimlib/utils/cache.py,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"{'added': [(5, 'from manimlib.utils.directories import get_cache_dir'), (6, ''), (12, '    cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)')], 'deleted': [(1, 'import appdirs'), (11, '    cache_dir = appdirs.user_cache_dir(""manim"")'), (12, '    cache = Cache(cache_dir, size_limit=CACHE_SIZE)')]}",5,5
manimlib/utils/customization.py,manimlib/utils/customization.py,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"{'added': [(3, 'import appdirs'), (21, '        if not directories[""cache""]:'), (22, '            directories[""cache""] = appdirs.user_cache_dir(""manim"")'), (23, '')], 'deleted': []}",4,4
manimlib/utils/directories.py,manimlib/utils/directories.py,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"{'added': [(13, 'def get_cache_dir() -> str:'), (14, '    return get_directories()[""cache""]'), (15, ''), (16, '')], 'deleted': []}",10,10
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","{'added': [(80, '        return latex_to_svg(content, self.template, self.additional_preamble)')], 'deleted': [(80, '        return get_cached_value('), (81, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (82, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),'), (83, '            message=f""Writing {self.tex_string}...""'), (84, '        )')]}",60,60
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","{'added': [(88, '        return latex_to_svg(content, self.template, self.additional_preamble, short_tex=self.tex_string)')], 'deleted': [(9, 'from manimlib.utils.cache import get_cached_value'), (89, '        return get_cached_value('), (90, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (91, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),'), (92, '            message=f""Writing {self.tex_string}...""'), (93, '        )')]}",53,53
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","{'added': [(19, 'from manimlib.utils.cache import cache_on_disk'), (54, '@cache_on_disk'), (55, 'def markup_to_svg_string('), (56, '    markup_str: str,'), (57, '    justify: bool = False,'), (58, '    indent: float = 0,'), (59, '    alignment: str = """",'), (60, '    line_width: float | None = None,'), (61, ') -> str:'), (62, '    validate_error = manimpango.MarkupUtils.validate(markup_str)'), (63, '    if validate_error:'), (64, '        raise ValueError('), (65, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (66, '            f""{validate_error}""'), (67, '        )'), (68, ''), (69, '    # `manimpango` is under construction,'), (70, '    # so the following code is intended to suit its interface'), (71, '    alignment = _Alignment(alignment)'), (72, '    if line_width is None:'), (73, '        pango_width = -1'), (74, '    else:'), (75, '        pango_width = line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (76, ''), (77, ""    # Write the result to a temporary svg file, and return it's contents.""), (78, '    # TODO, better would be to have this not write to file at all'), (79, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (80, '        manimpango.MarkupUtils.text2svg('), (81, '            text=markup_str,'), (82, '            font="""",                     # Already handled'), (83, '            slant=""NORMAL"",              # Already handled'), (84, '            weight=""NORMAL"",             # Already handled'), (85, '            size=1,                      # Already handled'), (86, '            _=0,                         # Empty parameter'), (87, '            disable_liga=False,'), (88, '            file_name=tmp.name,'), (89, '            START_X=0,'), (90, '            START_Y=0,'), (91, '            width=DEFAULT_CANVAS_WIDTH,'), (92, '            height=DEFAULT_CANVAS_HEIGHT,'), (93, '            justify=justify,'), (94, '            indent=indent,'), (95, '            line_spacing=None,           # Already handled'), (96, '            alignment=alignment,'), (97, '            pango_width=pango_width'), (98, '        )'), (99, ''), (100, '        # Read the contents'), (101, '        tmp.seek(0)'), (102, '        return tmp.read()'), (103, ''), (104, ''), (226, '        self.content = content'), (227, '        return markup_to_svg_string('), (229, '            justify=self.justify,'), (230, '            indent=self.indent,'), (231, '            alignment=self.alignment,'), (232, '            line_width=self.line_width')], 'deleted': [(19, 'from manimlib.utils.cache import get_cached_value'), (175, '        key = hash_string(str(('), (177, '            self.justify,'), (178, '            self.indent,'), (179, '            self.alignment,'), (180, '            self.line_width'), (181, '        )))'), (182, '        return get_cached_value(key, lambda: self.markup_to_svg_string(content))'), (183, ''), (184, '    def markup_to_svg_string(self, markup_str: str) -> str:'), (185, '        self.validate_markup_string(markup_str)'), (186, ''), (187, '        # `manimpango` is under construction,'), (188, '        # so the following code is intended to suit its interface'), (189, '        alignment = _Alignment(self.alignment)'), (190, '        if self.line_width is None:'), (191, '            pango_width = -1'), (192, '        else:'), (193, '            pango_width = self.line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (194, ''), (195, ""        with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (196, '            manimpango.MarkupUtils.text2svg('), (197, '                text=markup_str,'), (198, '                font="""",                     # Already handled'), (199, '                slant=""NORMAL"",              # Already handled'), (200, '                weight=""NORMAL"",             # Already handled'), (201, '                size=1,                      # Already handled'), (202, '                _=0,                         # Empty parameter'), (203, '                disable_liga=False,'), (204, '                file_name=tmp.name,'), (205, '                START_X=0,'), (206, '                START_Y=0,'), (207, '                width=DEFAULT_CANVAS_WIDTH,'), (208, '                height=DEFAULT_CANVAS_HEIGHT,'), (209, '                justify=self.justify,'), (210, '                indent=self.indent,'), (211, '                line_spacing=None,           # Already handled'), (212, '                alignment=alignment,'), (213, '                pango_width=pango_width'), (214, '            )'), (215, ''), (216, '            # Read the contents'), (217, '            tmp.seek(0)'), (218, '            return tmp.read()'), (219, ''), (220, '    @staticmethod'), (221, '    def validate_markup_string(markup_str: str) -> None:'), (222, '        validate_error = manimpango.MarkupUtils.validate(markup_str)'), (223, '        if not validate_error:'), (224, '            return'), (225, '        raise ValueError('), (226, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (227, '            f""{validate_error}""')]}",75,75
manimlib/utils/cache.py,manimlib/utils/cache.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","{'added': [(1, 'from __future__ import annotations'), (2, ''), (6, 'from functools import wraps'), (9, 'from manimlib.utils.simple_functions import hash_string'), (10, ''), (11, 'from typing import TYPE_CHECKING'), (12, ''), (13, 'if TYPE_CHECKING:'), (14, ""    T = TypeVar('T')""), (18, '_cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)'), (19, ''), (21, 'def cache_on_disk(func: Callable[..., T]) -> Callable[..., T]:'), (22, '    @wraps(func)'), (23, '    def wrapper(*args, **kwargs):'), (24, '        key = hash_string("""".join(map(str, [func.__name__, args, kwargs])))'), (25, '        value = _cache.get(key)'), (26, '        if value is None:'), (27, '            # print(f""Executing {func.__name__}({args[0]}, ...)"")'), (28, '            value = func(*args, **kwargs)'), (29, '            _cache.set(key, value)'), (30, '        return value'), (31, '    return wrapper'), (34, 'def clear_cache():'), (35, '    _cache.clear()')], 'deleted': [(11, 'def get_cached_value(key, value_func, message=""""):'), (12, '    cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)'), (14, '    value = cache.get(key)'), (15, '    if value is None:'), (16, '        with display_during_execution(message):'), (17, '            value = value_func()'), (18, '        cache.set(key, value)'), (19, '    return value')]}",7,7
manimlib/utils/customization.py,manimlib/utils/customization.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","{'added': [(14, '        print(CUSTOMIZATION)'), (16, '        print(CUSTOMIZATION)')], 'deleted': []}",4,4
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","{'added': [(11, 'from manimlib.utils.cache import cache_on_disk'), (66, '@cache_on_disk'), (70, '    additional_preamble: str = """",'), (71, '    short_tex: str = """",'), (72, '    show_message_during_execution: bool = True,'), (88, '    if show_message_during_execution:'), (89, '        max_message_len = 80'), (90, '        message = f""Writing {short_tex or latex}""'), (91, '        if len(message) > max_message_len:'), (92, '            message = message[:max_message_len - 3] + ""...""'), (93, '        print(message, end=""\\r"")'), (94, ''), (161, ""        result = process.stdout.decode('utf-8')""), (162, ''), (163, '    if show_message_during_execution:'), (164, '        print("" "" * len(message), end=""\\r"")'), (165, ''), (166, '    return result')], 'deleted': [(68, '    additional_preamble: str = """"'), (150, ""        return process.stdout.decode('utf-8')"")]}",18,18
manimlib/utils/customization.py,manimlib/utils/customization.py,cfb7d2fa47f13799a19088d880fb6ac06b95f970,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,Remove stray prints,"{'added': [], 'deleted': [(14, '        print(CUSTOMIZATION)'), (16, '        print(CUSTOMIZATION)')]}",4,4
manimlib/config.py,manimlib/config.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","{'added': [(13, 'from functools import lru_cache'), (14, ''), (302, 'def load_yaml(file_path: str):'), (303, '    try:'), (304, '        with open(file_path, ""r"") as file:'), (305, '            return yaml.safe_load(file) or {}'), (306, '    except FileNotFoundError:'), (307, '        return {}'), (310, '@lru_cache'), (311, 'def get_global_config():'), (312, '    args = parse_cli()'), (315, '    print(f""global_defaults_file = {global_defaults_file}"")'), (316, '    print(f""args.config_file = {args.config_file}"")'), (318, '    return merge_dicts_recursively('), (319, '        load_yaml(global_defaults_file),'), (320, '        load_yaml(""custom_config.yml""),  # From current working directory'), (321, '        load_yaml(args.config_file) if args.config_file else {},'), (322, '    )'), (458, '    global_config = get_global_config()'), (459, '    camera_config = get_camera_config(args, global_config)'), (460, '    window_config = get_window_config(args, global_config, camera_config)'), (466, '        ""file_writer_config"": get_file_writer_config(args, global_config),'), (479, '        ""embed_exception_mode"": global_config[""embed_exception_mode""],'), (480, '        ""embed_error_sound"": global_config[""embed_error_sound""],'), (489, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (494, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (499, '    cam_config = get_camera_config(parse_cli(), get_global_config())')], 'deleted': [(22, '__config_file__ = ""custom_config.yml""'), (23, ''), (24, ''), (303, 'def get_custom_config():'), (304, '    global __config_file__'), (305, ''), (306, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (308, '    if os.path.exists(global_defaults_file):'), (309, '        with open(global_defaults_file, ""r"") as file:'), (310, '            custom_config = yaml.safe_load(file)'), (311, ''), (312, '        if os.path.exists(__config_file__):'), (313, '            with open(__config_file__, ""r"") as file:'), (314, '                local_defaults = yaml.safe_load(file)'), (315, '            if local_defaults:'), (316, '                custom_config = merge_dicts_recursively('), (317, '                    custom_config,'), (318, '                    local_defaults,'), (319, '                )'), (320, '    else:'), (321, '        with open(__config_file__, ""r"") as file:'), (322, '            custom_config = yaml.safe_load(file)'), (323, ''), (324, '    # Check temporary storage(custom_config)'), (325, '    if custom_config[""directories""][""temporary_storage""] == """" and sys.platform == ""win32"":'), (326, '        log.warning('), (327, '            ""You may be using Windows platform and have not specified the path of"" + \\'), (328, '            "" `temporary_storage`, which may cause OSError. So it is recommended"" + \\'), (329, '            "" to specify the `temporary_storage` in the config file (.yml)""'), (330, '        )'), (331, ''), (332, '    return custom_config'), (333, ''), (334, ''), (335, 'def init_global_config(config_file):'), (336, '    global __config_file__'), (337, ''), (338, '    # ensure __config_file__ always exists'), (339, '    if config_file is not None:'), (340, '        if not os.path.exists(config_file):'), (341, '            log.error(f""Can\'t find {config_file}."")'), (342, ""            if sys.platform == 'win32':""), (343, '                log.info(f""Copying default configuration file to {config_file}..."")'), (344, '                os.system(f""copy default_config.yml {config_file}"")'), (345, '            elif sys.platform in [""linux2"", ""darwin""]:'), (346, '                log.info(f""Copying default configuration file to {config_file}..."")'), (347, '                os.system(f""cp default_config.yml {config_file}"")'), (348, '            else:'), (349, '                log.info(""Please create the configuration file manually."")'), (350, '            log.info(""Read configuration from default_config.yml."")'), (351, '        else:'), (352, '            __config_file__ = config_file'), (356, '    if not (os.path.exists(global_defaults_file) or os.path.exists(__config_file__)):'), (357, '        log.info(""There is no configuration file detected. Switch to the config file initializer:"")'), (358, '        init_customization()'), (360, '    elif not os.path.exists(__config_file__):'), (361, '        log.info(f""Using the default configuration file, which you can modify in `{global_defaults_file}`"")'), (362, '        log.info('), (363, '            ""If you want to create a local configuration file, you can create a file named"" + \\'), (364, '            f"" `{__config_file__}`, or run `manimgl --config`""'), (365, '        )'), (501, '    init_global_config(args.config_file)'), (502, '    custom_config = get_custom_config()'), (503, '    camera_config = get_camera_config(args, custom_config)'), (504, '    window_config = get_window_config(args, custom_config, camera_config)'), (510, '        ""file_writer_config"": get_file_writer_config(args, custom_config),'), (523, '        ""embed_exception_mode"": custom_config[""embed_exception_mode""],'), (524, '        ""embed_error_sound"": custom_config[""embed_error_sound""],'), (533, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (538, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (543, '    cam_config = get_camera_config(parse_cli(), get_custom_config())')]}",71,71
manimlib/extract_scene.py,manimlib/extract_scene.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","{'added': [(5, 'from manimlib.config import get_global_config'), (13, '        exec(get_global_config()[""universal_import_line""])')], 'deleted': [(5, 'from manimlib.config import get_custom_config'), (13, '        exec(get_custom_config()[""universal_import_line""])')]}",33,33
manimlib/utils/customization.py,manimlib/utils/customization.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","{'added': [(1, 'from manimlib.config import get_global_config'), (5, '    return get_global_config()')], 'deleted': [(1, 'import os'), (2, 'import tempfile'), (3, 'import appdirs'), (4, ''), (5, 'from manimlib.config import get_custom_config'), (6, 'from manimlib.config import get_manim_dir'), (7, ''), (8, ''), (9, 'CUSTOMIZATION = {}'), (13, '    if not CUSTOMIZATION:'), (14, '        CUSTOMIZATION.update(get_custom_config())'), (15, '        directories = CUSTOMIZATION[""directories""]'), (16, '        # Unless user has specified otherwise, use the system default temp'), (17, '        # directory for storing tex files, mobject_data, etc.'), (18, '        if not directories[""temporary_storage""]:'), (19, '            directories[""temporary_storage""] = tempfile.gettempdir()'), (20, ''), (21, '        if not directories[""cache""]:'), (22, '            directories[""cache""] = appdirs.user_cache_dir(""manim"")'), (23, ''), (24, '        # Assumes all shaders are written into manimlib/shaders'), (25, '        directories[""shaders""] = os.path.join('), (26, '            get_manim_dir(), ""manimlib"", ""shaders""'), (27, '        )'), (28, '    return CUSTOMIZATION')]}",1,1
manimlib/utils/directories.py,manimlib/utils/directories.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","{'added': [(4, 'import tempfile'), (5, 'import appdirs'), (7, ''), (8, 'from manimlib.config import get_manim_dir'), (18, '    return get_directories()[""cache""] or appdirs.user_cache_dir(""manim"")'), (22, '    return get_directories()[""temporary_storage""] or tempfile.gettempdir()'), (50, '    return os.path.join(get_manim_dir(), ""manimlib"", ""shaders"")')], 'deleted': [(14, '    return get_directories()[""cache""]'), (18, '    return get_directories()[""temporary_storage""]'), (46, '    return get_directories()[""shaders""]')]}",12,12
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","{'added': [(12, 'from manimlib.config import get_global_config'), (46, '        template_name = get_global_config()[""style""][""tex_template""]')], 'deleted': [(12, 'from manimlib.config import get_custom_config'), (46, '        template_name = get_custom_config()[""style""][""tex_template""]')]}",18,18
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,b593cde3177cf5aedb7c50a6c87111d51626b8f6,34ad61d01397415924ef2790a32f29d420695d21,Make the default size for hash_string an option,"{'added': [(99, 'def hash_string(string: str, n_bytes=16) -> str:'), (101, '    return hasher.hexdigest()[:n_bytes]')], 'deleted': [(99, 'def hash_string(string: str) -> str:'), (100, '    # Truncating at 16 bytes for cleanliness'), (102, '    return hasher.hexdigest()[:16]')]}",22,22
manimlib/__init__.py,manimlib/__init__.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"{'added': [], 'deleted': [(67, 'from manimlib.utils.customization import *')]}",0,0
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"{'added': [(5, 'from manimlib.config import get_global_config'), (60, ""            color = get_global_config()['style']['background_color']"")], 'deleted': [(12, 'from manimlib.utils.customization import get_customization'), (60, ""            color = get_customization()['style']['background_color']"")]}",13,13
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"{'added': [(15, 'from manimlib.config import get_global_config'), (158, '        default_style = get_global_config()[""style""]'), (163, '        self.alignment = alignment or default_style[""text_alignment""]'), (165, '        self.font = font or default_style[""font""]')], 'deleted': [(22, 'from manimlib.utils.customization import get_customization'), (162, '        self.alignment = alignment or get_customization()[""style""][""text_alignment""]'), (164, '        self.font = font or get_customization()[""style""][""font""]')]}",75,75
manimlib/utils/customization.py,,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"{'added': [], 'deleted': [(1, 'from manimlib.config import get_global_config'), (2, ''), (3, ''), (4, 'def get_customization():'), (5, '    return get_global_config()')]}",,
manimlib/utils/directories.py,manimlib/utils/directories.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"{'added': [(8, 'from manimlib.config import get_global_config'), (14, '    return get_global_config()[""directories""]')], 'deleted': [(9, 'from manimlib.utils.customization import get_customization'), (14, '    return get_customization()[""directories""]')]}",12,12
manimlib/window.py,manimlib/window.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"{'added': [(11, 'from manimlib.config import get_global_config'), (86, '        global_config = get_global_config()'), (87, '        custom_position = global_config[""window_position""]'), (88, '        mon_index = global_config[""window_monitor""]')], 'deleted': [(12, 'from manimlib.utils.customization import get_customization'), (86, '        custom_position = get_customization()[""window_position""]'), (88, '        mon_index = get_customization()[""window_monitor""]')]}",25,25
manimlib/config.py,manimlib/config.py,fc32f162a0c2d185754c8610f03a28e2e2d6733c,3b9ef57b220a324ba5fcb872f0f680e86c282b10,Remove stray prints,"{'added': [], 'deleted': [(314, ''), (315, '    print(f""global_defaults_file = {global_defaults_file}"")'), (316, '    print(f""args.config_file = {args.config_file}"")'), (317, '')]}",71,71
manimlib/config.py,manimlib/config.py,0496402c55b38d5d1080ade94fe9506f05094408,fc32f162a0c2d185754c8610f03a28e2e2d6733c,"Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.","{'added': [(22, '    from typing import Optional'), (23, ''), (24, ''), (25, '# This has to be here instead of in constants.py'), (26, '# due to its use in creating the camera configuration'), (27, 'FRAME_HEIGHT: float = 8.0'), (409, 'def get_camera_config(args: Optional[Namespace] = None, custom_config: Optional[dict] = None) -> dict:'), (410, '    if args is None:'), (411, '        args = parse_cli()'), (412, '    if custom_config is None:'), (413, '        custom_config = get_global_config()'), (414, ''), (415, '    camera_config = dict()'), (443, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),')], 'deleted': [(403, 'def get_camera_config(args: Namespace, custom_config: dict) -> dict:'), (404, '    camera_config = {}'), (432, '            ""frame_shape"": ((width / height) * get_frame_height(), get_frame_height()),'), (478, ''), (479, ''), (480, 'def get_frame_height():'), (481, '    return 8.0'), (482, ''), (483, ''), (484, 'def get_aspect_ratio():'), (485, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (486, ""    return cam_config['pixel_width'] / cam_config['pixel_height']""), (487, ''), (488, ''), (489, 'def get_default_pixel_width():'), (490, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (491, ""    return cam_config['pixel_width']""), (492, ''), (493, ''), (494, 'def get_default_pixel_height():'), (495, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (496, ""    return cam_config['pixel_height']"")]}",69,69
manimlib/constants.py,manimlib/constants.py,0496402c55b38d5d1080ade94fe9506f05094408,fc32f162a0c2d185754c8610f03a28e2e2d6733c,"Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.","{'added': [(4, 'from manimlib.config import get_camera_config'), (5, 'from manimlib.config import FRAME_HEIGHT'), (13, '# TODO, it feels a bit unprincipled to have some global constants'), (14, '# depend on the output of this function, all for all that configuration'), (15, '# code to be run merely upon importing from this file'), (16, 'CAMERA_CONFIG = get_camera_config()'), (17, ''), (19, ""ASPECT_RATIO: float = CAMERA_CONFIG['pixel_width'] / CAMERA_CONFIG['pixel_height']""), (20, '# FRAME_HEIGHT: float = 8.0'), (26, ""DEFAULT_PIXEL_HEIGHT: int = CAMERA_CONFIG['pixel_height']""), (27, ""DEFAULT_PIXEL_WIDTH: int = CAMERA_CONFIG['pixel_width']"")], 'deleted': [(4, 'from manimlib.config import get_aspect_ratio'), (5, 'from manimlib.config import get_default_pixel_width'), (6, 'from manimlib.config import get_default_pixel_height'), (7, 'from manimlib.config import get_frame_height'), (16, 'ASPECT_RATIO: float = get_aspect_ratio()'), (17, 'FRAME_HEIGHT: float = get_frame_height()'), (23, 'DEFAULT_PIXEL_HEIGHT: int = get_default_pixel_height()'), (24, 'DEFAULT_PIXEL_WIDTH: int = get_default_pixel_width()')]}",0,0
manimlib/config.py,manimlib/config.py,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,0496402c55b38d5d1080ade94fe9506f05094408,Factor out configuration to be passed into a scene vs. that used to run a scene,"{'added': [(464, 'def get_scene_config(args: Namespace) -> dict:'), (465, '    """"""'), (466, '    Returns a dictionary to be used as key word arguments for Scene'), (467, '    """"""'), (487, ''), (488, ''), (489, 'def get_run_config(args: Namespace):'), (490, '    return {'), (491, '        ""module"": get_scene_module(args),'), (492, '        ""prerun"": args.prerun,'), (493, '        ""scene_names"": args.scene_names,'), (494, '        ""quiet"": args.quiet or args.write_all,'), (495, '        ""write_all"": args.write_all,'), (496, '    }')], 'deleted': [(464, 'def get_configuration(args: Namespace) -> dict:'), (471, '        ""module"": get_scene_module(args),'), (472, '        ""scene_names"": args.scene_names,'), (476, '        ""quiet"": args.quiet or args.write_all,'), (477, '        ""write_all"": args.write_all,'), (485, '        ""prerun"": args.prerun,')]}",70,70
manimlib/extract_scene.py,manimlib/extract_scene.py,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,0496402c55b38d5d1080ade94fe9506f05094408,Factor out configuration to be passed into a scene vs. that used to run a scene,"{'added': [(74, 'def scene_from_class(scene_class, scene_config, run_config):'), (76, '    if fw_config[""write_to_movie""] and run_config[""prerun""]:'), (81, 'def get_scenes_to_render(all_scene_classes, scene_config, run_config):'), (82, '    if run_config[""write_all""]:'), (86, '    scene_names = run_config[""scene_names""]'), (100, '        scene_from_class(scene_class, scene_config, run_config)'), (118, 'def main(scene_config, run_config):'), (119, '    module = run_config[""module""]'), (125, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, run_config)')], 'deleted': [(56, 'def get_scene_config(config):'), (57, '    scene_parameters = inspect.signature(Scene).parameters.keys()'), (58, '    return {'), (59, '        key: config[key]'), (60, '        for key in set(scene_parameters).intersection(config.keys())'), (61, '    }'), (62, ''), (63, ''), (82, 'def scene_from_class(scene_class, scene_config, config):'), (84, '    if fw_config[""write_to_movie""] and config[""prerun""]:'), (89, 'def get_scenes_to_render(all_scene_classes, scene_config, config):'), (90, '    if config[""write_all""]:'), (94, '    scene_names = config[""scene_names""]'), (108, '        scene_from_class(scene_class, scene_config, config)'), (126, 'def main(config):'), (127, '    module = config[""module""]'), (128, '    scene_config = get_scene_config(config)'), (134, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, config)')]}",31,31
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,0496402c55b38d5d1080ade94fe9506f05094408,Factor out configuration to be passed into a scene vs. that used to run a scene,"{'added': [(13, 'from manimlib.config import get_camera_config'), (412, '        cam_config = get_camera_config()')], 'deleted': [(13, 'from manimlib.config import get_configuration'), (412, ""        cam_config = get_configuration(parse_cli())['camera_config']"")]}",66,66
manimlib/reload_manager.py,manimlib/reload_manager.py,8dfd4c1c4e7fa70a936caca24fdd5656ec1f39e6,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,Use newer extract_scene.main interface,"{'added': [(62, '        scene_config = manimlib.config.get_scene_config(self.args)'), (64, '            scene_config[""existing_window""] = self.window  # see scene initialization'), (65, ''), (66, '        run_config = manimlib.config.get_run_config(self.args)'), (69, '        self.scenes = manimlib.extract_scene.main(scene_config, run_config)')], 'deleted': [(62, '        config = manimlib.config.get_configuration(self.args)'), (64, '            config[""existing_window""] = self.window  # see scene initialization'), (67, '        self.scenes = manimlib.extract_scene.main(config)')]}",14,14
manimlib/reload_manager.py,manimlib/reload_manager.py,1d14bae092a52cf73612b33d46a4ffcf2d96abb5,8dfd4c1c4e7fa70a936caca24fdd5656ec1f39e6,Add clarifying message to note what exactly is being reloaded,"{'added': [(81, '            if self.args.embed:'), (82, '                print("" "".join(['), (83, '                    ""Loading interactive session for"",'), (84, '                    f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (85, '                    f""in \\033[96m{self.args.file}\\033[0m"",'), (86, '                    f""at line \\033[96m{self.args.embed}\\033[0m""'), (87, '                ]))')], 'deleted': [(83, '')]}",15,15
manimlib/constants.py,manimlib/constants.py,361d9d0652c734d231cf4eef498ca1d1a7d37639,1d14bae092a52cf73612b33d46a4ffcf2d96abb5,Minor clean up,"{'added': [(14, '# depend on the output of this function, and for all that configuration'), (15, '# code to be run merely upon importing from this file.')], 'deleted': [(14, '# depend on the output of this function, all for all that configuration'), (15, '# code to be run merely upon importing from this file'), (20, '# FRAME_HEIGHT: float = 8.0')]}",0,0
manimlib/extract_scene.py,manimlib/extract_scene.py,361d9d0652c734d231cf4eef498ca1d1a7d37639,1d14bae092a52cf73612b33d46a4ffcf2d96abb5,Minor clean up,"{'added': [(85, '    names_to_classes = {sc.__name__: sc for sc in all_scene_classes}'), (119, '    if run_config[""module""] is None:'), (123, '    all_scene_classes = get_scene_classes_from_module(run_config[""module""])'), (124, '    return get_scenes_to_render(all_scene_classes, scene_config, run_config)')], 'deleted': [(85, '    names_to_classes = {sc.__name__ : sc for sc in all_scene_classes}'), (119, '    module = run_config[""module""]'), (120, '    if module is None:'), (124, '    all_scene_classes = get_scene_classes_from_module(module)'), (125, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, run_config)'), (126, '    return scenes')]}",31,31
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,e0031c63bcca5c0d7707998cefb9854bef9e8b3c,361d9d0652c734d231cf4eef498ca1d1a7d37639,Minor clean up,"{'added': [(55, 'def markup_to_svg('), (59, '    alignment: str = ""CENTER"",'), (228, '        return markup_to_svg(')], 'deleted': [(55, 'def markup_to_svg_string('), (59, '    alignment: str = """",'), (228, '        return markup_to_svg_string(')]}",75,75
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,85f84562289429ad0131329637232b20f18d75e5,e0031c63bcca5c0d7707998cefb9854bef9e8b3c,"If it's worth caching to disk, then might as well do so in memory too during development","{'added': [(9, 'from functools import lru_cache'), (55, '@lru_cache(maxsize=128)')], 'deleted': []}",75,75
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,85f84562289429ad0131329637232b20f18d75e5,e0031c63bcca5c0d7707998cefb9854bef9e8b3c,"If it's worth caching to disk, then might as well do so in memory too during development","{'added': [(7, 'from functools import lru_cache'), (67, '@lru_cache(maxsize=128)')], 'deleted': []}",18,18
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,4251ff436a39e69d3bed1590c84b03c3796f7c85,85f84562289429ad0131329637232b20f18d75e5,No longer any need for custom hash_seeds in Tex and Text,"{'added': [], 'deleted': [(70, '    @property'), (71, '    def hash_seed(self) -> tuple:'), (72, '        return ('), (73, '            self.__class__.__name__,'), (74, '            self.svg_default,'), (75, '            self.path_string_config,'), (76, '            self.base_color,'), (77, '            self.isolate,'), (78, '            self.protect,'), (79, '            self.tex_string,'), (80, '            self.alignment,'), (81, '            self.tex_environment,'), (82, '            self.tex_to_color_map,'), (83, '            self.template,'), (84, '            self.additional_preamble'), (85, '        )'), (86, '')]}",52,52
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,4251ff436a39e69d3bed1590c84b03c3796f7c85,85f84562289429ad0131329637232b20f18d75e5,No longer any need for custom hash_seeds in Tex and Text,"{'added': [], 'deleted': [(200, '    @property'), (201, '    def hash_seed(self) -> tuple:'), (202, '        return ('), (203, '            self.__class__.__name__,'), (204, '            self.svg_default,'), (205, '            self.path_string_config,'), (206, '            self.base_color,'), (207, '            self.isolate,'), (208, '            self.protect,'), (209, '            self.text,'), (210, '            self.font_size,'), (211, '            self.lsh,'), (212, '            self.justify,'), (213, '            self.indent,'), (214, '            self.alignment,'), (215, '            self.line_width,'), (216, '            self.font,'), (217, '            self.slant,'), (218, '            self.weight,'), (219, '            self.t2c,'), (220, '            self.t2f,'), (221, '            self.t2s,'), (222, '            self.t2w,'), (223, '            self.global_config,'), (224, '            self.local_configs,'), (225, '            self.disable_ligatures'), (226, '        )'), (227, '')]}",74,74
manimlib/utils/cache.py,manimlib/utils/cache.py,809814900671df9f3a8a7c0f31e737ead8c66dbb,4251ff436a39e69d3bed1590c84b03c3796f7c85,Remove display_during_execution,"{'added': [(24, '        key = hash_string(f""{func.__name__}{args}{kwargs}"")')], 'deleted': [(24, '        key = hash_string("""".join(map(str, [func.__name__, args, kwargs])))'), (27, '            # print(f""Executing {func.__name__}({args[0]}, ...)"")'), (36, ''), (37, ''), (38, '@contextmanager'), (39, 'def display_during_execution(message: str):'), (40, '    # Merge into a single line'), (41, '    to_print = message.replace(""\\n"", "" "")'), (42, '    max_characters = os.get_terminal_size().columns - 1'), (43, '    if len(to_print) > max_characters:'), (44, '        to_print = to_print[:max_characters - 3] + ""...""'), (45, '    try:'), (46, '        print(to_print, end=""\\r"")'), (47, '        yield'), (48, '    finally:'), (49, '        print("" "" * len(to_print), end=""\\r"")')]}",4,4
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,71e440be93f02894540fa306edfbc6753423b849,809814900671df9f3a8a7c0f31e737ead8c66dbb,Get rid of (no longer used) mobject_data directory reference,"{'added': [], 'deleted': [(20, 'from manimlib.utils.directories import get_mobject_data_dir')]}",60,60
manimlib/utils/directories.py,manimlib/utils/directories.py,71e440be93f02894540fa306edfbc6753423b849,809814900671df9f3a8a7c0f31e737ead8c66dbb,Get rid of (no longer used) mobject_data directory reference,"{'added': [], 'deleted': [(25, 'def get_mobject_data_dir() -> str:'), (26, '    return guarantee_existence(os.path.join(get_temp_dir(), ""mobject_data""))'), (27, ''), (28, '')]}",11,11
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,71e440be93f02894540fa306edfbc6753423b849,Remove get_downloads_dir reference from register_font,"{'added': [(495, '    file_path = Path(font_file).resolve()'), (496, '    if not file_path.exists():'), (497, '        error = f""Can\'t find {font_file}.""')], 'deleted': [(24, 'from manimlib.utils.directories import get_downloads_dir'), (496, '    input_folder = Path(get_downloads_dir()).parent.resolve()'), (497, '    possible_paths = ['), (498, '        Path(font_file),'), (499, '        input_folder / font_file,'), (500, '    ]'), (501, '    for path in possible_paths:'), (502, '        path = path.resolve()'), (503, '        if path.exists():'), (504, '            file_path = path'), (505, '            break'), (506, '    else:'), (507, '        error = f""Can\'t find {font_file}."" f""Tried these : {possible_paths}""'), (509, '')]}",73,73
manimlib/default_config.yml,manimlib/default_config.yml,75527563de5cf4badb8e30abd826e355e06bce01,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,Update where downloads go,"{'added': [(13, '  downloads: """"')], 'deleted': [(13, '  temporary_storage: """"')]}",,
manimlib/utils/directories.py,manimlib/utils/directories.py,75527563de5cf4badb8e30abd826e355e06bce01,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,Update where downloads go,"{'added': [(26, '    return get_directories()[""downloads""] or appdirs.user_cache_dir(""manim_downloads"")')], 'deleted': [(26, '    return guarantee_existence(os.path.join(get_temp_dir(), ""manim_downloads""))')]}",12,12
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,75527563de5cf4badb8e30abd826e355e06bce01,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,Update where downloads go,"{'added': [(9, 'import urllib.request'), (10, ''), (11, 'import manimlib.utils.directories'), (12, 'from manimlib.utils.simple_functions import hash_string'), (43, '        file_hash = hash_string(file_name)'), (44, '        folder = manimlib.utils.directories.get_downloads_dir()')], 'deleted': [(38, '        import urllib.request'), (39, '        from manimlib.utils.directories import get_downloads_dir'), (41, ""        file_hash = hashlib.sha256(file_name.encode('utf-8')).hexdigest()[:32]""), (42, '        folder = get_downloads_dir()')]}",24,24
manimlib/config.py,manimlib/config.py,08acfa6f1f1478d48bdbaeed401242a472c18463,75527563de5cf4badb8e30abd826e355e06bce01,Easier use of subdirectories in configuration,"{'added': [(320, '    config = merge_dicts_recursively('), (326, '    # Set the subdirectories'), (327, ""    base = config['directories']['base']""), (328, ""    for key, subdir in config['directories']['subdirs'].items():""), (329, ""        config['directories'][key] = os.path.join(base, subdir)""), (330, ''), (331, '    return config'), (332, '')], 'deleted': [(320, '    return merge_dicts_recursively(')]}",71,71
manimlib/default_config.yml,manimlib/default_config.yml,08acfa6f1f1478d48bdbaeed401242a472c18463,75527563de5cf4badb8e30abd826e355e06bce01,Easier use of subdirectories in configuration,"{'added': [(6, '  # Manim may write to and read from teh file system, e.g.'), (7, '  # to render videos and to look for svg/png assets. This'), (8, '  # will specify where those assets live, with a base directory,'), (9, '  # and various subdirectory names within it'), (10, '  base: """"'), (11, '  subdirs:'), (12, '    # Where should manim output video and image files?'), (13, '    output: ""videos""'), (14, '    # If you want to use images, manim will look to these folders to find them'), (15, '    raster_images: ""raster_images""'), (16, '    vector_images: ""vector_images""'), (17, '    # If you want to use sounds, manim will look here to find it.'), (18, '    sounds: ""sounds""'), (19, ""    # Place for other forms of data relevant to any projects, like csv's""), (20, '    data: ""data""'), (21, '    # When downloading, say an image, where will it go?'), (22, '    downloads: ""downloads""')], 'deleted': [(6, '  # Where should manim output video and image files?'), (7, '  output: """"'), (8, '  # If you want to use images, manim will look to these folders to find them'), (9, '  raster_images: """"'), (10, '  vector_images: """"'), (11, '  # If you want to use sounds, manim will look here to find it.'), (12, '  sounds: """"'), (13, '  downloads: """"')]}",,
manimlib/utils/init_config.py,manimlib/utils/init_config.py,08acfa6f1f1478d48bdbaeed401242a472c18463,75527563de5cf4badb8e30abd826e355e06bce01,Easier use of subdirectories in configuration,"{'added': [(39, '            ""base"": """",'), (40, '            ""subdirs"": {'), (41, '                ""output"": ""videos"",'), (42, '                ""raster_images"": ""raster_images"",'), (43, '                ""vector_images"": ""vector_images"",'), (44, '                ""sounds"": ""sounds"",'), (45, '                ""data"": ""data"",'), (46, '                ""downloads"": ""downloads"",'), (47, '            }'), (81, '        dir_config[""base""] = Prompt.ask('), (82, '            ""  What base directory should manim use for reading/writing video and images? [prompt.default](optional, default is none)"",'), (86, '        dir_config[""subdirs""][""output""] = Prompt.ask('), (87, '            ""  Within that base directory, which subdirectory should manim [bold]output[/bold] video and image files to?"" + \\'), (88, '            "" [prompt.default](optional, default is \\""videos\\"")"",'), (89, '            default=""videos"",'), (92, '        dir_config[""subdirs""][""raster_images""] = Prompt.ask('), (93, '            ""  Within that base directory, which subdirectory should manim look for raster images (.png, .jpg)"" + \\'), (94, '            "" [prompt.default](optional, default is \\""raster_images\\"")"",'), (95, '            default=""raster_images"",'), (98, '        dir_config[""subdirs""][""vector_images""] = Prompt.ask('), (99, '            ""  Within that base directory, which subdirectory should manim look for raster images (.svg, .xdv)"" + \\'), (100, '            "" [prompt.default](optional, default is \\""vector_images\\"")"",'), (101, '            default=""vector_images"",'), (104, '        dir_config[""subdirs""][""sounds""] = Prompt.ask('), (105, '            ""  Within that base directory, which subdirectory should manim look for sound files (.mp3, .wav)"" + \\'), (106, '            "" [prompt.default](optional, default is \\""sounds\\"")"",'), (107, '            default=""sounds"",'), (108, '            show_default=False'), (109, '        )'), (110, '        dir_config[""subdirs""][""downloads""] = Prompt.ask('), (111, '            ""  Within that base directory, which subdirectory should manim output downloaded files"" + \\'), (112, '            "" [prompt.default](optional, default is \\""downloads\\"")"",'), (113, '            default=""downloads"",')], 'deleted': [(39, '            ""output"": """",'), (40, '            ""raster_images"": """",'), (41, '            ""vector_images"": """",'), (42, '            ""sounds"": """",'), (43, '            ""temporary_storage"": """",'), (77, '        dir_config[""output""] = Prompt.ask('), (78, '            ""  Where should manim [bold]output[/bold] video and image files place [prompt.default](optional, default is none)"",'), (82, '        dir_config[""raster_images""] = Prompt.ask('), (83, '            ""  Which folder should manim find [bold]raster images[/bold] (.jpg .png .gif) in "" + \\'), (84, '            ""[prompt.default](optional, default is none)"",'), (85, '            default="""",'), (88, '        dir_config[""vector_images""] = Prompt.ask('), (89, '            ""  Which folder should manim find [bold]vector images[/bold] (.svg .xdv) in "" + \\'), (90, '            ""[prompt.default](optional, default is none)"",'), (91, '            default="""",'), (94, '        dir_config[""sounds""] = Prompt.ask('), (95, '            ""  Which folder should manim find [bold]sound files[/bold] (.mp3 .wav) in "" + \\'), (96, '            ""[prompt.default](optional, default is none)"",'), (97, '            default="""",'), (100, '        dir_config[""temporary_storage""] = Prompt.ask('), (101, '            ""  Which folder should manim storage [bold]temporary files[/bold] "" + \\'), (102, '            ""[prompt.default](recommended, use system temporary folder by default)"",'), (103, '            default="""",')]}",10,10
requirements.txt,requirements.txt,3cd3e8cedcc36d472ed751f064d3b51c08d96e9d,08acfa6f1f1478d48bdbaeed401242a472c18463,Add new pip requirements,"{'added': [(1, 'appdirs'), (3, 'diskcache'), (26, 'tempfile')], 'deleted': []}",,
manimlib/animation/animation.py,manimlib/animation/animation.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(9, 'from manimlib.utils.rate_functions import squish_rate_func')]}",41,41
manimlib/animation/composition.py,manimlib/animation/composition.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(3, 'import numpy as np'), (4, '')]}",36,36
manimlib/animation/creation.py,manimlib/animation/creation.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(8, 'from manimlib.constants import WHITE')]}",35,35
manimlib/animation/fading.py,manimlib/animation/fading.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(8, 'from manimlib.mobject.mobject import Group'), (10, 'from manimlib.mobject.types.vectorized_mobject import VGroup')]}",23,23
manimlib/animation/growing.py,manimlib/animation/growing.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(4, 'from manimlib.constants import PI')]}",7,7
manimlib/animation/indication.py,manimlib/animation/indication.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(3, 'import math'), (4, 'from os import remove')]}",45,45
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(8, 'from pyrr import Matrix44')]}",54,54
manimlib/mobject/frame.py,manimlib/mobject/frame.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(40, '            **kwargs')], 'deleted': []}",3,3
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(4, 'import numbers'), (16, 'from manimlib.utils.bezier import bezier'), (18, 'from manimlib.utils.bezier import partial_quadratic_bezier_points'), (33, 'from manimlib.utils.space_ops import rotation_about_z')]}",139,139
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(15, '    from typing import Sequence, Union, Optional')], 'deleted': [(3, 'import itertools as it'), (4, ''), (17, '    from typing import Sequence, Union, Tuple, Optional')]}",61,61
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(17, '    from typing import TypeVar, Callable'), (18, '    from manimlib.mobject.mobject import Mobject')], 'deleted': [(17, '    from typing import TypeVar')]}",42,42
manimlib/mobject/svg/brace.py,manimlib/mobject/svg/brace.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(9, 'from manimlib.constants import DOWN, LEFT, ORIGIN, RIGHT, DL, DR, UL')], 'deleted': [(9, 'from manimlib.constants import DOWN, LEFT, ORIGIN, RIGHT, UP, DL, DR, UL')]}",20,20
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(420, '            self.content.flip(axis=axis)')], 'deleted': [(28, 'from manimlib.constants import LARGE_BUFF'), (55, 'from manimlib.mobject.mobject import Mobject'), (59, 'from manimlib.mobject.svg.tex_mobject import Tex'), (60, 'from manimlib.mobject.svg.tex_mobject import TexText'), (424, '            self.content.flip(axis=axis)')]}",73,73
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(3, 'import os'), (19, 'from manimlib.utils.directories import get_mobject_data_dir'), (22, 'from manimlib.utils.simple_functions import hash_string'), (26, '    from typing import Tuple')]}",59,59
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(17, '    from manimlib.typing import ManimColor, Span, Selector, Self')], 'deleted': [(17, '    from manimlib.typing import ManimColor, Span, Selector')]}",53,53
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(9, 'from manimlib.constants import WHITE'), (24, '    from typing import Callable, Iterable, Sequence, TypeVar, Tuple, Optional'), (25, '    from manimlib.typing import ManimColor, Vect3, VectN, VectArray, Vect3Array, Vect4Array'), (111, '    def apply_nudge(mob, dt):'), (112, '        mob.apply_function('), (131, 'def vectorize(pointwise_function: Callable[[Tuple], Tuple]):'), (235, '    def set_sample_coords(self, sample_coords: VectArray):')], 'deleted': [(9, 'from manimlib.constants import BLUE, WHITE'), (10, 'from manimlib.constants import ORIGIN'), (12, 'from manimlib.mobject.geometry import Arrow'), (18, 'from manimlib.utils.color import rgb_to_color'), (20, 'from manimlib.utils.dict_ops import merge_dicts_recursively'), (23, 'from manimlib.utils.simple_functions import sigmoid'), (29, '    from typing import Callable, Iterable, Sequence, TypeVar, Tuple'), (30, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect2Array, Vect3Array, Vect4Array'), (116, '    def apply_nudge(self, dt):'), (117, '        mobject.apply_function('), (136, 'def vectorize(pointwise_function: Callable[Tuple, Tuple]):'), (240, '    def set_sample_coords(self, sample_points: VectArray):')]}",57,57
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [], 'deleted': [(30, 'from manimlib.scene.scene import PAN_3D_KEY')]}",164,164
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(22, '    from typing import Optional, Tuple, Iterable'), (24, '    from moderngl.vertex_array import VertexArray'), (25, '    from moderngl.framebuffer import Framebuffer')], 'deleted': [(14, 'from manimlib.utils.iterables import resize_array'), (23, '    from typing import List, Optional, Dict')]}",66,66
manimlib/typing.py,manimlib/typing.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(4, '    from typing import Union, Tuple, Annotated, Literal, Iterable, Dict'), (8, ''), (31, '    #'), (43, '    VectArray = Annotated[FloatArray, Literal[""N"", 1]]')], 'deleted': [(4, '    from typing import Union, Tuple, Annotated, Literal, Iterable'), (8, ''), (31, '    #')]}",0,0
manimlib/utils/shaders.py,manimlib/utils/shaders.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(16, '    from typing import Sequence, Optional')], 'deleted': [(16, '    from typing import Sequence, Optional, Tuple'), (17, '    from manimlib.typing import UniformDict'), (18, '    from moderngl.vertex_array import VertexArray'), (19, '    from moderngl.framebuffer import Framebuffer')]}",14,14
manimlib/window.py,manimlib/window.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","{'added': [(17, '    from typing import Callable, TypeVar'), (20, '    T = TypeVar(""T"")'), (21, '')], 'deleted': []}",25,25
requirements.txt,requirements.txt,66862db9b26b1cfe9543267293d231aae10ace23,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,Drop pyrr (#2256),"{'added': [], 'deleted': [(16, 'pyrr')]}",,
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,5a70d67b98e9b2d353d0721d95b034ffaab29a89,66862db9b26b1cfe9543267293d231aae10ace23,Update coordinate_systems.py (#2258),"{'added': [(408, '            stroke_behind=stroke_background')], 'deleted': [(408, '            stroke_background=stroke_background')]}",115,115
manimlib/__init__.py,manimlib/__init__.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(64, 'from manimlib.utils.cache import *')], 'deleted': [(66, 'from manimlib.utils.customization import *')]}",0,0
manimlib/config.py,manimlib/config.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(13, 'from functools import lru_cache'), (14, ''), (22, '    from typing import Optional'), (25, '# This has to be here instead of in constants.py'), (26, '# due to its use in creating the camera configuration'), (27, 'FRAME_HEIGHT: float = 8.0'), (308, 'def load_yaml(file_path: str):'), (309, '    try:'), (310, '        with open(file_path, ""r"") as file:'), (311, '            return yaml.safe_load(file) or {}'), (312, '    except FileNotFoundError:'), (313, '        return {}'), (316, '@lru_cache'), (317, 'def get_global_config():'), (318, '    args = parse_cli()'), (320, '    config = merge_dicts_recursively('), (321, '        load_yaml(global_defaults_file),'), (322, '        load_yaml(""custom_config.yml""),  # From current working directory'), (323, '        load_yaml(args.config_file) if args.config_file else {},'), (324, '    )'), (326, '    # Set the subdirectories'), (327, ""    base = config['directories']['base']""), (328, ""    for key, subdir in config['directories']['subdirs'].items():""), (329, ""        config['directories'][key] = os.path.join(base, subdir)""), (331, '    return config'), (404, '        # Default fallback'), (405, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (416, 'def get_camera_config(args: Optional[Namespace] = None, custom_config: Optional[dict] = None) -> dict:'), (417, '    if args is None:'), (418, '        args = parse_cli()'), (419, '    if custom_config is None:'), (420, '        custom_config = get_global_config()'), (421, ''), (422, '    camera_config = dict()'), (450, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),'), (471, 'def get_scene_config(args: Namespace) -> dict:'), (472, '    """"""'), (473, '    Returns a dictionary to be used as key word arguments for Scene'), (474, '    """"""'), (475, '    global_config = get_global_config()'), (476, '    camera_config = get_camera_config(args, global_config)'), (477, '    window_config = get_window_config(args, global_config, camera_config)'), (481, '        ""file_writer_config"": get_file_writer_config(args, global_config),'), (491, '        ""embed_exception_mode"": global_config[""embed_exception_mode""],'), (492, '        ""embed_error_sound"": global_config[""embed_error_sound""],'), (496, 'def get_run_config(args: Namespace):'), (497, '    return {'), (498, '        ""module"": get_scene_module(args),'), (499, '        ""prerun"": args.prerun,'), (500, '        ""scene_names"": args.scene_names,'), (501, '        ""quiet"": args.quiet or args.write_all,'), (502, '        ""write_all"": args.write_all,'), (503, '    }')], 'deleted': [(22, '__config_file__ = ""custom_config.yml""'), (303, 'def get_custom_config():'), (304, '    global __config_file__'), (306, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (307, ''), (308, '    if os.path.exists(global_defaults_file):'), (309, '        with open(global_defaults_file, ""r"") as file:'), (310, '            custom_config = yaml.safe_load(file)'), (311, ''), (312, '        if os.path.exists(__config_file__):'), (313, '            with open(__config_file__, ""r"") as file:'), (314, '                local_defaults = yaml.safe_load(file)'), (315, '            if local_defaults:'), (316, '                custom_config = merge_dicts_recursively('), (317, '                    custom_config,'), (318, '                    local_defaults,'), (319, '                )'), (320, '    else:'), (321, '        with open(__config_file__, ""r"") as file:'), (322, '            custom_config = yaml.safe_load(file)'), (323, ''), (324, '    # Check temporary storage(custom_config)'), (325, '    if custom_config[""directories""][""temporary_storage""] == """" and sys.platform == ""win32"":'), (326, '        log.warning('), (327, '            ""You may be using Windows platform and have not specified the path of"" + \\'), (328, '            "" `temporary_storage`, which may cause OSError. So it is recommended"" + \\'), (329, '            "" to specify the `temporary_storage` in the config file (.yml)""'), (330, '        )'), (331, ''), (332, '    return custom_config'), (333, ''), (334, ''), (335, 'def init_global_config(config_file):'), (336, '    global __config_file__'), (337, ''), (338, '    # ensure __config_file__ always exists'), (339, '    if config_file is not None:'), (340, '        if not os.path.exists(config_file):'), (341, '            log.error(f""Can\'t find {config_file}."")'), (342, ""            if sys.platform == 'win32':""), (343, '                log.info(f""Copying default configuration file to {config_file}..."")'), (344, '                os.system(f""copy default_config.yml {config_file}"")'), (345, '            elif sys.platform in [""linux2"", ""darwin""]:'), (346, '                log.info(f""Copying default configuration file to {config_file}..."")'), (347, '                os.system(f""cp default_config.yml {config_file}"")'), (348, '            else:'), (349, '                log.info(""Please create the configuration file manually."")'), (350, '            log.info(""Read configuration from default_config.yml."")'), (351, '        else:'), (352, '            __config_file__ = config_file'), (356, '    if not (os.path.exists(global_defaults_file) or os.path.exists(__config_file__)):'), (357, '        log.info(""There is no configuration file detected. Switch to the config file initializer:"")'), (358, '        init_customization()'), (360, '    elif not os.path.exists(__config_file__):'), (361, '        log.info(f""Using the default configuration file, which you can modify in `{global_defaults_file}`"")'), (362, '        log.info('), (363, '            ""If you want to create a local configuration file, you can create a file named"" + \\'), (364, '            f"" `{__config_file__}`, or run `manimgl --config`""'), (365, '        )'), (438, '        pass'), (449, 'def get_camera_config(args: Namespace, custom_config: dict) -> dict:'), (450, '    camera_config = {}'), (478, '            ""frame_shape"": ((width / height) * get_frame_height(), get_frame_height()),'), (499, 'def get_configuration(args: Namespace) -> dict:'), (500, '    init_global_config(args.config_file)'), (501, '    custom_config = get_custom_config()'), (502, '    camera_config = get_camera_config(args, custom_config)'), (503, '    window_config = get_window_config(args, custom_config, camera_config)'), (507, '        ""module"": get_scene_module(args),'), (508, '        ""scene_names"": args.scene_names,'), (509, '        ""file_writer_config"": get_file_writer_config(args, custom_config),'), (512, '        ""quiet"": args.quiet or args.write_all,'), (513, '        ""write_all"": args.write_all,'), (521, '        ""prerun"": args.prerun,'), (522, '        ""embed_exception_mode"": custom_config[""embed_exception_mode""],'), (523, '        ""embed_error_sound"": custom_config[""embed_error_sound""],'), (527, 'def get_frame_height():'), (528, '    return 8.0'), (529, ''), (530, ''), (531, 'def get_aspect_ratio():'), (532, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (533, ""    return cam_config['pixel_width'] / cam_config['pixel_height']""), (534, ''), (535, ''), (536, 'def get_default_pixel_width():'), (537, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (538, ""    return cam_config['pixel_width']""), (539, ''), (540, ''), (541, 'def get_default_pixel_height():'), (542, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (543, ""    return cam_config['pixel_height']"")]}",71,71
manimlib/constants.py,manimlib/constants.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(4, 'from manimlib.config import get_camera_config'), (5, 'from manimlib.config import FRAME_HEIGHT'), (13, '# TODO, it feels a bit unprincipled to have some global constants'), (14, '# depend on the output of this function, and for all that configuration'), (15, '# code to be run merely upon importing from this file.'), (16, 'CAMERA_CONFIG = get_camera_config()'), (17, ''), (19, ""ASPECT_RATIO: float = CAMERA_CONFIG['pixel_width'] / CAMERA_CONFIG['pixel_height']""), (25, ""DEFAULT_PIXEL_HEIGHT: int = CAMERA_CONFIG['pixel_height']""), (26, ""DEFAULT_PIXEL_WIDTH: int = CAMERA_CONFIG['pixel_width']"")], 'deleted': [(4, 'from manimlib.config import get_aspect_ratio'), (5, 'from manimlib.config import get_default_pixel_width'), (6, 'from manimlib.config import get_default_pixel_height'), (7, 'from manimlib.config import get_frame_height'), (16, 'ASPECT_RATIO: float = get_aspect_ratio()'), (17, 'FRAME_HEIGHT: float = get_frame_height()'), (23, 'DEFAULT_PIXEL_HEIGHT: int = get_default_pixel_height()'), (24, 'DEFAULT_PIXEL_WIDTH: int = get_default_pixel_width()')]}",0,0
manimlib/default_config.yml,manimlib/default_config.yml,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(6, '  # Manim may write to and read from teh file system, e.g.'), (7, '  # to render videos and to look for svg/png assets. This'), (8, '  # will specify where those assets live, with a base directory,'), (9, '  # and various subdirectory names within it'), (10, '  base: """"'), (11, '  subdirs:'), (12, '    # Where should manim output video and image files?'), (13, '    output: ""videos""'), (14, '    # If you want to use images, manim will look to these folders to find them'), (15, '    raster_images: ""raster_images""'), (16, '    vector_images: ""vector_images""'), (17, '    # If you want to use sounds, manim will look here to find it.'), (18, '    sounds: ""sounds""'), (19, ""    # Place for other forms of data relevant to any projects, like csv's""), (20, '    data: ""data""'), (21, '    # When downloading, say an image, where will it go?'), (22, '    downloads: ""downloads""'), (23, '  # For certain object types, especially Tex and Text, manim will save information'), (24, '  # to file to prevent the need to re-compute, e.g. recompiling the latex. By default,'), (25, '  # it stores this saved data to whatever directory appdirs.user_cache_dir(""manim"") returns,'), (26, '  # but here a user can specify a different cache location'), (27, '  cache: """"')], 'deleted': [(6, '  # Where should manim output video and image files?'), (7, '  output: """"'), (8, '  # If you want to use images, manim will look to these folders to find them'), (9, '  raster_images: """"'), (10, '  vector_images: """"'), (11, '  # If you want to use sounds, manim will look here to find it.'), (12, '  sounds: """"'), (13, '  # Manim often generates tex_files or other kinds of serialized data'), (14, '  # to keep from having to generate the same thing too many times.  By'), (15, '  # default, these will be stored at tempfile.gettempdir(), e.g. this might'), (16, '  # return whatever is at to the TMPDIR environment variable.  If you want to'), (17, '  # specify them elsewhere,'), (18, '  temporary_storage: """"')]}",,
manimlib/extract_scene.py,manimlib/extract_scene.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(5, 'from manimlib.config import get_global_config'), (13, '        exec(get_global_config()[""universal_import_line""])'), (74, 'def scene_from_class(scene_class, scene_config, run_config):'), (76, '    if fw_config[""write_to_movie""] and run_config[""prerun""]:'), (81, 'def get_scenes_to_render(all_scene_classes, scene_config, run_config):'), (82, '    if run_config[""write_all""]:'), (85, '    names_to_classes = {sc.__name__: sc for sc in all_scene_classes}'), (86, '    scene_names = run_config[""scene_names""]'), (100, '        scene_from_class(scene_class, scene_config, run_config)'), (118, 'def main(scene_config, run_config):'), (119, '    if run_config[""module""] is None:'), (123, '    all_scene_classes = get_scene_classes_from_module(run_config[""module""])'), (124, '    return get_scenes_to_render(all_scene_classes, scene_config, run_config)')], 'deleted': [(5, 'from manimlib.config import get_custom_config'), (13, '        exec(get_custom_config()[""universal_import_line""])'), (56, 'def get_scene_config(config):'), (57, '    scene_parameters = inspect.signature(Scene).parameters.keys()'), (58, '    return {'), (59, '        key: config[key]'), (60, '        for key in set(scene_parameters).intersection(config.keys())'), (61, '    }'), (62, ''), (63, ''), (82, 'def scene_from_class(scene_class, scene_config, config):'), (84, '    if fw_config[""write_to_movie""] and config[""prerun""]:'), (89, 'def get_scenes_to_render(all_scene_classes, scene_config, config):'), (90, '    if config[""write_all""]:'), (93, '    names_to_classes = {sc.__name__ : sc for sc in all_scene_classes}'), (94, '    scene_names = config[""scene_names""]'), (108, '        scene_from_class(scene_class, scene_config, config)'), (126, 'def main(config):'), (127, '    module = config[""module""]'), (128, '    scene_config = get_scene_config(config)'), (129, '    if module is None:'), (133, '    all_scene_classes = get_scene_classes_from_module(module)'), (134, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, config)'), (135, '    return scenes')]}",31,31
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(5, 'from manimlib.config import get_global_config'), (60, ""            color = get_global_config()['style']['background_color']"")], 'deleted': [(12, 'from manimlib.utils.customization import get_customization'), (60, ""            color = get_customization()['style']['background_color']"")]}",13,13
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(10, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (79, '    def get_svg_string_by_content(self, content: str) -> str:'), (80, '        return latex_to_svg(content, self.template, self.additional_preamble)')], 'deleted': [(10, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (79, '    def get_file_path(self) -> str:'), (80, '        content = self.get_tex_file_body(self.tex_string)'), (81, '        file_path = tex_content_to_svg_file('), (82, '            content, self.template, self.additional_preamble, self.tex_string'), (83, '        )'), (84, '        return file_path')]}",60,60
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(69, '        svg_string = self.get_svg_string()'), (70, '        super().__init__(svg_string=svg_string, **kwargs)'), (75, '    def get_svg_string(self, is_labelled: bool = False) -> str:'), (76, '        content = self.get_content(is_labelled or self.use_labelled_svg)'), (77, '        return self.get_svg_string_by_content(content)'), (80, '    def get_svg_string_by_content(self, content: str) -> str:'), (113, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (114, '        submobs = super().mobjects_from_svg_string(svg_string)')], 'deleted': [(69, '        super().__init__(**kwargs)'), (74, '    def get_file_path(self, is_labelled: bool = False) -> str:'), (75, '        is_labelled = is_labelled or self.use_labelled_svg'), (76, '        return self.get_file_path_by_content(self.get_content(is_labelled))'), (79, '    def get_file_path_by_content(self, content: str) -> str:'), (112, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (113, '        submobs = super().mobjects_from_file(file_path)')]}",129,129
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(8, 'from pathlib import Path'), (43, '        svg_string: str = """",'), (68, '        if svg_string != """":'), (69, '            self.svg_string = svg_string'), (70, '        elif file_name != """":'), (71, '            self.svg_string = self.file_name_to_svg_string(file_name)'), (72, '        elif self.file_name != """":'), (73, '            self.file_name_to_svg_string(self.file_name)'), (74, '        else:'), (75, '            raise Exception(""Must specify either a file_name or svg_string SVGMobject"")'), (76, ''), (80, '        super().__init__(**kwargs)'), (110, '            submobs = self.mobjects_from_svg_string(self.svg_string)'), (124, '            self.svg_string'), (127, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (128, '        element_tree = ET.ElementTree(ET.fromstring(svg_string))'), (140, '    def file_name_to_svg_string(self, file_name: str) -> str:'), (141, '        return Path(get_full_vector_image_path(file_name)).read_text()')], 'deleted': [(66, '        self.file_name = file_name or self.file_name'), (70, '        super().__init__(**kwargs )'), (100, '            submobs = self.mobjects_from_file(self.get_file_path())'), (114, '            self.file_name'), (117, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (118, '        element_tree = ET.parse(file_path)'), (130, '    def get_file_path(self) -> str:'), (131, '        if self.file_name is None:'), (132, '            raise Exception(""Must specify file for SVGMobject"")'), (133, '        return get_full_vector_image_path(self.file_name)')]}",60,60
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(4, 'from pathlib import Path'), (11, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (13, 'from manimlib.utils.simple_functions import hash_string'), (70, '    def get_svg_string_by_content(self, content: str) -> str:'), (71, '        return latex_to_svg(content, self.template, self.additional_preamble, short_tex=self.tex_string)')], 'deleted': [(10, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (68, '    @property'), (69, '    def hash_seed(self) -> tuple:'), (70, '        return ('), (71, '            self.__class__.__name__,'), (72, '            self.svg_default,'), (73, '            self.path_string_config,'), (74, '            self.base_color,'), (75, '            self.isolate,'), (76, '            self.protect,'), (77, '            self.tex_string,'), (78, '            self.alignment,'), (79, '            self.tex_environment,'), (80, '            self.tex_to_color_map,'), (81, '            self.template,'), (82, '            self.additional_preamble'), (83, '        )'), (84, ''), (85, '    def get_file_path_by_content(self, content: str) -> str:'), (86, '        return tex_content_to_svg_file('), (87, '            content, self.template, self.additional_preamble, self.tex_string'), (88, '        )')]}",52,52
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(7, 'import tempfile'), (8, 'import hashlib'), (9, 'from functools import lru_cache'), (16, 'from manimlib.config import get_global_config'), (21, 'from manimlib.utils.cache import cache_on_disk'), (54, '@lru_cache(maxsize=128)'), (55, '@cache_on_disk'), (56, 'def markup_to_svg('), (57, '    markup_str: str,'), (58, '    justify: bool = False,'), (59, '    indent: float = 0,'), (60, '    alignment: str = ""CENTER"",'), (61, '    line_width: float | None = None,'), (62, ') -> str:'), (63, '    validate_error = manimpango.MarkupUtils.validate(markup_str)'), (64, '    if validate_error:'), (65, '        raise ValueError('), (66, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (67, '            f""{validate_error}""'), (68, '        )'), (69, ''), (70, '    # `manimpango` is under construction,'), (71, '    # so the following code is intended to suit its interface'), (72, '    alignment = _Alignment(alignment)'), (73, '    if line_width is None:'), (74, '        pango_width = -1'), (75, '    else:'), (76, '        pango_width = line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (77, ''), (78, ""    # Write the result to a temporary svg file, and return it's contents.""), (79, '    # TODO, better would be to have this not write to file at all'), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (81, '        manimpango.MarkupUtils.text2svg('), (82, '            text=markup_str,'), (83, '            font="""",                     # Already handled'), (84, '            slant=""NORMAL"",              # Already handled'), (85, '            weight=""NORMAL"",             # Already handled'), (86, '            size=1,                      # Already handled'), (87, '            _=0,                         # Empty parameter'), (88, '            disable_liga=False,'), (89, '            file_name=tmp.name,'), (90, '            START_X=0,'), (91, '            START_Y=0,'), (92, '            width=DEFAULT_CANVAS_WIDTH,'), (93, '            height=DEFAULT_CANVAS_HEIGHT,'), (94, '            justify=justify,'), (95, '            indent=indent,'), (96, '            line_spacing=None,           # Already handled'), (97, '            alignment=alignment,'), (98, '            pango_width=pango_width'), (99, '        )'), (100, ''), (101, '        # Read the contents'), (102, '        tmp.seek(0)'), (103, '        return tmp.read()'), (104, ''), (105, ''), (159, '        default_style = get_global_config()[""style""]'), (164, '        self.alignment = alignment or default_style[""text_alignment""]'), (166, '        self.font = font or default_style[""font""]'), (199, '    def get_svg_string_by_content(self, content: str) -> str:'), (200, '        self.content = content'), (201, '        return markup_to_svg('), (205, '            alignment=self.alignment,'), (206, '            line_width=self.line_width'), (495, '    file_path = Path(font_file).resolve()'), (496, '    if not file_path.exists():'), (497, '        error = f""Can\'t find {font_file}.""')], 'deleted': [(17, 'from manimlib.utils.customization import get_customization'), (20, 'from manimlib.utils.directories import get_downloads_dir'), (21, 'from manimlib.utils.directories import get_text_dir'), (109, '        self.alignment = alignment or get_customization()[""style""][""text_alignment""]'), (111, '        self.font = font or get_customization()[""style""][""font""]'), (144, '    @property'), (145, '    def hash_seed(self) -> tuple:'), (146, '        return ('), (147, '            self.__class__.__name__,'), (148, '            self.svg_default,'), (149, '            self.path_string_config,'), (150, '            self.base_color,'), (151, '            self.isolate,'), (152, '            self.protect,'), (153, '            self.text,'), (154, '            self.font_size,'), (155, '            self.lsh,'), (156, '            self.justify,'), (157, '            self.indent,'), (158, '            self.alignment,'), (159, '            self.line_width,'), (160, '            self.font,'), (161, '            self.slant,'), (162, '            self.weight,'), (163, '            self.t2c,'), (164, '            self.t2f,'), (165, '            self.t2s,'), (166, '            self.t2w,'), (167, '            self.global_config,'), (168, '            self.local_configs,'), (169, '            self.disable_ligatures'), (170, '        )'), (171, ''), (172, '    def get_file_path_by_content(self, content: str) -> str:'), (173, '        hash_content = str(('), (175, '            self.justify,'), (176, '            self.indent,'), (177, '            self.alignment,'), (178, '            self.line_width'), (179, '        ))'), (180, '        svg_file = os.path.join('), (181, '            get_text_dir(), hash_string(hash_content) + "".svg""'), (182, '        )'), (183, '        if not os.path.exists(svg_file):'), (184, '            self.markup_to_svg(content, svg_file)'), (185, '        return svg_file'), (186, ''), (187, '    def markup_to_svg(self, markup_str: str, file_name: str) -> str:'), (188, '        self.validate_markup_string(markup_str)'), (189, ''), (190, '        # `manimpango` is under construction,'), (191, '        # so the following code is intended to suit its interface'), (192, '        alignment = _Alignment(self.alignment)'), (193, '        if self.line_width is None:'), (194, '            pango_width = -1'), (195, '        else:'), (196, '            pango_width = self.line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (197, ''), (198, '        return manimpango.MarkupUtils.text2svg('), (199, '            text=markup_str,'), (200, '            font="""",                     # Already handled'), (201, '            slant=""NORMAL"",              # Already handled'), (202, '            weight=""NORMAL"",             # Already handled'), (203, '            size=1,                      # Already handled'), (204, '            _=0,                         # Empty parameter'), (205, '            disable_liga=False,'), (206, '            file_name=file_name,'), (207, '            START_X=0,'), (208, '            START_Y=0,'), (209, '            width=DEFAULT_CANVAS_WIDTH,'), (210, '            height=DEFAULT_CANVAS_HEIGHT,'), (213, '            line_spacing=None,           # Already handled'), (214, '            alignment=alignment,'), (215, '            pango_width=pango_width'), (216, '        )'), (217, ''), (218, '    @staticmethod'), (219, '    def validate_markup_string(markup_str: str) -> None:'), (220, '        validate_error = manimpango.MarkupUtils.validate(markup_str)'), (221, '        if not validate_error:'), (222, '            return'), (223, '        raise ValueError('), (224, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (225, '            f""{validate_error}""'), (514, '    input_folder = Path(get_downloads_dir()).parent.resolve()'), (515, '    possible_paths = ['), (516, '        Path(font_file),'), (517, '        input_folder / font_file,'), (518, '    ]'), (519, '    for path in possible_paths:'), (520, '        path = path.resolve()'), (521, '        if path.exists():'), (522, '            file_path = path'), (523, '            break'), (524, '    else:'), (525, '        error = f""Can\'t find {font_file}."" f""Tried these : {possible_paths}""'), (527, '')]}",73,73
manimlib/reload_manager.py,manimlib/reload_manager.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(62, '        scene_config = manimlib.config.get_scene_config(self.args)'), (64, '            scene_config[""existing_window""] = self.window  # see scene initialization'), (65, ''), (66, '        run_config = manimlib.config.get_run_config(self.args)'), (69, '        self.scenes = manimlib.extract_scene.main(scene_config, run_config)'), (81, '            if self.args.embed:'), (82, '                print("" "".join(['), (83, '                    ""Loading interactive session for"",'), (84, '                    f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (85, '                    f""in \\033[96m{self.args.file}\\033[0m"",'), (86, '                    f""at line \\033[96m{self.args.embed}\\033[0m""'), (87, '                ]))')], 'deleted': [(40, '                print(""Reloading..."")'), (41, ''), (64, '        config = manimlib.config.get_configuration(self.args)'), (66, '            config[""existing_window""] = self.window  # see scene initialization'), (69, '        self.scenes = manimlib.extract_scene.main(config)'), (83, '')]}",15,15
manimlib/scene/scene.py,manimlib/scene/scene.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(235, '        shell = InteractiveShellEmbed('), (236, '            user_module=module,'), (237, '            display_banner=False,'), (238, '            xmode=self.embed_exception_mode'), (239, '        )')], 'deleted': [(235, '        shell = InteractiveShellEmbed(user_module=module)'), (291, '        # Set desired exception mode'), (292, '        shell.magic(f""xmode {self.embed_exception_mode}"")'), (293, '')]}",241,241
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(13, 'from manimlib.config import get_camera_config'), (413, '        cam_config = get_camera_config()')], 'deleted': [(13, 'from manimlib.config import get_configuration'), (413, ""        cam_config = get_configuration(parse_cli())['camera_config']"")]}",66,66
,manimlib/utils/cache.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(1, 'from __future__ import annotations'), (2, ''), (3, 'import os'), (4, 'from diskcache import Cache'), (5, 'from contextlib import contextmanager'), (6, 'from functools import wraps'), (7, ''), (8, 'from manimlib.utils.directories import get_cache_dir'), (9, 'from manimlib.utils.simple_functions import hash_string'), (10, ''), (11, 'from typing import TYPE_CHECKING'), (12, ''), (13, 'if TYPE_CHECKING:'), (14, ""    T = TypeVar('T')""), (15, ''), (16, ''), (17, 'CACHE_SIZE = 1e9  # 1 Gig'), (18, '_cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)'), (19, ''), (20, ''), (21, 'def cache_on_disk(func: Callable[..., T]) -> Callable[..., T]:'), (22, '    @wraps(func)'), (23, '    def wrapper(*args, **kwargs):'), (24, '        key = hash_string(f""{func.__name__}{args}{kwargs}"")'), (25, '        value = _cache.get(key)'), (26, '        if value is None:'), (27, '            value = func(*args, **kwargs)'), (28, '            _cache.set(key, value)'), (29, '        return value'), (30, '    return wrapper'), (31, ''), (32, ''), (33, 'def clear_cache():'), (34, '    _cache.clear()')], 'deleted': []}",,4
manimlib/utils/customization.py,,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [], 'deleted': [(1, 'import os'), (2, 'import tempfile'), (3, ''), (4, 'from manimlib.config import get_custom_config'), (5, 'from manimlib.config import get_manim_dir'), (6, ''), (7, ''), (8, 'CUSTOMIZATION = {}'), (9, ''), (10, ''), (11, 'def get_customization():'), (12, '    if not CUSTOMIZATION:'), (13, '        CUSTOMIZATION.update(get_custom_config())'), (14, '        directories = CUSTOMIZATION[""directories""]'), (15, '        # Unless user has specified otherwise, use the system default temp'), (16, '        # directory for storing tex files, mobject_data, etc.'), (17, '        if not directories[""temporary_storage""]:'), (18, '            directories[""temporary_storage""] = tempfile.gettempdir()'), (19, ''), (20, '        # Assumes all shaders are written into manimlib/shaders'), (21, '        directories[""shaders""] = os.path.join('), (22, '            get_manim_dir(), ""manimlib"", ""shaders""'), (23, '        )'), (24, '    return CUSTOMIZATION')]}",,
manimlib/utils/directories.py,manimlib/utils/directories.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(4, 'import tempfile'), (5, 'import appdirs'), (7, ''), (8, 'from manimlib.config import get_global_config'), (9, 'from manimlib.config import get_manim_dir'), (14, '    return get_global_config()[""directories""]'), (17, 'def get_cache_dir() -> str:'), (18, '    return get_directories()[""cache""] or appdirs.user_cache_dir(""manim"")'), (21, 'def get_temp_dir() -> str:'), (22, '    return get_directories()[""temporary_storage""] or tempfile.gettempdir()'), (26, '    return get_directories()[""downloads""] or appdirs.user_cache_dir(""manim_downloads"")'), (46, '    return os.path.join(get_manim_dir(), ""manimlib"", ""shaders"")')], 'deleted': [(5, 'from manimlib.utils.customization import get_customization'), (10, '    return get_customization()[""directories""]'), (11, ''), (12, ''), (13, 'def get_temp_dir() -> str:'), (14, '    return get_directories()[""temporary_storage""]'), (17, 'def get_tex_dir() -> str:'), (18, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Tex""))'), (21, 'def get_text_dir() -> str:'), (22, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Text""))'), (23, ''), (24, ''), (25, 'def get_mobject_data_dir() -> str:'), (26, '    return guarantee_existence(os.path.join(get_temp_dir(), ""mobject_data""))'), (30, '    return guarantee_existence(os.path.join(get_temp_dir(), ""manim_downloads""))'), (50, '    return get_directories()[""shaders""]')]}",12,12
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(9, 'import urllib.request'), (10, ''), (11, 'import manimlib.utils.directories'), (12, 'from manimlib.utils.simple_functions import hash_string'), (43, '        file_hash = hash_string(file_name)'), (44, '        folder = manimlib.utils.directories.get_downloads_dir()')], 'deleted': [(38, '        import urllib.request'), (39, '        from manimlib.utils.directories import get_downloads_dir'), (41, ""        file_hash = hashlib.sha256(file_name.encode('utf-8')).hexdigest()[:32]""), (42, '        folder = get_downloads_dir()')]}",24,24
manimlib/utils/init_config.py,manimlib/utils/init_config.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(39, '            ""base"": """",'), (40, '            ""subdirs"": {'), (41, '                ""output"": ""videos"",'), (42, '                ""raster_images"": ""raster_images"",'), (43, '                ""vector_images"": ""vector_images"",'), (44, '                ""sounds"": ""sounds"",'), (45, '                ""data"": ""data"",'), (46, '                ""downloads"": ""downloads"",'), (47, '            }'), (81, '        dir_config[""base""] = Prompt.ask('), (82, '            ""  What base directory should manim use for reading/writing video and images? [prompt.default](optional, default is none)"",'), (86, '        dir_config[""subdirs""][""output""] = Prompt.ask('), (87, '            ""  Within that base directory, which subdirectory should manim [bold]output[/bold] video and image files to?"" + \\'), (88, '            "" [prompt.default](optional, default is \\""videos\\"")"",'), (89, '            default=""videos"",'), (92, '        dir_config[""subdirs""][""raster_images""] = Prompt.ask('), (93, '            ""  Within that base directory, which subdirectory should manim look for raster images (.png, .jpg)"" + \\'), (94, '            "" [prompt.default](optional, default is \\""raster_images\\"")"",'), (95, '            default=""raster_images"",'), (98, '        dir_config[""subdirs""][""vector_images""] = Prompt.ask('), (99, '            ""  Within that base directory, which subdirectory should manim look for raster images (.svg, .xdv)"" + \\'), (100, '            "" [prompt.default](optional, default is \\""vector_images\\"")"",'), (101, '            default=""vector_images"",'), (104, '        dir_config[""subdirs""][""sounds""] = Prompt.ask('), (105, '            ""  Within that base directory, which subdirectory should manim look for sound files (.mp3, .wav)"" + \\'), (106, '            "" [prompt.default](optional, default is \\""sounds\\"")"",'), (107, '            default=""sounds"",'), (108, '            show_default=False'), (109, '        )'), (110, '        dir_config[""subdirs""][""downloads""] = Prompt.ask('), (111, '            ""  Within that base directory, which subdirectory should manim output downloaded files"" + \\'), (112, '            "" [prompt.default](optional, default is \\""downloads\\"")"",'), (113, '            default=""downloads"",')], 'deleted': [(39, '            ""output"": """",'), (40, '            ""raster_images"": """",'), (41, '            ""vector_images"": """",'), (42, '            ""sounds"": """",'), (43, '            ""temporary_storage"": """",'), (77, '        dir_config[""output""] = Prompt.ask('), (78, '            ""  Where should manim [bold]output[/bold] video and image files place [prompt.default](optional, default is none)"",'), (82, '        dir_config[""raster_images""] = Prompt.ask('), (83, '            ""  Which folder should manim find [bold]raster images[/bold] (.jpg .png .gif) in "" + \\'), (84, '            ""[prompt.default](optional, default is none)"",'), (85, '            default="""",'), (88, '        dir_config[""vector_images""] = Prompt.ask('), (89, '            ""  Which folder should manim find [bold]vector images[/bold] (.svg .xdv) in "" + \\'), (90, '            ""[prompt.default](optional, default is none)"",'), (91, '            default="""",'), (94, '        dir_config[""sounds""] = Prompt.ask('), (95, '            ""  Which folder should manim find [bold]sound files[/bold] (.mp3 .wav) in "" + \\'), (96, '            ""[prompt.default](optional, default is none)"",'), (97, '            default="""",'), (100, '        dir_config[""temporary_storage""] = Prompt.ask('), (101, '            ""  Which folder should manim storage [bold]temporary files[/bold] "" + \\'), (102, '            ""[prompt.default](recommended, use system temporary folder by default)"",'), (103, '            default="""",')]}",10,10
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(99, 'def hash_string(string: str, n_bytes=16) -> str:'), (101, '    return hasher.hexdigest()[:n_bytes]')], 'deleted': [(99, 'def hash_string(string: str) -> str:'), (100, '    # Truncating at 16 bytes for cleanliness'), (102, '    return hasher.hexdigest()[:16]')]}",22,22
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(6, 'import subprocess'), (7, 'from functools import lru_cache'), (9, 'from pathlib import Path'), (10, 'import tempfile'), (11, ''), (12, 'from manimlib.utils.cache import cache_on_disk'), (13, 'from manimlib.config import get_global_config'), (24, '    template_path = os.path.join(get_manim_dir(), ""manimlib"", ""tex_templates.yml"")'), (25, '    with open(template_path, encoding=""utf-8"") as tex_templates_file:'), (47, '        template_name = get_global_config()[""style""][""tex_template""]'), (57, 'def get_full_tex(content: str, preamble: str = """"):'), (58, '    return ""\\n\\n"".join(('), (67, '@lru_cache(maxsize=128)'), (68, '@cache_on_disk'), (69, 'def latex_to_svg('), (70, '    latex: str,'), (71, '    template: str = """",'), (72, '    additional_preamble: str = """",'), (73, '    short_tex: str = """",'), (74, '    show_message_during_execution: bool = True,'), (75, ') -> str:'), (76, '    """"""Convert LaTeX string to SVG string.'), (77, ''), (78, '    Args:'), (79, '        latex: LaTeX source code'), (80, '        template: Path to a template LaTeX file'), (81, '        additional_preamble: String including any added ""\\\\usepackage{...}"" style imports'), (82, ''), (83, '    Returns:'), (84, '        str: SVG source code'), (85, ''), (86, '    Raises:'), (87, '        LatexError: If LaTeX compilation fails'), (88, '        NotImplementedError: If compiler is not supported'), (89, '    """"""'), (90, '    if show_message_during_execution:'), (91, '        max_message_len = 80'), (92, '        message = f""Writing {short_tex or latex}""'), (93, '        if len(message) > max_message_len:'), (94, '            message = message[:max_message_len - 3] + ""...""'), (95, '        print(message, end=""\\r"")'), (96, ''), (97, '    tex_config = get_tex_config()'), (98, '    if template and template != tex_config[""template""]:'), (99, '        tex_config = get_tex_template_config(template)'), (100, ''), (101, '    compiler = tex_config[""compiler""]'), (110, '        raise NotImplementedError(f""Compiler \'{compiler}\' is not implemented"")'), (111, ''), (112, '    preamble = tex_config[""preamble""] + ""\\n"" + additional_preamble'), (113, '    full_tex = get_full_tex(latex, preamble)'), (114, ''), (115, '    # Write intermediate files to a temporary directory'), (116, '    with tempfile.TemporaryDirectory() as temp_dir:'), (117, '        base_path = os.path.join(temp_dir, ""working"")'), (118, '        tex_path = base_path + "".tex""'), (119, '        dvi_path = base_path + dvi_ext'), (120, ''), (121, '        # Write tex file'), (122, '        with open(tex_path, ""w"", encoding=""utf-8"") as tex_file:'), (123, '            tex_file.write(full_tex)'), (124, ''), (125, '        # Run latex compiler'), (126, '        process = subprocess.run('), (127, '            ['), (128, '                program.split()[0],  # Split for xelatex case'), (129, '                ""-interaction=batchmode"",'), (130, '                ""-halt-on-error"",'), (131, '                ""-output-directory="" + temp_dir,'), (132, '                tex_path'), (133, '            ] + ([""--no-pdf""] if compiler == ""xelatex"" else []),'), (134, '            capture_output=True,'), (135, '            text=True'), (138, '        if process.returncode != 0:'), (139, '            # Handle error'), (140, '            error_str = """"'), (141, '            log_path = base_path + "".log""'), (142, '            if os.path.exists(log_path):'), (143, '                with open(log_path, ""r"", encoding=""utf-8"") as log_file:'), (144, '                    content = log_file.read()'), (145, '                    error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (146, '                    if error_match:'), (147, '                        error_str = error_match.group()'), (148, '            raise LatexError(error_str or ""LaTeX compilation failed"")'), (149, ''), (150, '        # Run dvisvgm and capture output directly'), (151, '        process = subprocess.run('), (152, '            ['), (153, '                ""dvisvgm"",'), (154, '                dvi_path,'), (155, '                ""-n"",  # no fonts'), (156, '                ""-v"", ""0"",  # quiet'), (157, '                ""--stdout"",  # output to stdout instead of file'), (158, '            ],'), (159, '            capture_output=True'), (161, ''), (162, '        # Return SVG string'), (163, ""        result = process.stdout.decode('utf-8')""), (164, ''), (165, '    if show_message_during_execution:'), (166, '        print("" "" * len(message), end=""\\r"")'), (167, ''), (168, '    return result')], 'deleted': [(3, 'from contextlib import contextmanager'), (8, 'from manimlib.config import get_custom_config'), (11, 'from manimlib.utils.directories import get_tex_dir'), (20, '    with open(os.path.join('), (21, '        get_manim_dir(), ""manimlib"", ""tex_templates.yml""'), (22, '    ), encoding=""utf-8"") as tex_templates_file:'), (44, '        template_name = get_custom_config()[""style""][""tex_template""]'), (54, 'def tex_content_to_svg_file('), (55, '    content: str, template: str, additional_preamble: str,'), (56, '    short_tex: str'), (57, ') -> str:'), (58, '    tex_config = get_tex_config()'), (59, '    if not template or template == tex_config[""template""]:'), (60, '        compiler = tex_config[""compiler""]'), (61, '        preamble = tex_config[""preamble""]'), (62, '    else:'), (63, '        config = get_tex_template_config(template)'), (64, '        compiler = config[""compiler""]'), (65, '        preamble = config[""preamble""]'), (66, ''), (67, '    if additional_preamble:'), (68, '        preamble += ""\\n"" + additional_preamble'), (69, '    full_tex = ""\\n\\n"".join(('), (77, '    svg_file = os.path.join('), (78, '        get_tex_dir(), hash_string(full_tex) + "".svg""'), (79, '    )'), (80, '    if not os.path.exists(svg_file):'), (81, ""        # If svg doesn't exist, create it""), (82, '        with display_during_execution(""Writing "" + short_tex):'), (83, '            create_tex_svg(full_tex, svg_file, compiler)'), (84, '    return svg_file'), (87, 'def create_tex_svg(full_tex: str, svg_file: str, compiler: str) -> None:'), (95, '        raise NotImplementedError('), (96, '            f""Compiler \'{compiler}\' is not implemented""'), (99, '    # Write tex file'), (100, '    root, _ = os.path.splitext(svg_file)'), (101, '    with open(root + "".tex"", ""w"", encoding=""utf-8"") as tex_file:'), (102, '        tex_file.write(full_tex)'), (103, ''), (104, '    # tex to dvi'), (105, '    if os.system("" "".join(('), (106, '        program,'), (107, '        ""-interaction=batchmode"",'), (108, '        ""-halt-on-error"",'), (109, '        f""-output-directory=\\""{os.path.dirname(svg_file)}\\"""",'), (110, '        f""\\""{root}.tex\\"""",'), (111, '        "">"",'), (112, '        os.devnull'), (113, '    ))):'), (114, '        log.error('), (115, '            ""LaTeX Error!  Not a worry, it happens to the best of us.""'), (117, '        error_str = """"'), (118, '        with open(root + "".log"", ""r"", encoding=""utf-8"") as log_file:'), (119, '            error_match_obj = re.search(r""(?<=\\n! ).*\\n.*\\n"", log_file.read())'), (120, '            if error_match_obj:'), (121, '                error_str = error_match_obj.group()'), (122, '                log.debug('), (123, '                    f""The error could be:\\n`{error_str}`"",'), (124, '                )'), (125, '        raise LatexError(error_str)'), (126, ''), (127, '    # dvi to svg'), (128, '    os.system("" "".join(('), (129, '        ""dvisvgm"",'), (130, '        f""\\""{root}{dvi_ext}\\"""",'), (131, '        ""-n"",'), (132, '        ""-v"",'), (133, '        ""0"",'), (134, '        ""-o"",'), (135, '        f""\\""{svg_file}\\"""",'), (136, '        "">"",'), (137, '        os.devnull'), (138, '    )))'), (139, ''), (140, '    # Cleanup superfluous documents'), (141, '    for ext in ("".tex"", dvi_ext, "".log"", "".aux""):'), (142, '        try:'), (143, '            os.remove(root + ext)'), (144, '        except FileNotFoundError:'), (145, '            pass'), (146, ''), (147, ''), (148, '# TODO, perhaps this should live elsewhere'), (149, '@contextmanager'), (150, 'def display_during_execution(message: str):'), (151, '    # Merge into a single line'), (152, '    to_print = message.replace(""\\n"", "" "")'), (153, '    max_characters = os.get_terminal_size().columns - 1'), (154, '    if len(to_print) > max_characters:'), (155, '        to_print = to_print[:max_characters - 3] + ""...""'), (156, '    try:'), (157, '        print(to_print, end=""\\r"")'), (158, '        yield'), (159, '    finally:'), (160, '        print("" "" * len(to_print), end=""\\r"")')]}",18,18
manimlib/window.py,manimlib/window.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(11, 'from manimlib.config import get_global_config'), (89, '        global_config = get_global_config()'), (90, '        custom_position = global_config[""window_position""]'), (91, '        mon_index = global_config[""window_monitor""]')], 'deleted': [(12, 'from manimlib.utils.customization import get_customization'), (89, '        custom_position = get_customization()[""window_position""]'), (91, '        mon_index = get_customization()[""window_monitor""]')]}",25,25
requirements.txt,requirements.txt,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","{'added': [(1, 'appdirs'), (3, 'diskcache'), (25, 'tempfile')], 'deleted': []}",,
manimlib/config.py,manimlib/config.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","{'added': [(16, 'from manimlib.module_loader import ModuleLoader'), (218, '    file_name: str, scene_name: str, line_marker: str, is_during_reload'), (280, '    module = ModuleLoader.get_module(new_file, is_during_reload)'), (292, '        return ModuleLoader.get_module(args.file)'), (294, '        is_reload = args.is_reload if hasattr(args, ""is_reload"") else False'), (296, '            args.file, args.scene_names[0], args.embed, is_reload')], 'deleted': [(212, 'def get_module(file_name: str | None) -> Module:'), (213, '    if file_name is None:'), (214, '        return None'), (215, '    module_name = file_name.replace(os.sep, ""."").replace("".py"", """")'), (216, '    spec = importlib.util.spec_from_file_location(module_name, file_name)'), (217, '    module = importlib.util.module_from_spec(spec)'), (218, '    spec.loader.exec_module(module)'), (219, '    return module'), (220, ''), (221, ''), (227, '    file_name: str, scene_name: str, line_marker: str'), (289, '    module = get_module(new_file)'), (301, '        return get_module(args.file)'), (304, '            args.file, args.scene_names[0], args.embed')]}",70,70
,manimlib/module_loader.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","{'added': [(1, 'from __future__ import annotations'), (2, ''), (3, 'import builtins'), (4, 'import importlib'), (5, 'import os'), (6, 'import sys'), (7, 'import sysconfig'), (8, ''), (9, 'from manimlib.logger import log'), (10, ''), (11, 'Module = importlib.util.types.ModuleType'), (12, ''), (13, 'IGNORE_MANIMLIB_MODULES = True'), (14, ''), (15, ''), (16, 'class ModuleLoader:'), (17, '    """"""'), (18, '    Utility class to load a module from a file and handle its imports.'), (19, ''), (20, '    Most parts of this class are only needed for the reload functionality,'), (21, '    while the `get_module` method is the main entry point to import a module.'), (22, '    """"""'), (23, ''), (24, '    @staticmethod'), (25, '    def get_module(file_name: str | None, is_during_reload=False) -> Module | None:'), (26, '        """"""'), (27, '        Imports a module from a file and returns it.'), (28, ''), (29, '        During reload (when the user calls `reload()` in the IPython shell), we'), (30, '        also track the imported modules and reload them as well (they would be'), (31, '        cached otherwise). See the reload_manager where the reload parameter is set.'), (32, ''), (33, '        Note that `exec_module()` is called twice when reloading a module:'), (34, '        1. In exec_module_and_track_imports to track the imports'), (35, '        2. Here to actually execute the module again with the respective'), (36, '           imported modules reloaded.'), (37, '        """"""'), (38, '        if file_name is None:'), (39, '            return None'), (40, ''), (41, '        module_name = file_name.replace(os.sep, ""."").replace("".py"", """")'), (42, '        spec = importlib.util.spec_from_file_location(module_name, file_name)'), (43, '        module = importlib.util.module_from_spec(spec)'), (44, ''), (45, '        if is_during_reload:'), (46, '            imported_modules = ModuleLoader._exec_module_and_track_imports(spec, module)'), (47, '            reloaded_modules_tracker = set()'), (48, '            ModuleLoader._reload_modules(imported_modules, reloaded_modules_tracker)'), (49, ''), (50, '        spec.loader.exec_module(module)'), (51, '        return module'), (52, ''), (53, '    @staticmethod'), (54, '    def _exec_module_and_track_imports(spec, module: Module) -> set[str]:'), (55, '        """"""'), (56, '        Executes the given module (imports it) and returns all the modules that'), (57, '        are imported during its execution.'), (58, ''), (59, '        This is achieved by replacing the __import__ function with a custom one'), (60, '        that tracks the imported modules. At the end, the original __import__'), (61, '        built-in function is restored.'), (62, '        """"""'), (63, '        imported_modules: set[str] = set()'), (64, '        original_import = builtins.__import__'), (65, ''), (66, '        def tracked_import(name, globals=None, locals=None, fromlist=(), level=0):'), (67, '            """"""'), (68, '            Custom __import__ function that does exactly the same as the original'), (69, '            one, but also tracks the imported modules by means of adding their'), (70, '            names to a set.'), (71, '            """"""'), (72, '            result = original_import(name, globals, locals, fromlist, level)'), (73, '            imported_modules.add(name)'), (74, '            return result'), (75, ''), (76, '        builtins.__import__ = tracked_import'), (77, ''), (78, '        try:'), (79, '            # Remove the ""_insert_embed"" suffix from the module name'), (80, '            module_name = module.__name__'), (81, '            if module.__name__.endswith(""_insert_embed""):'), (82, '                module_name = module_name[:-13]'), (83, '            log.debug(\'Reloading module ""%s""\', module_name)'), (84, ''), (85, '            spec.loader.exec_module(module)'), (86, '        finally:'), (87, '            builtins.__import__ = original_import'), (88, ''), (89, '        return imported_modules'), (90, ''), (91, '    @staticmethod'), (92, '    def _reload_modules(modules: set[str], reloaded_modules_tracker: set[str]):'), (93, '        """"""'), (94, '        Out of the given modules, reloads the ones that were not already imported.'), (95, ''), (96, '        We skip modules that are not user-defined (see `is_user_defined_module()`).'), (97, '        """"""'), (98, '        for mod in modules:'), (99, '            if mod in reloaded_modules_tracker:'), (100, '                continue'), (101, ''), (102, '            if not ModuleLoader._is_user_defined_module(mod):'), (103, '                continue'), (104, ''), (105, '            module = sys.modules[mod]'), (106, '            ModuleLoader._deep_reload(module, reloaded_modules_tracker)'), (107, ''), (108, '            reloaded_modules_tracker.add(mod)'), (109, ''), (110, '    @staticmethod'), (111, '    def _is_user_defined_module(mod: str) -> bool:'), (112, '        """"""'), (113, '        Returns whether the given module is user-defined or not.'), (114, ''), (115, '        A module is considered user-defined if'), (116, '        - it is not part of the standard library'), (117, '        - AND it is not an external library (site-packages or dist-packages)'), (118, '        """"""'), (119, '        if mod not in sys.modules:'), (120, '            return False'), (121, ''), (122, '        if mod in sys.builtin_module_names:'), (123, '            return False'), (124, ''), (125, '        module = sys.modules[mod]'), (126, '        module_path = getattr(module, ""__file__"", None)'), (127, '        if module_path is None:'), (128, '            return False'), (129, '        module_path = os.path.abspath(module_path)'), (130, ''), (131, '        # External libraries (site-packages or dist-packages), e.g. numpy'), (132, '        if ""site-packages"" in module_path or ""dist-packages"" in module_path:'), (133, '            return False'), (134, ''), (135, '        # Standard lib'), (136, '        standard_lib_path = sysconfig.get_path(""stdlib"")'), (137, '        if module_path.startswith(standard_lib_path):'), (138, '            return False'), (139, ''), (140, '        return True'), (141, ''), (142, '    @staticmethod'), (143, '    def _deep_reload(module: Module, reloaded_modules_tracker: set[str]):'), (144, '        """"""'), (145, '        Recursively reloads modules imported by the given module.'), (146, ''), (147, '        Only user-defined modules are reloaded, see `is_user_defined_module()`.'), (148, '        """"""'), (149, '        if IGNORE_MANIMLIB_MODULES and module.__name__.startswith(""manimlib""):'), (150, '            return'), (151, ''), (152, '        if not hasattr(module, ""__dict__""):'), (153, '            return'), (154, ''), (155, '        # Prevent reloading the same module multiple times'), (156, '        if module.__name__ in reloaded_modules_tracker:'), (157, '            return'), (158, '        reloaded_modules_tracker.add(module.__name__)'), (159, ''), (160, '        # Recurse for all imported modules'), (161, '        for _attr_name, attr_value in module.__dict__.items():'), (162, '            if isinstance(attr_value, Module):'), (163, '                if ModuleLoader._is_user_defined_module(attr_value.__name__):'), (164, '                    ModuleLoader._deep_reload(attr_value, reloaded_modules_tracker)'), (165, ''), (166, '            # Also reload modules that are part of a class or function'), (167, '            # e.g. when importing `from custom_module import CustomClass`'), (168, '            elif hasattr(attr_value, ""__module__""):'), (169, '                attr_module_name = attr_value.__module__'), (170, '                if ModuleLoader._is_user_defined_module(attr_module_name):'), (171, '                    attr_module = sys.modules[attr_module_name]'), (172, '                    ModuleLoader._deep_reload(attr_module, reloaded_modules_tracker)'), (173, ''), (174, '        # Reload'), (175, '        log.debug(\'Reloading module ""%s""\', module.__name__)'), (176, '        importlib.reload(module)')], 'deleted': []}",,28
manimlib/reload_manager.py,manimlib/reload_manager.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","{'added': [(22, '    is_reload = False'), (23, ''), (46, '                self.is_reload = True'), (65, '        self.args.is_reload = self.is_reload')], 'deleted': []}",15,15
manimlib/scene/scene.py,manimlib/scene/scene.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","{'added': [(24, 'from manimlib.module_loader import ModuleLoader'), (234, '        module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])')], 'deleted': [(24, 'from manimlib.config import get_module'), (234, '        module = get_module(caller_frame.f_globals[""__file__""])')]}",241,241
manimlib/scene/scene.py,manimlib/scene/scene.py,49c2b5cfe03aacf1bcee7797710e94f825cf8662,09fb8d324e0bd5e08658db3e906c370c1845ace7,Check if animation.mobject is in the full family of scene mobjects before adding,"{'added': [(626, '            if animation.mobject not in self.get_mobject_family_members():')], 'deleted': [(626, '            if animation.mobject not in self.mobjects:')]}",241,241
manimlib/config.py,manimlib/config.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","{'added': [(487, '    global_config = get_global_config()'), (488, '    camera_config = get_camera_config(args, global_config)'), (489, '    window_config = get_window_config(args, global_config, camera_config)'), (496, '        ""window_config"": window_config,')], 'deleted': [(469, '    window_config = get_window_config(args, global_config, camera_config)'), (475, '        ""window_config"": window_config,')]}",70,70
manimlib/reload_manager.py,manimlib/reload_manager.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","{'added': [(4, 'from manimlib.window import Window'), (5, ''), (67, '        self.args.is_reload = self.is_reload  # Where is this used?'), (71, '        # Create or reuse window'), (72, '        if scene_config[""preview""] and not self.window:  # TODO, this should be in run_config not scene_config'), (73, '            self.window = Window(**run_config[""window_config""])'), (74, '        scene_config[""window""] = self.window'), (75, ''), (83, '            if self.args.embed and self.is_reload:'), (85, '                    ""Reloading interactive session for"",')], 'deleted': [(65, '        self.args.is_reload = self.is_reload'), (67, '        if self.window:'), (68, '            scene_config[""existing_window""] = self.window  # see scene initialization'), (69, ''), (78, '        # Find first available window'), (79, '        for scene in self.scenes:'), (80, '            if scene.window is not None:'), (81, '                self.window = scene.window'), (82, '                break'), (83, ''), (85, '            if self.args.embed:'), (87, '                    ""Loading interactive session for"",')]}",15,15
manimlib/scene/scene.py,manimlib/scene/scene.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","{'added': [(48, '    from typing import Callable, Iterable, TypeVar, Optional'), (85, '        preview: bool = True,  # TODO, remove'), (86, '        window: Optional[Window] = None,'), (106, '        self.window = window'), (107, '        if self.window:'), (108, '            self.window.init_for_scene(self)'), (109, '            # Make sure camera and Pyglet window sync'), (110, '            self.camera_config[""fps""] = 30'), (113, '        self.camera: Camera = Camera('), (114, '            window=self.window,'), (115, '            samples=self.samples,'), (116, '            **self.camera_config'), (117, '        )')], 'deleted': [(48, '    from typing import Callable, Iterable, TypeVar'), (71, '    default_window_config: dict = dict()'), (79, '        window_config: dict = dict(),'), (87, '        preview: bool = True,'), (92, '        existing_window: Window | None = None,'), (106, '        self.window_config = {**self.default_window_config, **window_config}'), (107, '        for config in self.camera_config, self.window_config:'), (108, '            config[""samples""] = self.samples'), (111, '        # Initialize window, if applicable (and reuse window if provided during'), (112, '        # reload by means of the ReloadManager)'), (113, '        if self.preview:'), (114, '            if existing_window:'), (115, '                self.window = existing_window'), (116, '                self.window.update_scene(self)'), (117, '            else:'), (118, '                self.window = Window(scene=self, **self.window_config)'), (119, '                self.camera_config[""fps""] = 30  # Where\'s that 30 from?'), (120, '            self.camera_config[""window""] = self.window'), (121, '        else:'), (122, '            self.window = None'), (125, '        self.camera: Camera = Camera(**self.camera_config)')]}",239,239
manimlib/window.py,manimlib/window.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","{'added': [(17, '    from typing import Callable, TypeVar, Optional'), (32, '        scene: Optional[Scene] = None,'), (38, '        self.scene = scene'), (44, '        if self.scene:'), (45, '            self.init_for_scene(scene)'), (47, '    def init_for_scene(self, scene: Scene):'), (118, '        if self.scene is None or not hasattr(self.scene, ""frame""):'), (149, '        if not self.scene:'), (150, '            return'), (158, '        if not self.scene:'), (159, '            return'), (167, '        if not self.scene:'), (168, '            return'), (175, '        if not self.scene:'), (176, '            return'), (183, '        if not self.scene:'), (184, '            return'), (193, '        if not self.scene:'), (194, '            return'), (201, '        if not self.scene:'), (202, '            return'), (208, '        if not self.scene:'), (209, '            return'), (215, '        if not self.scene:'), (216, '            return'), (222, '        if not self.scene:'), (223, '            return'), (229, '        if not self.scene:'), (230, '            return')], 'deleted': [(17, '    from typing import Callable, TypeVar'), (32, '        scene: Scene,'), (36, '        scene.window = self'), (44, '        self.update_scene(scene)'), (46, '    def update_scene(self, scene: Scene):'), (117, '        if not hasattr(self.scene, ""frame""):')]}",38,38
manimlib/config.py,manimlib/config.py,33c7f6d063e20eedad2cafbf9df6233b1c6f6370,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,Factor out resolution from get_camera_config,"{'added': [(346, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (347, '    dir_config = global_config[""directories""]'), (359, 'def get_file_writer_config(args: Namespace, global_config: dict) -> dict:'), (367, '        ""output_directory"": get_output_directory(args, global_config),'), (373, '        **global_config[""file_writer_config""],'), (390, 'def get_resolution(args: Optional[Namespace] = None, global_config: Optional[dict] = None):'), (391, '    args = args or parse_cli()'), (392, '    global_config = global_config or get_global_config()'), (394, '    camera_resolutions = global_config[""camera_resolutions""]'), (409, '    return int(width_str), int(height_str)'), (410, ''), (411, ''), (412, 'def get_window_config(args: Namespace, global_config: dict) -> dict:'), (413, '    # Default to making window half the screen size'), (414, '    # but make it full screen if -f is passed in'), (415, '    try:'), (416, '        monitors = screeninfo.get_monitors()'), (417, '    except screeninfo.ScreenInfoError:'), (418, '        # Default fallback'), (419, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (420, '    mon_index = global_config[""window_monitor""]'), (421, '    monitor = monitors[min(mon_index, len(monitors) - 1)]'), (422, ''), (423, '    width, height = get_resolution(args, global_config)'), (425, '    aspect_ratio = width / height'), (426, '    window_width = monitor.width'), (427, '    if not (args.full_screen or global_config[""full_screen""]):'), (428, '        window_width //= 2'), (429, '    window_height = int(window_width / aspect_ratio)'), (430, '    return dict(size=(window_width, window_height))'), (431, ''), (432, ''), (433, 'def get_camera_config(args: Optional[Namespace] = None, global_config: Optional[dict] = None) -> dict:'), (434, '    args = args or parse_cli()'), (435, '    global_config = global_config or get_global_config()'), (436, ''), (437, '    width, height = get_resolution(args, global_config)'), (438, '    fps = int(args.fps or global_config[""fps""])'), (439, ''), (440, '    camera_config = {'), (447, '    }'), (450, '        bg_color = args.color or global_config[""style""][""background_color""]'), (457, '    # If rendering a transparent image/movie, make sure the'), (471, '    file_writer_config = get_file_writer_config(args, global_config)'), (475, '        ""file_writer_config"": file_writer_config,'), (490, '    window_config = get_window_config(args, get_global_config())')], 'deleted': [(346, 'def get_output_directory(args: Namespace, custom_config: dict) -> str:'), (347, '    dir_config = custom_config[""directories""]'), (359, 'def get_file_writer_config(args: Namespace, custom_config: dict) -> dict:'), (367, '        ""output_directory"": get_output_directory(args, custom_config),'), (373, '        **custom_config[""file_writer_config""],'), (390, 'def get_window_config(args: Namespace, custom_config: dict, camera_config: dict) -> dict:'), (391, '    # Default to making window half the screen size'), (392, '    # but make it full screen if -f is passed in'), (393, '    try:'), (394, '        monitors = screeninfo.get_monitors()'), (395, '    except screeninfo.ScreenInfoError:'), (396, '        # Default fallback'), (397, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (398, '    mon_index = custom_config[""window_monitor""]'), (399, '    monitor = monitors[min(mon_index, len(monitors) - 1)]'), (400, '    aspect_ratio = camera_config[""pixel_width""] / camera_config[""pixel_height""]'), (401, '    window_width = monitor.width'), (402, '    if not (args.full_screen or custom_config[""full_screen""]):'), (403, '        window_width //= 2'), (404, '    window_height = int(window_width / aspect_ratio)'), (405, '    return dict(size=(window_width, window_height))'), (406, ''), (408, 'def get_camera_config(args: Optional[Namespace] = None, custom_config: Optional[dict] = None) -> dict:'), (409, '    if args is None:'), (410, '        args = parse_cli()'), (411, '    if custom_config is None:'), (412, '        custom_config = get_global_config()'), (413, ''), (414, '    camera_config = dict()'), (415, '    camera_resolutions = custom_config[""camera_resolutions""]'), (429, '    if args.fps:'), (430, '        fps = int(args.fps)'), (431, '    else:'), (432, '        fps = custom_config[""fps""]'), (433, ''), (435, '    width = int(width_str)'), (436, '    height = int(height_str)'), (438, '    camera_config.update({'), (445, '    })'), (448, '        bg_color = args.color or custom_config[""style""][""background_color""]'), (455, '    # If rendering a transparent image/move, make sure the'), (472, '        ""file_writer_config"": get_file_writer_config(args, global_config),'), (487, '    global_config = get_global_config()'), (488, '    camera_config = get_camera_config(args, global_config)'), (489, '    window_config = get_window_config(args, global_config, camera_config)')]}",73,73
manimlib/constants.py,manimlib/constants.py,2e49c60148b492c1d7a0f5ef1562bef03de25e28,33c7f6d063e20eedad2cafbf9df6233b1c6f6370,Use config.get_resolution for constants,"{'added': [(4, 'from manimlib.config import get_resolution'), (16, 'DEFAULT_RESOLUTION: tuple[int, int] = get_resolution()'), (17, 'DEFAULT_PIXEL_WIDTH = DEFAULT_RESOLUTION[0]'), (18, 'DEFAULT_PIXEL_HEIGHT = DEFAULT_RESOLUTION[1]'), (19, 'DEFAULT_FPS: int = 30'), (22, 'ASPECT_RATIO: float = DEFAULT_PIXEL_WIDTH / DEFAULT_PIXEL_HEIGHT')], 'deleted': [(4, 'from manimlib.config import get_camera_config'), (16, 'CAMERA_CONFIG = get_camera_config()'), (19, ""ASPECT_RATIO: float = CAMERA_CONFIG['pixel_width'] / CAMERA_CONFIG['pixel_height']""), (25, ""DEFAULT_PIXEL_HEIGHT: int = CAMERA_CONFIG['pixel_height']""), (26, ""DEFAULT_PIXEL_WIDTH: int = CAMERA_CONFIG['pixel_width']""), (27, 'DEFAULT_FPS: int = 30')]}",0,0
manimlib/config.py,manimlib/config.py,dd251ab8c2fa3e387064402261b00dbc588216bc,2e49c60148b492c1d7a0f5ef1562bef03de25e28,"Remove ""preview"" as a scene parameter, just look for whether window is None","{'added': [(497, '        ""show_in_window"": not args.write_file')], 'deleted': [(480, '        ""preview"": not args.write_file,')]}",73,73
manimlib/reload_manager.py,manimlib/reload_manager.py,dd251ab8c2fa3e387064402261b00dbc588216bc,2e49c60148b492c1d7a0f5ef1562bef03de25e28,"Remove ""preview"" as a scene parameter, just look for whether window is None","{'added': [(72, '        if run_config[""show_in_window""] and not self.window:')], 'deleted': [(72, '        if scene_config[""preview""] and not self.window:  # TODO, this should be in run_config not scene_config')]}",15,15
manimlib/scene/scene.py,manimlib/scene/scene.py,dd251ab8c2fa3e387064402261b00dbc588216bc,2e49c60148b492c1d7a0f5ef1562bef03de25e28,"Remove ""preview"" as a scene parameter, just look for whether window is None","{'added': [(213, '        if not self.window:'), (214, '            # Embed is only relevant for interactive development with a Window')], 'deleted': [(85, '        preview: bool = True,  # TODO, remove'), (97, '        self.preview = preview'), (215, '        if not self.preview:'), (216, '            # Embed is only relevant with a preview'), (731, '        if not self.preview:'), (732, '            return')]}",238,238
manimlib/config.py,manimlib/config.py,d357e21c1d7fb4c8fb97f8bc885790dc0da254f5,dd251ab8c2fa3e387064402261b00dbc588216bc,"Change how ModuleLoader receives is_reload information

Use on the fly import of reload_manager rather than altering the args","{'added': [(218, '    file_name: str, scene_name: str, line_marker: str'), (280, '    from manimlib.reload_manager import reload_manager'), (281, '    module = ModuleLoader.get_module(new_file, is_during_reload=reload_manager.is_reload)'), (296, '            args.file, args.scene_names[0], args.embed')], 'deleted': [(218, '    file_name: str, scene_name: str, line_marker: str, is_during_reload'), (280, '    module = ModuleLoader.get_module(new_file, is_during_reload)'), (294, '        is_reload = args.is_reload if hasattr(args, ""is_reload"") else False'), (296, '            args.file, args.scene_names[0], args.embed, is_reload')]}",72,72
manimlib/reload_manager.py,manimlib/reload_manager.py,d357e21c1d7fb4c8fb97f8bc885790dc0da254f5,dd251ab8c2fa3e387064402261b00dbc588216bc,"Change how ModuleLoader receives is_reload information

Use on the fly import of reload_manager rather than altering the args","{'added': [], 'deleted': [(67, '        self.args.is_reload = self.is_reload  # Where is this used?')]}",15,15
manimlib/config.py,manimlib/config.py,dd0aa14442517fab904deaedde5ec14ba4a7551a,d357e21c1d7fb4c8fb97f8bc885790dc0da254f5,"Clean up get_module_with_inserted_embed_line, only accept line number as embed arg","{'added': [(12, 'from pathlib import Path'), (149, '                 ""at the corresponding line number""'), (210, 'def get_indent(code_lines: list[str], line_number: int):'), (211, '    for line in code_lines[line_number:0:-1]:'), (212, '        if len(line.strip()) == 0:'), (213, '            continue'), (214, '        n_spaces = len(line) - len(line.lstrip())'), (215, '        if line.endswith("":""):'), (216, '            n_spaces += 4'), (217, '        return n_spaces'), (218, '    return 0'), (222, '    file_name: str, scene_name: str, line_number: int'), (230, '    lines = Path(file_name).read_text().splitlines()'), (232, '    scene_line_numbers = ['), (233, '        n for n, line in enumerate(lines)'), (234, '        if line.startswith(""class SurfaceTest"")'), (235, '    ]'), (236, '    if len(scene_line_numbers) == 0:'), (239, '    scene_line_number = scene_line_numbers[0]'), (241, '    n_spaces = get_indent(lines, line_number - 1)'), (242, '    inserted_line = "" "" * n_spaces + ""self.embed()""'), (244, '    new_lines.insert(line_number, inserted_line)'), (247, '    Path(new_file).write_text(""\\n"".join(new_lines))'), (265, '            args.file, args.scene_names[0], int(args.embed)')], 'deleted': [(147, '            nargs=""?"",'), (148, '            const="""",'), (150, '                 ""into the Scenes construct method. "" + \\'), (151, '                 ""If a string is passed in, the line will be inserted below the "" + \\'), (152, '                 ""last line of code including that string.""'), (213, 'def get_indent(line: str):'), (214, '    return len(line) - len(line.lstrip())'), (218, '    file_name: str, scene_name: str, line_marker: str'), (226, ""    with open(file_name, 'r') as fp:""), (227, '        lines = fp.readlines()'), (229, '    try:'), (230, '        scene_line_number = next('), (231, '            i for i, line in enumerate(lines)'), (232, '            if line.startswith(f""class {scene_name}"")'), (233, '        )'), (234, '    except StopIteration:'), (238, '    prev_line_num = -1'), (239, '    n_spaces = None'), (240, '    if len(line_marker) == 0:'), (241, '        # Find the end of the construct method'), (242, '        in_construct = False'), (243, '        for index in range(scene_line_number, len(lines) - 1):'), (244, '            line = lines[index]'), (245, '            if line.lstrip().startswith(""def construct""):'), (246, '                in_construct = True'), (247, '                n_spaces = get_indent(line) + 4'), (248, '            elif in_construct:'), (249, '                if len(line.strip()) > 0 and get_indent(line) < (n_spaces or 0):'), (250, '                    prev_line_num = index - 1'), (251, '                    break'), (252, '        if prev_line_num < 0:'), (253, '            prev_line_num = len(lines) - 1'), (254, '    elif line_marker.isdigit():'), (255, '        # Treat the argument as a line number'), (256, '        prev_line_num = int(line_marker) - 1'), (257, '    elif len(line_marker) > 0:'), (258, '        # Treat the argument as a string'), (259, '        try:'), (260, '            prev_line_num = next('), (261, '                i'), (262, '                for i in range(scene_line_number, len(lines) - 1)'), (263, '                if line_marker in lines[i]'), (264, '            )'), (265, '        except StopIteration:'), (266, '            log.error(f""No lines matching {line_marker}"")'), (267, '            sys.exit(2)'), (268, ''), (269, '    # Insert the embed line, rewrite file, then write it back when done'), (270, '    if n_spaces is None:'), (271, '        n_spaces = get_indent(lines[prev_line_num])'), (272, '    inserted_line = "" "" * n_spaces + ""self.embed()\\n""'), (274, '    new_lines.insert(prev_line_num + 1, inserted_line)'), (277, ""    with open(new_file, 'w') as fp:""), (278, '        fp.writelines(new_lines)'), (296, '            args.file, args.scene_names[0], args.embed')]}",61,61
manimlib/config.py,manimlib/config.py,fadd045fc1e3d41f0be8b8501f8f5fb44ec8ae3c,dd0aa14442517fab904deaedde5ec14ba4a7551a,"Don't write new file when inserting embed line

Instead, load the relevant module of the true file, and execute the modified code within that.

This also cleans up some of the previous now-unnecessary code around get_module_with_inserted_embed_line","{'added': [(210, 'def get_indent(code_lines: list[str], line_number: int) -> str:'), (211, '    for line in code_lines[line_number - 1::-1]:'), (217, '        return n_spaces * "" ""'), (218, '    return """"'), (221, 'def get_module_with_inserted_embed_line(file_name: str, line_number: int):'), (230, '    # Add the relevant embed line to the code'), (231, '    indent = get_indent(lines, line_number)'), (232, '    lines.insert(line_number, indent + ""self.embed()"")'), (233, '    new_code = ""\\n"".join(lines)'), (235, '    # Load the module for the original file, then exectue the new code within'), (236, '    # it, which should redefined the scene to have the inserted embed line'), (238, '    module = ModuleLoader.get_module(file_name, is_during_reload=reload_manager.is_reload)'), (240, ""    code_object = compile(new_code, module.__name__, 'exec')""), (241, '    exec(code_object, module.__dict__)'), (249, '        return get_module_with_inserted_embed_line(args.file, int(args.embed))')], 'deleted': [(210, 'def get_indent(code_lines: list[str], line_number: int):'), (211, '    for line in code_lines[line_number:0:-1]:'), (217, '        return n_spaces'), (218, '    return 0'), (221, 'def get_module_with_inserted_embed_line('), (222, '    file_name: str, scene_name: str, line_number: int'), (223, '):'), (232, '    scene_line_numbers = ['), (233, '        n for n, line in enumerate(lines)'), (234, '        if line.startswith(""class SurfaceTest"")'), (235, '    ]'), (236, '    if len(scene_line_numbers) == 0:'), (237, '        log.error(f""No scene {scene_name}"")'), (238, '        return'), (239, '    scene_line_number = scene_line_numbers[0]'), (240, ''), (241, '    n_spaces = get_indent(lines, line_number - 1)'), (242, '    inserted_line = "" "" * n_spaces + ""self.embed()""'), (243, '    new_lines = list(lines)'), (244, '    new_lines.insert(line_number, inserted_line)'), (245, '    new_file = file_name.replace("".py"", ""_insert_embed.py"")'), (246, ''), (247, '    Path(new_file).write_text(""\\n"".join(new_lines))'), (250, '    module = ModuleLoader.get_module(new_file, is_during_reload=reload_manager.is_reload)'), (251, '    # This is to pretend the module imported from the edited lines'), (252, '    # of code actually comes from the original file.'), (253, '    module.__file__ = file_name'), (254, ''), (255, '    os.remove(new_file)'), (264, '        return get_module_with_inserted_embed_line('), (265, '            args.file, args.scene_names[0], int(args.embed)'), (266, '        )')]}",58,58
manimlib/module_loader.py,manimlib/module_loader.py,fadd045fc1e3d41f0be8b8501f8f5fb44ec8ae3c,dd0aa14442517fab904deaedde5ec14ba4a7551a,"Don't write new file when inserting embed line

Instead, load the relevant module of the true file, and execute the modified code within that.

This also cleans up some of the previous now-unnecessary code around get_module_with_inserted_embed_line","{'added': [], 'deleted': [(79, '            # Remove the ""_insert_embed"" suffix from the module name'), (81, '            if module.__name__.endswith(""_insert_embed""):'), (82, '                module_name = module_name[:-13]')]}",27,27
manimlib/config.py,manimlib/config.py,e270f5c3d3cb545f1721533241ae1859d418f663,fadd045fc1e3d41f0be8b8501f8f5fb44ec8ae3c,"Change from get_module_with_inserted_embed_line to insert_embed_line_to_module

Rather than taking in a file_name and reading it in, directly take the module and edit its code.","{'added': [(221, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (228, '    lines = inspect.getsource(module).splitlines()'), (241, '    from manimlib.reload_manager import reload_manager'), (242, '    module = ModuleLoader.get_module(args.file, is_during_reload=reload_manager.is_reload)'), (243, '    if args.embed:'), (244, '        insert_embed_line_to_module(module, int(args.embed))'), (245, '    return module')], 'deleted': [(221, 'def get_module_with_inserted_embed_line(file_name: str, line_number: int):'), (228, '    lines = Path(file_name).read_text().splitlines()'), (235, '    # Load the module for the original file, then exectue the new code within'), (236, '    # it, which should redefined the scene to have the inserted embed line'), (237, '    from manimlib.reload_manager import reload_manager'), (238, '    module = ModuleLoader.get_module(file_name, is_during_reload=reload_manager.is_reload)'), (239, ''), (246, '    if args.embed is None:'), (247, '        return ModuleLoader.get_module(args.file)'), (248, '    else:'), (249, '        return get_module_with_inserted_embed_line(args.file, int(args.embed))'), (250, '')]}",58,58
manimlib/config.py,manimlib/config.py,90dfb02cc668e3ad3df6ca7f975e83be75007520,e270f5c3d3cb545f1721533241ae1859d418f663,Move get_scene_module logic to extract_scene.py,"{'added': [(399, '        ""file_name"": args.file,'), (400, '        ""embed_line"": int(args.embed) if args.embed is not None else None,'), (401, '        ""is_reload"": False,')], 'deleted': [(17, 'from manimlib.module_loader import ModuleLoader'), (23, '    Module = importlib.util.types.ModuleType'), (210, 'def get_indent(code_lines: list[str], line_number: int) -> str:'), (211, '    for line in code_lines[line_number - 1::-1]:'), (212, '        if len(line.strip()) == 0:'), (213, '            continue'), (214, '        n_spaces = len(line) - len(line.lstrip())'), (215, '        if line.endswith("":""):'), (216, '            n_spaces += 4'), (217, '        return n_spaces * "" ""'), (218, '    return """"'), (219, ''), (220, ''), (221, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (222, '    """"""'), (223, '    This is hacky, but convenient. When user includes the argument ""-e"", it will try'), (224, ""    to recreate a file that inserts the line `self.embed()` into the end of the scene's""), (225, '    construct method. If there is an argument passed in, it will insert the line after'), (226, '    the last line in the sourcefile which includes that string.'), (227, '    """"""'), (228, '    lines = inspect.getsource(module).splitlines()'), (229, ''), (230, '    # Add the relevant embed line to the code'), (231, '    indent = get_indent(lines, line_number)'), (232, '    lines.insert(line_number, indent + ""self.embed()"")'), (233, '    new_code = ""\\n"".join(lines)'), (234, ''), (235, ""    code_object = compile(new_code, module.__name__, 'exec')""), (236, '    exec(code_object, module.__dict__)'), (237, '    return module'), (238, ''), (239, ''), (240, 'def get_scene_module(args: Namespace) -> Module:'), (241, '    from manimlib.reload_manager import reload_manager'), (242, '    module = ModuleLoader.get_module(args.file, is_during_reload=reload_manager.is_reload)'), (243, '    if args.embed:'), (244, '        insert_embed_line_to_module(module, int(args.embed))'), (245, '    return module'), (246, ''), (438, '        ""module"": get_scene_module(args),')]}",52,52
manimlib/extract_scene.py,manimlib/extract_scene.py,90dfb02cc668e3ad3df6ca7f975e83be75007520,e270f5c3d3cb545f1721533241ae1859d418f663,Move get_scene_module logic to extract_scene.py,"{'added': [(1, 'from __future__ import annotations'), (2, ''), (7, 'from manimlib.module_loader import ModuleLoader'), (8, ''), (14, 'from typing import TYPE_CHECKING'), (15, 'if TYPE_CHECKING:'), (16, '    Module = importlib.util.types.ModuleType'), (17, '    from typing import Optional'), (18, ''), (127, 'def get_indent(code_lines: list[str], line_number: int) -> str:'), (128, '    for line in code_lines[line_number - 1::-1]:'), (129, '        if len(line.strip()) == 0:'), (130, '            continue'), (131, '        n_spaces = len(line) - len(line.lstrip())'), (132, '        if line.endswith("":""):'), (133, '            n_spaces += 4'), (134, '        return n_spaces * "" ""'), (135, '    return """"'), (136, ''), (137, ''), (138, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (139, '    """"""'), (140, '    This is hacky, but convenient. When user includes the argument ""-e"", it will try'), (141, ""    to recreate a file that inserts the line `self.embed()` into the end of the scene's""), (142, '    construct method. If there is an argument passed in, it will insert the line after'), (143, '    the last line in the sourcefile which includes that string.'), (144, '    """"""'), (145, '    lines = inspect.getsource(module).splitlines()'), (146, ''), (147, '    # Add the relevant embed line to the code'), (148, '    indent = get_indent(lines, line_number)'), (149, '    lines.insert(line_number, indent + ""self.embed()"")'), (150, '    new_code = ""\\n"".join(lines)'), (151, ''), (152, ""    code_object = compile(new_code, module.__name__, 'exec')""), (153, '    exec(code_object, module.__dict__)'), (154, '    return module'), (155, ''), (156, ''), (157, 'def get_scene_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (158, '    module = ModuleLoader.get_module(file_name, is_reload)'), (159, '    if embed_line:'), (160, '        insert_embed_line_to_module(module, embed_line)'), (161, '    return module'), (162, ''), (163, ''), (165, '    module = get_scene_module('), (166, '        run_config[""file_name""],'), (167, '        run_config[""embed_line""],'), (168, '        run_config[""is_reload""]'), (169, '    )'), (170, '    if module is None:'), (174, '    all_scene_classes = get_scene_classes_from_module(module)')], 'deleted': [(119, '    if run_config[""module""] is None:'), (123, '    all_scene_classes = get_scene_classes_from_module(run_config[""module""])')]}",38,38
manimlib/reload_manager.py,manimlib/reload_manager.py,90dfb02cc668e3ad3df6ca7f975e83be75007520,e270f5c3d3cb545f1721533241ae1859d418f663,Move get_scene_module logic to extract_scene.py,"{'added': [(69, '        run_config.update(is_reload=self.is_reload)'), (74, '        scene_config.update(window=self.window)')], 'deleted': [(73, '        scene_config[""window""] = self.window')]}",15,15
manimlib/config.py,manimlib/config.py,09c27a654f6382be70bc152de7d9435d3c6db989,90dfb02cc668e3ad3df6ca7f975e83be75007520,Minor cleaning of imports,"{'added': [(20, '    from argparse import Namespace')], 'deleted': [(4, 'from argparse import Namespace'), (12, 'from pathlib import Path')]}",52,52
manimlib/config.py,manimlib/config.py,0ef12ad7e469b085e59e476bdd1deced07db4fb5,09c27a654f6382be70bc152de7d9435d3c6db989,"Move FRAME_HEIGHT back to constants

Where it belongs","{'added': [], 'deleted': [(24, '# This has to be here instead of in constants.py'), (25, '# due to its use in creating the camera configuration'), (26, 'FRAME_HEIGHT: float = 8.0'), (27, ''), (28, ''), (350, '        ""frame_config"": {'), (351, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),'), (352, '        },')]}",52,52
manimlib/constants.py,manimlib/constants.py,0ef12ad7e469b085e59e476bdd1deced07db4fb5,09c27a654f6382be70bc152de7d9435d3c6db989,"Move FRAME_HEIGHT back to constants

Where it belongs","{'added': [(22, 'FRAME_HEIGHT: float = 8.0')], 'deleted': [(5, 'from manimlib.config import FRAME_HEIGHT')]}",0,0
manimlib/scene/scene.py,manimlib/scene/scene.py,df1e067480df9c4302ed0602fe36948ee563a785,6196daa5ec49546a8d973b6866991586f98d0d56,"Fix 3D overlap when animating by checking Mobject family members recursively instead of `self.mobjects` (#2254)

* Add Animation.setup_scene method to make Animation more customizable

* Remove Animation.setup_scene method and let scene check all mobject family members","{'added': [(626, '            if animation.mobject not in self.get_mobject_family_members():')], 'deleted': [(626, '            if animation.mobject not in self.mobjects:')]}",241,241
manimlib/logger.py,manimlib/logger.py,5fa99b772398aaad527ba11c4418f9ffcada4871,0ef12ad7e469b085e59e476bdd1deced07db4fb5,"Set default log level to ""WARNING""","{'added': [(14, 'log.setLevel(""WARNING"")')], 'deleted': [(14, 'log.setLevel(""DEBUG"")')]}",0,0
manimlib/scene/scene.py,manimlib/scene/scene.py,89bf0b129732726e7eea433f96b0b1a272e2c794,2e8a282cc7f43134b135f06f8c5f9723c36425d7,Track all mobjects as a set in Scene. begin_animations,"{'added': [(609, '        all_mobjects = set(self.get_mobject_family_members())'), (617, '            if animation.mobject not in all_mobjects:'), (619, '                all_mobjects = all_mobjects.union(animation.mobject.get_family())')], 'deleted': [(616, '            if animation.mobject not in self.get_mobject_family_members():')]}",238,238
manimlib/extract_scene.py,manimlib/extract_scene.py,14c6fdc1d9941044d7bc100f1b4fd1d581e2011a,89bf0b129732726e7eea433f96b0b1a272e2c794,Slight refactor of get_indent,"{'added': [(128, '    """"""'), (129, '    Find the indent associated with a given line of python code,'), (130, '    as a string of spaces'), (131, '    """"""'), (132, '    # Find most recent non-empty line'), (133, '    try:'), (134, '        next(filter(lambda line: line.strip(), code_lines[line_number - 1::-1]))'), (135, '    except StopIteration:'), (136, '        return """"'), (137, ''), (138, '    # Either return its leading spaces, or add for if it ends with colon'), (139, '    n_spaces = len(line) - len(line.lstrip())'), (140, '    if line.endswith("":""):'), (141, '        n_spaces += 4'), (142, '    return n_spaces * "" ""'), (159, ""    # Execute the code, which presumably redefines the user's""), (160, '    # scene to include this embed line, within the relevant module.')], 'deleted': [(128, '    for line in code_lines[line_number - 1::-1]:'), (129, '        if len(line.strip()) == 0:'), (130, '            continue'), (131, '        n_spaces = len(line) - len(line.lstrip())'), (132, '        if line.endswith("":""):'), (133, '            n_spaces += 4'), (134, '        return n_spaces * "" ""'), (135, '    return """"'), (154, '    return module')]}",37,37
manimlib/extract_scene.py,manimlib/extract_scene.py,0692afdfec648ee6889bdadc6beeb4cff10d7fa3,14c6fdc1d9941044d7bc100f1b4fd1d581e2011a,Bug fix,"{'added': [(134, '        line = next(filter(lambda line: line.strip(), code_lines[line_number - 1::-1]))')], 'deleted': [(134, '        next(filter(lambda line: line.strip(), code_lines[line_number - 1::-1]))')]}",37,37
manimlib/reload_manager.py,manimlib/reload_manager.py,ea3f77e3f1a14456fa2e182411449bdf75e035ab,0692afdfec648ee6889bdadc6beeb4cff10d7fa3,Add blank line,"{'added': [(92, '')], 'deleted': []}",15,15
manimlib/scene/scene.py,manimlib/scene/scene.py,636fb3a45b4726ca308043a665b60f4e9efc5e2d,ea3f77e3f1a14456fa2e182411449bdf75e035ab,Factor interactive embed logic out of Scene class,"{'added': [(30, 'from manimlib.scene.scene_embed import interactive_scene_embed'), (31, 'from manimlib.scene.scene_embed import CheckpointManager'), (122, '        self.checkpoint_manager: CheckpointManager = CheckpointManager()'), (209, '        interactive_scene_embed(self)'), (696, '        self.checkpoint_manager.checkpoint_paste(self)'), (706, '        self.checkpoint_manager.clear_checkpoints()')], 'deleted': [(4, 'import inspect'), (7, 'import pyperclip'), (10, 'import re'), (13, 'from IPython.terminal import pt_inputhooks'), (14, 'from IPython.terminal.embed import InteractiveShellEmbed'), (21, 'from manimlib.animation.fading import VFadeInThenOut'), (24, 'from manimlib.module_loader import ModuleLoader'), (27, 'from manimlib.constants import RED'), (32, 'from manimlib.mobject.frame import FullScreenRectangle'), (213, '        if not self.window:'), (214, '            # Embed is only relevant for interactive development with a Window'), (215, '            return'), (216, '        self.stop_skipping()'), (217, '        self.update_frame(force_draw=True)'), (218, '        self.save_state()'), (221, '        # Create embedded IPython terminal configured to have access to'), (222, '        # the local namespace of the caller'), (223, '        caller_frame = inspect.currentframe().f_back'), (224, '        module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (225, '        shell = InteractiveShellEmbed('), (226, '            user_module=module,'), (227, '            display_banner=False,'), (228, '            xmode=self.embed_exception_mode'), (229, '        )'), (230, '        self.shell = shell'), (231, ''), (232, '        # Add a few custom shortcuts to that local namespace'), (233, '        local_ns = dict(caller_frame.f_locals)'), (234, '        local_ns.update('), (235, '            play=self.play,'), (236, '            wait=self.wait,'), (237, '            add=self.add,'), (238, '            remove=self.remove,'), (239, '            clear=self.clear,'), (240, '            focus=self.focus,'), (241, '            save_state=self.save_state,'), (242, '            reload=self.reload,'), (243, '            undo=self.undo,'), (244, '            redo=self.redo,'), (245, '            i2g=self.i2g,'), (246, '            i2m=self.i2m,'), (247, '            checkpoint_paste=self.checkpoint_paste,'), (248, '            touch=lambda: shell.enable_gui(""manim""),'), (249, '            notouch=lambda: shell.enable_gui(None),'), (250, '        )'), (251, ''), (252, ""        # Update the shell module with the caller's locals + shortcuts""), (253, '        module.__dict__.update(local_ns)'), (254, ''), (255, '        # Enables gui interactions during the embed'), (256, '        def inputhook(context):'), (257, '            while not context.input_is_ready():'), (258, '                if not self.is_window_closing():'), (259, '                    self.update_frame(dt=0)'), (260, '            if self.is_window_closing():'), (261, '                shell.ask_exit()'), (262, ''), (263, '        pt_inputhooks.register(""manim"", inputhook)'), (264, '        shell.enable_gui(""manim"")'), (265, ''), (266, '        # Operation to run after each ipython command'), (267, '        def post_cell_func(*args, **kwargs):'), (268, '            if not self.is_window_closing():'), (269, '                self.update_frame(dt=0, force_draw=True)'), (270, ''), (271, '        shell.events.register(""post_run_cell"", post_cell_func)'), (272, ''), (273, '        # Flash border, and potentially play sound, on exceptions'), (274, '        def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (275, ""            # Show the error don't just swallow it""), (276, '            shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)'), (277, '            if self.embed_error_sound:'), (278, '                os.system(""printf \'\\a\'"")'), (279, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (280, '            rect.fix_in_frame()'), (281, '            self.play(VFadeInThenOut(rect, run_time=0.5))'), (282, ''), (283, '        shell.set_custom_exc((Exception,), custom_exc)'), (284, ''), (285, '        # Launch shell'), (286, '        shell()'), (763, '        if self.shell is None or self.window is None:'), (764, '            raise Exception('), (765, '                ""Scene.checkpoint_paste cannot be called outside of "" +'), (766, '                ""an ipython shell""'), (767, '            )'), (768, ''), (769, '        pasted = pyperclip.paste()'), (770, '        lines = pasted.split(""\\n"")'), (771, ''), (772, '        # Commented lines trigger saved checkpoints'), (773, '        if lines[0].lstrip().startswith(""#""):'), (774, '            if lines[0] not in self.checkpoint_states:'), (775, '                self.checkpoint(lines[0])'), (776, '            else:'), (777, '                self.revert_to_checkpoint(lines[0])'), (778, ''), (779, '        # Copied methods of a scene are handled specially'), (780, '        # A bit hacky, yes, but convenient'), (781, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (782, '        method_names = re.findall(method_pattern ,lines[0].strip())'), (783, '        if method_names:'), (784, '            method_name = method_names[0]'), (785, '            indent = "" "" * lines[0].index(lines[0].strip())'), (786, '            pasted = ""\\n"".join(['), (787, '                # Remove self from function signature'), (788, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (789, '                *lines[1:],'), (790, '                # Attach to scene via self.func_name = func_name'), (791, '                f""{indent}self.{method_name} = {method_name}""'), (792, '            ])'), (793, ''), (804, '        self.shell.run_cell(pasted)'), (813, '    def checkpoint(self, key: str):'), (814, '        self.checkpoint_states[key] = self.get_state()'), (815, ''), (816, '    def revert_to_checkpoint(self, key: str):'), (817, '        if key not in self.checkpoint_states:'), (818, '            log.error(f""No checkpoint at {key}"")'), (819, '            return'), (820, '        all_keys = list(self.checkpoint_states.keys())'), (821, '        index = all_keys.index(key)'), (822, '        for later_key in all_keys[index + 1:]:'), (823, '            self.checkpoint_states.pop(later_key)'), (824, ''), (825, '        self.restore_state(self.checkpoint_states[key])'), (826, ''), (828, '        self.checkpoint_states = dict()')]}",220,220
,manimlib/scene/scene_embed.py,636fb3a45b4726ca308043a665b60f4e9efc5e2d,ea3f77e3f1a14456fa2e182411449bdf75e035ab,Factor interactive embed logic out of Scene class,"{'added': [(1, 'import inspect'), (2, 'import pyperclip'), (3, 'import re'), (4, ''), (5, 'from IPython.terminal import pt_inputhooks'), (6, 'from IPython.terminal.embed import InteractiveShellEmbed'), (7, ''), (8, 'from manimlib.animation.fading import VFadeInThenOut'), (9, 'from manimlib.constants import RED'), (10, 'from manimlib.mobject.mobject import Mobject'), (11, 'from manimlib.mobject.frame import FullScreenRectangle'), (12, 'from manimlib.module_loader import ModuleLoader'), (13, ''), (14, ''), (15, 'def interactive_scene_embed(scene):'), (16, '    if not scene.window:'), (17, '        # Embed is only relevant for interactive development with a Window'), (18, '        return'), (19, '    scene.stop_skipping()'), (20, '    scene.update_frame(force_draw=True)'), (21, '    scene.save_state()'), (22, ''), (23, '    shell = get_ipython_shell_for_embedded_scene(scene)'), (24, '    scene.shell = shell  # It would be better not to add attributes to scene here'), (25, '    enable_gui(shell, scene)'), (26, '    ensure_frame_update_post_cell(shell, scene)'), (27, '    ensure_flash_on_error(shell, scene)'), (28, ''), (29, '    # Launch shell'), (30, '    shell()'), (31, ''), (32, ''), (33, 'def get_ipython_shell_for_embedded_scene(scene):'), (34, '    """"""'), (35, '    Create embedded IPython terminal configured to have access to'), (36, '    the local namespace of the caller'), (37, '    """"""'), (38, ""    # Triple back should take us to the context in a user's scene definition""), (39, '    # which is calling ""self.embed""'), (40, '    caller_frame = inspect.currentframe().f_back.f_back.f_back'), (41, '    module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (42, '    shell = InteractiveShellEmbed('), (43, '        user_module=module,'), (44, '        display_banner=False,'), (45, '        xmode=scene.embed_exception_mode'), (46, '    )'), (47, ''), (48, ""    # Update the module's namespace to match include local variables""), (49, '    module.__dict__.update(caller_frame.f_locals)'), (50, '    module.__dict__.update(get_shortcuts(scene))'), (51, ''), (52, '    return shell'), (53, ''), (54, ''), (55, 'def get_shortcuts(scene):'), (56, '    """"""'), (57, '    A few custom shortcuts useful to have in the interactive shell namespace'), (58, '    """"""'), (59, '    return dict('), (60, '        play=scene.play,'), (61, '        wait=scene.wait,'), (62, '        add=scene.add,'), (63, '        remove=scene.remove,'), (64, '        clear=scene.clear,'), (65, '        focus=scene.focus,'), (66, '        save_state=scene.save_state,'), (67, '        reload=scene.reload,'), (68, '        undo=scene.undo,'), (69, '        redo=scene.redo,'), (70, '        i2g=scene.i2g,'), (71, '        i2m=scene.i2m,'), (72, '        checkpoint_paste=scene.checkpoint_paste,'), (73, '    )'), (74, ''), (75, ''), (76, 'def enable_gui(shell, scene):'), (77, '    """"""Enables gui interactions during the embed""""""'), (78, '    def inputhook(context):'), (79, '        while not context.input_is_ready():'), (80, '            if not scene.is_window_closing():'), (81, '                scene.update_frame(dt=0)'), (82, '        if scene.is_window_closing():'), (83, '            shell.ask_exit()'), (84, ''), (85, '    pt_inputhooks.register(""manim"", inputhook)'), (86, '    shell.enable_gui(""manim"")'), (87, ''), (88, ''), (89, 'def ensure_frame_update_post_cell(shell, scene):'), (90, '    """"""Ensure the scene updates its frame after each ipython cell""""""'), (91, '    def post_cell_func(*args, **kwargs):'), (92, '        if not scene.is_window_closing():'), (93, '            scene.update_frame(dt=0, force_draw=True)'), (94, ''), (95, '    shell.events.register(""post_run_cell"", post_cell_func)'), (96, ''), (97, ''), (98, 'def ensure_flash_on_error(shell, scene):'), (99, '    """"""Flash border, and potentially play sound, on exceptions""""""'), (100, '    def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (101, ""        # Show the error don't just swallow it""), (102, '        shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)'), (103, '        if scene.embed_error_sound:'), (104, '            os.system(""printf \'\\a\'"")'), (105, '        rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (106, '        rect.fix_in_frame()'), (107, '        scene.play(VFadeInThenOut(rect, run_time=0.5))'), (108, ''), (109, '    shell.set_custom_exc((Exception,), custom_exc)'), (110, ''), (111, ''), (112, 'class CheckpointManager:'), (113, '    checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()'), (114, ''), (115, '    def checkpoint_paste(self, scene):'), (116, '        """"""'), (117, '        Used during interactive development to run (or re-run)'), (118, '        a block of scene code.'), (119, ''), (120, '        If the copied selection starts with a comment, this will'), (121, '        revert to the state of the scene the first time this function'), (122, '        was called on a block of code starting with that comment.'), (123, '        """"""'), (124, '        shell = get_ipython()'), (125, '        if shell is None:'), (126, '            return'), (127, ''), (128, '        code_string = pyperclip.paste()'), (129, ''), (130, '        checkpoint_key = self.get_leading_comment(code_string)'), (131, '        self.handle_checkpoint_key(scene, checkpoint_key)'), (132, '        code_string = self.handle_method_definitions(code_string)'), (133, ''), (134, '        shell.run_cell(code_string)'), (135, ''), (136, '    @staticmethod'), (137, '    def handle_method_definitions(code_string: str):'), (138, '        lines = code_string.split(""\\n"")'), (139, '        # Copied methods of a scene are handled specially'), (140, '        # A bit hacky, yes, but convenient'), (141, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (142, '        method_names = re.findall(method_pattern, lines[0].strip())'), (143, '        if method_names:'), (144, '            method_name = method_names[0]'), (145, '            indent = "" "" * lines[0].index(lines[0].strip())'), (146, '            return ""\\n"".join(['), (147, '                # Remove self from function signature'), (148, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (149, '                *lines[1:],'), (150, '                # Attach to scene via self.func_name = func_name'), (151, '                f""{indent}self.{method_name} = {method_name}""'), (152, '            ])'), (153, '        return code_string'), (154, ''), (155, '    @staticmethod'), (156, '    def get_leading_comment(code_string: str):'), (157, '        leading_line = code_string.partition(""\\n"")[0].lstrip()'), (158, '        if leading_line.startswith(""#""):'), (159, '            return leading_line'), (160, '        return None'), (161, ''), (162, '    def handle_checkpoint_key(self, scene, key: str):'), (163, '        if key is None:'), (164, '            return'), (165, '        elif key in self.checkpoint_states:'), (166, '            # Revert to checkpoint'), (167, '            scene.restore_state(self.checkpoint_states[key])'), (168, ''), (169, '            # Clear out any saved states that show up later'), (170, '            all_keys = list(self.checkpoint_states.keys())'), (171, '            index = all_keys.index(key)'), (172, '            for later_key in all_keys[index + 1:]:'), (173, '                self.checkpoint_states.pop(later_key)'), (174, '        else:'), (175, '            self.checkpoint_states[key] = scene.get_state()'), (176, ''), (177, '    def clear_checkpoints(self):'), (178, '        self.checkpoint_states = dict()')], 'deleted': []}",,26
manimlib/scene/scene.py,manimlib/scene/scene.py,40b5c7c1c126f33e346514fd6616b8b24cb05c10,636fb3a45b4726ca308043a665b60f4e9efc5e2d,Slightly clean up interactive_scene_embed,"{'added': [(207, '        if not self.window:'), (208, '            # Embed is only relevant for interactive development with a Window'), (209, '            return'), (893, '        shell = get_ipython()'), (894, '        if shell:'), (895, '            shell.run_line_magic(""exit_raise"", """")')], 'deleted': [(890, '        self.shell.run_line_magic(""exit_raise"", """")')]}",222,222
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,40b5c7c1c126f33e346514fd6616b8b24cb05c10,636fb3a45b4726ca308043a665b60f4e9efc5e2d,Slightly clean up interactive_scene_embed,"{'added': [], 'deleted': [(16, '    if not scene.window:'), (17, '        # Embed is only relevant for interactive development with a Window'), (18, '        return'), (21, '    scene.save_state()'), (24, '    scene.shell = shell  # It would be better not to add attributes to scene here')]}",25,25
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,cb3e115a6c7780de1a0f4e559bc71a1ba9d1ca24,40b5c7c1c126f33e346514fd6616b8b24cb05c10,Minor cleaning,"{'added': [(36, ''), (37, ""    # Update the module's namespace to include local variables""), (39, '    module.__dict__.update(caller_frame.f_locals)'), (40, '    module.__dict__.update(get_shortcuts(scene))'), (41, ''), (42, '    return InteractiveShellEmbed('), (134, '        lines = code_string.split(""\\n"")')], 'deleted': [(37, '    shell = InteractiveShellEmbed('), (43, ""    # Update the module's namespace to match include local variables""), (44, '    module.__dict__.update(caller_frame.f_locals)'), (45, '    module.__dict__.update(get_shortcuts(scene))'), (46, ''), (47, '    return shell'), (48, ''), (133, '        lines = code_string.split(""\\n"")')]}",25,25
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,cb3e115a6c7780de1a0f4e559bc71a1ba9d1ca24,"Get rid of the (hacky) solution to redefining Scene methods, since reload handles it better","{'added': [], 'deleted': [(126, '        code_string = self.handle_method_definitions(code_string)'), (127, ''), (130, '    @staticmethod'), (131, '    def handle_method_definitions(code_string: str):'), (132, '        # Copied methods of a scene are handled specially'), (133, '        # A bit hacky, yes, but convenient'), (134, '        lines = code_string.split(""\\n"")'), (135, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (136, '        method_names = re.findall(method_pattern, lines[0].strip())'), (137, '        if method_names:'), (138, '            method_name = method_names[0]'), (139, '            indent = "" "" * lines[0].index(lines[0].strip())'), (140, '            return ""\\n"".join(['), (141, '                # Remove self from function signature'), (142, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (143, '                *lines[1:],'), (144, '                # Attach to scene via self.func_name = func_name'), (145, '                f""{indent}self.{method_name} = {method_name}""'), (146, '            ])'), (147, '        return code_string'), (148, '')]}",23,23
manimlib/__main__.py,manimlib/__main__.py,bf81d94362691a37052107fd65a8de30026d668e,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,Don't make reload_manager a global variable,"{'added': [(6, 'from manimlib.reload_manager import ReloadManager'), (25, '    reload_manager = ReloadManager()')], 'deleted': [(6, 'from manimlib.reload_manager import reload_manager')]}",5,5
manimlib/reload_manager.py,manimlib/reload_manager.py,bf81d94362691a37052107fd65a8de30026d668e,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,Don't make reload_manager a global variable,"{'added': [(68, '        scene_config.update(reload_manager=self)'), (69, '')], 'deleted': [(91, ''), (92, ''), (93, 'reload_manager = ReloadManager()')]}",15,15
manimlib/scene/scene.py,manimlib/scene/scene.py,bf81d94362691a37052107fd65a8de30026d668e,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,Don't make reload_manager a global variable,"{'added': [(47, '    from manimlib.reload_manager import ReloadManager'), (79, '        reload_manager: Optional[ReloadManager] = None,'), (94, '        self.reload_manager = reload_manager'), (882, '        `extract_scene.insert_embed_line_to_module()` method.'), (888, ''), (895, '        self.reload_manager.set_new_start_at_line(start_at_line)')], 'deleted': [(23, 'from manimlib.reload_manager import reload_manager'), (880, '        `config.get_module_with_inserted_embed_line()` method.'), (892, '        reload_manager.set_new_start_at_line(start_at_line)')]}",222,222
manimlib/__main__.py,manimlib/__main__.py,6d0b23f914869851e734c89aec0969eff3bc2dd1,bf81d94362691a37052107fd65a8de30026d668e,Slightly simplify ReloadManager,"{'added': [(25, '    reload_manager = ReloadManager(args)')], 'deleted': [(25, '    reload_manager = ReloadManager()'), (26, '    reload_manager.args = args')]}",5,5
manimlib/reload_manager.py,manimlib/reload_manager.py,6d0b23f914869851e734c89aec0969eff3bc2dd1,bf81d94362691a37052107fd65a8de30026d668e,Slightly simplify ReloadManager,"{'added': [(1, 'from __future__ import annotations'), (2, ''), (6, ''), (7, 'import manimlib.config'), (8, 'import manimlib.extract_scene'), (9, ''), (13, 'from typing import TYPE_CHECKING'), (14, 'if TYPE_CHECKING:'), (15, '    from argparse import Namespace'), (16, ''), (17, ''), (36, '    def __init__(self, cli_args: Namespace):'), (37, '        self.args = cli_args'), (38, ''), (52, '                self.retrieve_scenes_and_run()'), (66, '    def retrieve_scenes_and_run(self):'), (70, '        if self.start_at_line is not None:'), (71, '            self.args.embed = str(self.start_at_line)')], 'deleted': [(17, '    args: Any = None'), (39, '                self.retrieve_scenes_and_run(self.start_at_line)'), (53, '    def retrieve_scenes_and_run(self, overwrite_start_at_line: int | None = None):'), (57, '        import manimlib.config'), (58, '        import manimlib.extract_scene'), (59, ''), (60, '        # Args'), (61, '        if self.args is None:'), (62, '            raise RuntimeError(""Fatal error: No args were passed to the ReloadManager"")'), (63, '        if overwrite_start_at_line is not None:'), (64, '            self.args.embed = str(overwrite_start_at_line)')]}",15,15
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.","{'added': [], 'deleted': [(718, '    def save_to_file(self, file_path: str) -> Self:'), (719, '        with open(file_path, ""wb"") as fp:'), (720, '            fp.write(self.serialize())'), (721, '        log.info(f""Saved mobject to {file_path}"")'), (722, '        return self'), (723, ''), (724, '    @staticmethod'), (725, '    def load(file_path) -> Mobject:'), (726, '        if not os.path.exists(file_path):'), (727, '            log.error(f""No file found at {file_path}"")'), (728, '            sys.exit(2)'), (729, '        with open(file_path, ""rb"") as fp:'), (730, '            mobject = pickle.load(fp)'), (731, '        return mobject'), (732, '')]}",561,561
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.","{'added': [], 'deleted': [(463, '    def save_selection_to_file(self):'), (464, '        if len(self.selection) == 1:'), (465, '            self.save_mobject_to_file(self.selection[0])'), (466, '        else:'), (467, '            self.save_mobject_to_file(self.selection)'), (468, ''), (506, '        elif char == ""s"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (507, '            self.save_selection_to_file()')]}",160,160
manimlib/scene/scene.py,manimlib/scene/scene.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.","{'added': [], 'deleted': [(713, '    def save_mobject_to_file(self, mobject: Mobject, file_path: str | None = None) -> None:'), (714, '        if file_path is None:'), (715, '            file_path = self.file_writer.get_saved_mobject_path(mobject)'), (716, '            if file_path is None:'), (717, '                return'), (718, '        mobject.save_to_file(file_path)'), (719, ''), (720, '    def load_mobject(self, file_name):'), (721, '        if os.path.exists(file_name):'), (722, '            path = file_name'), (723, '        else:'), (724, '            directory = self.file_writer.get_saved_mobject_directory()'), (725, '            path = os.path.join(directory, file_name)'), (726, '        return Mobject.load(path)'), (727, '')]}",217,217
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.","{'added': [], 'deleted': [(149, '    def get_saved_mobject_directory(self) -> str:'), (150, '        return guarantee_existence(self.saved_mobject_directory)'), (151, ''), (152, '    def get_saved_mobject_path(self, mobject: Mobject) -> str | None:'), (153, '        directory = self.get_saved_mobject_directory()'), (154, '        files = os.listdir(directory)'), (155, '        default_name = str(mobject) + ""_0.mob""'), (156, '        index = 0'), (157, '        while default_name in files:'), (158, '            default_name = default_name.replace(str(index), str(index + 1))'), (159, '            index += 1'), (160, ""        if platform.system() == 'Darwin':""), (161, '            cmds = ['), (162, '                ""osascript"", ""-e"",'), (163, '                f""""""'), (164, '                set chosenfile to (choose file name default name ""{default_name}"" default location ""{directory}"")'), (165, '                POSIX path of chosenfile'), (166, '                """""",'), (167, '            ]'), (168, '            process = sp.Popen(cmds, stdout=sp.PIPE)'), (169, '            file_path = process.stdout.read().decode(""utf-8"").split(""\\n"")[0]'), (170, '            if not file_path:'), (171, '                return'), (172, '        else:'), (173, '            user_name = input(f""Enter mobject file name (default is {default_name}): "")'), (174, '            file_path = os.path.join(directory, user_name or default_name)'), (175, '            if os.path.exists(file_path) or os.path.exists(file_path + "".mob""):'), (176, '                if input(f""{file_path} already exists. Overwrite (y/n)? "") != ""y"":'), (177, '                    return'), (178, '        if not file_path.endswith("".mob""):'), (179, '            file_path = file_path + "".mob""'), (180, '        return file_path'), (181, '')]}",84,84
manimlib/reload_manager.py,manimlib/reload_manager.py,88bae476ce3dc9d4cb8ca4349ace922d7a873311,7a69807ce63cca75e3deb8bb19ed385f759a7de9,Don't print filename that is being reloaded,"{'added': [], 'deleted': [(96, '                    f""in \\033[96m{self.args.file}\\033[0m"",')]}",15,15
manimlib/reload_manager.py,manimlib/reload_manager.py,dd508b8cfc5452245f117d18b483be770b423823,88bae476ce3dc9d4cb8ca4349ace922d7a873311,No need to track ReloadManager.start_at_line,"{'added': [(39, '        self.args.embed = str(start_at_line)'), (57, '                self.note_reload()'), (61, '    def note_reload(self):'), (62, '        self.is_reload = True'), (63, '        print("" "".join(['), (64, '            ""Reloading interactive session for"",'), (65, '            f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (66, '            f""at line \\033[96m{self.args.embed}\\033[0m""'), (67, '        ]))'), (68, '')], 'deleted': [(30, ''), (31, '    # The line number to load the scene from when reloading'), (32, '    start_at_line = None'), (33, ''), (43, '        self.start_at_line = start_at_line'), (61, '                self.is_reload = True'), (62, ''), (70, '        if self.start_at_line is not None:'), (71, '            self.args.embed = str(self.start_at_line)'), (72, ''), (89, '            return'), (92, '            if self.args.embed and self.is_reload:'), (93, '                print("" "".join(['), (94, '                    ""Reloading interactive session for"",'), (95, '                    f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (96, '                    f""at line \\033[96m{self.args.embed}\\033[0m""'), (97, '                ]))')]}",13,13
manimlib/reload_manager.py,manimlib/reload_manager.py,8706ba1589a7a42968d668ff6fedd6b10c8204cd,dd508b8cfc5452245f117d18b483be770b423823,"No real need to track ReloadManager.scenes

This was to be able to loop through an tear them down, but tear down is primarily about ending any file writing, and potentially cleaning up a window, which for the sake of reusing a window we don't want to do anyway.","{'added': [(81, '        scenes = manimlib.extract_scene.main(scene_config, run_config)'), (82, '        if len(scenes) == 0:'), (85, '        for scene in scenes:')], 'deleted': [(28, '    scenes: list[Any] = []'), (53, '                for scene in self.scenes:'), (54, '                    scene.tear_down()'), (55, ''), (56, '                self.scenes = []'), (86, '        self.scenes = manimlib.extract_scene.main(scene_config, run_config)'), (87, '        if len(self.scenes) == 0:'), (90, '        for scene in self.scenes:')]}",12,12
manimlib/default_config.yml,manimlib/default_config.yml,950ac31b9b2a340ab32c039c05d07e318598d485,8706ba1589a7a42968d668ff6fedd6b10c8204cd,Replace IGNORE_MANIMLIB_MODULES constant with a piece of global configuration,"{'added': [(61, 'ignore_manimlib_modules_on_reload: True')], 'deleted': []}",,
manimlib/module_loader.py,manimlib/module_loader.py,950ac31b9b2a340ab32c039c05d07e318598d485,8706ba1589a7a42968d668ff6fedd6b10c8204cd,Replace IGNORE_MANIMLIB_MODULES constant with a piece of global configuration,"{'added': [(9, 'from manimlib.config import get_global_config'), (145, '        ignore_manimlib_modules = get_global_config()[""ignore_manimlib_modules_on_reload""]'), (146, '        if ignore_manimlib_modules and module.__name__.startswith(""manimlib""):')], 'deleted': [(13, 'IGNORE_MANIMLIB_MODULES = True'), (14, ''), (146, '        if IGNORE_MANIMLIB_MODULES and module.__name__.startswith(""manimlib""):')]}",27,27
manimlib/config.py,manimlib/config.py,9e77b0dcdd89fbec7b8761640e6555d74db588a4,950ac31b9b2a340ab32c039c05d07e318598d485,Consolidate window configuration,"{'added': [(322, '    mon_index = global_config[""window""][""monitor""]'), (329, '    if not (args.full_screen or global_config[""window""][""full_screen""]):'), (332, ''), (333, '    # Find position (Perhaps factor this out)'), (334, '    pos_str = global_config[""window""][""position""]'), (335, '    # Position might be specified with a string of the form'), (336, '    # x,y for integers x and y'), (337, '    if "","" in pos_str:'), (338, '        default_position = tuple(map(int, pos_str.split("","")))'), (339, '    else:'), (340, '        # Alternatively, it might be specified with a string like'), (341, '        # UR, OO, DL, etc. specifying what corner it should go to'), (342, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (343, '        width_diff = monitor.width - window_width'), (344, '        height_diff = monitor.height - window_height'), (345, '        x_step = char_to_n[pos_str[1]] * width_diff // 2'), (346, '        y_step = char_to_n[pos_str[0]] * height_diff // 2'), (347, '        default_position = ('), (348, '            monitor.x + x_step,'), (349, '            -monitor.y + y_step,'), (350, '        )'), (351, ''), (352, '    return dict('), (353, '        size=(window_width, window_height),'), (354, '        default_position=default_position'), (355, '    )')], 'deleted': [(322, '    mon_index = global_config[""window_monitor""]'), (329, '    if not (args.full_screen or global_config[""full_screen""]):'), (332, '    return dict(size=(window_width, window_height))')]}",53,53
manimlib/default_config.yml,manimlib/default_config.yml,9e77b0dcdd89fbec7b8761640e6555d74db588a4,950ac31b9b2a340ab32c039c05d07e318598d485,Consolidate window configuration,"{'added': [(28, 'window:'), (29, '  # Set the position of window on screen, you can use directions, e.g. UL/DR/OL/OO/...'), (30, '  # also, you can also specify the position(pixel) of the upper left corner of'), (31, '  # the window on the monitor, e.g. ""960,540""'), (32, '  position: UR'), (33, '  # If using multiple monitors, which one should show the window?'), (34, '  monitor: 0'), (35, '  # If not full screen, the default to give it half the screen width'), (36, '  full_screen: False'), (49, 'style:'), (50, '  tex_template: ""default""'), (51, '  font: ""Consolas""'), (52, '  text_alignment: ""LEFT""'), (53, '  background_color: ""#333333""'), (61, 'universal_import_line: ""from manimlib import *""')], 'deleted': [(28, 'universal_import_line: ""from manimlib import *""'), (29, 'style:'), (30, '  tex_template: ""default""'), (31, '  font: ""Consolas""'), (32, '  text_alignment: ""LEFT""'), (33, '  background_color: ""#333333""'), (34, '# Set the position of preview window, you can use directions, e.g. UL/DR/OL/OO/...'), (35, '# also, you can also specify the position(pixel) of the upper left corner of'), (36, '# the window on the monitor, e.g. ""960,540""'), (37, 'window_position: UR'), (38, 'window_monitor: 0'), (39, 'full_screen: False')]}",,
manimlib/window.py,manimlib/window.py,9e77b0dcdd89fbec7b8761640e6555d74db588a4,950ac31b9b2a340ab32c039c05d07e318598d485,Consolidate window configuration,"{'added': [(34, '        default_position: tuple[int, int] = (0, 0),'), (41, '        self.default_position = default_position')], 'deleted': [(40, '        self.default_position = self.find_initial_position(size)'), (89, '    def find_initial_position(self, size: tuple[int, int]) -> tuple[int, int]:'), (90, '        global_config = get_global_config()'), (91, '        custom_position = global_config[""window_position""]'), (92, '        mon_index = global_config[""window_monitor""]'), (93, '        monitors = get_monitors()'), (94, '        monitor = monitors[min(mon_index, len(monitors) - 1)]'), (95, '        window_width, window_height = size'), (96, '        # Position might be specified with a string of the form'), (97, '        # x,y for integers x and y'), (98, '        if "","" in custom_position:'), (99, '            return tuple(map(int, custom_position.split("","")))'), (100, ''), (101, '        # Alternatively, it might be specified with a string like'), (102, '        # UR, OO, DL, etc. specifying what corner it should go to'), (103, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (104, '        width_diff = monitor.width - window_width'), (105, '        height_diff = monitor.height - window_height'), (106, '        return ('), (107, '            monitor.x + char_to_n[custom_position[1]] * width_diff // 2,'), (108, '            -monitor.y + char_to_n[custom_position[0]] * height_diff // 2,'), (109, '        )'), (110, '')]}",36,36
manimlib/window.py,manimlib/window.py,1276724891853df17d10c52431fa8591433df25d,9e77b0dcdd89fbec7b8761640e6555d74db588a4,Pull out the initial Window.to_default_position from init_for_scene,"{'added': [(45, '        self.to_default_position()'), (46, '')], 'deleted': [(68, '        self.to_default_position()'), (69, '')]}",36,36
manimlib/window.py,manimlib/window.py,c02259a39e62e1e0fd6d50ea00a1e9de31afc54d,1276724891853df17d10c52431fa8591433df25d,Remove import,"{'added': [], 'deleted': [(8, 'from screeninfo import get_monitors')]}",36,36
manimlib/config.py,manimlib/config.py,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,c02259a39e62e1e0fd6d50ea00a1e9de31afc54d,Factor out get_window_position,"{'added': [(314, 'def get_window_position(monitor: screeninfo.Monitor, position_string: str, size: tuple[int, int]):'), (315, '    # Find position (Perhaps factor this out)'), (316, '    # Position might be specified with a string of the form'), (317, '    # x,y for integers x and y'), (318, '    if "","" in position_string:'), (319, '        return tuple(map(int, position_string.split("","")))'), (320, '    elif len(position_string) == 2:'), (321, '        # Alternatively, it might be specified with a string like'), (322, '        # UR, OO, DL, etc. specifying what corner it should go to'), (323, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (324, '        width_diff = monitor.width - size[0]'), (325, '        height_diff = monitor.height - size[1]'), (326, '        x_step = char_to_n[position_string[1]] * width_diff // 2'), (327, '        y_step = char_to_n[position_string[0]] * height_diff // 2'), (328, '        return (monitor.x + x_step, -monitor.y + y_step)'), (329, '    else:'), (330, '        raise Exception(""Window position string must be either a tuple of integers, or a pair of from \\""ULORD\\"""")'), (331, ''), (332, ''), (346, ''), (351, '    size = (window_width, window_height)'), (353, '    default_position = get_window_position(monitor, global_config[""window""][""position""], size)'), (354, ''), (355, '    return dict(size=size, default_position=default_position)')], 'deleted': [(326, ''), (333, '    # Find position (Perhaps factor this out)'), (334, '    pos_str = global_config[""window""][""position""]'), (335, '    # Position might be specified with a string of the form'), (336, '    # x,y for integers x and y'), (337, '    if "","" in pos_str:'), (338, '        default_position = tuple(map(int, pos_str.split("","")))'), (339, '    else:'), (340, '        # Alternatively, it might be specified with a string like'), (341, '        # UR, OO, DL, etc. specifying what corner it should go to'), (342, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (343, '        width_diff = monitor.width - window_width'), (344, '        height_diff = monitor.height - window_height'), (345, '        x_step = char_to_n[pos_str[1]] * width_diff // 2'), (346, '        y_step = char_to_n[pos_str[0]] * height_diff // 2'), (347, '        default_position = ('), (348, '            monitor.x + x_step,'), (349, '            -monitor.y + y_step,'), (350, '        )'), (351, ''), (352, '    return dict('), (353, '        size=(window_width, window_height),'), (354, '        default_position=default_position'), (355, '    )')]}",55,55
manimlib/config.py,manimlib/config.py,d4c5c4736a84e82e15cf5c55468562716eba1624,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,Move logic for window size and position into Window class,"{'added': [(314, '    window_config = global_config[""window""]'), (315, '    # Todo, this correction of configuration should maybe happen elsewhere'), (316, '    for key in ""position"", ""size"":'), (317, '        if window_config.get(key):'), (318, '            window_config[key] = eval(window_config[key])'), (319, '    if args.full_screen:'), (320, '        window_config[""full_screen""] = True'), (321, '    return window_config')], 'deleted': [(8, 'import screeninfo'), (314, 'def get_window_position(monitor: screeninfo.Monitor, position_string: str, size: tuple[int, int]):'), (315, '    # Find position (Perhaps factor this out)'), (316, '    # Position might be specified with a string of the form'), (317, '    # x,y for integers x and y'), (318, '    if "","" in position_string:'), (319, '        return tuple(map(int, position_string.split("","")))'), (320, '    elif len(position_string) == 2:'), (321, '        # Alternatively, it might be specified with a string like'), (322, '        # UR, OO, DL, etc. specifying what corner it should go to'), (323, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (324, '        width_diff = monitor.width - size[0]'), (325, '        height_diff = monitor.height - size[1]'), (326, '        x_step = char_to_n[position_string[1]] * width_diff // 2'), (327, '        y_step = char_to_n[position_string[0]] * height_diff // 2'), (328, '        return (monitor.x + x_step, -monitor.y + y_step)'), (329, '    else:'), (330, '        raise Exception(""Window position string must be either a tuple of integers, or a pair of from \\""ULORD\\"""")'), (331, ''), (332, ''), (334, '    # Default to making window half the screen size'), (335, '    # but make it full screen if -f is passed in'), (336, '    try:'), (337, '        monitors = screeninfo.get_monitors()'), (338, '    except screeninfo.ScreenInfoError:'), (339, '        # Default fallback'), (340, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (341, '    mon_index = global_config[""window""][""monitor""]'), (342, '    monitor = monitors[min(mon_index, len(monitors) - 1)]'), (343, ''), (344, '    width, height = get_resolution(args, global_config)'), (345, '    aspect_ratio = width / height'), (346, ''), (347, '    window_width = monitor.width'), (348, '    if not (args.full_screen or global_config[""window""][""full_screen""]):'), (349, '        window_width //= 2'), (350, '    window_height = int(window_width / aspect_ratio)'), (351, '    size = (window_width, window_height)'), (352, ''), (353, '    default_position = get_window_position(monitor, global_config[""window""][""position""], size)'), (354, ''), (355, '    return dict(size=size, default_position=default_position)')]}",52,52
manimlib/default_config.yml,manimlib/default_config.yml,d4c5c4736a84e82e15cf5c55468562716eba1624,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,Move logic for window size and position into Window class,"{'added': [(29, '  # The position of window on screen. UR -> Upper Right, and likewise DL -> Down and Left,'), (30, '  # UO would be upper middle, etc.'), (31, '  position_string: UR'), (32, '  # If using multiple monitors, which one should show the window'), (33, '  monitor_index: 0'), (36, '  # Other optional specifications that override the above'), (37, '  # position: (500, 500)  # Specific position, in pixel coordiantes, for upper right corner'), (38, '  # size: (1920, 1080)  # Specific size, in pixels')], 'deleted': [(29, '  # Set the position of window on screen, you can use directions, e.g. UL/DR/OL/OO/...'), (30, '  # also, you can also specify the position(pixel) of the upper left corner of'), (31, '  # the window on the monitor, e.g. ""960,540""'), (32, '  position: UR'), (33, '  # If using multiple monitors, which one should show the window?'), (34, '  monitor: 0')]}",,
manimlib/window.py,manimlib/window.py,d4c5c4736a84e82e15cf5c55468562716eba1624,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,Move logic for window size and position into Window class,"{'added': [(9, 'import screeninfo'), (12, 'from manimlib.constants import ASPECT_RATIO'), (34, '        position_string: str = ""UR"",'), (35, '        monitor_index: int = 1,'), (36, '        full_screen: bool = False,'), (37, '        size: Optional[tuple[int, int]] = None,'), (38, '        position: Optional[tuple[int, int]] = None,'), (42, '        self.monitor = self.get_monitor(monitor_index)'), (43, '        self.default_size = size or self.get_default_size(full_screen)'), (44, '        self.default_position = position or self.position_from_string(position_string)'), (46, '        super().__init__(samples=samples)'), (49, '        self.pressed_keys = set()'), (50, ''), (51, ''), (75, '    def get_monitor(self, index):'), (76, '        try:'), (77, '            monitors = screeninfo.get_monitors()'), (78, '            return monitors[min(index, len(monitors) - 1)]'), (79, '        except screeninfo.ScreenInfoError:'), (80, '            # Default fallback'), (81, '            return screeninfo.Monitor(width=1920, height=1080)'), (82, ''), (83, '    def get_default_size(self, full_screen=False):'), (84, '        width = self.monitor.width // (1 if full_screen else 2)'), (85, '        height = int(width // ASPECT_RATIO)'), (86, '        return (width, height)'), (87, ''), (88, '    def position_from_string(self, position_string):'), (89, '        # Alternatively, it might be specified with a string like'), (90, '        # UR, OO, DL, etc. specifying what corner it should go to'), (91, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (92, '        size = self.default_size'), (93, '        width_diff = self.monitor.width - size[0]'), (94, '        height_diff = self.monitor.height - size[1]'), (95, '        x_step = char_to_n[position_string[1]] * width_diff // 2'), (96, '        y_step = char_to_n[position_string[0]] * height_diff // 2'), (97, '        return (self.monitor.x + x_step, -self.monitor.y + y_step)'), (98, '')], 'deleted': [(32, '        size: tuple[int, int] = (1280, 720),'), (33, '        default_position: tuple[int, int] = (0, 0),'), (36, '        super().__init__(size=size, samples=samples)'), (37, ''), (39, '        self.default_size = size'), (40, '        self.default_position = default_position'), (41, '        self.pressed_keys = set()'), (42, '        self.size = size')]}",42,42
manimlib/camera/camera.py,manimlib/camera/camera.py,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"{'added': [(11, 'from manimlib.constants import DEFAULT_RESOLUTION'), (32, '        # Note: frame height and width will be resized to match this resolution aspect ratio'), (33, '        resolution=DEFAULT_RESOLUTION,'), (50, '        self.background_image = background_image'), (51, '        self.default_pixel_shape = resolution  # Rename?')], 'deleted': [(11, 'from manimlib.constants import DEFAULT_PIXEL_HEIGHT, DEFAULT_PIXEL_WIDTH'), (32, '        pixel_width: int = DEFAULT_PIXEL_WIDTH,'), (33, '        pixel_height: int = DEFAULT_PIXEL_HEIGHT,'), (35, '        # Note: frame height and width will be resized to match the pixel aspect ratio'), (50, '        self.background_image = background_image'), (52, '        self.default_pixel_shape = (pixel_width, pixel_height)')]}",35,35
manimlib/config.py,manimlib/config.py,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"{'added': [(10, 'from ast import literal_eval'), (296, '    resolution_options = global_config[""resolution_options""]'), (298, '        resolution = tuple(map(int, args.resolution.split(""x"")))'), (300, '        resolution = resolution_options[""low""]'), (302, '        resolution = resolution_options[""med""]'), (304, '        resolution = resolution_options[""high""]'), (306, '        resolution = resolution_options[""4k""]'), (308, '        resolution = global_config[""camera""][""resolution""]'), (310, '    if isinstance(resolution, str):'), (311, '        resolution = literal_eval(resolution)'), (312, ''), (313, '    return resolution'), (321, '            window_config[key] = literal_eval(window_config[key])'), (331, '    camera_config = global_config[""camera""]'), (332, ''), (333, '    # All of this should be taken care of during some initialization of global_config'), (334, '    camera_config[""resolution""] = get_resolution(args, global_config)'), (335, '    if args.fps:'), (336, '        camera_config[""fps""] = args.fps'), (337, '    if args.color:'), (338, '        try:'), (339, '            camera_config[""background_color""] = colour.Color(args.color)'), (340, '        except Exception:'), (341, '            log.error(""Please use a valid color"")'), (342, '            log.error(err)'), (343, '            sys.exit(2)'), (345, '        camera_config[""background_opacity""] = 0.0')], 'deleted': [(295, '    camera_resolutions = global_config[""camera_resolutions""]'), (297, '        resolution = args.resolution'), (299, '        resolution = camera_resolutions[""low""]'), (301, '        resolution = camera_resolutions[""med""]'), (303, '        resolution = camera_resolutions[""high""]'), (305, '        resolution = camera_resolutions[""4k""]'), (307, '        resolution = camera_resolutions[camera_resolutions[""default_resolution""]]'), (309, '    width_str, height_str = resolution.split(""x"")'), (310, '    return int(width_str), int(height_str)'), (318, '            window_config[key] = eval(window_config[key])'), (328, '    width, height = get_resolution(args, global_config)'), (329, '    fps = int(args.fps or global_config[""fps""])'), (330, ''), (331, '    camera_config = {'), (332, '        ""pixel_width"": width,'), (333, '        ""pixel_height"": height,'), (334, '        ""fps"": fps,'), (335, '    }'), (336, ''), (337, '    try:'), (338, '        bg_color = args.color or global_config[""style""][""background_color""]'), (339, '        camera_config[""background_color""] = colour.Color(bg_color)'), (340, '    except ValueError as err:'), (341, '        log.error(""Please use a valid color"")'), (342, '        log.error(err)'), (343, '        sys.exit(2)'), (344, ''), (345, '    # If rendering a transparent image/movie, make sure the'), (346, '    # scene has a background opacity of 0'), (348, '        camera_config[""background_opacity""] = 0')]}",53,53
manimlib/default_config.yml,manimlib/default_config.yml,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"{'added': [(39, 'camera:'), (40, '  resolution: (1920, 1080)'), (41, '  background_color: ""#333333""'), (42, '  fps: 30'), (43, '  background_opacity: 1.0'), (60, 'resolution_options:'), (61, '  low: (854, 480)'), (62, '  med: (1280, 720)'), (63, '  high: (1920, 1080)'), (64, '  4k: (3840, 2160)')], 'deleted': [(55, '  background_color: ""#333333""'), (56, 'camera_resolutions:'), (57, '  low: ""854x480""'), (58, '  med: ""1280x720""'), (59, '  high: ""1920x1080""'), (60, '  4k: ""3840x2160""'), (61, '  default_resolution: ""high""'), (62, 'fps: 30')]}",,
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"{'added': [(414, '        size = cam_config[""resolution""]')], 'deleted': [(414, ""        size = (cam_config['pixel_width'], cam_config['pixel_height'])"")]}",66,66
manimlib/window.py,manimlib/window.py,4b483b75ce65f4d2ff8badc3c50d0349a80e375c,4cc2e5ed177329a76add74df285ff2a1cac19ef0,Minor tweak,"{'added': [(45, '        self.pressed_keys = set()')], 'deleted': [(49, '        self.pressed_keys = set()'), (50, ''), (51, '')]}",42,42
manimlib/config.py,manimlib/config.py,858d8c122b04d6936cf57ee156ac88987a0ae1dd,4b483b75ce65f4d2ff8badc3c50d0349a80e375c,"Rename ""file_writer_config"" in default_config to simply ""file_writer""","{'added': [(275, '        **global_config[""file_writer""],')], 'deleted': [(275, '        **global_config[""file_writer_config""],')]}",53,53
manimlib/default_config.yml,manimlib/default_config.yml,858d8c122b04d6936cf57ee156ac88987a0ae1dd,4b483b75ce65f4d2ff8badc3c50d0349a80e375c,"Rename ""file_writer_config"" in default_config to simply ""file_writer""","{'added': [(36, '  # Other optional specifications that override the above include:'), (44, 'file_writer:'), (61, '  # When the user passes in -l, -m, --hd or --uhd, these are the corresponding'), (62, '  # resolutions')], 'deleted': [(36, '  # Other optional specifications that override the above'), (44, 'file_writer_config:')]}",,
manimlib/config.py,manimlib/config.py,6b3801107842ceb5be2f51863baa5c1a131baf2f,858d8c122b04d6936cf57ee156ac88987a0ae1dd,Refactor config.py,"{'added': [(24, '@lru_cache'), (25, 'def get_global_config():'), (26, '    """"""'), (27, '    Return default configuration for various classes in manim, such as'), (28, '    Scene, Window, Camera, and SceneFileWriter, as well as configuration'), (29, '    determining how the scene is run (e.g. written to file or previewed in window).'), (30, ''), (31, '    The result is initially on the contents of default_config.yml in the manimlib directory,'), (32, '    which can be further updated by a custom configuration file custom_config.yml.'), (33, '    It is further updated based on command line argument.'), (34, ''), (35, ""    After the first time this function is called, it's result is cached""), (36, '    via lru cache, and subsequent calls return this result'), (37, '    """"""'), (38, '    args = parse_cli()'), (39, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (40, '    config = merge_dicts_recursively('), (41, '        load_yaml(global_defaults_file),'), (42, '        load_yaml(""custom_config.yml""),  # From current working directory'), (43, '        load_yaml(args.config_file) if args.config_file else dict(),'), (44, '    )'), (45, ''), (46, '    update_directory_config(config)'), (47, '    update_window_config(config, args)'), (48, '    update_camera_config(config, args)'), (49, '    update_file_writer_config(config, args)'), (50, ''), (51, '    return config'), (52, ''), (53, ''), (54, '# Functions used to initialized the configuration'), (55, ''), (56, ''), (229, 'def update_directory_config(config: dict):'), (230, '    dir_config = config[""directories""]'), (231, ""    base = dir_config['base']""), (232, ""    for key, subdir in dir_config['subdirs'].items():""), (233, '        dir_config[key] = os.path.join(base, subdir)'), (236, 'def update_window_config(config: dict, args: Namespace):'), (237, '    window_config = config[""window""]'), (245, 'def update_camera_config(config: dict, args: Namespace):'), (246, '    camera_config = config[""camera""]'), (247, '    arg_resolution = get_resolution_from_args(args, config[""resolution_options""])'), (248, '    camera_config[""resolution""] = arg_resolution or literal_eval(camera_config[""resolution""])'), (261, ''), (262, 'def update_file_writer_config(config: dict, args: Namespace):'), (263, '    file_writer_config = config[""file_writer""]'), (264, '    file_writer_config.update('), (265, '        write_to_movie=(not args.skip_animations and args.write_file),'), (266, '        save_last_frame=(args.skip_animations and args.write_file),'), (267, '        save_pngs=args.save_pngs,'), (268, '        png_mode=(""RGBA"" if args.transparent else ""RGB""),'), (269, '        movie_file_extension=(get_file_ext(args)),'), (270, '        output_directory=get_output_directory(args, config),'), (271, '        file_name=args.file_name,'), (272, '        input_file_path=args.file or """",'), (273, '        open_file_upon_completion=args.open,'), (274, '        show_file_location_upon_completion=args.finder,'), (275, '        quiet=args.quiet,'), (276, '    )'), (277, ''), (278, '    if args.vcodec:'), (279, '        file_writer_config[""video_codec""] = args.vcodec'), (280, '    elif args.transparent:'), (281, '        file_writer_config[""video_codec""] = \'prores_ks\''), (282, '        file_writer_config[""pixel_format""] = \'\''), (283, '    elif args.gif:'), (284, '        file_writer_config[""video_codec""] = \'\''), (285, ''), (286, '    if args.pix_fmt:'), (287, '        file_writer_config[""pixel_format""] = args.pix_fmt'), (288, ''), (289, ''), (290, '# Shortcuts for retrieving portions of global configuration'), (291, ''), (292, ''), (293, 'def get_window_config() -> dict:'), (294, '    return get_global_config()[""window""]'), (295, ''), (296, ''), (297, 'def get_camera_config() -> dict:'), (298, '    return get_global_config()[""camera""]'), (299, ''), (300, ''), (301, 'def get_file_writer_config() -> dict:'), (302, '    return get_global_config()[""file_writer""]'), (310, '    camera_config = get_camera_config()'), (311, '    file_writer_config = get_file_writer_config()'), (329, '    window_config = get_window_config()'), (341, ''), (342, ''), (343, '# Helpers for the functions above'), (344, ''), (345, ''), (346, 'def load_yaml(file_path: str):'), (347, '    try:'), (348, '        with open(file_path, ""r"") as file:'), (349, '            return yaml.safe_load(file) or {}'), (350, '    except FileNotFoundError:'), (351, '        return {}'), (352, ''), (353, ''), (354, 'def get_manim_dir():'), (355, '    manimlib_module = importlib.import_module(""manimlib"")'), (356, '    manimlib_dir = os.path.dirname(inspect.getabsfile(manimlib_module))'), (357, '    return os.path.abspath(os.path.join(manimlib_dir, ""..""))'), (358, ''), (359, ''), (360, 'def get_resolution_from_args(args: Optional[Namespace], resolution_options: dict) -> Optional[tuple[int, int]]:'), (361, '    if args.resolution:'), (362, '        return tuple(map(int, args.resolution.split(""x"")))'), (363, '    if args.low_quality:'), (364, '        return literal_eval(resolution_options[""low""])'), (365, '    if args.medium_quality:'), (366, '        return literal_eval(resolution_options[""med""])'), (367, '    if args.hd:'), (368, '        return literal_eval(resolution_options[""high""])'), (369, '    if args.uhd:'), (370, '        return literal_eval(resolution_options[""4k""])'), (371, '    return None'), (372, ''), (373, ''), (374, 'def get_file_ext(args: Namespace) -> str:'), (375, '    if args.transparent:'), (376, '        file_ext = "".mov""'), (377, '    elif args.gif:'), (378, '        file_ext = "".gif""'), (379, '    else:'), (380, '        file_ext = "".mp4""'), (381, '    return file_ext'), (382, ''), (383, ''), (384, 'def get_animations_numbers(args: Namespace) -> tuple[int | None, int | None]:'), (385, '    stan = args.start_at_animation_number'), (386, '    if stan is None:'), (387, '        return (None, None)'), (388, '    elif "","" in stan:'), (389, '        return tuple(map(int, stan.split("","")))'), (390, '    else:'), (391, '        return int(stan), None'), (392, ''), (393, ''), (394, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (395, '    dir_config = global_config[""directories""]'), (396, '    output_directory = args.video_dir or dir_config[""output""]'), (397, '    if dir_config[""mirror_module_path""] and args.file:'), (398, '        to_cut = dir_config[""removed_mirror_prefix""]'), (399, '        ext = os.path.abspath(args.file)'), (400, '        ext = ext.replace(to_cut, """").replace("".py"", """")'), (401, '        if ext.startswith(""_""):'), (402, '            ext = ext[1:]'), (403, '        output_directory = os.path.join(output_directory, ext)'), (404, '    return output_directory')], 'deleted': [(196, 'def get_manim_dir():'), (197, '    manimlib_module = importlib.import_module(""manimlib"")'), (198, '    manimlib_dir = os.path.dirname(inspect.getabsfile(manimlib_module))'), (199, '    return os.path.abspath(os.path.join(manimlib_dir, ""..""))'), (200, ''), (201, ''), (202, 'def load_yaml(file_path: str):'), (203, '    try:'), (204, '        with open(file_path, ""r"") as file:'), (205, '            return yaml.safe_load(file) or {}'), (206, '    except FileNotFoundError:'), (207, '        return {}'), (208, ''), (209, ''), (210, '@lru_cache'), (211, 'def get_global_config():'), (212, '    args = parse_cli()'), (213, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (214, '    config = merge_dicts_recursively('), (215, '        load_yaml(global_defaults_file),'), (216, '        load_yaml(""custom_config.yml""),  # From current working directory'), (217, '        load_yaml(args.config_file) if args.config_file else {},'), (218, '    )'), (219, ''), (220, '    # Set the subdirectories'), (221, ""    base = config['directories']['base']""), (222, ""    for key, subdir in config['directories']['subdirs'].items():""), (223, ""        config['directories'][key] = os.path.join(base, subdir)""), (224, ''), (225, '    return config'), (226, ''), (227, ''), (228, 'def get_file_ext(args: Namespace) -> str:'), (229, '    if args.transparent:'), (230, '        file_ext = "".mov""'), (231, '    elif args.gif:'), (232, '        file_ext = "".gif""'), (233, '    else:'), (234, '        file_ext = "".mp4""'), (235, '    return file_ext'), (236, ''), (237, ''), (238, 'def get_animations_numbers(args: Namespace) -> tuple[int | None, int | None]:'), (239, '    stan = args.start_at_animation_number'), (240, '    if stan is None:'), (241, '        return (None, None)'), (242, '    elif "","" in stan:'), (243, '        return tuple(map(int, stan.split("","")))'), (244, '    else:'), (245, '        return int(stan), None'), (246, ''), (247, ''), (248, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (249, '    dir_config = global_config[""directories""]'), (250, '    output_directory = args.video_dir or dir_config[""output""]'), (251, '    if dir_config[""mirror_module_path""] and args.file:'), (252, '        to_cut = dir_config[""removed_mirror_prefix""]'), (253, '        ext = os.path.abspath(args.file)'), (254, '        ext = ext.replace(to_cut, """").replace("".py"", """")'), (255, '        if ext.startswith(""_""):'), (256, '            ext = ext[1:]'), (257, '        output_directory = os.path.join(output_directory, ext)'), (258, '    return output_directory'), (259, ''), (260, ''), (261, 'def get_file_writer_config(args: Namespace, global_config: dict) -> dict:'), (262, '    result = {'), (263, '        ""write_to_movie"": not args.skip_animations and args.write_file,'), (264, '        ""save_last_frame"": args.skip_animations and args.write_file,'), (265, '        ""save_pngs"": args.save_pngs,'), (266, '        # If -t is passed in (for transparent), this will be RGBA'), (267, '        ""png_mode"": ""RGBA"" if args.transparent else ""RGB"",'), (268, '        ""movie_file_extension"": get_file_ext(args),'), (269, '        ""output_directory"": get_output_directory(args, global_config),'), (270, '        ""file_name"": args.file_name,'), (271, '        ""input_file_path"": args.file or """",'), (272, '        ""open_file_upon_completion"": args.open,'), (273, '        ""show_file_location_upon_completion"": args.finder,'), (274, '        ""quiet"": args.quiet,'), (275, '        **global_config[""file_writer""],'), (276, '    }'), (277, ''), (278, '    if args.vcodec:'), (279, '        result[""video_codec""] = args.vcodec'), (280, '    elif args.transparent:'), (281, '        result[""video_codec""] = \'prores_ks\''), (282, '        result[""pixel_format""] = \'\''), (283, '    elif args.gif:'), (284, '        result[""video_codec""] = \'\''), (285, ''), (286, '    if args.pix_fmt:'), (287, '        result[""pixel_format""] = args.pix_fmt'), (288, ''), (289, '    return result'), (290, ''), (291, ''), (292, 'def get_resolution(args: Optional[Namespace] = None, global_config: Optional[dict] = None):'), (293, '    args = args or parse_cli()'), (294, '    global_config = global_config or get_global_config()'), (295, ''), (296, '    resolution_options = global_config[""resolution_options""]'), (297, '    if args.resolution:'), (298, '        resolution = tuple(map(int, args.resolution.split(""x"")))'), (299, '    elif args.low_quality:'), (300, '        resolution = resolution_options[""low""]'), (301, '    elif args.medium_quality:'), (302, '        resolution = resolution_options[""med""]'), (303, '    elif args.hd:'), (304, '        resolution = resolution_options[""high""]'), (305, '    elif args.uhd:'), (306, '        resolution = resolution_options[""4k""]'), (307, '    else:'), (308, '        resolution = global_config[""camera""][""resolution""]'), (309, ''), (310, '    if isinstance(resolution, str):'), (311, '        resolution = literal_eval(resolution)'), (313, '    return resolution'), (315, ''), (316, 'def get_window_config(args: Namespace, global_config: dict) -> dict:'), (317, '    window_config = global_config[""window""]'), (318, '    # Todo, this correction of configuration should maybe happen elsewhere'), (324, '    return window_config'), (325, ''), (326, ''), (327, 'def get_camera_config(args: Optional[Namespace] = None, global_config: Optional[dict] = None) -> dict:'), (328, '    args = args or parse_cli()'), (329, '    global_config = global_config or get_global_config()'), (331, '    camera_config = global_config[""camera""]'), (333, '    # All of this should be taken care of during some initialization of global_config'), (334, '    camera_config[""resolution""] = get_resolution(args, global_config)'), (347, '    return camera_config'), (355, '    camera_config = get_camera_config(args, global_config)'), (356, '    file_writer_config = get_file_writer_config(args, global_config)'), (374, '    window_config = get_window_config(args, get_global_config())')]}",53,53
manimlib/constants.py,manimlib/constants.py,6b3801107842ceb5be2f51863baa5c1a131baf2f,858d8c122b04d6936cf57ee156ac88987a0ae1dd,Refactor config.py,"{'added': [(4, 'from manimlib.config import get_global_config'), (15, 'DEFAULT_RESOLUTION: tuple[int, int] = get_global_config()[""camera""][""resolution""]')], 'deleted': [(4, 'from manimlib.config import get_resolution'), (15, 'DEFAULT_RESOLUTION: tuple[int, int] = get_resolution()')]}",0,0
manimlib/mobject/boolean_ops.py,manimlib/mobject/boolean_ops.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),"{'added': [(10, '# Borrowed from https://github.com/ManimCommunity/manim/')], 'deleted': [(10, '# Borrowed from from https://github.com/ManimCommunity/manim/')]}",23,23
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),"{'added': [], 'deleted': [(13, 'from manimlib.utils.simple_functions import hash_string')]}",52,52
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),"{'added': [(78, '    #'), (79, ""    # To avoid CAIRO_STATUS_WRITE_ERROR: b'error while writing to""), (80, ""    # output stream' on Windows, we need to pass 'delete=False'.""), (81, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+', delete=False) as tmp:"")], 'deleted': [(8, 'import hashlib'), (24, 'from manimlib.utils.simple_functions import hash_string'), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:"")]}",73,73
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),"{'added': [(53, '    from typing import Callable, Tuple, Any, Optional'), (54, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Self')], 'deleted': [(5, 'import moderngl'), (7, 'import operator as op'), (8, 'import itertools as it'), (38, 'from manimlib.utils.iterables import arrays_match'), (39, 'from manimlib.utils.simple_functions import fdiv'), (41, 'from manimlib.utils.space_ops import cross'), (52, 'from manimlib.shader_wrapper import ShaderWrapper'), (60, '    from typing import Callable, Tuple, Any'), (61, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Vect4Array, Self')]}",289,289
manimlib/config.py,manimlib/config.py,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option","{'added': [], 'deleted': [(323, '        ""embed_exception_mode"": global_config[""embed_exception_mode""],'), (324, '        ""embed_error_sound"": global_config[""embed_error_sound""],')]}",53,53
manimlib/default_config.yml,manimlib/default_config.yml,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option","{'added': [(60, 'embed:'), (61, '  exception_mode: ""Verbose""')], 'deleted': [(68, 'embed_exception_mode: ""Verbose""'), (69, 'embed_error_sound: False')]}",,
manimlib/scene/scene.py,manimlib/scene/scene.py,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option","{'added': [], 'deleted': [(82, '        embed_exception_mode: str = """",'), (83, '        embed_error_sound: bool = False,'), (92, '        self.embed_exception_mode = embed_exception_mode'), (93, '        self.embed_error_sound = embed_error_sound')]}",217,217
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option","{'added': [(4, 'import os'), (10, 'from manimlib.config import get_global_config'), (43, '    exception_mode = get_global_config()[""embed""][""exception_mode""]'), (48, '        xmode=exception_mode')], 'deleted': [(45, '        xmode=scene.embed_exception_mode'), (97, '        if scene.embed_error_sound:'), (98, '            os.system(""printf \'\\a\'"")')]}",22,22
manimlib/config.py,manimlib/config.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"{'added': [(50, '    update_scene_config(config, args)'), (291, 'def update_scene_config(config: dict, args: Namespace):'), (292, '    scene_config = config[""scene""]'), (293, '    start, end = get_animations_numbers(args)'), (294, '    scene_config.update('), (295, '        # Note, Scene.__init__ makes use of both get_camera_config() and'), (296, '        # get_file_writer_config() below, so the arguments here are just for'), (297, '        # any future specifications beyond what the global configuration holds'), (298, '        camera_config=dict(),'), (299, '        file_writer_config=dict(),'), (300, '        skip_animations=args.skip_animations,'), (301, '        start_at_animation_number=start,'), (302, '        end_at_animation_number=end,'), (303, '        presenter_mode=args.presenter_mode,'), (304, '    )'), (305, '    if args.leave_progress_bars:'), (306, '        scene_config[""leave_progress_bars""] = True'), (307, '    if args.show_animation_progress:'), (308, '        scene_config[""show_animation_progress""] = True'), (309, ''), (310, ''), (326, 'def get_scene_config() -> dict:'), (330, '    return get_global_config()[""scene""]')], 'deleted': [(305, 'def get_scene_config(args: Namespace) -> dict:'), (309, '    global_config = get_global_config()'), (310, '    camera_config = get_camera_config()'), (311, '    file_writer_config = get_file_writer_config()'), (312, '    start, end = get_animations_numbers(args)'), (313, ''), (314, '    return {'), (315, '        ""file_writer_config"": file_writer_config,'), (316, '        ""camera_config"": camera_config,'), (317, '        ""skip_animations"": args.skip_animations,'), (318, '        ""start_at_animation_number"": start,'), (319, '        ""end_at_animation_number"": end,'), (320, '        ""presenter_mode"": args.presenter_mode,'), (321, '        ""leave_progress_bars"": args.leave_progress_bars,'), (322, '        ""show_animation_progress"": args.show_animation_progress,'), (323, '    }')]}",56,56
manimlib/default_config.yml,manimlib/default_config.yml,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"{'added': [(56, 'scene:'), (57, '  # Most of the scene configuration will come from CLI arguments,'), (58, '  # but defaults can be set here'), (59, '  show_animation_progress: False'), (60, '  leave_progress_bars: False')], 'deleted': []}",,
manimlib/extract_scene.py,manimlib/extract_scene.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"{'added': [(80, '    return int(total_time * get_global_config()[""camera""][""fps""])'), (84, '    fw_config = get_global_config()[""file_writer""]'), (86, '        scene_config[""file_writer_config""][""total_frames""] = compute_total_frames(scene_class, scene_config)')], 'deleted': [(80, '    return int(total_time * scene_config[""camera_config""][""fps""])'), (84, '    fw_config = scene_config[""file_writer_config""]'), (86, '        fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config)')]}",37,37
manimlib/reload_manager.py,manimlib/reload_manager.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"{'added': [(69, '        scene_config = manimlib.config.get_scene_config()')], 'deleted': [(69, '        scene_config = manimlib.config.get_scene_config(self.args)')]}",12,12
manimlib/scene/scene.py,manimlib/scene/scene.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"{'added': [(18, 'from manimlib.config import get_camera_config'), (19, 'from manimlib.config import get_file_writer_config'), (34, 'from manimlib.utils.dict_ops import merge_dicts_recursively'), (74, '        window: Optional[Window] = None,'), (75, '        reload_manager: Optional[ReloadManager] = None,'), (82, '        show_animation_progress: bool = False,'), (95, '        self.camera_config = merge_dicts_recursively('), (96, '            get_camera_config(),         # Global default'), (97, '            self.default_camera_config,  # Updated configuration that subclasses may specify'), (98, '            camera_config,               # Updated configuration from instantiation'), (99, '        )'), (100, '        self.file_writer_config = merge_dicts_recursively('), (101, '            get_file_writer_config(),'), (102, '            self.default_file_writer_config,'), (103, '            file_writer_config,'), (104, '        )')], 'deleted': [(78, '        window: Optional[Window] = None,'), (79, '        reload_manager: Optional[ReloadManager] = None,'), (81, '        show_animation_progress: bool = False,'), (92, '        self.camera_config = {**self.default_camera_config, **camera_config}'), (93, '        self.file_writer_config = {**self.default_file_writer_config, **file_writer_config}')]}",217,217
manimlib/config.py,manimlib/config.py,d1080aa6fdd0b135f3d772656b6a77da06086624,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,Add run configuration to global config,"{'added': [(51, '    update_run_config(config, args)'), (312, 'def update_run_config(config: dict, args: Namespace):'), (313, '    config[""run""] = dict('), (314, '        file_name=args.file,'), (315, '        embed_line=(int(args.embed) if args.embed is not None else None),'), (316, '        is_reload=False,'), (317, '        prerun=args.prerun,'), (318, '        scene_names=args.scene_names,'), (319, '        quiet=args.quiet or args.write_all,'), (320, '        write_all=args.write_all,'), (321, '        window_config=config[""window""],  # TODO'), (322, '        show_in_window=not args.write_file'), (323, '    )'), (324, ''), (325, ''), (348, 'def get_run_config():'), (349, '    return get_global_config()[""run""]')], 'deleted': [(333, 'def get_run_config(args: Namespace):'), (334, '    window_config = get_window_config()'), (335, '    return {'), (336, '        ""file_name"": args.file,'), (337, '        ""embed_line"": int(args.embed) if args.embed is not None else None,'), (338, '        ""is_reload"": False,'), (339, '        ""prerun"": args.prerun,'), (340, '        ""scene_names"": args.scene_names,'), (341, '        ""quiet"": args.quiet or args.write_all,'), (342, '        ""write_all"": args.write_all,'), (343, '        ""window_config"": window_config,'), (344, '        ""show_in_window"": not args.write_file'), (345, '    }')]}",57,57
manimlib/reload_manager.py,manimlib/reload_manager.py,d1080aa6fdd0b135f3d772656b6a77da06086624,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,Add run configuration to global config,"{'added': [(30, '    embed_line = None'), (39, '        self.embed_line = start_at_line'), (62, '            f""at line \\033[96m{self.embed_line}\\033[0m""'), (73, '        run_config = manimlib.config.get_run_config()'), (75, '        if self.embed_line:'), (76, '            run_config.update(embed_line=self.embed_line)')], 'deleted': [(38, '        self.args.embed = str(start_at_line)'), (61, '            f""at line \\033[96m{self.args.embed}\\033[0m""'), (72, '        run_config = manimlib.config.get_run_config(self.args)')]}",13,13
manimlib/config.py,manimlib/config.py,c61e0bcee523df8fd30512047a9c42d76b315712,d1080aa6fdd0b135f3d772656b6a77da06086624,Move window_config out of run_config,"{'added': [], 'deleted': [(321, '        window_config=config[""window""],  # TODO')]}",57,57
manimlib/reload_manager.py,manimlib/reload_manager.py,c61e0bcee523df8fd30512047a9c42d76b315712,d1080aa6fdd0b135f3d772656b6a77da06086624,Move window_config out of run_config,"{'added': [(80, '            window_config = manimlib.config.get_window_config()'), (81, '            self.window = Window(**window_config)')], 'deleted': [(80, '            self.window = Window(**run_config[""window_config""])')]}",13,13
manimlib/reload_manager.py,manimlib/reload_manager.py,667cfaf160a56dc53eef3e0b391038c810759229,c61e0bcee523df8fd30512047a9c42d76b315712,Remove args from ReloadManager,"{'added': [(56, '        print(""Reloading..."")')], 'deleted': [(32, '    def __init__(self, cli_args: Namespace):'), (33, '        self.args = cli_args'), (34, ''), (59, '        print("" "".join(['), (60, '            ""Reloading interactive session for"",'), (61, '            f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (62, '            f""at line \\033[96m{self.embed_line}\\033[0m""'), (63, '        ]))')]}",12,12
manimlib/__main__.py,manimlib/__main__.py,cd744024ea4390886fe8e36749a0cc2055d8217d,667cfaf160a56dc53eef3e0b391038c810759229,Minor reorganization of ReloadManager.retrieve_scenes_and_run,"{'added': [(25, '    ReloadManager().run()')], 'deleted': [(25, '    reload_manager = ReloadManager(args)'), (26, '    reload_manager.run()')]}",5,5
manimlib/reload_manager.py,manimlib/reload_manager.py,cd744024ea4390886fe8e36749a0cc2055d8217d,667cfaf160a56dc53eef3e0b391038c810759229,Minor reorganization of ReloadManager.retrieve_scenes_and_run,"{'added': [(7, 'from manimlib.config import get_global_config'), (60, '        Take the global configuration, which is based on CLI arguments,'), (61, '        modify it based on reloading status, then extract and run scenes'), (62, '        accordingly'), (64, '        global_config = get_global_config()'), (65, '        scene_config = global_config[""scene""]'), (66, '        run_config = global_config[""run""]'), (68, '        scene_config.update(reload_manager=self)'), (75, '            self.window = Window(**global_config[""window""])')], 'deleted': [(7, 'import manimlib.config'), (60, '        Creates a new configuration based on the CLI args and runs the scenes.'), (62, '        # Args to Config'), (63, '        scene_config = manimlib.config.get_scene_config()'), (64, '        scene_config.update(reload_manager=self)'), (66, '        run_config = manimlib.config.get_run_config()'), (73, '            window_config = manimlib.config.get_window_config()'), (74, '            self.window = Window(**window_config)')]}",12,12
manimlib/config.py,manimlib/config.py,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,cd744024ea4390886fe8e36749a0cc2055d8217d,Add simple function descriptions,"{'added': [(329, '    """""" Key word arguments for Window """"""'), (334, '    """""" Key word arguments for Camera """"""'), (339, '    """""" Key word arguments for SceneFileWriter """"""'), (344, '    """""" Key word arguments for Scene """"""')], 'deleted': [(341, '    """"""'), (342, '    Returns a dictionary to be used as key word arguments for Scene'), (343, '    """"""')]}",57,57
manimlib/reload_manager.py,manimlib/reload_manager.py,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,"Move reload out of Scene, instead have it directly update the global run configuration","{'added': [], 'deleted': [(30, '    embed_line = None'), (31, ''), (32, '    def set_new_start_at_line(self, start_at_line):'), (33, '        """"""'), (34, '        Sets/Updates the line number to load the scene from when reloading.'), (35, '        """"""'), (36, '        self.embed_line = start_at_line'), (68, '        scene_config.update(reload_manager=self)'), (70, '        if self.embed_line:'), (71, '            run_config.update(embed_line=self.embed_line)')]}",10,10
manimlib/scene/scene.py,manimlib/scene/scene.py,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,"Move reload out of Scene, instead have it directly update the global run configuration","{'added': [], 'deleted': [(50, '    from manimlib.reload_manager import ReloadManager'), (75, '        reload_manager: Optional[ReloadManager] = None,'), (93, '        self.reload_manager = reload_manager'), (864, '    def reload(self, start_at_line: int | None = None) -> None:'), (865, '        """"""'), (866, '        Reloads the scene just like the `manimgl` command would do with the'), (867, '        same arguments that were provided for the initial startup. This allows'), (868, ""        for quick iteration during scene development since we don't have to exit""), (869, '        the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (870, '        open during the reload.'), (871, ''), (872, '        If `start_at_line` is provided, the scene will be reloaded at that line'), (873, '        number. This corresponds to the `linemarker` param of the'), (874, '        `extract_scene.insert_embed_line_to_module()` method.'), (875, ''), (876, '        Before reload, the scene is cleared and the entire state is reset, such'), (877, '        that we can start from a clean slate. This is taken care of by the'), (878, '        ReloadManager, which will catch the error raised by the `exit_raise`'), (879, '        magic command that we invoke here.'), (880, ''), (881, '        Note that we cannot define a custom exception class for this error,'), (882, '        since the IPython kernel will swallow any exception. While we can catch'), (883, '        such an exception in our custom exception handler registered with the'), (884, '        `set_custom_exc` method, we cannot break out of the IPython shell by'), (885, '        this means.'), (886, '        """"""'), (887, '        self.reload_manager.set_new_start_at_line(start_at_line)'), (888, '        shell = get_ipython()'), (889, '        if shell:'), (890, '            shell.run_line_magic(""exit_raise"", """")'), (891, '')]}",215,215
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,"Move reload out of Scene, instead have it directly update the global run configuration","{'added': [(69, '        reload=reload_scene  # Defined below'), (107, 'def reload_scene(embed_line: int | None = None) -> None:'), (108, '    """"""'), (109, '    Reloads the scene just like the `manimgl` command would do with the'), (110, '    same arguments that were provided for the initial startup. This allows'), (111, ""    for quick iteration during scene development since we don't have to exit""), (112, '    the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (113, '    open during the reload.'), (114, ''), (115, '    If `embed_line` is provided, the scene will be reloaded at that line'), (116, '    number. This corresponds to the `linemarker` param of the'), (117, '    `extract_scene.insert_embed_line_to_module()` method.'), (118, ''), (119, '    Before reload, the scene is cleared and the entire state is reset, such'), (120, '    that we can start from a clean slate. This is taken care of by the'), (121, '    ReloadManager, which will catch the error raised by the `exit_raise`'), (122, '    magic command that we invoke here.'), (123, ''), (124, '    Note that we cannot define a custom exception class for this error,'), (125, '    since the IPython kernel will swallow any exception. While we can catch'), (126, '    such an exception in our custom exception handler registered with the'), (127, '    `set_custom_exc` method, we cannot break out of the IPython shell by'), (128, '    this means.'), (129, '    """"""'), (130, '    if embed_line:'), (131, '        global_config = get_global_config()'), (132, '        global_config[""run""][""embed_line""] = embed_line'), (133, ''), (134, '    shell = get_ipython()'), (135, '    if shell:'), (136, '        shell.run_line_magic(""exit_raise"", """")'), (137, ''), (138, '')], 'deleted': [(64, '        reload=scene.reload,')]}",25,25
manimlib/reload_manager.py,manimlib/reload_manager.py,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,Move update to is_reload status of run_config out of ReloadManager,"{'added': [], 'deleted': [(29, '    is_reload = False'), (47, '    def note_reload(self):'), (48, '        self.is_reload = True'), (49, '        print(""Reloading..."")'), (50, ''), (61, '        run_config.update(is_reload=self.is_reload)'), (62, '')]}",9,9
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,Move update to is_reload status of run_config out of ReloadManager,"{'added': [(130, '    run_config = get_global_config()[""run""]'), (131, '    run_config[""is_reload""] = True'), (133, '        run_config[""embed_line""] = embed_line'), (137, '        print(""Reloading..."")')], 'deleted': [(131, '        global_config = get_global_config()'), (132, '        global_config[""run""][""embed_line""] = embed_line')]}",25,25
manimlib/extract_scene.py,manimlib/extract_scene.py,284c1d8f2c5da14520a5d41858ca97a03075e692,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,Move message for no scenes found to extract_scene,"{'added': [(183, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, run_config)'), (184, '    if len(scenes) == 0:'), (185, '        print(""No scenes found to run"")'), (186, '    return scenes')], 'deleted': [(183, '    return get_scenes_to_render(all_scene_classes, scene_config, run_config)')]}",38,38
manimlib/reload_manager.py,manimlib/reload_manager.py,284c1d8f2c5da14520a5d41858ca97a03075e692,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,Move message for no scenes found to extract_scene,"{'added': [], 'deleted': [(63, '        if len(scenes) == 0:'), (64, '            print(""No scenes found to run"")')]}",8,8
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,d21fbd02bca39948f008d11e9693504f2064013b,284c1d8f2c5da14520a5d41858ca97a03075e692,Minor tweak to reload_scene,"{'added': [(130, '    shell = get_ipython()'), (131, '    if not shell:'), (132, '        return'), (133, ''), (134, '    # Update the global run configuration'), (140, '    print(""Reloading..."")'), (141, '    shell.run_line_magic(""exit_raise"", """")')], 'deleted': [(135, '    shell = get_ipython()'), (136, '    if shell:'), (137, '        print(""Reloading..."")'), (138, '        shell.run_line_magic(""exit_raise"", """")')]}",25,25
manimlib/config.py,manimlib/config.py,24697377dbf037f80fbab088af568bcf4ca0c735,d21fbd02bca39948f008d11e9693504f2064013b,"Make the fact that the global configuration is a mutable global dictionary a bit more explicit

Instead of implicit through the use of lru_cache","{'added': [(22, 'def initialize_global_config():'), (375, ''), (376, ''), (377, '# Create global configuration'), (378, ''), (379, ''), (380, 'GLOBAL_CONFIG = initialize_global_config()'), (381, ''), (382, ''), (383, 'def get_global_config():'), (384, '    global GLOBAL_CONFIG'), (385, '    return GLOBAL_CONFIG'), (386, ''), (387, ''), (388, '# Shortcuts for retrieving portions of global configuration'), (389, ''), (390, ''), (391, 'def get_window_config() -> dict:'), (392, '    """""" Key word arguments for Window """"""'), (393, '    return get_global_config()[""window""]'), (394, ''), (395, ''), (396, 'def get_camera_config() -> dict:'), (397, '    """""" Key word arguments for Camera """"""'), (398, '    return get_global_config()[""camera""]'), (399, ''), (400, ''), (401, 'def get_file_writer_config() -> dict:'), (402, '    """""" Key word arguments for SceneFileWriter """"""'), (403, '    return get_global_config()[""file_writer""]'), (404, ''), (405, ''), (406, 'def get_scene_config() -> dict:'), (407, '    """""" Key word arguments for Scene """"""'), (408, '    return get_global_config()[""scene""]'), (409, ''), (410, ''), (411, 'def get_run_config():'), (412, '    return get_global_config()[""run""]'), (413, ''), (414, ''), (415, '# Helpers for the functions above')], 'deleted': [(12, 'from functools import lru_cache'), (13, ''), (24, '@lru_cache'), (25, 'def get_global_config():'), (34, ''), (35, ""    After the first time this function is called, it's result is cached""), (36, '    via lru cache, and subsequent calls return this result'), (56, '# Functions used to initialized the configuration'), (57, ''), (58, ''), (325, '# Shortcuts for retrieving portions of global configuration'), (326, ''), (327, ''), (328, 'def get_window_config() -> dict:'), (329, '    """""" Key word arguments for Window """"""'), (330, '    return get_global_config()[""window""]'), (331, ''), (332, ''), (333, 'def get_camera_config() -> dict:'), (334, '    """""" Key word arguments for Camera """"""'), (335, '    return get_global_config()[""camera""]'), (336, ''), (337, ''), (338, 'def get_file_writer_config() -> dict:'), (339, '    """""" Key word arguments for SceneFileWriter """"""'), (340, '    return get_global_config()[""file_writer""]'), (341, ''), (342, ''), (343, 'def get_scene_config() -> dict:'), (344, '    """""" Key word arguments for Scene """"""'), (345, '    return get_global_config()[""scene""]'), (346, ''), (347, ''), (348, 'def get_run_config():'), (349, '    return get_global_config()[""run""]'), (350, ''), (351, ''), (352, '# Helpers for the functions above'), (353, ''), (354, '')]}",58,58
manimlib/__main__.py,manimlib/__main__.py,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,24697377dbf037f80fbab088af568bcf4ca0c735,"Move ReloadManager logic into __main__.py

Since the reload logic no longer relies on any state, the relevant loop is simple enough that it feels clearest to include it in the main entry point file.","{'added': [(3, 'from manimlib.config import get_global_config'), (4, 'from manimlib.config import parse_cli'), (7, 'import manimlib.extract_scene'), (8, 'from manimlib.window import Window'), (9, ''), (10, ''), (11, 'from IPython.terminal.embed import KillEmbedded'), (12, ''), (13, ''), (14, 'from typing import TYPE_CHECKING'), (15, 'if TYPE_CHECKING:'), (16, '    from argparse import Namespace'), (17, ''), (18, ''), (19, 'def run_scenes():'), (20, '    """"""'), (21, '    Runs the scenes in a loop and detects when a scene reload is requested.'), (22, '    """"""'), (23, '    global_config = get_global_config()'), (24, '    scene_config = global_config[""scene""]'), (25, '    run_config = global_config[""run""]'), (26, ''), (27, '    if run_config[""show_in_window""]:'), (28, '        # Create a reusable window'), (29, '        window = Window(**global_config[""window""])'), (30, '        scene_config.update(window=window)'), (31, ''), (32, '    while True:'), (33, '        try:'), (34, '            # Blocking call since a scene may init an IPython shell()'), (35, '            scenes = manimlib.extract_scene.main(scene_config, run_config)'), (36, '            for scene in scenes:'), (37, '                scene.run()'), (38, '            return'), (39, '        except KillEmbedded:'), (40, '            # Requested via the `exit_raise` IPython runline magic'), (41, '            # by means of the reload_scene() command'), (42, '            pass'), (43, '        except KeyboardInterrupt:'), (44, '            break'), (53, '    args = parse_cli()'), (63, '    run_scenes()')], 'deleted': [(3, 'import manimlib.config'), (6, 'from manimlib.reload_manager import ReloadManager'), (15, '    args = manimlib.config.parse_cli()'), (25, '    ReloadManager().run()')]}",11,11
manimlib/module_loader.py,manimlib/module_loader.py,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,24697377dbf037f80fbab088af568bcf4ca0c735,"Move ReloadManager logic into __main__.py

Since the reload logic no longer relies on any state, the relevant loop is simple enough that it feels clearest to include it in the main entry point file.","{'added': [(148, '        if module.__name__.startswith(""manimlib.config""):'), (149, ""            # We don't want to reload global config""), (150, '            return')], 'deleted': []}",28,28
manimlib/reload_manager.py,,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,24697377dbf037f80fbab088af568bcf4ca0c735,"Move ReloadManager logic into __main__.py

Since the reload logic no longer relies on any state, the relevant loop is simple enough that it feels clearest to include it in the main entry point file.","{'added': [], 'deleted': [(1, 'from __future__ import annotations'), (2, ''), (3, 'from typing import Any'), (4, 'from IPython.terminal.embed import KillEmbedded'), (5, ''), (6, ''), (7, 'from manimlib.config import get_global_config'), (8, 'import manimlib.extract_scene'), (9, ''), (10, 'from manimlib.window import Window'), (11, ''), (12, ''), (13, 'from typing import TYPE_CHECKING'), (14, 'if TYPE_CHECKING:'), (15, '    from argparse import Namespace'), (16, ''), (17, ''), (18, 'class ReloadManager:'), (19, '    """"""'), (20, '    Manages the loading and running of scenes and is called directly from the'), (21, '    main entry point of ManimGL.'), (22, ''), (23, '    The name ""reload"" comes from the fact that this class handles the'), (24, '    reinitialization of scenes when requested by the user via the `reload()`'), (25, '    command in the IPython shell.'), (26, '    """"""'), (27, ''), (28, '    window = None'), (29, ''), (30, '    def run(self):'), (31, '        """"""'), (32, '        Runs the scenes in a loop and detects when a scene reload is requested.'), (33, '        """"""'), (34, '        while True:'), (35, '            try:'), (36, '                # blocking call since a scene will init an IPython shell()'), (37, '                self.retrieve_scenes_and_run()'), (38, '                return'), (39, '            except KillEmbedded:'), (40, '                # Requested via the `exit_raise` IPython runline magic'), (41, '                # by means of our scene.reload() command'), (42, '                self.note_reload()'), (43, '            except KeyboardInterrupt:'), (44, '                break'), (45, ''), (46, '    def retrieve_scenes_and_run(self):'), (47, '        """"""'), (48, '        Take the global configuration, which is based on CLI arguments,'), (49, '        modify it based on reloading status, then extract and run scenes'), (50, '        accordingly'), (51, '        """"""'), (52, '        global_config = get_global_config()'), (53, '        scene_config = global_config[""scene""]'), (54, '        run_config = global_config[""run""]'), (55, ''), (56, '        # Create or reuse window'), (57, '        if run_config[""show_in_window""] and not self.window:'), (58, '            self.window = Window(**global_config[""window""])'), (59, '        scene_config.update(window=self.window)'), (60, ''), (61, '        # Scenes'), (62, '        scenes = manimlib.extract_scene.main(scene_config, run_config)'), (63, ''), (64, '        for scene in scenes:'), (65, '            scene.run()')]}",,
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,32d36a09f6771b16241f382110d64fbc844e4785,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,Update commend on reload_scene,"{'added': [(121, '    run_scenes function in __main__.py, which will catch the error raised by the'), (122, '    `exit_raise` magic command that we invoke here.'), (134, '    # Update the global run configuration.')], 'deleted': [(121, '    ReloadManager, which will catch the error raised by the `exit_raise`'), (122, '    magic command that we invoke here.'), (134, '    # Update the global run configuration')]}",25,25
requirements.txt,requirements.txt,2359ed9aa4dda07ac63e7b03243f2dc5b27c7def,32d36a09f6771b16241f382110d64fbc844e4785,Remove tempfile from requirements.txt,"{'added': [], 'deleted': [(25, 'tempfile')]}",,
manimlib/constants.py,manimlib/constants.py,2c43d293a586201b1d706d5a4e9695fa42f2bc98,3d3f8258f4b3169cf8fdeb0680f71e17e62743b4,"Move arbitrary constant definitions into default_config

This should make things like the color palette and frame size more easily customizable.","{'added': [(9, '# See manimlib/default_config.yml'), (10, 'from manimlib.config import GLOBAL_CONFIG'), (11, ''), (13, 'DEFAULT_RESOLUTION: tuple[int, int] = GLOBAL_CONFIG[""camera""][""resolution""]'), (14, 'DEFAULT_PIXEL_WIDTH: int = DEFAULT_RESOLUTION[0]'), (15, 'DEFAULT_PIXEL_HEIGHT: int = DEFAULT_RESOLUTION[1]'), (16, 'DEFAULT_FPS: int = GLOBAL_CONFIG[""camera""][""fps""]'), (20, 'FRAME_HEIGHT: float = GLOBAL_CONFIG[""sizes""][""frame_height""]'), (27, '# Helpful values for positioning mobjects'), (28, 'SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""small_buff""]'), (29, 'MED_SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_small_buff""]'), (30, 'MED_LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_large_buff""]'), (31, 'LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""large_buff""]'), (33, 'DEFAULT_MOBJECT_TO_EDGE_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (34, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]'), (38, 'DEFAULT_WAIT_TIME: float = GLOBAL_CONFIG[""default_wait_time""]'), (41, '# Standard vectors'), (73, 'FFMPEG_BIN: str = GLOBAL_CONFIG[""ffmpeg_bin""]'), (88, 'DEFAULT_STROKE_WIDTH: float = GLOBAL_CONFIG[""vmobject""][""default_stroke_width""]'), (98, 'colors = GLOBAL_CONFIG[""colors""]'), (99, ''), (100, 'BLUE_E: ManimColor = colors[""blue_e""]'), (101, 'BLUE_D: ManimColor = colors[""blue_d""]'), (102, 'BLUE_C: ManimColor = colors[""blue_c""]'), (103, 'BLUE_B: ManimColor = colors[""blue_b""]'), (104, 'BLUE_A: ManimColor = colors[""blue_a""]'), (105, 'TEAL_E: ManimColor = colors[""teal_e""]'), (106, 'TEAL_D: ManimColor = colors[""teal_d""]'), (107, 'TEAL_C: ManimColor = colors[""teal_c""]'), (108, 'TEAL_B: ManimColor = colors[""teal_b""]'), (109, 'TEAL_A: ManimColor = colors[""teal_a""]'), (110, 'GREEN_E: ManimColor = colors[""green_e""]'), (111, 'GREEN_D: ManimColor = colors[""green_d""]'), (112, 'GREEN_C: ManimColor = colors[""green_c""]'), (113, 'GREEN_B: ManimColor = colors[""green_b""]'), (114, 'GREEN_A: ManimColor = colors[""green_a""]'), (115, 'YELLOW_E: ManimColor = colors[""yellow_e""]'), (116, 'YELLOW_D: ManimColor = colors[""yellow_d""]'), (117, 'YELLOW_C: ManimColor = colors[""yellow_c""]'), (118, 'YELLOW_B: ManimColor = colors[""yellow_b""]'), (119, 'YELLOW_A: ManimColor = colors[""yellow_a""]'), (120, 'GOLD_E: ManimColor = colors[""gold_e""]'), (121, 'GOLD_D: ManimColor = colors[""gold_d""]'), (122, 'GOLD_C: ManimColor = colors[""gold_c""]'), (123, 'GOLD_B: ManimColor = colors[""gold_b""]'), (124, 'GOLD_A: ManimColor = colors[""gold_a""]'), (125, 'RED_E: ManimColor = colors[""red_e""]'), (126, 'RED_D: ManimColor = colors[""red_d""]'), (127, 'RED_C: ManimColor = colors[""red_c""]'), (128, 'RED_B: ManimColor = colors[""red_b""]'), (129, 'RED_A: ManimColor = colors[""red_a""]'), (130, 'MAROON_E: ManimColor = colors[""maroon_e""]'), (131, 'MAROON_D: ManimColor = colors[""maroon_d""]'), (132, 'MAROON_C: ManimColor = colors[""maroon_c""]'), (133, 'MAROON_B: ManimColor = colors[""maroon_b""]'), (134, 'MAROON_A: ManimColor = colors[""maroon_a""]'), (135, 'PURPLE_E: ManimColor = colors[""purple_e""]'), (136, 'PURPLE_D: ManimColor = colors[""purple_d""]'), (137, 'PURPLE_C: ManimColor = colors[""purple_c""]'), (138, 'PURPLE_B: ManimColor = colors[""purple_b""]'), (139, 'PURPLE_A: ManimColor = colors[""purple_a""]'), (140, 'GREY_E: ManimColor = colors[""grey_e""]'), (141, 'GREY_D: ManimColor = colors[""grey_d""]'), (142, 'GREY_C: ManimColor = colors[""grey_c""]'), (143, 'GREY_B: ManimColor = colors[""grey_b""]'), (144, 'GREY_A: ManimColor = colors[""grey_a""]'), (145, 'WHITE: ManimColor = colors[""white""]'), (146, 'BLACK: ManimColor = colors[""black""]'), (147, 'GREY_BROWN: ManimColor = colors[""grey_brown""]'), (148, 'DARK_BROWN: ManimColor = colors[""dark_brown""]'), (149, 'LIGHT_BROWN: ManimColor = colors[""light_brown""]'), (150, 'PINK: ManimColor = colors[""pink""]'), (151, 'LIGHT_PINK: ManimColor = colors[""light_pink""]'), (152, 'GREEN_SCREEN: ManimColor = colors[""green_screen""]'), (153, 'ORANGE: ManimColor = colors[""orange""]'), (154, ''), (155, 'MANIM_COLORS: List[ManimColor] = list(colors.values())')], 'deleted': [(4, 'from manimlib.config import get_global_config'), (5, ''), (12, '# TODO, it feels a bit unprincipled to have some global constants'), (13, '# depend on the output of this function, and for all that configuration'), (14, '# code to be run merely upon importing from this file.'), (15, 'DEFAULT_RESOLUTION: tuple[int, int] = get_global_config()[""camera""][""resolution""]'), (16, 'DEFAULT_PIXEL_WIDTH = DEFAULT_RESOLUTION[0]'), (17, 'DEFAULT_PIXEL_HEIGHT = DEFAULT_RESOLUTION[1]'), (18, 'DEFAULT_FPS: int = 30'), (22, 'FRAME_HEIGHT: float = 8.0'), (29, 'SMALL_BUFF: float = 0.1'), (30, 'MED_SMALL_BUFF: float = 0.25'), (31, 'MED_LARGE_BUFF: float = 0.5'), (32, 'LARGE_BUFF: float = 1'), (34, 'DEFAULT_MOBJECT_TO_EDGE_BUFFER: float = MED_LARGE_BUFF'), (35, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFFER: float = MED_SMALL_BUFF'), (39, 'DEFAULT_WAIT_TIME: float = 1.0'), (73, 'FFMPEG_BIN: str = ""ffmpeg""'), (88, 'DEFAULT_STROKE_WIDTH: float = 4'), (98, ''), (99, 'BLUE_E: ManimColor = ""#1C758A""'), (100, 'BLUE_D: ManimColor = ""#29ABCA""'), (101, 'BLUE_C: ManimColor = ""#58C4DD""'), (102, 'BLUE_B: ManimColor = ""#9CDCEB""'), (103, 'BLUE_A: ManimColor = ""#C7E9F1""'), (104, 'TEAL_E: ManimColor = ""#49A88F""'), (105, 'TEAL_D: ManimColor = ""#55C1A7""'), (106, 'TEAL_C: ManimColor = ""#5CD0B3""'), (107, 'TEAL_B: ManimColor = ""#76DDC0""'), (108, 'TEAL_A: ManimColor = ""#ACEAD7""'), (109, 'GREEN_E: ManimColor = ""#699C52""'), (110, 'GREEN_D: ManimColor = ""#77B05D""'), (111, 'GREEN_C: ManimColor = ""#83C167""'), (112, 'GREEN_B: ManimColor = ""#A6CF8C""'), (113, 'GREEN_A: ManimColor = ""#C9E2AE""'), (114, 'YELLOW_E: ManimColor = ""#E8C11C""'), (115, 'YELLOW_D: ManimColor = ""#F4D345""'), (116, 'YELLOW_C: ManimColor = ""#FFFF00""'), (117, 'YELLOW_B: ManimColor = ""#FFEA94""'), (118, 'YELLOW_A: ManimColor = ""#FFF1B6""'), (119, 'GOLD_E: ManimColor = ""#C78D46""'), (120, 'GOLD_D: ManimColor = ""#E1A158""'), (121, 'GOLD_C: ManimColor = ""#F0AC5F""'), (122, 'GOLD_B: ManimColor = ""#F9B775""'), (123, 'GOLD_A: ManimColor = ""#F7C797""'), (124, 'RED_E: ManimColor = ""#CF5044""'), (125, 'RED_D: ManimColor = ""#E65A4C""'), (126, 'RED_C: ManimColor = ""#FC6255""'), (127, 'RED_B: ManimColor = ""#FF8080""'), (128, 'RED_A: ManimColor = ""#F7A1A3""'), (129, 'MAROON_E: ManimColor = ""#94424F""'), (130, 'MAROON_D: ManimColor = ""#A24D61""'), (131, 'MAROON_C: ManimColor = ""#C55F73""'), (132, 'MAROON_B: ManimColor = ""#EC92AB""'), (133, 'MAROON_A: ManimColor = ""#ECABC1""'), (134, 'PURPLE_E: ManimColor = ""#644172""'), (135, 'PURPLE_D: ManimColor = ""#715582""'), (136, 'PURPLE_C: ManimColor = ""#9A72AC""'), (137, 'PURPLE_B: ManimColor = ""#B189C6""'), (138, 'PURPLE_A: ManimColor = ""#CAA3E8""'), (139, 'GREY_E: ManimColor = ""#222222""'), (140, 'GREY_D: ManimColor = ""#444444""'), (141, 'GREY_C: ManimColor = ""#888888""'), (142, 'GREY_B: ManimColor = ""#BBBBBB""'), (143, 'GREY_A: ManimColor = ""#DDDDDD""'), (144, 'WHITE: ManimColor = ""#FFFFFF""'), (145, 'BLACK: ManimColor = ""#000000""'), (146, 'GREY_BROWN: ManimColor = ""#736357""'), (147, 'DARK_BROWN: ManimColor = ""#8B4513""'), (148, 'LIGHT_BROWN: ManimColor = ""#CD853F""'), (149, 'PINK: ManimColor = ""#D147BD""'), (150, 'LIGHT_PINK: ManimColor = ""#DC75CD""'), (151, 'GREEN_SCREEN: ManimColor = ""#00FF00""'), (152, 'ORANGE: ManimColor = ""#FF862F""'), (153, ''), (154, 'MANIM_COLORS: List[ManimColor] = ['), (155, '    BLACK, GREY_E, GREY_D, GREY_C, GREY_B, GREY_A, WHITE,'), (156, '    BLUE_E, BLUE_D, BLUE_C, BLUE_B, BLUE_A,'), (157, '    TEAL_E, TEAL_D, TEAL_C, TEAL_B, TEAL_A,'), (158, '    GREEN_E, GREEN_D, GREEN_C, GREEN_B, GREEN_A,'), (159, '    YELLOW_E, YELLOW_D, YELLOW_C, YELLOW_B, YELLOW_A,'), (160, '    GOLD_E, GOLD_D, GOLD_C, GOLD_B, GOLD_A,'), (161, '    RED_E, RED_D, RED_C, RED_B, RED_A,'), (162, '    MAROON_E, MAROON_D, MAROON_C, MAROON_B, MAROON_A,'), (163, '    PURPLE_E, PURPLE_D, PURPLE_C, PURPLE_B, PURPLE_A,'), (164, '    GREY_BROWN, DARK_BROWN, LIGHT_BROWN,'), (165, '    PINK, LIGHT_PINK,'), (166, ']')]}",0,0
manimlib/default_config.yml,manimlib/default_config.yml,2c43d293a586201b1d706d5a4e9695fa42f2bc98,3d3f8258f4b3169cf8fdeb0680f71e17e62743b4,"Move arbitrary constant definitions into default_config

This should make things like the color palette and frame size more easily customizable.","{'added': [(74, 'sizes:'), (75, '  # This determines the scale of the manim coordinate system with respect to'), (76, '  # the viewing frame'), (77, '  frame_height: 8.0'), (78, '  # These determine the constants SMALL_BUFF, MED_SMALL_BUFF, etc., useful'), (79, '  # for nudging things around and having default spacing values'), (80, '  small_buff: 0.1'), (81, '  med_small_buff: 0.25'), (82, '  med_large_buff: 0.5'), (83, '  large_buff: 1.0'), (84, '  # Default buffers used in Mobject.next_to or Mobject.to_edge'), (85, '  default_mobject_to_edge_buff: 0.5'), (86, '  default_mobject_to_mobject_buff: 0.25'), (87, 'vmobject:'), (88, '  # Default stroke width for VMobject'), (89, '  default_stroke_width: 4.0'), (90, 'colors:'), (91, '  blue_e: ""#1C758A""'), (92, '  blue_d: ""#29ABCA""'), (93, '  blue_c: ""#58C4DD""'), (94, '  blue_b: ""#9CDCEB""'), (95, '  blue_a: ""#C7E9F1""'), (96, '  teal_e: ""#49A88F""'), (97, '  teal_d: ""#55C1A7""'), (98, '  teal_c: ""#5CD0B3""'), (99, '  teal_b: ""#76DDC0""'), (100, '  teal_a: ""#ACEAD7""'), (101, '  green_e: ""#699C52""'), (102, '  green_d: ""#77B05D""'), (103, '  green_c: ""#83C167""'), (104, '  green_b: ""#A6CF8C""'), (105, '  green_a: ""#C9E2AE""'), (106, '  yellow_e: ""#E8C11C""'), (107, '  yellow_d: ""#F4D345""'), (108, '  yellow_c: ""#FFFF00""'), (109, '  yellow_b: ""#FFEA94""'), (110, '  yellow_a: ""#FFF1B6""'), (111, '  gold_e: ""#C78D46""'), (112, '  gold_d: ""#E1A158""'), (113, '  gold_c: ""#F0AC5F""'), (114, '  gold_b: ""#F9B775""'), (115, '  gold_a: ""#F7C797""'), (116, '  red_e: ""#CF5044""'), (117, '  red_d: ""#E65A4C""'), (118, '  red_c: ""#FC6255""'), (119, '  red_b: ""#FF8080""'), (120, '  red_a: ""#F7A1A3""'), (121, '  maroon_e: ""#94424F""'), (122, '  maroon_d: ""#A24D61""'), (123, '  maroon_c: ""#C55F73""'), (124, '  maroon_b: ""#EC92AB""'), (125, '  maroon_a: ""#ECABC1""'), (126, '  purple_e: ""#644172""'), (127, '  purple_d: ""#715582""'), (128, '  purple_c: ""#9A72AC""'), (129, '  purple_b: ""#B189C6""'), (130, '  purple_a: ""#CAA3E8""'), (131, '  grey_e: ""#222222""'), (132, '  grey_d: ""#444444""'), (133, '  grey_c: ""#888888""'), (134, '  grey_b: ""#BBBBBB""'), (135, '  grey_a: ""#DDDDDD""'), (136, '  white: ""#FFFFFF""'), (137, '  black: ""#000000""'), (138, '  grey_brown: ""#736357""'), (139, '  dark_brown: ""#8B4513""'), (140, '  light_brown: ""#CD853F""'), (141, '  pink: ""#D147BD""'), (142, '  light_pink: ""#DC75CD""'), (143, '  green_screen: ""#00FF00""'), (144, '  orange: ""#FF862F""'), (145, '# How long does a scene pause on Scene.wait calls'), (146, 'default_wait_time: 1.0'), (147, '# What command to use for ffmpeg'), (148, 'ffmpeg_bin: ""ffmpeg""')], 'deleted': []}",,
manimlib/constants.py,manimlib/constants.py,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,2c43d293a586201b1d706d5a4e9695fa42f2bc98,Make default_wait_time a piece of scene configuration,"{'added': [], 'deleted': [(37, '# In seconds'), (38, 'DEFAULT_WAIT_TIME: float = GLOBAL_CONFIG[""default_wait_time""]'), (39, ''), (40, '')]}",0,0
manimlib/default_config.yml,manimlib/default_config.yml,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,2c43d293a586201b1d706d5a4e9695fa42f2bc98,Make default_wait_time a piece of scene configuration,"{'added': [(61, '  # How long does a scene pause on Scene.wait calls'), (62, '  default_wait_time: 1.0')], 'deleted': [(145, '# How long does a scene pause on Scene.wait calls'), (146, 'default_wait_time: 1.0')]}",,
manimlib/scene/scene.py,manimlib/scene/scene.py,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,2c43d293a586201b1d706d5a4e9695fa42f2bc98,Make default_wait_time a piece of scene configuration,"{'added': [(82, '        default_wait_time: float = 1.0,'), (88, '        self.show_animation_progress = show_animation_progress'), (91, '        self.default_wait_time = default_wait_time'), (597, '        duration: Optional[float] = None,'), (602, '        if duration is None:'), (603, '            duration = self.default_wait_time')], 'deleted': [(21, 'from manimlib.constants import DEFAULT_WAIT_TIME'), (90, '        self.show_animation_progress = show_animation_progress'), (596, '        duration: float = DEFAULT_WAIT_TIME,')]}",216,216
docs/source/documentation/constants.rst,docs/source/documentation/constants.rst,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","{'added': [(33, '    DEFAULT_MOBJECT_TO_EDGE_BUFF = MED_LARGE_BUFF    # Distance between object and edge'), (34, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFF = MED_SMALL_BUFF # Distance between objects')], 'deleted': [(33, '    DEFAULT_MOBJECT_TO_EDGE_BUFFER = MED_LARGE_BUFF    # Distance between object and edge'), (34, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFFER = MED_SMALL_BUFF # Distance between objects')]}",,
manimlib/constants.py,manimlib/constants.py,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","{'added': [(33, 'DEFAULT_MOBJECT_TO_EDGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (34, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]')], 'deleted': [(33, 'DEFAULT_MOBJECT_TO_EDGE_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (34, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]')]}",0,0
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","{'added': [(15, 'from manimlib.constants import DEFAULT_MOBJECT_TO_EDGE_BUFF'), (16, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFF'), (1058, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFF'), (1074, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFF'), (1081, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFF'), (1089, '        buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFF,'), (1120, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_EDGE_BUFF)')], 'deleted': [(15, 'from manimlib.constants import DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (16, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFFER'), (1058, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (1074, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (1081, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (1089, '        buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFFER,'), (1120, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_EDGE_BUFFER)')]}",561,561
manimlib/mobject/svg/brace.py,manimlib/mobject/svg/brace.py,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","{'added': [(8, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFF, SMALL_BUFF'), (82, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_MOBJECT_BUFF)'), (119, '        label_buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFF,')], 'deleted': [(8, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFFER, SMALL_BUFF'), (82, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_MOBJECT_BUFFER)'), (119, '        label_buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFFER,')]}",20,20
manimlib/constants.py,manimlib/constants.py,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,d5c36de3c59d77fd446355bd402fab61352ff6cd,Make ffmpeg_bin specification a piece of file_writer_config,"{'added': [], 'deleted': [(69, 'FFMPEG_BIN: str = GLOBAL_CONFIG[""ffmpeg_bin""]'), (70, '')]}",0,0
manimlib/default_config.yml,manimlib/default_config.yml,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,d5c36de3c59d77fd446355bd402fab61352ff6cd,Make ffmpeg_bin specification a piece of file_writer_config,"{'added': [(52, '  # What command to use for ffmpeg'), (53, '  ffmpeg_bin: ""ffmpeg""'), (54, '  # Parameters to pass into ffmpeg')], 'deleted': [(147, '# What command to use for ffmpeg'), (148, 'ffmpeg_bin: ""ffmpeg""')]}",,
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,d5c36de3c59d77fd446355bd402fab61352ff6cd,Make ffmpeg_bin specification a piece of file_writer_config,"{'added': [(51, '        # Name of the binary used for ffmpeg'), (52, '        ffmpeg_bin: str = ""ffmpeg"",'), (74, '        self.ffmpeg_bin = ffmpeg_bin'), (241, '            self.ffmpeg_bin,'), (363, '            self.ffmpeg_bin,'), (390, '            self.ffmpeg_bin,')], 'deleted': [(14, 'from manimlib.constants import FFMPEG_BIN'), (239, '            FFMPEG_BIN,'), (361, '            FFMPEG_BIN,'), (388, '            FFMPEG_BIN,')]}",84,84
manimlib/constants.py,manimlib/constants.py,7d3758c44caf789d4d56072e4c2f8d212318ff15,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,Move joint_type_map out of constants to VMobject,"{'added': [(62, '# Angles')], 'deleted': [(69, 'JOINT_TYPE_MAP: dict = {'), (70, '    ""no_joint"": 0,'), (71, '    ""auto"": 1,'), (72, '    ""bevel"": 2,'), (73, '    ""miter"": 3,'), (74, '}'), (75, '')]}",0,0
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7d3758c44caf789d4d56072e4c2f8d212318ff15,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,Move joint_type_map out of constants to VMobject,"{'added': [(74, '    joint_type_map: dict = {'), (75, '        ""no_joint"": 0,'), (76, '        ""auto"": 1,'), (77, '        ""bevel"": 2,'), (78, '        ""miter"": 3,'), (79, '    }'), (131, '            joint_type=self.joint_type_map[self.joint_type],'), (414, '            mob.uniforms[""joint_type""] = self.joint_type_map[joint_type]')], 'deleted': [(11, 'from manimlib.constants import JOINT_TYPE_MAP'), (126, '            joint_type=JOINT_TYPE_MAP[self.joint_type],'), (409, '            mob.uniforms[""joint_type""] = JOINT_TYPE_MAP[joint_type]')]}",289,289
manimlib/constants.py,manimlib/constants.py,a03accff9c984a81fd4ba92335a121d76a766aae,7d3758c44caf789d4d56072e4c2f8d212318ff15,Rename local colors variable in constants.py,"{'added': [(86, 'named_colors = GLOBAL_CONFIG[""colors""]'), (87, ''), (88, 'BLUE_E: ManimColor = named_colors[""blue_e""]'), (89, 'BLUE_D: ManimColor = named_colors[""blue_d""]'), (90, 'BLUE_C: ManimColor = named_colors[""blue_c""]'), (91, 'BLUE_B: ManimColor = named_colors[""blue_b""]'), (92, 'BLUE_A: ManimColor = named_colors[""blue_a""]'), (93, 'TEAL_E: ManimColor = named_colors[""teal_e""]'), (94, 'TEAL_D: ManimColor = named_colors[""teal_d""]'), (95, 'TEAL_C: ManimColor = named_colors[""teal_c""]'), (96, 'TEAL_B: ManimColor = named_colors[""teal_b""]'), (97, 'TEAL_A: ManimColor = named_colors[""teal_a""]'), (98, 'GREEN_E: ManimColor = named_colors[""green_e""]'), (99, 'GREEN_D: ManimColor = named_colors[""green_d""]'), (100, 'GREEN_C: ManimColor = named_colors[""green_c""]'), (101, 'GREEN_B: ManimColor = named_colors[""green_b""]'), (102, 'GREEN_A: ManimColor = named_colors[""green_a""]'), (103, 'YELLOW_E: ManimColor = named_colors[""yellow_e""]'), (104, 'YELLOW_D: ManimColor = named_colors[""yellow_d""]'), (105, 'YELLOW_C: ManimColor = named_colors[""yellow_c""]'), (106, 'YELLOW_B: ManimColor = named_colors[""yellow_b""]'), (107, 'YELLOW_A: ManimColor = named_colors[""yellow_a""]'), (108, 'GOLD_E: ManimColor = named_colors[""gold_e""]'), (109, 'GOLD_D: ManimColor = named_colors[""gold_d""]'), (110, 'GOLD_C: ManimColor = named_colors[""gold_c""]'), (111, 'GOLD_B: ManimColor = named_colors[""gold_b""]'), (112, 'GOLD_A: ManimColor = named_colors[""gold_a""]'), (113, 'RED_E: ManimColor = named_colors[""red_e""]'), (114, 'RED_D: ManimColor = named_colors[""red_d""]'), (115, 'RED_C: ManimColor = named_colors[""red_c""]'), (116, 'RED_B: ManimColor = named_colors[""red_b""]'), (117, 'RED_A: ManimColor = named_colors[""red_a""]'), (118, 'MAROON_E: ManimColor = named_colors[""maroon_e""]'), (119, 'MAROON_D: ManimColor = named_colors[""maroon_d""]'), (120, 'MAROON_C: ManimColor = named_colors[""maroon_c""]'), (121, 'MAROON_B: ManimColor = named_colors[""maroon_b""]'), (122, 'MAROON_A: ManimColor = named_colors[""maroon_a""]'), (123, 'PURPLE_E: ManimColor = named_colors[""purple_e""]'), (124, 'PURPLE_D: ManimColor = named_colors[""purple_d""]'), (125, 'PURPLE_C: ManimColor = named_colors[""purple_c""]'), (126, 'PURPLE_B: ManimColor = named_colors[""purple_b""]'), (127, 'PURPLE_A: ManimColor = named_colors[""purple_a""]'), (128, 'GREY_E: ManimColor = named_colors[""grey_e""]'), (129, 'GREY_D: ManimColor = named_colors[""grey_d""]'), (130, 'GREY_C: ManimColor = named_colors[""grey_c""]'), (131, 'GREY_B: ManimColor = named_colors[""grey_b""]'), (132, 'GREY_A: ManimColor = named_colors[""grey_a""]'), (133, 'WHITE: ManimColor = named_colors[""white""]'), (134, 'BLACK: ManimColor = named_colors[""black""]'), (135, 'GREY_BROWN: ManimColor = named_colors[""grey_brown""]'), (136, 'DARK_BROWN: ManimColor = named_colors[""dark_brown""]'), (137, 'LIGHT_BROWN: ManimColor = named_colors[""light_brown""]'), (138, 'PINK: ManimColor = named_colors[""pink""]'), (139, 'LIGHT_PINK: ManimColor = named_colors[""light_pink""]'), (140, 'GREEN_SCREEN: ManimColor = named_colors[""green_screen""]'), (141, 'ORANGE: ManimColor = named_colors[""orange""]'), (142, ''), (143, 'MANIM_COLORS: List[ManimColor] = list(named_colors.values())')], 'deleted': [(86, 'colors = GLOBAL_CONFIG[""colors""]'), (87, ''), (88, 'BLUE_E: ManimColor = colors[""blue_e""]'), (89, 'BLUE_D: ManimColor = colors[""blue_d""]'), (90, 'BLUE_C: ManimColor = colors[""blue_c""]'), (91, 'BLUE_B: ManimColor = colors[""blue_b""]'), (92, 'BLUE_A: ManimColor = colors[""blue_a""]'), (93, 'TEAL_E: ManimColor = colors[""teal_e""]'), (94, 'TEAL_D: ManimColor = colors[""teal_d""]'), (95, 'TEAL_C: ManimColor = colors[""teal_c""]'), (96, 'TEAL_B: ManimColor = colors[""teal_b""]'), (97, 'TEAL_A: ManimColor = colors[""teal_a""]'), (98, 'GREEN_E: ManimColor = colors[""green_e""]'), (99, 'GREEN_D: ManimColor = colors[""green_d""]'), (100, 'GREEN_C: ManimColor = colors[""green_c""]'), (101, 'GREEN_B: ManimColor = colors[""green_b""]'), (102, 'GREEN_A: ManimColor = colors[""green_a""]'), (103, 'YELLOW_E: ManimColor = colors[""yellow_e""]'), (104, 'YELLOW_D: ManimColor = colors[""yellow_d""]'), (105, 'YELLOW_C: ManimColor = colors[""yellow_c""]'), (106, 'YELLOW_B: ManimColor = colors[""yellow_b""]'), (107, 'YELLOW_A: ManimColor = colors[""yellow_a""]'), (108, 'GOLD_E: ManimColor = colors[""gold_e""]'), (109, 'GOLD_D: ManimColor = colors[""gold_d""]'), (110, 'GOLD_C: ManimColor = colors[""gold_c""]'), (111, 'GOLD_B: ManimColor = colors[""gold_b""]'), (112, 'GOLD_A: ManimColor = colors[""gold_a""]'), (113, 'RED_E: ManimColor = colors[""red_e""]'), (114, 'RED_D: ManimColor = colors[""red_d""]'), (115, 'RED_C: ManimColor = colors[""red_c""]'), (116, 'RED_B: ManimColor = colors[""red_b""]'), (117, 'RED_A: ManimColor = colors[""red_a""]'), (118, 'MAROON_E: ManimColor = colors[""maroon_e""]'), (119, 'MAROON_D: ManimColor = colors[""maroon_d""]'), (120, 'MAROON_C: ManimColor = colors[""maroon_c""]'), (121, 'MAROON_B: ManimColor = colors[""maroon_b""]'), (122, 'MAROON_A: ManimColor = colors[""maroon_a""]'), (123, 'PURPLE_E: ManimColor = colors[""purple_e""]'), (124, 'PURPLE_D: ManimColor = colors[""purple_d""]'), (125, 'PURPLE_C: ManimColor = colors[""purple_c""]'), (126, 'PURPLE_B: ManimColor = colors[""purple_b""]'), (127, 'PURPLE_A: ManimColor = colors[""purple_a""]'), (128, 'GREY_E: ManimColor = colors[""grey_e""]'), (129, 'GREY_D: ManimColor = colors[""grey_d""]'), (130, 'GREY_C: ManimColor = colors[""grey_c""]'), (131, 'GREY_B: ManimColor = colors[""grey_b""]'), (132, 'GREY_A: ManimColor = colors[""grey_a""]'), (133, 'WHITE: ManimColor = colors[""white""]'), (134, 'BLACK: ManimColor = colors[""black""]'), (135, 'GREY_BROWN: ManimColor = colors[""grey_brown""]'), (136, 'DARK_BROWN: ManimColor = colors[""dark_brown""]'), (137, 'LIGHT_BROWN: ManimColor = colors[""light_brown""]'), (138, 'PINK: ManimColor = colors[""pink""]'), (139, 'LIGHT_PINK: ManimColor = colors[""light_pink""]'), (140, 'GREEN_SCREEN: ManimColor = colors[""green_screen""]'), (141, 'ORANGE: ManimColor = colors[""orange""]'), (142, ''), (143, 'MANIM_COLORS: List[ManimColor] = list(colors.values())')]}",0,0
manimlib/constants.py,manimlib/constants.py,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,a03accff9c984a81fd4ba92335a121d76a766aae,Move key to int constants to interactive_scene.py,"{'added': [], 'deleted': [(78, '# For keyboard interactions'), (79, 'CTRL_SYMBOL: int = 65508'), (80, 'SHIFT_SYMBOL: int = 65505'), (81, 'COMMAND_SYMBOL: int = 65517'), (82, 'DELETE_SYMBOL: int = 65288'), (83, 'ARROW_SYMBOLS: list[int] = list(range(65361, 65365))'), (84, '')]}",0,0
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,a03accff9c984a81fd4ba92335a121d76a766aae,Move key to int constants to interactive_scene.py,"{'added': [(51, '# For keyboard interactions'), (52, 'CTRL_SYMBOL: int = 65508'), (53, 'SHIFT_SYMBOL: int = 65505'), (54, 'DELETE_SYMBOL: int = 65288'), (55, 'ARROW_SYMBOLS: list[int] = list(range(65361, 65365))'), (56, '')], 'deleted': [(10, 'from manimlib.constants import ARROW_SYMBOLS, CTRL_SYMBOL, DELETE_SYMBOL, SHIFT_SYMBOL')]}",160,160
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,Use pyglet.window.key for key constant values,"{'added': [(52, ''), (53, 'ARROW_SYMBOLS: list[int] = ['), (54, '    PygletWindowKeys.LEFT,'), (55, '    PygletWindowKeys.UP,'), (56, '    PygletWindowKeys.RIGHT,'), (57, '    PygletWindowKeys.DOWN,'), (58, ']'), (483, '        elif symbol == PygletWindowKeys.LSHIFT:'), (497, '        elif symbol == PygletWindowKeys.BACKSPACE:'), (538, '        elif symbol == PygletWindowKeys.LSHIFT and self.window.is_key_pressed(ord(RESIZE_KEY)):'), (555, '        if self.window.is_key_pressed(PygletWindowKeys.LCTRL):'), (600, '        elif self.window.is_key_pressed(ord(SELECT_KEY)) and self.window.is_key_pressed(PygletWindowKeys.LSHIFT):')], 'deleted': [(52, 'CTRL_SYMBOL: int = 65508'), (53, 'SHIFT_SYMBOL: int = 65505'), (54, 'DELETE_SYMBOL: int = 65288'), (55, 'ARROW_SYMBOLS: list[int] = list(range(65361, 65365))'), (480, '        elif symbol == SHIFT_SYMBOL:'), (494, '        elif symbol == DELETE_SYMBOL:'), (535, '        elif symbol == SHIFT_SYMBOL and self.window.is_key_pressed(ord(RESIZE_KEY)):'), (552, '        if self.window.is_key_pressed(CTRL_SYMBOL):'), (597, '        elif self.window.is_key_pressed(ord(SELECT_KEY)) and self.window.is_key_pressed(SHIFT_SYMBOL):')]}",160,160
manimlib/scene/scene.py,manimlib/scene/scene.py,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,Use pyglet.window.key for key constant values,"{'added': [(848, '        elif char == "" "" or symbol == PygletWindowKeys.RIGHT:')], 'deleted': [(20, 'from manimlib.constants import ARROW_SYMBOLS'), (849, '        elif char == "" "" or symbol == ARROW_SYMBOLS[2]:')]}",216,216
manimlib/__main__.py,manimlib/__main__.py,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,"{'added': [], 'deleted': [(5, 'import manimlib.logger'), (56, '    if args.log_level:'), (57, '        manimlib.logger.log.setLevel(args.log_level)'), (58, '')]}",10,10
manimlib/config.py,manimlib/config.py,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,"{'added': [(40, '    log.setLevel(args.log_level or config[""log_level""])'), (41, '')], 'deleted': []}",59,59
manimlib/default_config.yml,manimlib/default_config.yml,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,"{'added': [(150, '# Can be DEBUG / INFO / WARNING / ERROR / CRITICAL'), (151, 'log_level: ""INFO""')], 'deleted': []}",,
manimlib/logger.py,manimlib/logger.py,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,"{'added': [], 'deleted': [(14, 'log.setLevel(""WARNING"")')]}",0,0
manimlib/camera/camera.py,manimlib/camera/camera.py,9ac16ab72258c2a7abd26de75e4dd909ce87d43a,8744c878f4c46fc141a4c4bea888341dfba004e9,"Remove DEFAULT_FPS constant

It's a bit silly to have it's valued defined by camera_config, when it's only function is to be a default value for Camera's configuration","{'added': [(33, '        fps: int = 30,')], 'deleted': [(10, 'from manimlib.constants import DEFAULT_FPS'), (34, '        fps: int = DEFAULT_FPS,')]}",35,35
manimlib/constants.py,manimlib/constants.py,9ac16ab72258c2a7abd26de75e4dd909ce87d43a,8744c878f4c46fc141a4c4bea888341dfba004e9,"Remove DEFAULT_FPS constant

It's a bit silly to have it's valued defined by camera_config, when it's only function is to be a default value for Camera's configuration","{'added': [], 'deleted': [(16, 'DEFAULT_FPS: int = GLOBAL_CONFIG[""camera""][""fps""]')]}",0,0
manimlib/config.py,manimlib/config.py,2d7b9d579a72442ffdcf1afb93d3b489a9037111,9ac16ab72258c2a7abd26de75e4dd909ce87d43a,Move comment,"{'added': [(318, '# Helpers for the functions above'), (319, ''), (320, '')], 'deleted': [(416, ''), (417, '# Helpers for the functions above')]}",59,59
manimlib/scene/scene.py,manimlib/scene/scene.py,5fcb668f07fa8ddecf346bb1832da18cb4fbf7f2,17f37ff02a4b89c04adc2179ab46e0efdd48ba65,fixing `get_ipython` import error,"{'added': [(9, 'from IPython.core.getipython import get_ipython')], 'deleted': [(4, 'import os')]}",217,217
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,5fcb668f07fa8ddecf346bb1832da18cb4fbf7f2,17f37ff02a4b89c04adc2179ab46e0efdd48ba65,fixing `get_ipython` import error,"{'added': [(3, 'import os'), (5, 'from IPython.core.getipython import get_ipython')], 'deleted': [(3, 'import re')]}",23,23
setup.cfg,setup.cfg,76afc42e9a72fc25245fc54e7c3ba09b5f87f556,5fcb668f07fa8ddecf346bb1832da18cb4fbf7f2,adding required packages to setup.cfg file,"{'added': [(32, '    appdirs'), (34, '    diskcache'), (39, '    mapbox-earcut'), (56, '    tempfile')], 'deleted': [(36, '    mapbox-earcut')]}",,
manimlib/config.py,manimlib/config.py,37a05094ea446ef2c9fc423e5c63eb5f2b1dc707,2d7b9d579a72442ffdcf1afb93d3b489a9037111,Small comment changes,"{'added': [(79, '            help=""Render at 480p"",'), (84, '            help=""Render at 720p"",'), (168, '            metavar=""LINE_NUMBER"",'), (169, '            help=""Adds a breakpoint at the inputted file dropping into an "" + \\'), (170, '                 ""interactive iPython session at that point of the code.""')], 'deleted': [(79, '            help=""Render at a low quality (for faster rendering)"",'), (84, '            help=""Render at a medium quality"",'), (168, '            help=""Creates a new file where the line `self.embed` is inserted "" + \\'), (169, '                 ""at the corresponding line number""')]}",59,59
manimlib/default_config.yml,manimlib/default_config.yml,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,37a05094ea446ef2c9fc423e5c63eb5f2b1dc707,Update how tex configuration default is passed in,"{'added': [(59, '# Most of the scene configuration will come from CLI arguments,'), (60, '# but defaults can be set here'), (66, 'vmobject:'), (67, '  default_stroke_width: 4.0'), (68, 'tex:'), (69, '  # See tex_templates.yml'), (70, '  template: ""default""'), (71, 'style:  # TODO, change to `text`')], 'deleted': [(60, '  # Most of the scene configuration will come from CLI arguments,'), (61, '  # but defaults can be set here'), (66, 'style:'), (67, '  tex_template: ""default""'), (92, 'vmobject:'), (93, '  # Default stroke width for VMobject'), (94, '  default_stroke_width: 4.0')]}",,
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,37a05094ea446ef2c9fc423e5c63eb5f2b1dc707,Update how tex configuration default is passed in,"{'added': [(33, '@lru_cache'), (34, 'def get_tex_config(template: str = """") -> dict[str, str]:'), (43, '    template = template or get_global_config()[""tex""][""template""]'), (44, '    template_config = get_tex_template_config(template)'), (45, '    return {'), (46, '        ""template"": template,'), (47, '        ""compiler"": template_config[""compiler""],'), (48, '        ""preamble"": template_config[""preamble""]'), (49, '    }'), (92, '    tex_config = get_tex_config(template)')], 'deleted': [(19, 'SAVED_TEX_CONFIG = {}'), (20, ''), (21, ''), (36, 'def get_tex_config() -> dict[str, str]:'), (45, '    # Only load once, then save thereafter'), (46, '    if not SAVED_TEX_CONFIG:'), (47, '        template_name = get_global_config()[""style""][""tex_template""]'), (48, '        template_config = get_tex_template_config(template_name)'), (49, '        SAVED_TEX_CONFIG.update({'), (50, '            ""template"": template_name,'), (51, '            ""compiler"": template_config[""compiler""],'), (52, '            ""preamble"": template_config[""preamble""]'), (53, '        })'), (54, '    return SAVED_TEX_CONFIG'), (97, '    tex_config = get_tex_config()'), (98, '    if template and template != tex_config[""template""]:'), (99, '        tex_config = get_tex_template_config(template)'), (100, '')]}",16,16
docs/source/documentation/constants.rst,docs/source/documentation/constants.rst,1794e4d0bab7b83ca0b899f45a25bfd243033524,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,Better align docs description of configuration with the updated format,"{'added': [(11, 'These values will be determined based on the ``camera`` configuration in default_config.yml or custom_config.yml'), (12, ''), (15, '    ASPECT_RATIO'), (16, '    FRAME_HEIGHT'), (17, '    FRAME_WIDTH'), (18, '    FRAME_Y_RADIUS'), (19, '    FRAME_X_RADIUS'), (21, '    DEFAULT_PIXEL_HEIGHT'), (22, '    DEFAULT_PIXEL_WIDTH'), (23, '    DEFAULT_FPS'), (28, 'These values will be determined based on the ``size`` configuration in default_config.yml or custom_config.yml'), (33, '    SMALL_BUFF'), (34, '    MED_SMALL_BUFF'), (35, '    MED_LARGE_BUFF'), (36, '    LARGE_BUFF'), (37, ''), (38, '    DEFAULT_MOBJECT_TO_EDGE_BUFF'), (39, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFF'), (92, 'Color constants are determined based on the ``color`` configuration in default_config.yml or custom_config.yml'), (93, '')], 'deleted': [(13, '    ASPECT_RATIO = 16.0 / 9.0'), (14, '    FRAME_HEIGHT = 8.0'), (15, '    FRAME_WIDTH = FRAME_HEIGHT * ASPECT_RATIO'), (16, '    FRAME_Y_RADIUS = FRAME_HEIGHT / 2'), (17, '    FRAME_X_RADIUS = FRAME_WIDTH / 2'), (19, '    DEFAULT_PIXEL_HEIGHT = 1080'), (20, '    DEFAULT_PIXEL_WIDTH = 1920'), (21, '    DEFAULT_FPS = 30'), (26, '.. code-block:: python'), (27, ''), (28, '    SMALL_BUFF = 0.1'), (29, '    MED_SMALL_BUFF = 0.25'), (30, '    MED_LARGE_BUFF = 0.5'), (31, '    LARGE_BUFF = 1'), (33, '    DEFAULT_MOBJECT_TO_EDGE_BUFF = MED_LARGE_BUFF    # Distance between object and edge'), (34, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFF = MED_SMALL_BUFF # Distance between objects'), (35, ''), (36, 'Run times'), (37, '---------'), (41, '    DEFAULT_POINTWISE_FUNCTION_RUN_TIME = 3.0'), (42, '    DEFAULT_WAIT_TIME = 1.0'), (92, 'Stroke width'), (93, '------------'), (94, ''), (95, '.. code-block:: python'), (96, ''), (97, '    DEFAULT_STROKE_WIDTH = 4'), (98, '')]}",,
docs/source/documentation/custom_config.rst,docs/source/documentation/custom_config.rst,1794e4d0bab7b83ca0b899f45a25bfd243033524,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,Better align docs description of configuration with the updated format,"{'added': [(12, '- ``base``'), (13, '    The root directory that will hold files, such as video files manim renders,'), (14, '    or image resources that it pulls from'), (15, ''), (73, '- ``cache``'), (78, '``window``'), (79, '----------'), (81, '- ``position_string``'), (82, '    The relative position of the playback window on the display (two characters,'), (83, '    the first character means upper(U) / middle(O) / lower(D), the second character'), (84, '    means left(L) / middle(O) / right(R)).'), (86, '- ``monitor_index``'), (87, '    If using multiple monitors, which one should the window show up in?'), (89, '- ``full_screen``'), (90, '    Should the preview window be full screen. If not, it defaults to half the screen'), (92, '- ``position``'), (93, '    This is an option to more manually set the default window position, in pixel'), (94, '    coordinates, e.g. (500, 300)'), (96, '- ``size``'), (97, '    Option to more manually set the default window size, in pixel coordinates,'), (98, '    e.g. (1920, 1080)'), (101, '``camera``'), (102, '----------'), (104, '- ``resolution``'), (105, '    Resolution to render at, e.g. (1920, 1080)'), (107, '- ``background_color``'), (108, '    Default background color of scenes'), (110, '- ``fps``'), (111, '    Framerate'), (113, '- ``background_opacity``'), (114, '    Opacity of the background'), (117, '``file_writer``'), (119, 'Configuration specifying how files are written, e.g. what ffmpeg parameters to use'), (122, '``scene``'), (123, '-------'), (124, 'Some default configuration for the Scene class'), (127, '``text``'), (128, '-------'), (130, '- ``font``'), (131, '    Default font of Text'), (133, '- ``text_alignment``'), (134, '    Default text alignment for LaTeX'), (136, '``tex``'), (137, '-------'), (139, '- ``template``'), (140, '    Which configuration from the manimlib/tex_template.yml file should be used'), (141, '    to determine the latex compiler to use, and what preamble to include for'), (142, '    rendering tex.'), (145, '``sizes``'), (146, '---------'), (148, 'Valuess for various constants used in manimm to specify distances, like the height'), (149, 'of the frame, the value of SMALL_BUFF, LARGE_BUFF, etc.'), (152, '``colors``'), (153, '----------'), (154, ''), (155, 'Color pallete to use, determining values of color constants like RED, BLUE_E, TEAL, etc.'), (156, ''), (157, '``loglevel``'), (158, '------------'), (159, ''), (160, 'Can be DEBUG / INFO / WARNING / ERROR / CRITICAL'), (161, ''), (162, ''), (163, '``universal_import_line``'), (164, '-------------------------'), (165, ''), (166, 'Import line that need to execute when entering interactive mode directly.'), (167, ''), (168, ''), (169, '``ignore_manimlib_modules_on_reload``'), (170, '-------------------------------------'), (171, ''), (172, 'When calling ``reload`` during the interactive mode, imported modules are'), (173, 'by default reloaded, in case the user writing a scene which pulls from various'), (174, 'other files they have written. By default, modules withinn the manim library will'), (175, 'be ignored, but one developing manim may want to set this to be False so that'), (176, 'edits to the library are reloaded as well.')], 'deleted': [(69, '- ``temporary_storage``'), (73, '``tex``'), (74, '-------'), (76, '- ``executable``'), (77, '    The executable program used to compile LaTeX (``latex`` or ``xelatex -no-pdf``'), (78, '    is recommended)'), (80, '- ``template_file``'), (81, '    LaTeX template used, in ``manimlib/tex_templates``'), (83, '- ``intermediate_filetype``'), (84, '    The type of intermediate vector file generated after compilation (``dvi`` if'), (85, '    ``latex`` is used, ``xdv`` if ``xelatex`` is used)'), (86, ''), (87, '- ``text_to_replace``'), (88, ""    The text to be replaced in the template (needn't to change)""), (90, '``universal_import_line``'), (91, '-------------------------'), (93, 'Import line that need to execute when entering interactive mode directly.'), (95, '``style``'), (96, '---------'), (98, '- ``font``'), (99, '    Default font of Text'), (101, '- ``text_alignment``'), (102, '    Default text alignment for LaTeX'), (104, '- ``background_color``'), (105, '    Default background color'), (107, '``window_position``'), (108, '-------------------'), (110, 'The relative position of the playback window on the display (two characters,'), (111, 'the first character means upper(U) / middle(O) / lower(D), the second character'), (112, 'means left(L) / middle(O) / right(R)).'), (114, '``window_monitor``'), (115, '------------------'), (117, 'The number of the monitor you want the preview window to pop up on. (default is 0)'), (119, '``full_screen``'), (122, 'Whether open the window in full screen. (default is false)'), (124, '``break_into_partial_movies``'), (125, '-----------------------------'), (127, 'If this is set to ``True``, then many small files will be written corresponding'), (128, 'to each ``Scene.play`` and ``Scene.wait`` call, and these files will then be combined'), (129, 'to form the full scene.'), (131, 'Sometimes video-editing is made easier when working with the broken up scene, which'), (132, 'effectively has cuts at all the places you might want.'), (134, '``camera_resolutions``'), (135, '----------------------'), (137, 'Export resolutions'), (139, '- ``low``'), (140, '    Low resolutions (default is 480p)'), (142, '- ``medium``'), (143, '    Medium resolutions (default is 720p)'), (145, '- ``high``'), (146, '    High resolutions (default is 1080p)'), (148, '- ``ultra_high``'), (149, '    Ultra high resolutions (default is 4K)'), (151, '- ``default_resolutions``'), (152, '    Default resolutions (one of the above four, default is high)'), (154, '``fps``'), (155, '-------'), (157, 'Export frame rate. (default is 30)')]}",,
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,8246d0da5daf8f3d0bfab05791a0fd7732fd2c8d,1794e4d0bab7b83ca0b899f45a25bfd243033524,Fix bug with xelatex rendering,"{'added': [(112, '        Path(tex_path).write_text(full_tex)'), (117, '                compiler,'), (118, '                ""-no-pdf"",'), (121, '                f""-output-directory={temp_dir}"",'), (123, '            ],')], 'deleted': [(96, '        program = ""latex""'), (99, '        program = ""xelatex -no-pdf""'), (114, '        with open(tex_path, ""w"", encoding=""utf-8"") as tex_file:'), (115, '            tex_file.write(full_tex)'), (120, '                program.split()[0],  # Split for xelatex case'), (123, '                ""-output-directory="" + temp_dir,'), (125, '            ] + ([""--no-pdf""] if compiler == ""xelatex"" else []),')]}",15,15
manimlib/default_config.yml,manimlib/default_config.yml,4a6a12573998be1f50fe3d4c7f55a77b14f096dd,8246d0da5daf8f3d0bfab05791a0fd7732fd2c8d,"Change ""style"" in default config to ""text""","{'added': [(71, 'text:'), (73, '  alignment: ""LEFT""')], 'deleted': [(71, 'style:  # TODO, change to `text`'), (73, '  text_alignment: ""LEFT""')]}",,
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,4a6a12573998be1f50fe3d4c7f55a77b14f096dd,8246d0da5daf8f3d0bfab05791a0fd7732fd2c8d,"Change ""style"" in default config to ""text""","{'added': [(160, '        text_config = get_global_config()[""text""]'), (165, '        self.alignment = alignment or text_config[""alignment""]'), (167, '        self.font = font or text_config[""font""]')], 'deleted': [(160, '        default_style = get_global_config()[""style""]'), (165, '        self.alignment = alignment or default_style[""text_alignment""]'), (167, '        self.font = font or default_style[""font""]')]}",73,73
manimlib/window.py,manimlib/window.py,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,4a6a12573998be1f50fe3d4c7f55a77b14f096dd,Focus and sync window when initialized for a scene,"{'added': [(72, '        self.focus()'), (73, ''), (109, '        # This line seems to resync the viewport'), (110, '        self.on_resize(*self.size)')], 'deleted': [(11, 'from manimlib.config import get_global_config')]}",42,42
manimlib/__main__.py,manimlib/__main__.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(3, 'from manimlib.config import manim_config'), (22, '    # Create a new dict to be able to upate without'), (23, '    # altering global configuration'), (24, '    scene_config = dict(manim_config.scene)'), (25, '    run_config = manim_config.run'), (27, '    if run_config.show_in_window:'), (29, '        window = Window(**manim_config.window)')], 'deleted': [(3, 'from manimlib.config import get_global_config'), (22, '    global_config = get_global_config()'), (23, '    scene_config = global_config[""scene""]'), (24, '    run_config = global_config[""run""]'), (26, '    if run_config[""show_in_window""]:'), (28, '        window = Window(**global_config[""window""])')]}",10,10
manimlib/config.py,manimlib/config.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(11, 'from addict import Dict'), (23, 'def initialize_manim_config() -> Dict:'), (50, '    return Dict(config)'), (371, 'def get_output_directory(args: Namespace, config: dict) -> str:'), (372, '    dir_config = config[""directories""]'), (387, 'manim_config: Dict = initialize_manim_config()'), (395, '    return manim_config.window'), (400, '    return manim_config.camera'), (405, '    return manim_config.file_writer'), (410, '    return manim_config.scene'), (414, '    return manim_config.run')], 'deleted': [(22, 'def initialize_global_config():'), (49, '    return config'), (370, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (371, '    dir_config = global_config[""directories""]'), (386, 'GLOBAL_CONFIG = initialize_global_config()'), (387, ''), (388, ''), (389, 'def get_global_config():'), (390, '    global GLOBAL_CONFIG'), (391, '    return GLOBAL_CONFIG'), (399, '    return get_global_config()[""window""]'), (404, '    return get_global_config()[""camera""]'), (409, '    return get_global_config()[""file_writer""]'), (414, '    return get_global_config()[""scene""]'), (418, '    return get_global_config()[""run""]')]}",58,58
manimlib/constants.py,manimlib/constants.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(10, 'from manimlib.config import manim_config'), (13, 'DEFAULT_RESOLUTION: tuple[int, int] = manim_config.camera.resolution'), (19, 'FRAME_HEIGHT: float = manim_config.sizes.frame_height'), (27, 'SMALL_BUFF: float = manim_config.sizes.small_buff'), (28, 'MED_SMALL_BUFF: float = manim_config.sizes.med_small_buff'), (29, 'MED_LARGE_BUFF: float = manim_config.sizes.med_large_buff'), (30, 'LARGE_BUFF: float = manim_config.sizes.large_buff'), (32, 'DEFAULT_MOBJECT_TO_EDGE_BUFF: float = manim_config.sizes.default_mobject_to_edge_buff'), (33, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFF: float = manim_config.sizes.default_mobject_to_mobject_buff'), (75, 'DEFAULT_STROKE_WIDTH: float = manim_config.vmobject.default_stroke_width'), (78, 'BLUE_E: ManimColor = manim_config.colors.blue_e'), (79, 'BLUE_D: ManimColor = manim_config.colors.blue_d'), (80, 'BLUE_C: ManimColor = manim_config.colors.blue_c'), (81, 'BLUE_B: ManimColor = manim_config.colors.blue_b'), (82, 'BLUE_A: ManimColor = manim_config.colors.blue_a'), (83, 'TEAL_E: ManimColor = manim_config.colors.teal_e'), (84, 'TEAL_D: ManimColor = manim_config.colors.teal_d'), (85, 'TEAL_C: ManimColor = manim_config.colors.teal_c'), (86, 'TEAL_B: ManimColor = manim_config.colors.teal_b'), (87, 'TEAL_A: ManimColor = manim_config.colors.teal_a'), (88, 'GREEN_E: ManimColor = manim_config.colors.green_e'), (89, 'GREEN_D: ManimColor = manim_config.colors.green_d'), (90, 'GREEN_C: ManimColor = manim_config.colors.green_c'), (91, 'GREEN_B: ManimColor = manim_config.colors.green_b'), (92, 'GREEN_A: ManimColor = manim_config.colors.green_a'), (93, 'YELLOW_E: ManimColor = manim_config.colors.yellow_e'), (94, 'YELLOW_D: ManimColor = manim_config.colors.yellow_d'), (95, 'YELLOW_C: ManimColor = manim_config.colors.yellow_c'), (96, 'YELLOW_B: ManimColor = manim_config.colors.yellow_b'), (97, 'YELLOW_A: ManimColor = manim_config.colors.yellow_a'), (98, 'GOLD_E: ManimColor = manim_config.colors.gold_e'), (99, 'GOLD_D: ManimColor = manim_config.colors.gold_d'), (100, 'GOLD_C: ManimColor = manim_config.colors.gold_c'), (101, 'GOLD_B: ManimColor = manim_config.colors.gold_b'), (102, 'GOLD_A: ManimColor = manim_config.colors.gold_a'), (103, 'RED_E: ManimColor = manim_config.colors.red_e'), (104, 'RED_D: ManimColor = manim_config.colors.red_d'), (105, 'RED_C: ManimColor = manim_config.colors.red_c'), (106, 'RED_B: ManimColor = manim_config.colors.red_b'), (107, 'RED_A: ManimColor = manim_config.colors.red_a'), (108, 'MAROON_E: ManimColor = manim_config.colors.maroon_e'), (109, 'MAROON_D: ManimColor = manim_config.colors.maroon_d'), (110, 'MAROON_C: ManimColor = manim_config.colors.maroon_c'), (111, 'MAROON_B: ManimColor = manim_config.colors.maroon_b'), (112, 'MAROON_A: ManimColor = manim_config.colors.maroon_a'), (113, 'PURPLE_E: ManimColor = manim_config.colors.purple_e'), (114, 'PURPLE_D: ManimColor = manim_config.colors.purple_d'), (115, 'PURPLE_C: ManimColor = manim_config.colors.purple_c'), (116, 'PURPLE_B: ManimColor = manim_config.colors.purple_b'), (117, 'PURPLE_A: ManimColor = manim_config.colors.purple_a'), (118, 'GREY_E: ManimColor = manim_config.colors.grey_e'), (119, 'GREY_D: ManimColor = manim_config.colors.grey_d'), (120, 'GREY_C: ManimColor = manim_config.colors.grey_c'), (121, 'GREY_B: ManimColor = manim_config.colors.grey_b'), (122, 'GREY_A: ManimColor = manim_config.colors.grey_a'), (123, 'WHITE: ManimColor = manim_config.colors.white'), (124, 'BLACK: ManimColor = manim_config.colors.black'), (125, 'GREY_BROWN: ManimColor = manim_config.colors.grey_brown'), (126, 'DARK_BROWN: ManimColor = manim_config.colors.dark_brown'), (127, 'LIGHT_BROWN: ManimColor = manim_config.colors.light_brown'), (128, 'PINK: ManimColor = manim_config.colors.pink'), (129, 'LIGHT_PINK: ManimColor = manim_config.colors.light_pink'), (130, 'GREEN_SCREEN: ManimColor = manim_config.colors.green_screen'), (131, 'ORANGE: ManimColor = manim_config.colors.orange'), (132, ''), (133, 'MANIM_COLORS: List[ManimColor] = list(manim_config.colors.values())')], 'deleted': [(10, 'from manimlib.config import GLOBAL_CONFIG'), (13, 'DEFAULT_RESOLUTION: tuple[int, int] = GLOBAL_CONFIG[""camera""][""resolution""]'), (19, 'FRAME_HEIGHT: float = GLOBAL_CONFIG[""sizes""][""frame_height""]'), (27, 'SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""small_buff""]'), (28, 'MED_SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_small_buff""]'), (29, 'MED_LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_large_buff""]'), (30, 'LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""large_buff""]'), (32, 'DEFAULT_MOBJECT_TO_EDGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (33, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]'), (75, 'DEFAULT_STROKE_WIDTH: float = GLOBAL_CONFIG[""vmobject""][""default_stroke_width""]'), (78, 'named_colors = GLOBAL_CONFIG[""colors""]'), (79, ''), (80, 'BLUE_E: ManimColor = named_colors[""blue_e""]'), (81, 'BLUE_D: ManimColor = named_colors[""blue_d""]'), (82, 'BLUE_C: ManimColor = named_colors[""blue_c""]'), (83, 'BLUE_B: ManimColor = named_colors[""blue_b""]'), (84, 'BLUE_A: ManimColor = named_colors[""blue_a""]'), (85, 'TEAL_E: ManimColor = named_colors[""teal_e""]'), (86, 'TEAL_D: ManimColor = named_colors[""teal_d""]'), (87, 'TEAL_C: ManimColor = named_colors[""teal_c""]'), (88, 'TEAL_B: ManimColor = named_colors[""teal_b""]'), (89, 'TEAL_A: ManimColor = named_colors[""teal_a""]'), (90, 'GREEN_E: ManimColor = named_colors[""green_e""]'), (91, 'GREEN_D: ManimColor = named_colors[""green_d""]'), (92, 'GREEN_C: ManimColor = named_colors[""green_c""]'), (93, 'GREEN_B: ManimColor = named_colors[""green_b""]'), (94, 'GREEN_A: ManimColor = named_colors[""green_a""]'), (95, 'YELLOW_E: ManimColor = named_colors[""yellow_e""]'), (96, 'YELLOW_D: ManimColor = named_colors[""yellow_d""]'), (97, 'YELLOW_C: ManimColor = named_colors[""yellow_c""]'), (98, 'YELLOW_B: ManimColor = named_colors[""yellow_b""]'), (99, 'YELLOW_A: ManimColor = named_colors[""yellow_a""]'), (100, 'GOLD_E: ManimColor = named_colors[""gold_e""]'), (101, 'GOLD_D: ManimColor = named_colors[""gold_d""]'), (102, 'GOLD_C: ManimColor = named_colors[""gold_c""]'), (103, 'GOLD_B: ManimColor = named_colors[""gold_b""]'), (104, 'GOLD_A: ManimColor = named_colors[""gold_a""]'), (105, 'RED_E: ManimColor = named_colors[""red_e""]'), (106, 'RED_D: ManimColor = named_colors[""red_d""]'), (107, 'RED_C: ManimColor = named_colors[""red_c""]'), (108, 'RED_B: ManimColor = named_colors[""red_b""]'), (109, 'RED_A: ManimColor = named_colors[""red_a""]'), (110, 'MAROON_E: ManimColor = named_colors[""maroon_e""]'), (111, 'MAROON_D: ManimColor = named_colors[""maroon_d""]'), (112, 'MAROON_C: ManimColor = named_colors[""maroon_c""]'), (113, 'MAROON_B: ManimColor = named_colors[""maroon_b""]'), (114, 'MAROON_A: ManimColor = named_colors[""maroon_a""]'), (115, 'PURPLE_E: ManimColor = named_colors[""purple_e""]'), (116, 'PURPLE_D: ManimColor = named_colors[""purple_d""]'), (117, 'PURPLE_C: ManimColor = named_colors[""purple_c""]'), (118, 'PURPLE_B: ManimColor = named_colors[""purple_b""]'), (119, 'PURPLE_A: ManimColor = named_colors[""purple_a""]'), (120, 'GREY_E: ManimColor = named_colors[""grey_e""]'), (121, 'GREY_D: ManimColor = named_colors[""grey_d""]'), (122, 'GREY_C: ManimColor = named_colors[""grey_c""]'), (123, 'GREY_B: ManimColor = named_colors[""grey_b""]'), (124, 'GREY_A: ManimColor = named_colors[""grey_a""]'), (125, 'WHITE: ManimColor = named_colors[""white""]'), (126, 'BLACK: ManimColor = named_colors[""black""]'), (127, 'GREY_BROWN: ManimColor = named_colors[""grey_brown""]'), (128, 'DARK_BROWN: ManimColor = named_colors[""dark_brown""]'), (129, 'LIGHT_BROWN: ManimColor = named_colors[""light_brown""]'), (130, 'PINK: ManimColor = named_colors[""pink""]'), (131, 'LIGHT_PINK: ManimColor = named_colors[""light_pink""]'), (132, 'GREEN_SCREEN: ManimColor = named_colors[""green_screen""]'), (133, 'ORANGE: ManimColor = named_colors[""orange""]'), (134, ''), (135, 'MANIM_COLORS: List[ManimColor] = list(named_colors.values())')]}",0,0
manimlib/extract_scene.py,manimlib/extract_scene.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(9, 'from manimlib.config import manim_config'), (22, '        exec(manim_config.universal_import_line)'), (80, '    return int(total_time * manim_config.camera.fps)'), (84, '    fw_config = manim_config.file_writer'), (85, '    if fw_config.write_to_movie and run_config.prerun:'), (86, '        scene_config.file_writer_config.total_frames = compute_total_frames(scene_class, scene_config)')], 'deleted': [(9, 'from manimlib.config import get_global_config'), (22, '        exec(get_global_config()[""universal_import_line""])'), (80, '    return int(total_time * get_global_config()[""camera""][""fps""])'), (84, '    fw_config = get_global_config()[""file_writer""]'), (85, '    if fw_config[""write_to_movie""] and run_config[""prerun""]:'), (86, '        scene_config[""file_writer_config""][""total_frames""] = compute_total_frames(scene_class, scene_config)')]}",38,38
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(5, 'from manimlib.config import manim_config'), (60, '            color = manim_config.camera.background_color')], 'deleted': [(5, 'from manimlib.config import get_global_config'), (60, ""            color = get_global_config()['style']['background_color']"")]}",13,13
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(15, 'from manimlib.config import manim_config'), (154, '        global_attrs: dict = {},'), (160, '        text_config = manim_config.text'), (165, '        self.alignment = alignment or text_config.alignment'), (167, '        self.font = font or text_config.font'), (178, '        self.global_attrs = global_attrs'), (365, '        global_attr_dict.update(self.global_attrs)')], 'deleted': [(15, 'from manimlib.config import get_global_config'), (154, '        global_config: dict = {},'), (160, '        text_config = get_global_config()[""text""]'), (165, '        self.alignment = alignment or text_config[""alignment""]'), (167, '        self.font = font or text_config[""font""]'), (178, '        self.global_config = global_config'), (365, '        global_attr_dict.update(self.global_config)')]}",73,73
manimlib/module_loader.py,manimlib/module_loader.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(9, 'from manimlib.config import manim_config'), (145, '        ignore_manimlib_modules = manim_config.ignore_manimlib_modules_on_reload')], 'deleted': [(9, 'from manimlib.config import get_global_config'), (145, '        ignore_manimlib_modules = get_global_config()[""ignore_manimlib_modules_on_reload""]')]}",28,28
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(10, 'from manimlib.config import manim_config'), (43, '    exception_mode = manim_config.embed.exception_mode'), (135, '    run_config = manim_config.run'), (136, '    run_config.is_reload = True'), (138, '        run_config.embed_line = embed_line')], 'deleted': [(10, 'from manimlib.config import get_global_config'), (43, '    exception_mode = get_global_config()[""embed""][""exception_mode""]'), (135, '    run_config = get_global_config()[""run""]'), (136, '    run_config[""is_reload""] = True'), (138, '        run_config[""embed_line""] = embed_line')]}",25,25
manimlib/utils/directories.py,manimlib/utils/directories.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(8, 'from manimlib.config import manim_config'), (14, '    return manim_config.directories')], 'deleted': [(8, 'from manimlib.config import get_global_config'), (14, '    return get_global_config()[""directories""]')]}",12,12
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","{'added': [(13, 'from manimlib.config import manim_config'), (43, '    template = template or manim_config.tex.template')], 'deleted': [(13, 'from manimlib.config import get_global_config'), (43, '    template = template or get_global_config()[""tex""][""template""]')]}",15,15
manimlib/config.py,manimlib/config.py,13fdc9629d62407111b12cca5023c91e83fd9078,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,No need for the shortcuts into the manim_config,"{'added': [(291, '        # Note, Scene.__init__ makes use of both manimlib.camera and'), (292, '        # manimlib.file_writer below, so the arguments here are just for')], 'deleted': [(291, '        # Note, Scene.__init__ makes use of both get_camera_config() and'), (292, '        # get_file_writer_config() below, so the arguments here are just for'), (385, ''), (386, ''), (388, ''), (389, ''), (390, '# Shortcuts for retrieving portions of global configuration'), (391, ''), (392, ''), (393, 'def get_window_config() -> dict:'), (394, '    """""" Key word arguments for Window """"""'), (395, '    return manim_config.window'), (396, ''), (397, ''), (398, 'def get_camera_config() -> dict:'), (399, '    """""" Key word arguments for Camera """"""'), (400, '    return manim_config.camera'), (401, ''), (402, ''), (403, 'def get_file_writer_config() -> dict:'), (404, '    """""" Key word arguments for SceneFileWriter """"""'), (405, '    return manim_config.file_writer'), (406, ''), (407, ''), (408, 'def get_scene_config() -> dict:'), (409, '    """""" Key word arguments for Scene """"""'), (410, '    return manim_config.scene'), (411, ''), (412, ''), (413, 'def get_run_config():'), (414, '    return manim_config.run'), (415, '')]}",53,53
manimlib/scene/scene.py,manimlib/scene/scene.py,13fdc9629d62407111b12cca5023c91e83fd9078,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,No need for the shortcuts into the manim_config,"{'added': [(18, 'from manimlib.config import manim_config'), (92, '            manim_config.camera,         # Global default'), (97, '            manim_config.file_writer,')], 'deleted': [(18, 'from manimlib.config import get_camera_config'), (19, 'from manimlib.config import get_file_writer_config'), (93, '            get_camera_config(),         # Global default'), (98, '            get_file_writer_config(),')]}",216,216
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,13fdc9629d62407111b12cca5023c91e83fd9078,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,No need for the shortcuts into the manim_config,"{'added': [(13, 'from manimlib.config import manim_config'), (413, '        size = manim_config.camera.resolution')], 'deleted': [(13, 'from manimlib.config import get_camera_config'), (413, '        cam_config = get_camera_config()'), (414, '        size = cam_config[""resolution""]')]}",66,66
manimlib/config.py,manimlib/config.py,b470a47da778fc11716e0c43305937b396edaaa9,13fdc9629d62407111b12cca5023c91e83fd9078,Remove unnecessary import,"{'added': [], 'deleted': [(15, 'from manimlib.utils.init_config import init_customization')]}",53,53
requirements.txt,requirements.txt,7148d6bcedb57573504b7f390c5b01dd2a74bd0f,b470a47da778fc11716e0c43305937b396edaaa9,Add addict to requirements,"{'added': [(1, 'addict')], 'deleted': []}",,
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,0b350e248bb58908f685189a2d3081d732a838ab,7148d6bcedb57573504b7f390c5b01dd2a74bd0f,Change global_attrs back to global_config in Text,"{'added': [(154, '        global_config: dict = {},'), (178, '        self.global_config = global_config'), (365, '        global_attr_dict.update(self.global_config)')], 'deleted': [(154, '        global_attrs: dict = {},'), (178, '        self.global_attrs = global_attrs'), (365, '        global_attr_dict.update(self.global_attrs)')]}",73,73
manimlib/__main__.py,manimlib/__main__.py,9ae5b4dee37108602b963b5f5624cec3de9b6cdf,0b350e248bb58908f685189a2d3081d732a838ab,Use addict.Dict for scene config,"{'added': [(2, 'from addict import Dict'), (3, ''), (26, '    scene_config = Dict(manim_config.scene)')], 'deleted': [(24, '    scene_config = dict(manim_config.scene)')]}",10,10
manimlib/scene/scene.py,manimlib/scene/scene.py,6d753a297ae6e4c8251275757517104a6c873202,f9fc543b07cdee6367458dc450c7ec34b487cc4c,Remove stray imports,"{'added': [], 'deleted': [(9, 'from IPython.core.getipython import get_ipython')]}",216,216
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,6d753a297ae6e4c8251275757517104a6c873202,f9fc543b07cdee6367458dc450c7ec34b487cc4c,Remove stray imports,"{'added': [], 'deleted': [(3, 'import os')]}",25,25
setup.cfg,setup.cfg,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,6d753a297ae6e4c8251275757517104a6c873202,Update setup.cfg,"{'added': [(32, '    addict')], 'deleted': [(56, '    tempfile')]}",,
docs/source/getting_started/structure.rst,docs/source/getting_started/structure.rst,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.","{'added': [], 'deleted': [(106, '        âââ init_config.py        # Configuration guide')]}",,
manimlib/__main__.py,manimlib/__main__.py,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.","{'added': [], 'deleted': [(7, 'import manimlib.utils.init_config'), (58, '    if args.config:'), (59, '        manimlib.utils.init_config.init_customization()'), (60, '        return')]}",9,9
manimlib/config.py,manimlib/config.py,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.","{'added': [], 'deleted': [(150, '        parser.add_argument('), (151, '            ""--config"",'), (152, '            action=""store_true"",'), (153, '            help=""Guide for automatic configuration"",'), (154, '        )')]}",53,53
manimlib/default_config.yml,manimlib/default_config.yml,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.","{'added': [(1, '# This file determines the default configuration for how manim is'), (2, '# run, including names for directories it will write to, default'), (3, '# parameters for various classes, style choices, etc. To customize'), (4, '# your own, create a custom_config.yml file in whatever directory'), (5, '# you are running manim. For 3blue1brown, for instance, mind is'), (6, '# here: https://github.com/3b1b/videos/blob/master/custom_config.yml'), (7, ''), (8, '# Alternatively, you can create it whereever you like, and on running'), (9, '# manim, pass in `--config_file /path/to/custom/config/file.yml`'), (10, '')], 'deleted': []}",,
manimlib/utils/init_config.py,,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.","{'added': [], 'deleted': [(1, 'from __future__ import annotations'), (2, ''), (3, 'import importlib'), (4, 'import inspect'), (5, 'import os'), (6, 'import yaml'), (7, ''), (8, 'from rich import box'), (9, 'from rich.console import Console'), (10, 'from rich.prompt import Confirm'), (11, 'from rich.prompt import Prompt'), (12, 'from rich.rule import Rule'), (13, 'from rich.table import Table'), (14, ''), (15, 'from typing import TYPE_CHECKING'), (16, ''), (17, 'if TYPE_CHECKING:'), (18, '    from typing import Any'), (19, ''), (20, ''), (21, 'def get_manim_dir() -> str:'), (22, '    manimlib_module = importlib.import_module(""manimlib"")'), (23, '    manimlib_dir = os.path.dirname(inspect.getabsfile(manimlib_module))'), (24, '    return os.path.abspath(os.path.join(manimlib_dir, ""..""))'), (25, ''), (26, ''), (27, 'def remove_empty_value(dictionary: dict[str, Any]) -> None:'), (28, '    for key in list(dictionary.keys()):'), (29, '        if dictionary[key] == """":'), (30, '            dictionary.pop(key)'), (31, '        elif isinstance(dictionary[key], dict):'), (32, '            remove_empty_value(dictionary[key])'), (33, ''), (34, ''), (35, 'def init_customization() -> None:'), (36, '    configuration = {'), (37, '        ""directories"": {'), (38, '            ""mirror_module_path"": False,'), (39, '            ""base"": """",'), (40, '            ""subdirs"": {'), (41, '                ""output"": ""videos"",'), (42, '                ""raster_images"": ""raster_images"",'), (43, '                ""vector_images"": ""vector_images"",'), (44, '                ""sounds"": ""sounds"",'), (45, '                ""data"": ""data"",'), (46, '                ""downloads"": ""downloads"",'), (47, '            }'), (48, '        },'), (49, '        ""universal_import_line"": ""from manimlib import *"",'), (50, '        ""style"": {'), (51, '            ""tex_template"": """",'), (52, '            ""font"": ""Consolas"",'), (53, '            ""background_color"": """",'), (54, '        },'), (55, '        ""window_position"": ""UR"",'), (56, '        ""window_monitor"": 0,'), (57, '        ""full_screen"": False,'), (58, '        ""break_into_partial_movies"": False,'), (59, '        ""camera_resolutions"": {'), (60, '            ""low"": ""854x480"",'), (61, '            ""medium"": ""1280x720"",'), (62, '            ""high"": ""1920x1080"",'), (63, '            ""4k"": ""3840x2160"",'), (64, '            ""default_resolution"": """",'), (65, '        },'), (66, '        ""fps"": 30,'), (67, '    }'), (68, ''), (69, '    console = Console()'), (70, '    console.print(Rule(""[bold]Configuration Guide[/bold]""))'), (71, '    # print(""Initialize configuration"")'), (72, '    try:'), (73, '        scope = Prompt.ask('), (74, '            ""  Select the scope of the configuration"",'), (75, '            choices=[""global"", ""local""],'), (76, '            default=""local""'), (77, '        )'), (78, ''), (79, '        console.print(""[bold]Directories:[/bold]"")'), (80, '        dir_config = configuration[""directories""]'), (81, '        dir_config[""base""] = Prompt.ask('), (82, '            ""  What base directory should manim use for reading/writing video and images? [prompt.default](optional, default is none)"",'), (83, '            default="""",'), (84, '            show_default=False'), (85, '        )'), (86, '        dir_config[""subdirs""][""output""] = Prompt.ask('), (87, '            ""  Within that base directory, which subdirectory should manim [bold]output[/bold] video and image files to?"" + \\'), (88, '            "" [prompt.default](optional, default is \\""videos\\"")"",'), (89, '            default=""videos"",'), (90, '            show_default=False'), (91, '        )'), (92, '        dir_config[""subdirs""][""raster_images""] = Prompt.ask('), (93, '            ""  Within that base directory, which subdirectory should manim look for raster images (.png, .jpg)"" + \\'), (94, '            "" [prompt.default](optional, default is \\""raster_images\\"")"",'), (95, '            default=""raster_images"",'), (96, '            show_default=False'), (97, '        )'), (98, '        dir_config[""subdirs""][""vector_images""] = Prompt.ask('), (99, '            ""  Within that base directory, which subdirectory should manim look for raster images (.svg, .xdv)"" + \\'), (100, '            "" [prompt.default](optional, default is \\""vector_images\\"")"",'), (101, '            default=""vector_images"",'), (102, '            show_default=False'), (103, '        )'), (104, '        dir_config[""subdirs""][""sounds""] = Prompt.ask('), (105, '            ""  Within that base directory, which subdirectory should manim look for sound files (.mp3, .wav)"" + \\'), (106, '            "" [prompt.default](optional, default is \\""sounds\\"")"",'), (107, '            default=""sounds"",'), (108, '            show_default=False'), (109, '        )'), (110, '        dir_config[""subdirs""][""downloads""] = Prompt.ask('), (111, '            ""  Within that base directory, which subdirectory should manim output downloaded files"" + \\'), (112, '            "" [prompt.default](optional, default is \\""downloads\\"")"",'), (113, '            default=""downloads"",'), (114, '            show_default=False'), (115, '        )'), (116, ''), (117, '        console.print(""[bold]Styles:[/bold]"")'), (118, '        style_config = configuration[""style""]'), (119, '        tex_template = Prompt.ask('), (120, '            ""  Select a TeX template to compile a LaTeX source file"",'), (121, '            default=""default""'), (122, '        )'), (123, '        style_config[""tex_template""] = tex_template'), (124, '        style_config[""background_color""] = Prompt.ask('), (125, '            ""  Which [bold]background color[/bold] do you want [italic](hex code)"",'), (126, '            default=""#333333""'), (127, '        )'), (128, ''), (129, '        console.print(""[bold]Camera qualities:[/bold]"")'), (130, '        table = Table('), (131, '            ""low"", ""medium"", ""high"", ""ultra_high"",'), (132, '            title=""Four defined qualities"",'), (133, '            box=box.ROUNDED'), (134, '        )'), (135, '        table.add_row(""480p15"", ""720p30"", ""1080p60"", ""2160p60"")'), (136, '        console.print(table)'), (137, '        configuration[""camera_resolutions""][""default_resolution""] = Prompt.ask('), (138, '            ""  Which one to choose as the default rendering quality"",'), (139, '            choices=[""low"", ""medium"", ""high"", ""ultra_high""],'), (140, '            default=""high""'), (141, '        )'), (142, ''), (143, '        write_to_file = Confirm.ask('), (144, '            ""\\n[bold]Are you sure to write these configs to file?[/bold]"",'), (145, '            default=True'), (146, '        )'), (147, '        if not write_to_file:'), (148, '            raise KeyboardInterrupt'), (149, ''), (150, '        global_file_name = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (151, '        if scope == ""global"":'), (152, '            file_name = global_file_name'), (153, '        else:'), (154, '            if os.path.exists(global_file_name):'), (155, '                remove_empty_value(configuration)'), (156, '            file_name = os.path.join(os.getcwd(), ""custom_config.yml"")'), (157, '        with open(file_name, ""w"", encoding=""utf-8"") as f:'), (158, '            yaml.dump(configuration, f)'), (159, ''), (160, '        console.print(f""\\n:rocket: You have successfully set up a {scope} configuration file!"")'), (161, '        console.print(f""You can manually modify it in: [cyan]`{file_name}`[/cyan]"")'), (162, ''), (163, '    except KeyboardInterrupt:'), (164, '        console.print(""\\n[green]Exit configuration guide[/green]"")')]}",,
manimlib/module_loader.py,manimlib/module_loader.py,bafea89ac9d11dc168bce923a65501ec74312afe,eeb4fdf27009a582fb408feac16f85608168d8c2,"Update InteractiveSceneEmbed (#2267)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string","{'added': [(149, ""            # We don't want to reload global manim_config"")], 'deleted': [(149, ""            # We don't want to reload global config"")]}",28,28
manimlib/scene/scene.py,manimlib/scene/scene.py,bafea89ac9d11dc168bce923a65501ec74312afe,eeb4fdf27009a582fb408feac16f85608168d8c2,"Update InteractiveSceneEmbed (#2267)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string","{'added': [(8, 'from contextlib import contextmanager'), (9, 'from contextlib import ExitStack'), (29, 'from manimlib.scene.scene_embed import InteractiveSceneEmbed'), (215, '        self.stop_skipping()'), (216, '        self.update_frame(force_draw=True)'), (218, '        InteractiveSceneEmbed(self).launch()'), (683, '    @contextmanager'), (684, '    def temp_skip(self):'), (685, '        prev_status = self.skip_animations'), (686, '        self.skip_animations = True'), (687, '        try:'), (688, '            yield'), (689, '        finally:'), (690, '            if not prev_status:'), (691, '                self.stop_skipping()'), (693, '    @contextmanager'), (694, '    def temp_progress_bar(self):'), (696, '        self.show_animation_progress = True'), (697, '        try:'), (698, '            yield'), (699, '        finally:'), (700, '            self.show_animation_progress = prev_progress'), (701, ''), (702, '    @contextmanager'), (703, '    def temp_record(self):'), (704, '        self.camera.use_window_fbo(False)'), (705, '        self.file_writer.begin_insert()'), (706, '        try:'), (707, '            yield'), (708, '        finally:'), (712, '    def temp_config_change(self, skip=False, record=False, progress_bar=False):'), (713, '        stack = ExitStack()'), (714, '        if skip:'), (715, '            stack.enter_context(self.temp_skip())'), (716, '        if record:'), (717, '            stack.enter_context(self.temp_record())'), (718, '        if progress_bar:'), (719, '            stack.enter_context(self.temp_progress_bar())'), (720, '        return stack')], 'deleted': [(27, 'from manimlib.scene.scene_embed import interactive_scene_embed'), (125, '        self.checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()'), (126, '        self.checkpoint_manager: CheckpointManager = CheckpointManager()'), (216, '        interactive_scene_embed(self)'), (681, '    def checkpoint_paste('), (682, '        self,'), (683, '        skip: bool = False,'), (684, '        record: bool = False,'), (685, '        progress_bar: bool = True'), (686, '    ):'), (687, '        """"""'), (688, '        Used during interactive development to run (or re-run)'), (689, '        a block of scene code.'), (690, ''), (691, '        If the copied selection starts with a comment, this will'), (692, '        revert to the state of the scene the first time this function'), (693, '        was called on a block of code starting with that comment.'), (694, '        """"""'), (695, '        # Keep track of skipping and progress bar status'), (696, '        self.skip_animations = skip'), (699, '        self.show_animation_progress = progress_bar'), (700, ''), (701, '        if record:'), (702, '            self.camera.use_window_fbo(False)'), (703, '            self.file_writer.begin_insert()'), (704, ''), (705, '        self.checkpoint_manager.checkpoint_paste(self)'), (706, ''), (707, '        if record:'), (711, '        self.stop_skipping()'), (712, '        self.show_animation_progress = prev_progress'), (713, ''), (714, '    def clear_checkpoints(self):'), (715, '        self.checkpoint_manager.clear_checkpoints()')]}",223,223
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,bafea89ac9d11dc168bce923a65501ec74312afe,eeb4fdf27009a582fb408feac16f85608168d8c2,"Update InteractiveSceneEmbed (#2267)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string","{'added': [(1, 'from __future__ import annotations'), (2, ''), (5, 'import traceback'), (18, 'from typing import TYPE_CHECKING'), (19, 'if TYPE_CHECKING:'), (20, '    from manimlib.scene.scene import Scene'), (21, ''), (22, ''), (23, 'class InteractiveSceneEmbed:'), (24, '    def __init__(self, scene: Scene):'), (25, '        self.scene = scene'), (26, '        self.checkpoint_manager = CheckpointManager()'), (27, ''), (28, '        self.shell = self.get_ipython_shell_for_embedded_scene()'), (29, '        self.enable_gui()'), (30, '        self.ensure_frame_update_post_cell()'), (31, '        self.ensure_flash_on_error()'), (32, ''), (33, '    def launch(self):'), (34, '        self.shell()'), (35, ''), (36, '    def get_ipython_shell_for_embedded_scene(self) -> InteractiveShellEmbed:'), (37, '        """"""'), (38, '        Create embedded IPython terminal configured to have access to'), (39, '        the local namespace of the caller'), (40, '        """"""'), (41, ""        # Triple back should take us to the context in a user's scene definition""), (42, '        # which is calling ""self.embed""'), (43, '        caller_frame = inspect.currentframe().f_back.f_back.f_back'), (44, ''), (45, ""        # Update the module's namespace to include local variables""), (46, '        module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (47, '        module.__dict__.update(caller_frame.f_locals)'), (48, '        module.__dict__.update(self.get_shortcuts())'), (49, '        exception_mode = manim_config.embed.exception_mode'), (50, ''), (51, '        return InteractiveShellEmbed('), (52, '            user_module=module,'), (53, '            display_banner=False,'), (54, '            xmode=exception_mode'), (55, '        )'), (56, ''), (57, '    def get_shortcuts(self):'), (58, '        """"""'), (59, '        A few custom shortcuts useful to have in the interactive shell namespace'), (60, '        """"""'), (61, '        scene = self.scene'), (62, '        return dict('), (63, '            play=scene.play,'), (64, '            wait=scene.wait,'), (65, '            add=scene.add,'), (66, '            remove=scene.remove,'), (67, '            clear=scene.clear,'), (68, '            focus=scene.focus,'), (69, '            save_state=scene.save_state,'), (70, '            undo=scene.undo,'), (71, '            redo=scene.redo,'), (72, '            i2g=scene.i2g,'), (73, '            i2m=scene.i2m,'), (74, '            checkpoint_paste=self.checkpoint_paste,'), (75, '            clear_checkpoints=self.checkpoint_manager.clear_checkpoints,'), (76, '            reload=self.reload_scene  # Defined below'), (77, '        )'), (78, ''), (79, '    def enable_gui(self):'), (80, '        """"""Enables gui interactions during the embed""""""'), (81, '        def inputhook(context):'), (82, '            while not context.input_is_ready():'), (83, '                if not self.scene.is_window_closing():'), (84, '                    self.scene.update_frame(dt=0)'), (85, '            if self.scene.is_window_closing():'), (86, '                self.shell.ask_exit()'), (87, ''), (88, '        pt_inputhooks.register(""manim"", inputhook)'), (89, '        self.shell.enable_gui(""manim"")'), (90, ''), (91, '    def ensure_frame_update_post_cell(self):'), (92, '        """"""Ensure the scene updates its frame after each ipython cell""""""'), (93, '        def post_cell_func(*args, **kwargs):'), (94, '            if not self.scene.is_window_closing():'), (95, '                self.scene.update_frame(dt=0, force_draw=True)'), (96, ''), (97, '        self.shell.events.register(""post_run_cell"", post_cell_func)'), (98, ''), (99, '    def ensure_flash_on_error(self):'), (100, '        """"""Flash border, and potentially play sound, on exceptions""""""'), (101, '        def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (102, ""            # Show the error don't just swallow it""), (103, ""            print(''.join(traceback.format_exception(etype, evalue, tb)))""), (104, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (105, '            rect.fix_in_frame()'), (106, '            self.scene.play(VFadeInThenOut(rect, run_time=0.5))'), (107, ''), (108, '        self.shell.set_custom_exc((Exception,), custom_exc)'), (109, ''), (110, '    def reload_scene(self, embed_line: int | None = None) -> None:'), (111, '        """"""'), (112, '        Reloads the scene just like the `manimgl` command would do with the'), (113, '        same arguments that were provided for the initial startup. This allows'), (114, ""        for quick iteration during scene development since we don't have to exit""), (115, '        the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (116, '        open during the reload.'), (117, ''), (118, '        If `embed_line` is provided, the scene will be reloaded at that line'), (119, '        number. This corresponds to the `linemarker` param of the'), (120, '        `extract_scene.insert_embed_line_to_module()` method.'), (121, ''), (122, '        Before reload, the scene is cleared and the entire state is reset, such'), (123, '        that we can start from a clean slate. This is taken care of by the'), (124, '        run_scenes function in __main__.py, which will catch the error raised by the'), (125, '        `exit_raise` magic command that we invoke here.'), (126, ''), (127, '        Note that we cannot define a custom exception class for this error,'), (128, '        since the IPython kernel will swallow any exception. While we can catch'), (129, '        such an exception in our custom exception handler registered with the'), (130, '        `set_custom_exc` method, we cannot break out of the IPython shell by'), (131, '        this means.'), (132, '        """"""'), (133, '        # Update the global run configuration.'), (134, '        run_config = manim_config.run'), (135, '        run_config.is_reload = True'), (136, '        if embed_line:'), (137, '            run_config.embed_line = embed_line'), (138, ''), (139, '        print(""Reloading..."")'), (140, '        self.shell.run_line_magic(""exit_raise"", """")'), (141, ''), (142, '    def checkpoint_paste('), (143, '        self,'), (144, '        skip: bool = False,'), (145, '        record: bool = False,'), (146, '        progress_bar: bool = True'), (147, '    ):'), (148, '        with self.scene.temp_config_change(skip, record, progress_bar):'), (149, '            self.checkpoint_manager.checkpoint_paste(self.shell, self.scene)'), (155, '    def checkpoint_paste(self, shell, scene):'), (170, '    def get_leading_comment(code_string: str) -> str:'), (174, '        return """"'), (177, '        if not key:')], 'deleted': [(4, 'from IPython.core.getipython import get_ipython'), (16, 'def interactive_scene_embed(scene):'), (17, '    scene.stop_skipping()'), (18, '    scene.update_frame(force_draw=True)'), (19, ''), (20, '    shell = get_ipython_shell_for_embedded_scene(scene)'), (21, '    enable_gui(shell, scene)'), (22, '    ensure_frame_update_post_cell(shell, scene)'), (23, '    ensure_flash_on_error(shell, scene)'), (24, ''), (25, '    # Launch shell'), (26, '    shell()'), (27, ''), (28, ''), (29, 'def get_ipython_shell_for_embedded_scene(scene):'), (30, '    """"""'), (31, '    Create embedded IPython terminal configured to have access to'), (32, '    the local namespace of the caller'), (33, '    """"""'), (34, ""    # Triple back should take us to the context in a user's scene definition""), (35, '    # which is calling ""self.embed""'), (36, '    caller_frame = inspect.currentframe().f_back.f_back.f_back'), (37, ''), (38, ""    # Update the module's namespace to include local variables""), (39, '    module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (40, '    module.__dict__.update(caller_frame.f_locals)'), (41, '    module.__dict__.update(get_shortcuts(scene))'), (42, '    exception_mode = manim_config.embed.exception_mode'), (43, ''), (44, '    return InteractiveShellEmbed('), (45, '        user_module=module,'), (46, '        display_banner=False,'), (47, '        xmode=exception_mode'), (48, '    )'), (49, ''), (50, ''), (51, 'def get_shortcuts(scene):'), (52, '    """"""'), (53, '    A few custom shortcuts useful to have in the interactive shell namespace'), (54, '    """"""'), (55, '    return dict('), (56, '        play=scene.play,'), (57, '        wait=scene.wait,'), (58, '        add=scene.add,'), (59, '        remove=scene.remove,'), (60, '        clear=scene.clear,'), (61, '        focus=scene.focus,'), (62, '        save_state=scene.save_state,'), (63, '        undo=scene.undo,'), (64, '        redo=scene.redo,'), (65, '        i2g=scene.i2g,'), (66, '        i2m=scene.i2m,'), (67, '        checkpoint_paste=scene.checkpoint_paste,'), (68, '        reload=reload_scene  # Defined below'), (69, '    )'), (70, ''), (71, ''), (72, 'def enable_gui(shell, scene):'), (73, '    """"""Enables gui interactions during the embed""""""'), (74, '    def inputhook(context):'), (75, '        while not context.input_is_ready():'), (76, '            if not scene.is_window_closing():'), (77, '                scene.update_frame(dt=0)'), (78, '        if scene.is_window_closing():'), (79, '            shell.ask_exit()'), (80, ''), (81, '    pt_inputhooks.register(""manim"", inputhook)'), (82, '    shell.enable_gui(""manim"")'), (83, ''), (84, ''), (85, 'def ensure_frame_update_post_cell(shell, scene):'), (86, '    """"""Ensure the scene updates its frame after each ipython cell""""""'), (87, '    def post_cell_func(*args, **kwargs):'), (88, '        if not scene.is_window_closing():'), (89, '            scene.update_frame(dt=0, force_draw=True)'), (90, ''), (91, '    shell.events.register(""post_run_cell"", post_cell_func)'), (92, ''), (93, ''), (94, 'def ensure_flash_on_error(shell, scene):'), (95, '    """"""Flash border, and potentially play sound, on exceptions""""""'), (96, '    def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (97, ""        # Show the error don't just swallow it""), (98, '        shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)'), (99, '        rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (100, '        rect.fix_in_frame()'), (101, '        scene.play(VFadeInThenOut(rect, run_time=0.5))'), (102, ''), (103, '    shell.set_custom_exc((Exception,), custom_exc)'), (104, ''), (105, ''), (106, 'def reload_scene(embed_line: int | None = None) -> None:'), (107, '    """"""'), (108, '    Reloads the scene just like the `manimgl` command would do with the'), (109, '    same arguments that were provided for the initial startup. This allows'), (110, ""    for quick iteration during scene development since we don't have to exit""), (111, '    the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (112, '    open during the reload.'), (113, ''), (114, '    If `embed_line` is provided, the scene will be reloaded at that line'), (115, '    number. This corresponds to the `linemarker` param of the'), (116, '    `extract_scene.insert_embed_line_to_module()` method.'), (117, ''), (118, '    Before reload, the scene is cleared and the entire state is reset, such'), (119, '    that we can start from a clean slate. This is taken care of by the'), (120, '    run_scenes function in __main__.py, which will catch the error raised by the'), (121, '    `exit_raise` magic command that we invoke here.'), (122, ''), (123, '    Note that we cannot define a custom exception class for this error,'), (124, '    since the IPython kernel will swallow any exception. While we can catch'), (125, '    such an exception in our custom exception handler registered with the'), (126, '    `set_custom_exc` method, we cannot break out of the IPython shell by'), (127, '    this means.'), (128, '    """"""'), (129, '    shell = get_ipython()'), (130, '    if not shell:'), (131, '        return'), (132, ''), (133, '    # Update the global run configuration.'), (134, '    run_config = manim_config.run'), (135, '    run_config.is_reload = True'), (136, '    if embed_line:'), (137, '        run_config.embed_line = embed_line'), (138, ''), (139, '    print(""Reloading..."")'), (140, '    shell.run_line_magic(""exit_raise"", """")'), (146, '    def checkpoint_paste(self, scene):'), (155, '        shell = get_ipython()'), (156, '        if shell is None:'), (157, '            return'), (158, ''), (160, ''), (166, '    def get_leading_comment(code_string: str):'), (170, '        return None'), (173, '        if key is None:')]}",25,25
docs/source/getting_started/configuration.rst,docs/source/getting_started/configuration.rst,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(66, '``--autoreload``                                                  Automatically reload Python modules to pick up code changes across different files')], 'deleted': []}",,
manimlib/config.py,manimlib/config.py,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(48, '    update_embed_config(config, args)'), (213, '        parser.add_argument('), (214, '            ""--autoreload"",'), (215, '            action=""store_true"",'), (216, '            help=""Automatically reload Python modules to pick up code changes "" +'), (217, '                 ""across different files"",'), (218, '        )'), (321, 'def update_embed_config(config: dict, args: Namespace):'), (322, '    if args.autoreload:'), (323, '        config[""embed""][""autoreload""] = True'), (324, ''), (325, '')], 'deleted': []}",55,55
manimlib/default_config.yml,manimlib/default_config.yml,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(86, '  autoreload: False')], 'deleted': []}",,
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(32, '        if manim_config.embed.autoreload:'), (33, '            self.auto_reload()'), (144, '    def auto_reload(self):'), (145, '        """"""Enables IPython autoreload for automatic reloading of modules.""""""'), (146, '        self.shell.magic(""load_ext autoreload"")'), (147, '        self.shell.magic(""autoreload all"")'), (148, '')], 'deleted': []}",27,27
docs/source/documentation/constants.rst,docs/source/documentation/constants.rst,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(77, '   DEG = TAU / 360')], 'deleted': [(77, '   DEGREES = TAU / 360')]}",,
docs/source/getting_started/example_scenes.rst,docs/source/getting_started/example_scenes.rst,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(37, '            self.play(Rotate(circle, 90 * DEG))'), (224, '                    path_arc=90 * DEG,'), (602, '                theta=-30 * DEG,'), (603, '                phi=70 * DEG,'), (627, '                frame.animate.increment_phi(-10 * DEG),'), (628, '                frame.animate.increment_theta(-20 * DEG),')], 'deleted': [(37, '            self.play(Rotate(circle, 90 * DEGREES))'), (224, '                    path_arc=90 * DEGREES,'), (602, '                theta=-30 * DEGREES,'), (603, '                phi=70 * DEGREES,'), (627, '                frame.animate.increment_phi(-10 * DEGREES),'), (628, '                frame.animate.increment_theta(-20 * DEGREES),')]}",,
example_scenes.py,example_scenes.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(193, '                path_arc=90 * DEG,'), (206, '                path_arc=-30 * DEG,'), (619, '            self.frame.animate.increment_phi(-10 * DEG),'), (620, '            self.frame.animate.increment_theta(-20 * DEG),'), (669, '        self.play(Rotate(circle, 90 * DEG))')], 'deleted': [(193, '                path_arc=90 * DEGREES,'), (206, '                path_arc=-30 * DEGREES,'), (619, '            self.frame.animate.increment_phi(-10 * DEGREES),'), (620, '            self.frame.animate.increment_theta(-20 * DEGREES),'), (669, '        self.play(Rotate(circle, 90 * DEGREES))')]}",23,23
manimlib/animation/indication.py,manimlib/animation/indication.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(17, 'from manimlib.constants import DEG'), (398, '    def __init__(self, mobject: Mobject, path_arc: float = 90 * DEG, **kwargs):')], 'deleted': [(17, 'from manimlib.constants import DEGREES'), (398, '    def __init__(self, mobject: Mobject, path_arc: float = 90 * DEGREES, **kwargs):')]}",45,45
manimlib/animation/transform.py,manimlib/animation/transform.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(8, 'from manimlib.constants import DEG'), (317, '    def __init__(self, *mobjects: Mobject, path_arc=90 * DEG, **kwargs):')], 'deleted': [(8, 'from manimlib.constants import DEGREES'), (317, '    def __init__(self, *mobjects: Mobject, path_arc=90 * DEGREES, **kwargs):')]}",52,52
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(9, 'from manimlib.constants import DEG, RADIANS'), (29, '        fovy: float = 45 * DEG,'), (184, '        self.set_euler_angles(theta_degrees, phi_degrees, gamma_degrees, units=DEG)'), (212, '    def add_ambient_rotation(self, angular_speed=1 * DEG):')], 'deleted': [(9, 'from manimlib.constants import DEGREES, RADIANS'), (29, '        fovy: float = 45 * DEGREES,'), (184, '        self.set_euler_angles(theta_degrees, phi_degrees, gamma_degrees, units=DEGREES)'), (212, '    def add_ambient_rotation(self, angular_speed=1 * DEGREES):')]}",54,54
manimlib/config.py,manimlib/config.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(146, '        parser.add_argument('), (147, '            ""--subdivide"",'), (148, '            action=""store_true"",'), (149, '            help=""Divide the output animation into individual movie files "" +'), (150, '                 ""for each animation"",'), (151, '        )'), (265, '        subdivide_output=args.subdivide,')], 'deleted': [(108, '        parser.add_argument('), (109, '            ""-g"", ""--save_pngs"",'), (110, '            action=""store_true"",'), (111, '            help=""Save each frame as a png"",'), (112, '        )'), (265, '        save_pngs=args.save_pngs,')]}",55,55
manimlib/constants.py,manimlib/constants.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(64, 'DEG: float = TAU / 360'), (65, 'DEGREES = DEG  # Many older animations use teh full name'), (67, '# when juxtaposed with expressions like 30 * DEG')], 'deleted': [(64, 'DEGREES: float = TAU / 360'), (66, '# when juxtaposed with expressions like 30 * DEGREES')]}",0,0
manimlib/default_config.yml,manimlib/default_config.yml,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(67, '  # When skipping animations, should a single frame be rendered'), (68, '  # at the end of each play call?'), (69, '  preview_while_skipping: True'), (103, 'key_bindings:'), (104, ""  pan_3d: 'd'""), (105, ""  pan: 'f'""), (106, ""  reset: 'r'""), (107, ""  quit: 'q'  # Together with command""), (108, ""  select: 's'""), (109, ""  unselect: 'u'""), (110, ""  grab: 'g'""), (111, ""  x_grab: 'h'""), (112, ""  y_grab: 'v'""), (113, ""  resize: 't'""), (114, ""  color: 'c'""), (115, ""  information: 'i'""), (116, ""  cursor: 'k'"")], 'deleted': [(55, '  # If break_into_partial_movies is set to True, then many small'), (56, '  # files will be written corresponding to each Scene.play and'), (57, '  # Scene.wait call, and these files will then be combined'), (58, '  # to form the full scene.  Sometimes video-editing is made'), (59, '  # easier when working with the broken up scene, which'), (60, '  # effectively has cuts at all the places you might want.'), (61, '  break_into_partial_movies: False')]}",,
manimlib/extract_scene.py,manimlib/extract_scene.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(18, '    from addict import Dict'), (47, '        user_input = input(""\\nSelect which scene to render (by name or number): "")'), (80, 'def scene_from_class(scene_class, scene_config: Dict, run_config: Dict):'), (87, 'def note_missing_scenes(arg_names, module_names):'), (88, '    for name in arg_names:'), (89, '        if name not in module_names:'), (90, '            log.error(f""No scene named {name} found"")'), (93, 'def get_scenes_to_render(all_scene_classes: list, scene_config: Dict, run_config: Dict):'), (94, '    if run_config[""write_all""] or len(all_scene_classes) == 1:'), (95, '        classes_to_run = all_scene_classes'), (97, '        name_to_class = {sc.__name__: sc for sc in all_scene_classes}'), (98, '        classes_to_run = [name_to_class.get(name) for name in run_config.scene_names]'), (99, '        classes_to_run = list(filter(lambda x: x, classes_to_run))  # Remove Nones'), (100, '        note_missing_scenes(run_config.scene_names, name_to_class.keys())'), (101, ''), (102, '    if len(classes_to_run) == 0:'), (111, 'def get_scene_classes(module: Optional[Module]):'), (112, '    if module is None:'), (113, '        # If no module was passed in, just play the blank scene'), (114, '        return [BlankScene(**scene_config)]'), (165, 'def get_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (172, 'def main(scene_config: Dict, run_config: Dict):'), (173, '    module = get_module(run_config.file_name, run_config.embed_line, run_config.is_reload)'), (174, '    all_scene_classes = get_scene_classes(module)')], 'deleted': [(46, '        user_input = input('), (47, '            ""\\nThat module has multiple scenes, "" + \\'), (48, '            ""which ones would you like to render?"" + \\'), (49, '            ""\\nScene Name or Number: ""'), (50, '        )'), (83, 'def scene_from_class(scene_class, scene_config, run_config):'), (90, 'def get_scenes_to_render(all_scene_classes, scene_config, run_config):'), (91, '    if run_config[""write_all""]:'), (92, '        return [sc(**scene_config) for sc in all_scene_classes]'), (94, '    names_to_classes = {sc.__name__: sc for sc in all_scene_classes}'), (95, '    scene_names = run_config[""scene_names""]'), (97, '    for name in set.difference(set(scene_names), names_to_classes):'), (98, '        log.error(f""No scene named {name} found"")'), (99, '        scene_names.remove(name)'), (100, ''), (101, '    if scene_names:'), (102, '        classes_to_run = [names_to_classes[name] for name in scene_names]'), (103, '    elif len(all_scene_classes) == 1:'), (104, '        classes_to_run = [all_scene_classes[0]]'), (114, 'def get_scene_classes_from_module(module):'), (165, 'def get_scene_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (172, 'def main(scene_config, run_config):'), (173, '    module = get_scene_module('), (174, '        run_config[""file_name""],'), (175, '        run_config[""embed_line""],'), (176, '        run_config[""is_reload""]'), (177, '    )'), (178, '    if module is None:'), (179, '        # If no module was passed in, just play the blank scene'), (180, '        return [BlankScene(**scene_config)]'), (181, ''), (182, '    all_scene_classes = get_scene_classes_from_module(module)')]}",39,39
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(10, 'from manimlib.constants import DEG, PI'), (310, '        normal = rotate_vector(RIGHT, angle + 90 * DEG)'), (477, '        self.y_axis.rotate(90 * DEG, about_point=ORIGIN)')], 'deleted': [(10, 'from manimlib.constants import DEGREES, PI'), (310, '        normal = rotate_vector(RIGHT, angle + 90 * DEGREES)'), (477, '        self.y_axis.rotate(90 * DEGREES, about_point=ORIGIN)')]}",115,115
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(10, 'from manimlib.constants import DEG, PI, TAU'), (986, '            start_angle = (n % 2) * 90 * DEG')], 'deleted': [(10, 'from manimlib.constants import DEGREES, PI, TAU'), (986, '            start_angle = (n % 2) * 90 * DEGREES')]}",139,139
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(6, 'from manimlib.constants import DEG'), (199, '            rows[row_index][col_index].rotate(-45 * DEG)')], 'deleted': [(6, 'from manimlib.constants import DEGREES'), (199, '            rows[row_index][col_index].rotate(-45 * DEGREES)')]}",61,61
manimlib/mobject/mobject_update_utils.py,manimlib/mobject/mobject_update_utils.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(5, 'from manimlib.constants import DEG'), (74, '    rate: float = 20 * DEG,')], 'deleted': [(5, 'from manimlib.constants import DEGREES'), (74, '    rate: float = 20 * DEGREES,')]}",13,13
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(23, 'from manimlib.utils.simple_functions import hash_string'), (78, '    temp_file = Path(tempfile.gettempdir(), hash_string(markup_str)).with_suffix("".svg"")'), (79, '    manimpango.MarkupUtils.text2svg('), (80, '        text=markup_str,'), (81, '        font="""",                     # Already handled'), (82, '        slant=""NORMAL"",              # Already handled'), (83, '        weight=""NORMAL"",             # Already handled'), (84, '        size=1,                      # Already handled'), (85, '        _=0,                         # Empty parameter'), (86, '        disable_liga=False,'), (87, '        file_name=str(temp_file),'), (88, '        START_X=0,'), (89, '        START_Y=0,'), (90, '        width=DEFAULT_CANVAS_WIDTH,'), (91, '        height=DEFAULT_CANVAS_HEIGHT,'), (92, '        justify=justify,'), (93, '        indent=indent,'), (94, '        line_spacing=None,           # Already handled'), (95, '        alignment=alignment,'), (96, '        pango_width=pango_width'), (97, '    )'), (98, '    result = temp_file.read_text()'), (99, '    os.remove(temp_file)'), (100, '    return result')], 'deleted': [(77, '    # TODO, better would be to have this not write to file at all'), (78, '    #'), (79, ""    # To avoid CAIRO_STATUS_WRITE_ERROR: b'error while writing to""), (80, ""    # output stream' on Windows, we need to pass 'delete=False'.""), (81, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+', delete=False) as tmp:""), (82, '        manimpango.MarkupUtils.text2svg('), (83, '            text=markup_str,'), (84, '            font="""",                     # Already handled'), (85, '            slant=""NORMAL"",              # Already handled'), (86, '            weight=""NORMAL"",             # Already handled'), (87, '            size=1,                      # Already handled'), (88, '            _=0,                         # Empty parameter'), (89, '            disable_liga=False,'), (90, '            file_name=tmp.name,'), (91, '            START_X=0,'), (92, '            START_Y=0,'), (93, '            width=DEFAULT_CANVAS_WIDTH,'), (94, '            height=DEFAULT_CANVAS_HEIGHT,'), (95, '            justify=justify,'), (96, '            indent=indent,'), (97, '            line_spacing=None,           # Already handled'), (98, '            alignment=alignment,'), (99, '            pango_width=pango_width'), (100, '        )'), (101, ''), (102, '        # Read the contents'), (103, '        tmp.seek(0)'), (104, '        return tmp.read()')]}",73,73
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(10, 'from manimlib.constants import DEG'), (493, '        if self.use_simple_quadratic_approx and angle < 45 * DEG:'), (619, '        angle_threshold: float = 30 * DEG,'), (659, '    def is_smooth(self, angle_tol=1 * DEG) -> bool:')], 'deleted': [(10, 'from manimlib.constants import DEGREES'), (493, '        if self.use_simple_quadratic_approx and angle < 45 * DEGREES:'), (619, '        angle_threshold: float = 30 * DEGREES,'), (659, '    def is_smooth(self, angle_tol=1 * DEGREES) -> bool:')]}",289,289
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(10, 'from manimlib.config import manim_config'), (14, 'from manimlib.constants import DEG'), (40, 'SELECT_KEY = manim_config.key_bindings.select'), (41, 'UNSELECT_KEY = manim_config.key_bindings.unselect'), (42, 'GRAB_KEY = manim_config.key_bindings.grab'), (43, 'X_GRAB_KEY = manim_config.key_bindings.x_grab'), (44, 'Y_GRAB_KEY = manim_config.key_bindings.y_grab'), (46, 'RESIZE_KEY = manim_config.key_bindings.resize  # TODO'), (47, 'COLOR_KEY = manim_config.key_bindings.color'), (48, 'INFORMATION_KEY = manim_config.key_bindings.information'), (49, 'CURSOR_KEY = manim_config.key_bindings.cursor'), (628, '        theta, phi, gamma = (angles / DEG).astype(int)')], 'deleted': [(13, 'from manimlib.constants import DEGREES'), (39, ""SELECT_KEY = 's'""), (40, ""UNSELECT_KEY = 'u'""), (41, ""GRAB_KEY = 'g'""), (42, ""X_GRAB_KEY = 'h'""), (43, ""Y_GRAB_KEY = 'v'""), (45, ""RESIZE_KEY = 't'""), (46, ""COLOR_KEY = 'c'""), (47, ""INFORMATION_KEY = 'i'""), (48, ""CURSOR_KEY = 'k'""), (49, ""COPY_FRAME_POSITION_KEY = 'p'""), (628, '        theta, phi, gamma = (angles / DEGREES).astype(int)')]}",160,160
manimlib/scene/scene.py,manimlib/scene/scene.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(74, '        preview_while_skipping: bool = True,'), (84, '        self.preview_while_skipping = preview_while_skipping'), (530, '        if self.preview_while_skipping and self.skip_animations and self.window is not None:'), (745, '        if self.window.is_key_pressed(ord(manim_config.key_bindings.pan_3d)):'), (751, '        elif self.window.is_key_pressed(ord(manim_config.key_bindings.pan)):'), (837, '        if char == manim_config.key_bindings.reset:'), (844, '        elif char == manim_config.key_bindings.quit and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):')], 'deleted': [(51, ""PAN_3D_KEY = 'd'""), (52, ""FRAME_SHIFT_KEY = 'f'""), (53, ""RESET_FRAME_KEY = 'r'""), (54, ""QUIT_KEY = 'q'""), (55, ''), (56, ''), (534, '        if self.skip_animations and self.window is not None:'), (749, '        if self.window.is_key_pressed(ord(PAN_3D_KEY)):'), (755, '        elif self.window.is_key_pressed(ord(FRAME_SHIFT_KEY)):'), (841, '        if char == RESET_FRAME_KEY:'), (848, '        elif char == QUIT_KEY and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):')]}",224,224
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(105, '            shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)')], 'deleted': [(105, ""            print(''.join(traceback.format_exception(etype, evalue, tb)))"")]}",27,27
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(33, '        subdivide_output: bool = False,'), (40, '        output_directory: str = """",'), (56, '        self.subdivide_output = subdivide_output'), (78, ''), (85, '            self.image_file_path = self.init_image_file_path()'), (87, '            self.movie_file_path = self.init_movie_file_path()'), (88, '        if self.subdivide_output:'), (89, '            self.partial_movie_directory = self.init_partial_movie_directory()'), (90, ''), (91, '    def init_image_file_path(self) -> Path:'), (92, '        return self.get_output_file_rootname().with_suffix("".png"")'), (94, '    def init_movie_file_path(self) -> Path:'), (95, '        return self.get_output_file_rootname().with_suffix(self.movie_file_extension)'), (97, '    def init_partial_movie_directory(self):'), (98, '        return guarantee_existence(self.get_output_file_rootname())'), (99, ''), (100, '    def get_output_file_rootname(self) -> Path:'), (101, '        return Path('), (102, '            guarantee_existence(self.output_directory),'), (103, '            self.get_output_file_name()'), (104, '        )'), (105, ''), (106, '    def get_output_file_name(self) -> str:'), (107, '        if self.file_name:'), (108, '            return self.file_name'), (109, '        # Otherwise, use the name of the scene, potentially'), (110, '        # appending animation numbers'), (125, '        result = Path(self.partial_movie_directory, f""{self.scene.num_plays:05}"")'), (126, '        return result.with_suffix(self.movie_file_extension)'), (182, '        if not self.subdivide_output and self.write_to_movie:'), (186, '        if self.subdivide_output and self.write_to_movie:'), (190, '        if self.subdivide_output and self.write_to_movie:'), (194, '        if not self.subdivide_output and self.write_to_movie:'), (195, '            self.close_movie_pipe()'), (225, ""            '-an',  # Tells ffmpeg not to expect any audio""), (252, '        guarantee_existence(insert_dir)'), (253, '        return Path(insert_dir, f""{scene_name}_{index}"").with_suffix(self.movie_file_extension)'), (262, '        self.inserted_file_path = insert_path')], 'deleted': [(16, 'from manimlib.utils.file_ops import add_extension_if_not_present'), (17, 'from manimlib.utils.file_ops import get_sorted_integer_files'), (35, '        break_into_partial_movies: bool = False,'), (36, '        save_pngs: bool = False,  # TODO, this currently does nothing'), (43, '        output_directory: str | None = None,'), (45, '        subdirectory_for_videos: bool = False,'), (60, '        self.break_into_partial_movies = break_into_partial_movies'), (61, '        self.save_pngs = save_pngs'), (69, '        self.subdirectory_for_videos = subdirectory_for_videos'), (89, '        out_dir = self.output_directory or """"'), (90, '        scene_name = self.file_name or self.get_default_scene_name()'), (92, '            image_dir = guarantee_existence(os.path.join(out_dir, ""images""))'), (93, '            image_file = add_extension_if_not_present(scene_name, "".png"")'), (94, '            self.image_file_path = os.path.join(image_dir, image_file)'), (96, '            if self.subdirectory_for_videos:'), (97, '                movie_dir = guarantee_existence(os.path.join(out_dir, ""videos""))'), (98, '            else:'), (99, '                movie_dir = guarantee_existence(out_dir)'), (100, '            movie_file = add_extension_if_not_present(scene_name, self.movie_file_extension)'), (101, '            self.movie_file_path = os.path.join(movie_dir, movie_file)'), (102, '            if self.break_into_partial_movies:'), (103, '                self.partial_movie_directory = guarantee_existence(os.path.join('), (104, '                    movie_dir, ""partial_movie_files"", scene_name,'), (105, '                ))'), (106, '        # A place to save mobjects'), (107, '        self.saved_mobject_directory = os.path.join('), (108, '            out_dir, ""mobjects"", str(self.scene)'), (109, '        )'), (111, '    def get_default_module_directory(self) -> str:'), (112, '        path, _ = os.path.splitext(self.input_file_path)'), (113, '        if path.startswith(""_""):'), (114, '            path = path[1:]'), (115, '        return path'), (117, '    def get_default_scene_name(self) -> str:'), (127, '    def get_resolution_directory(self) -> str:'), (128, '        pixel_height = self.scene.camera.pixel_height'), (129, '        fps = self.scene.camera.fps'), (130, '        return ""{}p{}"".format('), (131, '            pixel_height, fps'), (132, '        )'), (133, ''), (139, '        result = os.path.join('), (140, '            self.partial_movie_directory,'), (141, '            ""{:05}{}"".format('), (142, '                self.scene.num_plays,'), (143, '                self.movie_file_extension,'), (144, '            )'), (145, '        )'), (146, '        return result'), (202, '        if not self.break_into_partial_movies and self.write_to_movie:'), (206, '        if self.break_into_partial_movies and self.write_to_movie:'), (210, '        if self.break_into_partial_movies and self.write_to_movie:'), (214, '        if self.write_to_movie:'), (215, '            if self.break_into_partial_movies:'), (216, '                self.combine_movie_files()'), (217, '            else:'), (218, '                self.close_movie_pipe()'), (237, '        # if self.pixel_format.startswith(""yuv""):'), (249, ""            '-an',  # Tells FFMPEG not to expect any audio""), (276, '        guarantee_existence(str(insert_dir))'), (277, '        return Path(insert_dir, f""{scene_name}_{index}{movie_path.suffix}"")'), (286, '        self.inserted_file_path = str(insert_path)'), (330, '    def combine_movie_files(self) -> None:'), (331, '        kwargs = {'), (332, '            ""remove_non_integer_files"": True,'), (333, '            ""extension"": self.movie_file_extension,'), (334, '        }'), (335, '        if self.scene.start_at_animation_number is not None:'), (336, '            kwargs[""min_index""] = self.scene.start_at_animation_number'), (337, '        if self.scene.end_at_animation_number is not None:'), (338, '            kwargs[""max_index""] = self.scene.end_at_animation_number'), (339, '        else:'), (340, '            kwargs[""remove_indices_greater_than""] = self.scene.num_plays - 1'), (341, '        partial_movie_files = get_sorted_integer_files('), (342, '            self.partial_movie_directory,'), (343, '            **kwargs'), (344, '        )'), (345, '        if len(partial_movie_files) == 0:'), (346, '            log.warning(""No animations in this scene"")'), (347, '            return'), (348, ''), (349, '        # Write a file partial_file_list.txt containing all'), (350, '        # partial movie files'), (351, '        file_list = os.path.join('), (352, '            self.partial_movie_directory,'), (353, '            ""partial_movie_file_list.txt""'), (354, '        )'), (355, ""        with open(file_list, 'w') as fp:""), (356, '            for pf_path in partial_movie_files:'), (357, ""                if os.name == 'nt':""), (358, ""                    pf_path = pf_path.replace('\\\\', '/')""), (359, '                fp.write(f""file \\\'{pf_path}\\\'\\n"")'), (360, ''), (361, '        movie_file_path = self.get_movie_file_path()'), (362, '        commands = ['), (363, '            self.ffmpeg_bin,'), (364, ""            '-y',  # overwrite output file if it exists""), (365, ""            '-f', 'concat',""), (366, ""            '-safe', '0',""), (367, ""            '-i', file_list,""), (368, ""            '-loglevel', 'error',""), (369, ""            '-c', 'copy',""), (370, '            movie_file_path'), (371, '        ]'), (372, '        if not self.includes_sound:'), (373, ""            commands.insert(-1, '-an')""), (374, ''), (375, '        combine_process = sp.Popen(commands)'), (376, '        combine_process.wait()'), (377, '')]}",76,76
manimlib/utils/dict_ops.py,manimlib/utils/dict_ops.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [], 'deleted': [(23, ''), (24, ''), (25, 'def soft_dict_update(d1, d2):'), (26, '    """"""'), (27, ""    Adds key values pairs of d2 to d1 only when d1 doesn't""), (28, '    already have that key'), (29, '    """"""'), (30, '    for key, value in list(d2.items()):'), (31, '        if key not in d1:'), (32, '            d1[key] = value'), (33, ''), (34, ''), (35, 'def dict_eq(d1, d2):'), (36, '    if len(d1) != len(d2):'), (37, '        return False'), (38, '    for key in d1:'), (39, '        value1 = d1[key]'), (40, '        value2 = d2[key]'), (41, '        if type(value1) != type(value2):'), (42, '            return False'), (43, '        if type(d1[key]) == np.ndarray:'), (44, '            if any(d1[key] != d2[key]):'), (45, '                return False'), (46, '        elif d1[key] != d2[key]:'), (47, '            return False'), (48, '    return True')]}",6,6
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(20, 'def guarantee_existence(path: str | Path) -> Path:'), (21, '    path = Path(path)'), (22, '    path.mkdir(parents=True, exist_ok=True)'), (23, '    return path.absolute()'), (30, ') -> Path:'), (44, '        return Path(file_name)'), (50, '        Path(directory, file_name + extension)'), (55, '        if path.exists():')], 'deleted': [(20, 'def add_extension_if_not_present(file_name: str, extension: str) -> str:'), (21, '    # This could conceivably be smarter about handling existing differing extensions'), (22, '    if(file_name[-len(extension):] != extension):'), (23, '        return file_name + extension'), (24, '    else:'), (25, '        return file_name'), (26, ''), (27, ''), (28, 'def guarantee_existence(path: str) -> str:'), (29, '    if not os.path.exists(path):'), (30, '        os.makedirs(path)'), (31, '    return os.path.abspath(path)'), (38, ') -> str:'), (52, '        return file_name'), (58, '        os.path.join(directory, file_name + extension)'), (63, '        if os.path.exists(path):'), (66, ''), (67, ''), (68, 'def get_sorted_integer_files('), (69, '    directory: str,'), (70, '    min_index: float = 0,'), (71, '    max_index: float = np.inf,'), (72, '    remove_non_integer_files: bool = False,'), (73, '    remove_indices_greater_than: float | None = None,'), (74, '    extension: str | None = None,'), (75, ') -> list[str]:'), (76, '    indexed_files = []'), (77, '    for file in os.listdir(directory):'), (78, ""        if '.' in file:""), (79, ""            index_str = file[:file.index('.')]""), (80, '        else:'), (81, '            index_str = file'), (82, ''), (83, '        full_path = os.path.join(directory, file)'), (84, '        if index_str.isdigit():'), (85, '            index = int(index_str)'), (86, '            if remove_indices_greater_than is not None:'), (87, '                if index > remove_indices_greater_than:'), (88, '                    os.remove(full_path)'), (89, '                    continue'), (90, '            if extension is not None and not file.endswith(extension):'), (91, '                continue'), (92, '            if index >= min_index and index < max_index:'), (93, '                indexed_files.append((index, file))'), (94, '        elif remove_non_integer_files:'), (95, '            os.remove(full_path)'), (96, '    indexed_files.sort(key=lambda p: p[0])'), (97, '    return list(map(lambda p: os.path.join(directory, p[1]), indexed_files))')]}",10,10
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(55, '    """"""'), (56, '    Less heavyweight name for np.true_divide, enabling'), (57, '    default behavior for 0/0'), (58, '    """"""'), (69, 'def binary_search('), (70, '    function: Callable[[float], float],'), (71, '    target: float,'), (72, '    lower_bound: float,'), (73, '    upper_bound: float,'), (74, '    tolerance:float = 1e-4'), (75, ') -> float | None:')], 'deleted': [(39, '# Just to have a less heavyweight name for this extremely common operation'), (40, '#'), (41, '# We may wish to have more fine-grained control over division by zero behavior'), (42, '# in the future (separate specifiable values for 0/0 and x/0 with x != 0),'), (43, '# but for now, we just allow the option to handle indeterminate 0/0.'), (44, ''), (71, 'def binary_search(function: Callable[[float], float],'), (72, '                  target: float,'), (73, '                  lower_bound: float,'), (74, '                  upper_bound: float,'), (75, '                  tolerance:float = 1e-4) -> float | None:')]}",22,22
manimlib/utils/tex.py,manimlib/utils/tex.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","{'added': [(4, 'from functools import lru_cache'), (9, '@lru_cache'), (11, '    tex = remove_tex_environments(tex)'), (12, '    commands_pattern = r""""""'), (13, '        (?P<sqrt>\\\\sqrt\\[[0-9]+\\])|    # Special sqrt with number'), (14, '        (?P<cmd>\\\\[a-zA-Z!,-/:;<>]+)   # Regular commands'), (17, '    pos = 0'), (18, '    for match in re.finditer(commands_pattern, tex, re.VERBOSE):'), (19, '        # Count normal characters up to this command'), (20, '        total += sum(1 for c in tex[pos:match.start()] if c not in ""^{} \\n\\t_$\\\\&"")'), (22, '        if match.group(""sqrt""):'), (23, '            total += len(match.group()) - 5'), (24, '        else:'), (25, '            total += TEX_TO_SYMBOL_COUNT.get(match.group(), 1)'), (26, '        pos = match.end()'), (29, '    total += sum(1 for c in tex[pos:] if c not in ""^{} \\n\\t_$\\\\&"")'), (31, ''), (32, ''), (33, 'def remove_tex_environments(tex: str) -> str:'), (34, '    # Handle \\phantom{...} with any content'), (35, '    tex = re.sub(r""\\\\phantom\\{[^}]*\\}"", """", tex)'), (36, '    # Handle other environment commands'), (37, '    tex = re.sub(r""\\\\(begin|end)(\\{\\w+\\})?(\\{\\w+\\})?(\\[\\w+\\])?"", """", tex)'), (38, '    return tex')], 'deleted': [(10, '    This function attempts to estimate the number of symbols that'), (11, '    a given string of tex would produce.'), (12, ''), (13, '    Warning, it may not behave perfectly'), (14, '    """"""'), (15, '    # First, remove patterns like \\begin{align}, \\phantom{thing},'), (16, '    # \\begin{array}{cc}, etc.'), (17, '    pattern = ""|"".join('), (18, '        rf""(\\\\{s})"" + r""(\\{\\w+\\})?(\\{\\w+\\})?(\\[\\w+\\])?""'), (19, '        for s in [""begin"", ""end"", ""phantom""]'), (20, '    )'), (21, '    tex = re.sub(pattern, """", tex)'), (22, ''), (23, '    # Progressively count the symbols associated with certain tex commands,'), (24, '    # and remove those commands from the string, adding the number of symbols'), (25, '    # that command creates'), (28, '    # Start with the special case \\sqrt[number]'), (29, '    for substr in re.findall(r""\\\\sqrt\\[[0-9]+\\]"", tex):'), (30, '        total += len(substr) - 5  # e.g. \\sqrt[3] is 3 symbols'), (31, '        tex = tex.replace(substr, "" "")'), (32, ''), (33, '    general_command = r""\\\\[a-zA-Z!,-/:;<>]+""'), (34, '    for substr in re.findall(general_command, tex):'), (35, '        total += TEX_TO_SYMBOL_COUNT.get(substr, 1)'), (36, '        tex = tex.replace(substr, "" "")'), (39, '    total += sum(map(lambda c: c not in ""^{} \\n\\t_$\\\\&"", tex))')]}",8,8
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,33dbf049856f0f9e42b6791d926fe04707128440,744e695340c5691551f2650d99db71964cb292c7,"Make checkpoint_states an instance variable of CheckpointManager (#2273)

As per https://github.com/3b1b/manim/issues/2272","{'added': [(160, '    def __init__(self):'), (161, '        self.checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()')], 'deleted': [(160, '    checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()')]}",28,28
manimlib/window.py,manimlib/window.py,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,33dbf049856f0f9e42b6791d926fe04707128440,"Move resizing out of Window.focus, and into Window.init_for_scene (#2274)","{'added': [(72, '        # This line seems to resync the viewport'), (73, '        self.on_resize(*self.size)')], 'deleted': [(72, '        self.focus()'), (109, '        # This line seems to resync the viewport'), (110, '        self.on_resize(*self.size)')]}",42,42
manimlib/__main__.py,manimlib/__main__.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","{'added': [(8, 'from manimlib.utils.cache import clear_cache'), (58, '    if args.clear_cache:'), (59, '        clear_cache()')], 'deleted': []}",10,10
manimlib/config.py,manimlib/config.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","{'added': [(10, 'from pathlib import Path'), (35, '    config = Dict(merge_dicts_recursively('), (39, '    ))'), (51, '    return config'), (215, '        parser.add_argument('), (216, '            ""--clear-cache"",'), (217, '            action=""store_true"",'), (218, '            help=""Erase the cache used for Tex and Text Mobjects""'), (219, '        )'), (234, 'def update_directory_config(config: Dict):'), (235, '    dir_config = config.directories'), (236, '    base = dir_config.base'), (237, '    for key, subdir in dir_config.subdirs.items():'), (241, 'def update_window_config(config: Dict, args: Namespace):'), (242, '    window_config = config.window'), (247, '        window_config.full_screen = True'), (250, 'def update_camera_config(config: Dict, args: Namespace):'), (251, '    camera_config = config.camera'), (252, '    arg_resolution = get_resolution_from_args(args, config.resolution_options)'), (253, '    camera_config.resolution = arg_resolution or literal_eval(camera_config.resolution)'), (255, '        camera_config.fps = args.fps'), (258, '            camera_config.background_color = colour.Color(args.color)'), (264, '        camera_config.background_opacity = 0.0'), (267, 'def update_file_writer_config(config: Dict, args: Namespace):'), (268, '    file_writer_config = config.file_writer'), (283, '        file_writer_config.video_codec = args.vcodec'), (285, ""        file_writer_config.video_codec = 'prores_ks'""), (286, ""        file_writer_config.pixel_format = ''""), (288, ""        file_writer_config.video_codec = ''""), (291, '        file_writer_config.pixel_format = args.pix_fmt'), (294, 'def update_scene_config(config: Dict, args: Namespace):'), (295, '    scene_config = config.scene'), (309, '        scene_config.leave_progress_bars = True'), (311, '        scene_config.show_animation_progress = True'), (314, 'def update_run_config(config: Dict, args: Namespace):'), (315, '    config.run = Dict('), (327, 'def update_embed_config(config: Dict, args: Namespace):'), (329, '        config.embed.autoreload = True'), (383, 'def get_output_directory(args: Namespace, config: Dict) -> str:'), (384, '    dir_config = config.directories'), (385, '    out_dir = args.video_dir or dir_config.output'), (386, '    if dir_config.mirror_module_path and args.file:'), (387, '        file_path = Path(args.file).absolute()'), (388, '        rel_path = file_path.relative_to(dir_config.removed_mirror_prefix)'), (389, '        rel_path = Path(str(rel_path).lstrip(""_""))'), (390, '        out_dir = Path(out_dir, rel_path).with_suffix("""")'), (391, '    return out_dir')], 'deleted': [(34, '    config = merge_dicts_recursively('), (38, '    )'), (50, '    return Dict(config)'), (228, 'def update_directory_config(config: dict):'), (229, '    dir_config = config[""directories""]'), (230, ""    base = dir_config['base']""), (231, ""    for key, subdir in dir_config['subdirs'].items():""), (235, 'def update_window_config(config: dict, args: Namespace):'), (236, '    window_config = config[""window""]'), (241, '        window_config[""full_screen""] = True'), (244, 'def update_camera_config(config: dict, args: Namespace):'), (245, '    camera_config = config[""camera""]'), (246, '    arg_resolution = get_resolution_from_args(args, config[""resolution_options""])'), (247, '    camera_config[""resolution""] = arg_resolution or literal_eval(camera_config[""resolution""])'), (249, '        camera_config[""fps""] = args.fps'), (252, '            camera_config[""background_color""] = colour.Color(args.color)'), (258, '        camera_config[""background_opacity""] = 0.0'), (261, 'def update_file_writer_config(config: dict, args: Namespace):'), (262, '    file_writer_config = config[""file_writer""]'), (271, '        input_file_path=args.file or """",'), (278, '        file_writer_config[""video_codec""] = args.vcodec'), (280, '        file_writer_config[""video_codec""] = \'prores_ks\''), (281, '        file_writer_config[""pixel_format""] = \'\''), (283, '        file_writer_config[""video_codec""] = \'\''), (286, '        file_writer_config[""pixel_format""] = args.pix_fmt'), (289, 'def update_scene_config(config: dict, args: Namespace):'), (290, '    scene_config = config[""scene""]'), (304, '        scene_config[""leave_progress_bars""] = True'), (306, '        scene_config[""show_animation_progress""] = True'), (309, 'def update_run_config(config: dict, args: Namespace):'), (310, '    config[""run""] = dict('), (322, 'def update_embed_config(config: dict, args: Namespace):'), (324, '        config[""embed""][""autoreload""] = True'), (378, 'def get_output_directory(args: Namespace, config: dict) -> str:'), (379, '    dir_config = config[""directories""]'), (380, '    output_directory = args.video_dir or dir_config[""output""]'), (381, '    if dir_config[""mirror_module_path""] and args.file:'), (382, '        to_cut = dir_config[""removed_mirror_prefix""]'), (383, '        ext = os.path.abspath(args.file)'), (384, '        ext = ext.replace(to_cut, """").replace("".py"", """")'), (385, '        if ext.startswith(""_""):'), (386, '            ext = ext[1:]'), (387, '        output_directory = os.path.join(output_directory, ext)'), (388, '    return output_directory')]}",53,53
manimlib/extract_scene.py,manimlib/extract_scene.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","{'added': [(114, '        return [BlankScene]')], 'deleted': [(114, '        return [BlankScene(**scene_config)]')]}",39,39
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","{'added': [(38, '        output_directory: str = ""."",')], 'deleted': [(37, '        # What python file is generating this scene'), (38, '        input_file_path: str = """",'), (40, '        output_directory: str = """",'), (60, '        self.input_file_path = input_file_path')]}",76,76
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","{'added': [(34, 'def get_tex_config(template: str = """") -> tuple[str, str]:'), (36, '    Returns a compiler and preamble to use for rendering LaTeX'), (39, '    config = get_tex_template_config(template)'), (40, '    return config[""compiler""], config[""preamble""]'), (76, '        message = f""Writing {(short_tex or latex)[:70]}...""'), (77, '    else:'), (78, '        message = """"'), (79, ''), (80, '    compiler, preamble = get_tex_config(template)'), (81, ''), (82, '    preamble = ""\\n"".join([preamble, additional_preamble])'), (83, '    full_tex = get_full_tex(latex, preamble)'), (84, '    return full_tex_to_svg(full_tex, compiler, message)'), (86, ''), (87, '@cache_on_disk'), (88, 'def full_tex_to_svg(full_tex: str, compiler: str = ""latex"", message: str = """"):'), (89, '    if message:'), (90, '        print(message, end=""\\r"")'), (101, '        tex_path = Path(temp_dir, ""working"").with_suffix("".tex"")'), (102, '        dvi_path = tex_path.with_suffix(dvi_ext)'), (105, '        tex_path.write_text(full_tex)'), (124, '            log_path = tex_path.with_suffix("".log"")'), (125, '            if log_path.exists():'), (126, '                content = log_path.read_text()'), (127, '                error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (128, '                if error_match:'), (129, '                    error_str = error_match.group()'), (147, '    if message:')], 'deleted': [(34, 'def get_tex_config(template: str = """") -> dict[str, str]:'), (36, '    Returns a dict which should look something like this:'), (37, '    {'), (38, '        ""template"": ""default"",'), (39, '        ""compiler"": ""latex"",'), (40, '        ""preamble"": ""...""'), (41, '    }'), (44, '    template_config = get_tex_template_config(template)'), (45, '    return {'), (46, '        ""template"": template,'), (47, '        ""compiler"": template_config[""compiler""],'), (48, '        ""preamble"": template_config[""preamble""]'), (49, '    }'), (63, '@cache_on_disk'), (86, '        max_message_len = 80'), (87, '        message = f""Writing {short_tex or latex}""'), (88, '        if len(message) > max_message_len:'), (89, '            message = message[:max_message_len - 3] + ""...""'), (90, '        print(message, end=""\\r"")'), (92, '    tex_config = get_tex_config(template)'), (93, '    compiler = tex_config[""compiler""]'), (102, '    preamble = tex_config[""preamble""] + ""\\n"" + additional_preamble'), (103, '    full_tex = get_full_tex(latex, preamble)'), (104, ''), (107, '        base_path = os.path.join(temp_dir, ""working"")'), (108, '        tex_path = base_path + "".tex""'), (109, '        dvi_path = base_path + dvi_ext'), (112, '        Path(tex_path).write_text(full_tex)'), (131, '            log_path = base_path + "".log""'), (132, '            if os.path.exists(log_path):'), (133, '                with open(log_path, ""r"", encoding=""utf-8"") as log_file:'), (134, '                    content = log_file.read()'), (135, '                    error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (136, '                    if error_match:'), (137, '                        error_str = error_match.group()'), (155, '    if show_message_during_execution:')]}",16,16
setup.cfg,setup.cfg,0c69ab6a32d4193f03ba9a604278eb3ce9699518,f427fc67df75513be0cd3f3329e327a9a19401c3,Update version number,"{'added': [(3, 'version = 1.7.2')], 'deleted': [(3, 'version = 1.7.1')]}",,
manimlib/constants.py,manimlib/constants.py,c13d2a946b1c2fc82596da3d2db251053aab32e9,0c69ab6a32d4193f03ba9a604278eb3ce9699518,fix typos (#2270),"{'added': [(65, 'DEGREES = DEG  # Many older animations use the full name')], 'deleted': [(65, 'DEGREES = DEG  # Many older animations use teh full name')]}",0,0
manimlib/default_config.yml,manimlib/default_config.yml,c13d2a946b1c2fc82596da3d2db251053aab32e9,0c69ab6a32d4193f03ba9a604278eb3ce9699518,fix typos (#2270),"{'added': [(16, '  # Manim may write to and read from the file system, e.g.'), (104, '  pan_3d: ""d""'), (105, '  pan: ""f""'), (106, '  reset: ""r""'), (107, '  quit: ""q"" # Together with command'), (108, '  select: ""s""'), (109, '  unselect: ""u""'), (110, '  grab: ""g""'), (111, '  x_grab: ""h""'), (112, '  y_grab: ""v""'), (113, '  resize: ""t""'), (114, '  color: ""c""'), (115, '  information: ""i""'), (116, '  cursor: ""k""')], 'deleted': [(16, '  # Manim may write to and read from teh file system, e.g.'), (104, ""  pan_3d: 'd'""), (105, ""  pan: 'f'""), (106, ""  reset: 'r'""), (107, ""  quit: 'q'  # Together with command""), (108, ""  select: 's'""), (109, ""  unselect: 'u'""), (110, ""  grab: 'g'""), (111, ""  x_grab: 'h'""), (112, ""  y_grab: 'v'""), (113, ""  resize: 't'""), (114, ""  color: 'c'""), (115, ""  information: 'i'""), (116, ""  cursor: 'k'"")]}",,
docs/source/getting_started/configuration.rst,docs/source/getting_started/configuration.rst,39fbb677dcc86fc32075249e66a3cbaba508aa7b,c13d2a946b1c2fc82596da3d2db251053aab32e9,"Have autoreload update shell namespace with reloaded module variables (#2278)

* Have autoreload update shell namespace with reloaded module variables

* Update comments","{'added': [(66, '``--autoreload``                                                  Automatically reload Python modules to pick up code changes across during an interactive embedding')], 'deleted': [(66, '``--autoreload``                                                  Automatically reload Python modules to pick up code changes across different files')]}",,
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,39fbb677dcc86fc32075249e66a3cbaba508aa7b,c13d2a946b1c2fc82596da3d2db251053aab32e9,"Have autoreload update shell namespace with reloaded module variables (#2278)

* Have autoreload update shell namespace with reloaded module variables

* Update comments","{'added': [(145, '        """"""Enables reload the shell\'s module before all calls""""""'), (146, '        def pre_cell_func(*args, **kwargs):'), (147, '            new_mod = ModuleLoader.get_module(self.shell.user_module.__file__, is_during_reload=True)'), (148, '            self.shell.user_ns.update(vars(new_mod))'), (149, ''), (150, '        self.shell.events.register(""pre_run_cell"", pre_cell_func)')], 'deleted': [(145, '        """"""Enables IPython autoreload for automatic reloading of modules.""""""'), (146, '        self.shell.magic(""load_ext autoreload"")'), (147, '        self.shell.magic(""autoreload all"")')]}",29,29
manimlib/mobject/changing.py,manimlib/mobject/changing.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","{'added': [(115, '        self.always.set_stroke(stroke_color, stroke_width)')], 'deleted': [(115, '        self.set_stroke(stroke_color, stroke_width)')]}",17,17
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","{'added': [(310, '    @affects_data'), (312, '        self.resize_points(len(mobject.data), resize_func=resize_preserving_order)'), (313, '        for key in self.pointlike_data_keys:'), (314, '            self.data[key][:] = mobject.data[key]'), (317, '    # Others related to points'), (318, ''), (848, '        self.update()')], 'deleted': [(310, '    # Others related to points'), (311, ''), (313, '        self.set_points(mobject.get_points())')]}",562,562
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","{'added': [(224, '        ),'), (225, '        **kwargs'), (232, '            **kwargs')], 'deleted': [(224, '        )')]}",35,35
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","{'added': [(11, 'from manimlib.utils.bezier import inverse_interpolate'), (15, 'from manimlib.utils.simple_functions import clip'), (101, '    def uv_to_point(self, u, v):'), (102, '        nu, nv = self.resolution'), (103, '        uv_grid = np.reshape(self.get_points(), (nu, nv, self.dim))'), (104, ''), (105, '        alpha1 = clip(inverse_interpolate(*self.u_range[:2], u), 0, 1)'), (106, '        alpha2 = clip(inverse_interpolate(*self.v_range[:2], v), 0, 1)'), (107, '        scaled_u = alpha1 * (nu - 1)'), (108, '        scaled_v = alpha2 * (nv - 1)'), (109, '        u_int = int(scaled_u)'), (110, '        v_int = int(scaled_v)'), (111, '        u_int_plus = min(u_int + 1, nu - 1)'), (112, '        v_int_plus = min(v_int + 1, nv - 1)'), (113, ''), (114, '        a = uv_grid[u_int, v_int, :]'), (115, '        b = uv_grid[u_int, v_int_plus, :]'), (116, '        c = uv_grid[u_int_plus, v_int, :]'), (117, '        d = uv_grid[u_int_plus, v_int_plus, :]'), (118, ''), (119, '        u_res = scaled_u % 1'), (120, '        v_res = scaled_v % 1'), (121, '        return interpolate('), (122, '            interpolate(a, b, v_res),'), (123, '            interpolate(c, d, v_res),'), (124, '            u_res'), (125, '        )'), (126, ''), (338, '    def set_opacity(self, opacity: float | Iterable[float], recurse=True) -> Self:')], 'deleted': [(310, '    def set_opacity(self, opacity: float | Iterable[float]) -> Self:')]}",42,42
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","{'added': [(51, 'def get_dist(vect1: VectN, vect2: VectN):'), (52, '    return get_norm(vect2 - vect1)'), (53, ''), (54, '')], 'deleted': []}",92,92
manimlib/utils/tex.py,manimlib/utils/tex.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","{'added': [(14, '        (?P<escaped_brace>\\\\[{}])|      # Escaped braces'), (15, '        (?P<cmd>\\\\[a-zA-Z!,-/:;<>]+)    # Regular commands'), (25, '        elif match.group(""escaped_brace""):'), (26, '            total += 1  # Count escaped brace as one symbol')], 'deleted': [(14, '        (?P<cmd>\\\\[a-zA-Z!,-/:;<>]+)   # Regular commands')]}",9,9
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","{'added': [(25, '        log.warning(f""Cannot recognize template {name}, falling back to \'default\'."")')], 'deleted': [(25, '        log.warning('), (26, '            ""Cannot recognize template \'%s\', falling back to \'default\'."",'), (27, '            name'), (28, '        )')]}",16,16
manimlib/default_config.yml,manimlib/default_config.yml,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(8, '# Alternatively, you can create it wherever you like, and on running'), (14, '  # source code generating that video'), (47, '  # position: (500, 500)  # Specific position, in pixel coordinates, for upper right corner')], 'deleted': [(8, '# Alternatively, you can create it whereever you like, and on running'), (14, '  # sourcecode generating that video'), (47, '  # position: (500, 500)  # Specific position, in pixel coordiantes, for upper right corner')]}",,
manimlib/extract_scene.py,manimlib/extract_scene.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(15, ''), (146, 'def insert_embed_line_to_module(module: Module, run_config: Dict) -> None:'), (154, '    line_number = run_config.embed_line'), (161, '    # When the user executes the `-e <line_number>` command'), (162, '    # without specifying scene_names, the nearest class name above'), (163, ""    # `<line_number>` will be automatically used as 'scene_names'.""), (164, ''), (165, '    if not run_config.scene_names:'), (166, '        classes = list(filter(lambda line: line.startswith(""class""), lines[:line_number]))'), (167, '        if classes:'), (168, '            from re import search'), (169, ''), (170, '            scene_name = search(r""(\\w+)\\("", classes[-1])'), (171, '            run_config.update(scene_names=[scene_name.group(1)])'), (172, '        else:'), (173, '            log.error(f""No \'class\' found above {line_number}!"")'), (174, ''), (181, 'def get_module(run_config: Dict) -> Module:'), (182, '    module = ModuleLoader.get_module(run_config.file_name, run_config.is_reload)'), (183, '    if run_config.embed_line:'), (184, '        insert_embed_line_to_module(module, run_config)'), (189, '    module = get_module(run_config)')], 'deleted': [(145, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (165, 'def get_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (166, '    module = ModuleLoader.get_module(file_name, is_reload)'), (167, '    if embed_line:'), (168, '        insert_embed_line_to_module(module, embed_line)'), (173, '    module = get_module(run_config.file_name, run_config.embed_line, run_config.is_reload)')]}",41,41
manimlib/mobject/probability.py,manimlib/mobject/probability.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(46, '            **kwargs')], 'deleted': []}",39,39
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [(125, '        labelled_file = self.get_svg_string_by_content(labelled_content)'), (126, '        labelled_submobs = super().mobjects_from_svg_string(labelled_file)')], 'deleted': [(125, '        labelled_file = self.get_file_path_by_content(labelled_content)'), (126, '        labelled_submobs = super().mobjects_from_file(labelled_file)')]}",129,129
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","{'added': [], 'deleted': [(179, '        if not isinstance(self, Text):'), (180, '            self.validate_markup_string(text)'), (181, '')]}",72,72
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,7a7bf83f117034b5cdf60ae85511c1b004769651,24eefef5bf185f7523799b5fcf71b4a90fca8c24,Only use -no-pdf for xelatex rendering (#2298),"{'added': [(108, '                *([\'-no-pdf\'] if compiler == ""xelatex"" else []),')], 'deleted': [(108, '                ""-no-pdf"",')]}",17,17
