old_file path,new_file path,commit SHA,parent commit SHA,commit message,diff_myers,diff_hist,Matches
manimlib/animation/composition.py,manimlib/animation/composition.py,4e90a77fcdb1a886078561d57fb169d8f552442f,7d1330fa68109b339920aa58b8ecb066c6fa1f09,Change type hint on LaggedStart to accept any functions outputting animations,"[(168, '        anim_func: Callable[[Mobject], Animation],'), (178, '            *(anim_func(submob, **anim_kwargs) for submob in group),')]","[(168, '        AnimationClass: type,'), (178, '            *(AnimationClass(submob, **anim_kwargs) for submob in group),')]",No
manimlib/window.py,manimlib/window.py,d1b1df64a546e7987bf5bc3822800436bdf10b97,4e90a77fcdb1a886078561d57fb169d8f552442f,"Ensure Window's scene always points back to window

Issues can arise in the few milliseconds of startup otherwise.","[(32, '        scene.window = self')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1844f7fd64157b2638b49704658506c2c0f9759a,66b78d01a9f16b67e99f3c93dc153c777cb58731,Fix for https://github.com/3b1b/manim/issues/1991,"[(547, '        if len(points) == 0:'), (548, '            return False'), (549, '        elif len(points) == 1:')]","[(547, '        if len(points) == 1:')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,0ce972991be01a59d9186071ac03230887160c82,41f0239e9d5a6868ebb3bb06a45d6527f8b2b4ea,Remove num_axis_pieces arg from ThreeDAxes,[],"[(511, '        num_axis_pieces: int = 20,'), (536, '        for axis in self.axes:'), (537, '            axis.insert_n_curves(num_axis_pieces - 1)')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,169e7a302b45c6887550c296f03b578ecf942a83,0ce972991be01a59d9186071ac03230887160c82,Give ThreeDAxes flat stroke by default,"[(511, '        flat_stroke: bool = False,'), (536, '        self.set_flat_stroke(flat_stroke)')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f2c07afe748fdb7b0734b43f7caf5d9bc0aacf72,169e7a302b45c6887550c296f03b578ecf942a83,add 'return self',"[(544, '        return self')]",[],No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,ded06c1f888b389c9d31769bda661300f4af3f64,f2c07afe748fdb7b0734b43f7caf5d9bc0aacf72,"Give SceneFileWriter an option for saturation, and set default to 1.7

The colors in a scene can look a little different in a preview window vs. in the rendered file written by ffmpeg. This is mean to bring them closer together.","[(52, '        saturation: float = 1.7'), (71, '        self.saturation = saturation'), (267, ""            '-vf', f'eq=saturation={self.saturation},vflip',"")]","[(265, ""            '-vf', 'vflip',"")]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,3e3e4de5e9d819658e9d9b39556f38d42b65208d,ded06c1f888b389c9d31769bda661300f4af3f64,Add option for gamma correction to SceneFileWriter,"[(52, '        saturation: float = 1.7,'), (53, '        gamma: float = 1.2,'), (73, '        self.gamma = gamma'), (269, ""            '-vf', f'vflip,eq=saturation={self.saturation}:gamma={self.gamma}',"")]","[(52, '        saturation: float = 1.7'), (267, ""            '-vf', f'eq=saturation={self.saturation},vflip',"")]",No
manimlib/animation/transform.py,manimlib/animation/transform.py,b39fbb62f41fa2f813ac44efb57e45427b306830,3e3e4de5e9d819658e9d9b39556f38d42b65208d,Ensure joint_products are refreshed for _AnimationBuilder,"[(66, '        self.mobject.align_data_and_family(self.target_copy)')]","[(66, '            self.mobject.align_data_and_family(self.target_copy)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b39fbb62f41fa2f813ac44efb57e45427b306830,3e3e4de5e9d819658e9d9b39556f38d42b65208d,Ensure joint_products are refreshed for _AnimationBuilder,"[(902, '            for mob in [self, vmobject]:'), (903, '                mob.get_joint_products()')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ad409999dcd06fae8d2c26bd5c40947133ae97af,b39fbb62f41fa2f813ac44efb57e45427b306830,Small tweak,"[(2181, '                ""Method chaining is currently not supported for "" + \\'), (2216, '                ""Animation arguments can only be passed by calling ``animate`` "" + \\')]","[(2181, '                ""Method chaining is currently not supported for ""'), (2216, '                ""Animation arguments can only be passed by calling ``animate`` ""')]",No
manimlib/mobject/mobject_update_utils.py,manimlib/mobject/mobject_update_utils.py,01c51dbc6d7bf66d380bddd0e82679442fd513f8,ad409999dcd06fae8d2c26bd5c40947133ae97af,animation.update_config -> animation.update_rate_info,"[(96, '    animation.update_rate_info(**kwargs)')]","[(96, '    animation.update_config(**kwargs)')]",No
manimlib/config.py,manimlib/config.py,557cb66c52d3cabe19a8013e5edfcd24f86231b8,01c51dbc6d7bf66d380bddd0e82679442fd513f8,Fix transparent background videos,"[(423, '        result[""pixel_format""] = \'\''), (428, '        result[""pixel_format""] = args.pix_fmt')]","[(427, '        result[""pix_fmt""] = args.pix_fmt')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,557cb66c52d3cabe19a8013e5edfcd24f86231b8,01c51dbc6d7bf66d380bddd0e82679442fd513f8,Fix transparent background videos,"[(261, ""        vf_arg = 'vflip'""), (262, '        if self.pixel_format.startswith(""yuv""):'), (263, ""            vf_arg += f',eq=saturation={self.saturation}:gamma={self.gamma}'""), (264, ''), (273, ""            '-vf', vf_arg,"")]","[(269, ""            '-vf', f'vflip,eq=saturation={self.saturation}:gamma={self.gamma}',"")]",No
manimlib/animation/movement.py,manimlib/animation/movement.py,576a26493e5c4d6e5a198630b37c5ad3eb11464c,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,Use quick_point_from_proportion in MoveAlongPath,"[(14, '    from manimlib.mobject.types.vectorized_mobject import VMobject'), (109, '        path: VMobject,'), (117, '        point = self.path.quick_point_from_proportion(alpha)')]","[(108, '        path: Mobject,'), (116, '        point = self.path.point_from_proportion(alpha)')]",No
manimlib/animation/composition.py,manimlib/animation/composition.py,dcb58c1f4fdc20b9832c43852b07604a774c7ac5,576a26493e5c4d6e5a198630b37c5ad3eb11464c,"Remove arg_creator arg from LaggedStartMap

Anything that enables is better done just with LaggedStart",[],"[(170, '        arg_creator: Callable[[Mobject], tuple] | None = None,')]",No
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,3a05352f73a2fc882af6d8e2badf285aa7b296db,dcb58c1f4fdc20b9832c43852b07604a774c7ac5,Add poly_line_length function,"[(64, 'def poly_line_length(points):'), (65, '    """"""'), (66, '    Return the sum of the lengths between adjacent points'), (67, '    """"""'), (68, '    diffs = points[1:] - points[:-1]'), (69, '    return np.sqrt((diffs**2).sum(1)).sum()'), (70, '')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,3a05352f73a2fc882af6d8e2badf285aa7b296db,Faster VMobject.get_arc_length,"[(20, 'from manimlib.utils.bezier import interpolate'), (42, 'from manimlib.utils.space_ops import poly_line_length'), (819, '        if n_sample_points is not None:'), (820, '            points = np.array(['), (821, '                self.quick_point_from_proportion(a)'), (822, '                for a in np.linspace(0, 1, n_sample_points)'), (823, '            ])'), (824, '            return poly_line_length(points)'), (825, '        points = self.get_points()'), (826, '        inner_len = poly_line_length(points[::2])'), (827, '        outer_len = poly_line_length(points)'), (828, '        return interpolate(inner_len, outer_len, 1 / 3)')]","[(817, '        if n_sample_points is None:'), (818, '            n_sample_points = 4 * self.get_num_curves() + 1'), (819, '        points = np.array(['), (820, '            self.point_from_proportion(a)'), (821, '            for a in np.linspace(0, 1, n_sample_points)'), (822, '        ])'), (823, '        diffs = points[1:] - points[:-1]'), (824, '        return sum(map(get_norm, diffs))')]",No
manimlib/shaders/true_dot/frag.glsl,manimlib/shaders/true_dot/frag.glsl,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,Make TrueDot shading in 3d work,"[(8, 'in vec3 point;'), (9, 'in vec3 to_cam;'), (10, 'in vec3 center;'), (11, 'in float radius;'), (12, 'in vec2 uv_coords;'), (20, '    float r = length(uv_coords.xy);'), (21, '    if(r > 1.0) discard;'), (30, '        vec3 point_3d = point + radius * sqrt(1 - r * r) * to_cam;'), (31, '        vec3 normal = normalize(point_3d - center);'), (32, '        frag_color = finalize_color(frag_color, point_3d, normal);')]","[(8, 'in vec3 v_point;'), (16, '    vec2 vect = 2.0 * gl_PointCoord.xy - vec2(1.0);'), (17, '    float r = length(vect);'), (18, '    if(r > 1.0 + scaled_aaw) discard;'), (27, '        vec3 normal = vec3(vect, sqrt(1 - r * r));'), (28, '        normal = (perspective * vec4(normal, 0.0)).xyz;'), (29, '        frag_color = finalize_color(frag_color, v_point, normal);')]",No
N/A,manimlib/shaders/true_dot/geom.glsl,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,Make TrueDot shading in 3d work,"[(1, '#version 330'), (2, ''), (3, 'layout (points) in;'), (4, 'layout (triangle_strip, max_vertices = 4) out;'), (5, ''), (6, 'uniform float pixel_size;'), (7, 'uniform float anti_alias_width;'), (8, 'uniform float frame_scale;'), (9, 'uniform vec3 camera_position;'), (10, ''), (11, 'in vec3 v_point[1];'), (12, 'in float v_radius[1];'), (13, 'in vec4 v_rgba[1];'), (14, ''), (15, 'out vec4 color;'), (16, 'out float scaled_aaw;'), (17, 'out vec3 point;'), (18, 'out vec3 to_cam;'), (19, 'out vec3 center;'), (20, 'out float radius;'), (21, 'out vec2 uv_coords;'), (22, ''), (23, '#INSERT emit_gl_Position.glsl'), (24, ''), (25, 'void main(){'), (26, '    color = v_rgba[0];'), (27, '    radius = v_radius[0];'), (28, '    center = v_point[0];'), (29, '    scaled_aaw = (anti_alias_width * pixel_size) / v_radius[0];'), (30, ''), (31, '    to_cam = normalize(camera_position - v_point[0]);'), (32, '    vec3 right = v_radius[0] * normalize(cross(vec3(0, 1, 1), to_cam));'), (33, '    vec3 up = v_radius[0] * normalize(cross(to_cam, right));'), (34, ''), (35, '    for(int i = -1; i < 2; i += 2){'), (36, '        for(int j = -1; j < 2; j += 2){'), (37, '            point = v_point[0] + i * right + j * up;'), (38, '            uv_coords = vec2(i, j);'), (39, '            emit_gl_Position(point);'), (40, '            EmitVertex();'), (41, '        }'), (42, '    }'), (43, '    EndPrimitive();'), (44, '}')]",[],No
manimlib/shaders/true_dot/vert.glsl,manimlib/shaders/true_dot/vert.glsl,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,c372ef4aaa77925a887b4b086d32feab0b0ff7d9,Make TrueDot shading in 3d work,"[(8, 'out float v_radius;'), (9, 'out vec4 v_rgba;'), (14, '    v_radius = radius;'), (15, '    v_rgba = rgba;')]","[(3, 'uniform float pixel_size;'), (4, 'uniform float anti_alias_width;'), (5, ''), (10, 'out vec4 color;'), (11, 'out float scaled_aaw;'), (13, 'out vec3 light_pos;'), (15, '#INSERT emit_gl_Position.glsl'), (19, '    color = rgba;'), (20, '    scaled_aaw = (anti_alias_width * pixel_size) / radius;'), (21, ''), (22, '    emit_gl_Position(point);'), (23, '    float z = -10 * gl_Position.z;'), (24, '    float scaled_radius = radius * 1.0 / (1.0 - z);'), (25, '    gl_PointSize = 2 * ((scaled_radius / pixel_size) + anti_alias_width);')]",No
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,a79d4a862f016e82d234d28eccd0510804f882f8,3f2d15986a18d8964bbe714d3f7fa1cf8bfca334,Keep track of dots in DieFace,"[(625, '        self.dots = arrangement')]",[],No
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,1eb819363d1e17c79df52d25bec752c1975387a7,a79d4a862f016e82d234d28eccd0510804f882f8,Fix issue with ticks going beyond number line,"[(97, '        result = np.arange(self.x_min, x_max, self.x_step)'), (98, '        return result[result <= self.x_max]')]","[(97, '        return np.arange(self.x_min, x_max, self.x_step)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b216b8f7e399fd8f2adeffd421a787e5ed0a879f,1eb819363d1e17c79df52d25bec752c1975387a7,Reset default in set_style to stroke_background = False,"[(239, '        stroke_background: bool = False,')]","[(239, '        stroke_background: bool = True,')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,6d0b58659732976e2e78709ac4bbe77439a82a90,b216b8f7e399fd8f2adeffd421a787e5ed0a879f,Prevent index out of range error for ShowSubmobjectsOneByOne,"[(15, 'from manimlib.utils.simple_functions import clip'), (210, '        index = int(clip(index, 0, len(self.all_submobs) - 1))')]","[(209, '        # N = len(self.all_submobs)')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,392019fc6ea33700d97cd6c81133e1e3bc60fdf4,6d0b58659732976e2e78709ac4bbe77439a82a90,Specify type in bind_to_graph,"[(242, '        func: Callable[[VectN], VectN],')]","[(242, '        func: Callable[[Vect3], Vect3],')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,b644bb51de5b06b564995ae456bc6b0bd95ced52,392019fc6ea33700d97cd6c81133e1e3bc60fdf4,Update submobjects before parents,"[(793, '        if recurse:'), (794, '            for submob in self.submobjects:'), (795, '                submob.update(dt, recurse)')]","[(797, '        if recurse:'), (798, '            for submob in self.submobjects:'), (799, '                submob.update(dt, recurse)')]",No
manimlib/utils/tex.py,manimlib/utils/tex.py,d1e2a7a157a7ea5076cd4ab3c6167ba749e51507,b644bb51de5b06b564995ae456bc6b0bd95ced52,Make sure \text{...} is counted correctly in num_tex_symbols,"[(19, '        for s in [""begin"", ""end"", ""phantom""]')]","[(19, '        for s in [""begin"", ""end"", ""phantom"", ""text""]')]",No
manimlib/utils/tex_to_symbol_count.py,manimlib/utils/tex_to_symbol_count.py,80fb1a98a92fe2ff9dc875a3ccc1a642a1fcb987,d1e2a7a157a7ea5076cd4ab3c6167ba749e51507,Add \text to TEX_TO_SYMBOL_COUNT,"[(163, '    R""\\text"": 0,')]",[],No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,0d415036a93ed15b60c223f0ec8d4c3067bc08af,80fb1a98a92fe2ff9dc875a3ccc1a642a1fcb987,Ensure exact integers are displays for large values in Integer,"[(101, '        if self.num_decimal_places == 0 and isinstance(number, float):'), (102, '            number = int(number)'), (154, '            f"".{ndp}f"" if ndp > 0 else ""d"",')]","[(152, '            f"".{ndp}f"",')]",No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,6b24860bbfa3f46d6363c51e068f6726f2e756bb,0d415036a93ed15b60c223f0ec8d4c3067bc08af,Tweak default configuration for Underline,"[(113, '        stretch_factor=1.2,'), (123, '        self.set_stroke(stroke_color, stroke_width)'), (124, '        self.set_width(mobject.get_width() * stretch_factor)')]","[(122, '        self.match_width(mobject)')]",No
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,de8e9e5ec1f2c8b43ba536f8c72ea8625a58ae11,6b24860bbfa3f46d6363c51e068f6726f2e756bb,Fix error with setting bubble direction,"[(361, '        self.direction = LEFT  # Possibly updated below by self.flip()'), (383, '        self.content = VMobject()'), (406, '    def pin_to(self, mobject, auto_flip=False):'), (409, '        if want_to_flip and auto_flip:')]","[(361, '        self.direction = direction'), (383, '        self.content = Mobject()'), (406, '    def pin_to(self, mobject):'), (409, '        if want_to_flip:')]",No
manimlib/utils/bezier.py,manimlib/utils/bezier.py,3b2904b4c7b27e11963df1a6def6d06f49670a30,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,Correction of indices,"[(216, '        return np.array([anchors[0], anchors.mean(0), anchors[1]])')]","[(216, '        return np.array([anchors[0], anchors.mean(1), anchors[2]])')]",No
docs/source/getting_started/installation.rst,docs/source/getting_started/installation.rst,71ab276e057cb6c64f136084c316415797ee6618,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,"Update installation.rst added FFmpeg install

Added how to install ffmpeg","[(14, 'Install FFmpeg'), (15, '--------------'), (16, ''), (17, ''), (18, ''), (19, 'Install FFmpeg Windows'), (20, '------------------------'), (21, '.. code-block:: cmd'), (22, ''), (23, '   choco install ffmpeg'), (24, ''), (25, ''), (26, '# Install FFmepeg Linux'), (27, '----------------------------'), (28, '.. code-block:: sh'), (29, ''), (30, '   $ sudo apt update'), (31, '   $ sudo apt install ffmpeg'), (32, '   $ ffmpeg -version'), (33, ''), (34, '# Install FFmpeg MacOS'), (35, '----------------------------'), (36, '- Download This ZIP file `https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-full.7z`(if the link is not working download this zip file from there original website)'), (37, ''), (38, ''), (39, '')]",[],No
manimlib/animation/indication.py,manimlib/animation/indication.py,f33b8d1d2f9d37e51eff4ec113373f0c3948d17d,de8e9e5ec1f2c8b43ba536f8c72ea8625a58ae11,Add stretch_factor in FlashUnder Underline,"[(281, '        return Underline(mobject, buff=buff, stretch_factor=1.0)')]","[(281, '        return Underline(mobject, buff=buff)')]",No
manimlib/animation/indication.py,manimlib/animation/indication.py,5d9a7f49e638a43823966b80efb0fb85ffc9fa7f,f33b8d1d2f9d37e51eff4ec113373f0c3948d17d,Add taper_width argument to FlashAround,"[(261, '        taper_width: float = 0.0,'), (274, '        super().__init__(path, time_width=time_width, taper_width=taper_width, **kwargs)')]","[(273, '        super().__init__(path, time_width=time_width, **kwargs)')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,16f5890fd3c18a1e4594345b9d8b6b972c96b3ed,5d9a7f49e638a43823966b80efb0fb85ffc9fa7f,"Add CoordianteSystem.get_area_under_graph

This is not perfect, since one could optionally add a different color for negative area.","[(25, 'from manimlib.utils.bezier import inverse_interpolate'), (402, '    def get_area_under_graph(self, graph, x_range, fill_color=BLUE, fill_opacity=0.5):'), (403, '        if not hasattr(graph, ""x_range""):'), (404, '            raise Exception(""Argument `graph` must have attribute `x_range`"")'), (405, ''), (406, '        alpha_bounds = ['), (407, '            inverse_interpolate(*graph.x_range, x)'), (408, '            for x in x_range'), (409, '        ]'), (410, '        sub_graph = graph.copy()'), (411, '        sub_graph.pointwise_become_partial(graph, *alpha_bounds)'), (412, '        sub_graph.add_line_to(self.c2p(x_range[1], 0))'), (413, '        sub_graph.add_line_to(self.c2p(x_range[0], 0))'), (414, '        sub_graph.add_line_to(sub_graph.get_start())'), (415, ''), (416, '        sub_graph.set_stroke(width=0)'), (417, '        sub_graph.set_fill(fill_color, fill_opacity)'), (418, ''), (419, '        return sub_graph')]","[(401, '    def get_area_under_graph(self, graph, x_range, fill_color=BLUE, fill_opacity=1):'), (402, '        # TODO'), (403, '        pass')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,ce7422f8af888827229de9f72255bdd115102b88,16f5890fd3c18a1e4594345b9d8b6b972c96b3ed,Add ThreeDAxes.get_graph and .get_parametric_surface,"[(568, '    def get_graph('), (569, '        self,'), (570, '        func,'), (571, '        color=BLUE_E,'), (572, '        opacity=0.9,'), (573, '        u_range=None,'), (574, '        v_range=None,'), (575, '        **kwargs'), (576, '    ) -> ParametricSurface:'), (581, '        u_range = u_range or self.x_range[:2]'), (582, '        v_range = v_range or self.y_range[:2]'), (585, '            u_range=u_range,'), (586, '            v_range=v_range,'), (592, '    def get_parametric_surface('), (593, '        self,'), (594, '        func,'), (595, '        color=BLUE_E,'), (596, '        opacity=0.9,'), (597, '        **kwargs'), (598, '    ) -> ParametricSurface:'), (599, '        surface = ParametricSurface(func, color=color, opacity=opacity, **kwargs)'), (600, '        xu = self.x_axis.get_unit_size()'), (601, '        yu = self.y_axis.get_unit_size()'), (602, '        zu = self.z_axis.get_unit_size()'), (603, '        axes = [self.x_axis, self.y_axis, self.z_axis]'), (604, '        for dim, axis in zip(range(3), axes):'), (605, '            surface.stretch(axis.get_unit_size(), dim, about_point=ORIGIN)'), (606, '        surface.shift(self.get_origin())'), (607, '        return surface'), (608, '')]","[(568, '    def get_graph(self, func, color=BLUE_E, opacity=0.9, **kwargs):'), (575, '            u_range=self.x_range[:2],'), (576, '            v_range=self.y_range[:2],')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,fa1080d59a0717a98bc3892a50d04e57050cb43c,ce7422f8af888827229de9f72255bdd115102b88,Be sure reverse_points changes data in place,"[(227, '            mob.data[:] = mob.data[::-1]')]","[(227, '            mob.data = mob.data[::-1]')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f01b990c2ea19eeca9ab1fce38cf8f05ce399da5,fa1080d59a0717a98bc3892a50d04e57050cb43c,Add default Mobject.match_style,"[(1601, '    def match_style(self, mobject: Mobject) -> Self:'), (1602, '        self.set_color(mobject.get_color())'), (1603, '        self.set_opacity(mobject.get_opacity())'), (1604, '        self.set_shading(*mobject.get_shading())'), (1605, '        return self'), (1606, '')]",[],No
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,63f6e9d84ff5685e78dc923e401ac980202263cb,f01b990c2ea19eeca9ab1fce38cf8f05ce399da5,Add Dartboard,"[(4, 'import itertools as it'), (18, 'from manimlib.constants import GREEN_E'), (31, 'from manimlib.constants import RED_E'), (42, 'from manimlib.constants import TAU'), (51, 'from manimlib.mobject.geometry import AnnularSector'), (597, '        dot_color: ManimColor = WHITE,'), (632, ''), (633, ''), (634, 'class Dartboard(VGroup):'), (635, '    radius = 3'), (636, '    n_sectors = 20'), (637, ''), (638, '    def __init__(self, **kwargs):'), (639, '        super().__init__(**kwargs)'), (640, '        n_sectors = self.n_sectors'), (641, '        angle = TAU / n_sectors'), (642, ''), (643, '        segments = VGroup(*['), (644, '            VGroup(*['), (645, '                AnnularSector('), (646, '                    inner_radius=in_r,'), (647, '                    outer_radius=out_r,'), (648, '                    start_angle=n * angle,'), (649, '                    angle=angle,'), (650, '                    fill_color=color,'), (651, '                )'), (652, '                for n, color in zip('), (653, '                    range(n_sectors),'), (654, '                    it.cycle(colors)'), (655, '                )'), (656, '            ])'), (657, '            for colors, in_r, out_r in ['), (658, '                ([GREY_B, GREY_E], 0, 1),'), (659, '                ([GREEN_E, RED_E], 0.5, 0.55),'), (660, '                ([GREEN_E, RED_E], 0.95, 1),'), (661, '            ]'), (662, '        ])'), (663, '        segments.rotate(-angle / 2)'), (664, '        bullseyes = VGroup(*['), (665, '            Circle(radius=r)'), (666, '            for r in [0.07, 0.035]'), (667, '        ])'), (668, '        bullseyes.set_fill(opacity=1)'), (669, '        bullseyes.set_stroke(width=0)'), (670, '        bullseyes[0].set_color(GREEN_E)'), (671, '        bullseyes[1].set_color(RED_E)'), (672, ''), (673, '        self.bullseye = bullseyes[1]'), (674, '        self.add(*segments, *bullseyes)'), (675, '        self.scale(self.radius)')]","[(582, ''), (593, '        dot_color: ManimColor = BLUE_B,')]",No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,bae3b98c0bd4a718f552ca2e46f8a6f0c2678e48,63f6e9d84ff5685e78dc923e401ac980202263cb,Fixes to Surface,"[(133, '        if len(indices) == 0:'), (134, '            return np.zeros((3, 0))'), (136, '        left = indices - 1'), (138, '        up = indices - nv'), (139, '        down = indices + nv'), (171, ""            smobject.data['point'], a, b,""), (188, '        points = points.reshape(resolution).copy()')]","[(134, '        left  = indices - 1'), (136, '        up    = indices - nv'), (137, '        down  = indices + nv'), (169, ""            self.data['point'], a, b,""), (186, '        points = points.reshape(resolution)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,6f8ea7433d72ea38ac379c5d663ca61d17c36264,bae3b98c0bd4a718f552ca2e46f8a6f0c2678e48,Small formatting tweaks,"[(428, '        recurse: bool = True'), (439, '        recurse: bool = True')]","[(428, '        recurse: bool=True'), (439, '        recurse: bool=True')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3e641119526b079d667ee21830b58710ae7e5016,6f8ea7433d72ea38ac379c5d663ca61d17c36264,Change default on VMobject to no depth test,"[(441, '        super().deactivate_depth_test(recurse)')]","[(441, '        super().apply_depth_test(recurse)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,cb02066f22a12f2c2a95e89d29c25936e384329c,3e641119526b079d667ee21830b58710ae7e5016,"Add always_depth_test option to ThreeDScene, default to true","[(1024, '    always_depth_test = True'), (1028, '            if set_depth_test and not mob.is_fixed_in_frame() and self.always_depth_test:')]","[(1027, '            if set_depth_test and not mob.is_fixed_in_frame():')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,162fd4a92be68018eea9434d3e1644cc3266c70e,cb02066f22a12f2c2a95e89d29c25936e384329c,"Change defaults for where videos are saved

Save them directly to the relevant output directory, rather than to a ""videos"" subdirectory within it.","[(45, '        subdirectory_for_videos: bool = False,'), (67, '        self.subdirectory_for_videos = subdirectory_for_videos'), (93, '            if self.subdirectory_for_videos:'), (94, '                movie_dir = guarantee_existence(os.path.join(out_dir, ""videos""))'), (95, '            else:'), (96, '                movie_dir = guarantee_existence(out_dir)')]","[(91, '            movie_dir = guarantee_existence(os.path.join(out_dir, ""videos""))')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,0609c1bfa85295d94f4f45200d644a72315a9f42,162fd4a92be68018eea9434d3e1644cc3266c70e,Change default saturation and gamma to each be 1,"[(53, '        saturation: float = 1.0,'), (54, '        gamma: float = 1.0,')]","[(53, '        saturation: float = 1.7,'), (54, '        gamma: float = 1.2,')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,21d20541b5167c0ec73c66e942fbb9c37bbe74c7,0609c1bfa85295d94f4f45200d644a72315a9f42,Add texture_names_to_ids to ShaderWrapper,"[(59, '        self.texture_names_to_ids = dict()'), (86, '        self.texture_names_to_ids = {'), (227, '        for uniforms in [self.mobject_uniforms, camera_uniforms, self.texture_names_to_ids]:'), (228, '            for name, value in uniforms.items():'), (229, '                set_program_uniform(self.program, name, value)')]","[(85, '        names_to_ids = {'), (89, '        self.update_program_uniforms(names_to_ids)'), (227, '        for name, value in (*self.mobject_uniforms.items(), *camera_uniforms.items()):'), (228, '            set_program_uniform(self.program, name, value)')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,4f42ebeb4f7ecb6b2a45319e290f4aa33373400e,21d20541b5167c0ec73c66e942fbb9c37bbe74c7,Small formatting tweaks,"[(59, ') -> moderngl.Program:'), (77, '')]","[(59, '    ) -> moderngl.Program:'), (77, ''), (137, '')]",No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,7ff45b46378fd6a364cddbbd940b940f0b1fc45b,4f42ebeb4f7ecb6b2a45319e290f4aa33373400e,Having changing decimal match fixed_in_frame status,"[(174, '        self.fix_in_frame(self._is_fixed_in_frame)')]",[],No
manimlib/animation/animation.py,manimlib/animation/animation.py,c65b7242e43df4720cf803ef5ab5b127b9b72766,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,Remove duplicate items,"[(122, '        items = list(filter('), (126, '        items = list(set(items))'), (127, '        return items')]","[(122, '        return list(filter(')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,7954ba14ef2fbd90f68e501ee833e2530ea082b1,7ff45b46378fd6a364cddbbd940b940f0b1fc45b,Use rate_function appropriately in ShowIncreasingSubsets,"[(193, '        alpha = self.rate_func(alpha)')]",[],No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,2337be2318b1a28e0dd6a94266979271cd76d70a,7954ba14ef2fbd90f68e501ee833e2530ea082b1,Remove num_sampled_graph_points_per_tick in Axes __init__,"[(440, '        kwargs.pop(""num_sampled_graph_points_per_tick"", None)')]",[],No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,ddf2f7d9bd72faabd6c66b6fc23f944bae838eed,2337be2318b1a28e0dd6a94266979271cd76d70a,Fix typo,"[(539, '                kwargs.get(""axis_config"", {}),')]","[(539, '                kwargs.get(""axes_config"", {}),')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,fc522e5278bf3f7b56c170962d7c85f9ff13a52f,ddf2f7d9bd72faabd6c66b6fc23f944bae838eed,Change width_to_tip_len -> tip_len_to_width,"[(676, '        tip_len_to_width: float = 0.0075,'), (682, '        self.tip_len_to_width = tip_len_to_width'), (709, '        tip_len = self.get_stroke_width() * self.tip_width_ratio * self.tip_len_to_width')]","[(676, '        width_to_tip_len: float = 0.0075,'), (682, '        self.width_to_tip_len = width_to_tip_len'), (708, '        tip_len = self.get_stroke_width() * self.width_to_tip_len * self.tip_width_ratio')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,d21b05ae0d5ffd373d7ee72ab892589f6b26afed,fc522e5278bf3f7b56c170962d7c85f9ff13a52f,Arrow fix,"[(709, '        if tip_len >= self.max_tip_length_to_length_ratio * arc_len or arc_len == 0:')]","[(708, '        if tip_len >= self.max_tip_length_to_length_ratio * arc_len:')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,4be7f611ec424ab9cf57651cde3ff04c3085c787,d21b05ae0d5ffd373d7ee72ab892589f6b26afed,Fix issues with stroke opacities passed as numpy arrays,"[(1337, '                if not isinstance(opacity, (float, int)):')]","[(1337, '                if isinstance(opacity, list):')]",No
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,f2ad9a70f7c6af3cf28cb6b50dad358b9e645b19,4be7f611ec424ab9cf57651cde3ff04c3085c787,Small format fix,"[(25, '')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,eafd09549df2ae74d78492ca353b04589cdd3c3e,f2ad9a70f7c6af3cf28cb6b50dad358b9e645b19,Handle make_jagged for empty VMobjects,"[(460, '        if len(anchors) == 0:'), (461, '            self.clear_points()'), (462, '            return self'), (650, '        if self.get_num_points() == 0:'), (651, '            return self')]",[],No
manimlib/utils/iterables.py,manimlib/utils/iterables.py,c8cf83eedf90fae385ae63b9d0b722913015c15e,eafd09549df2ae74d78492ca353b04589cdd3c3e,Add cartesian_product,"[(139, 'def cartesian_product(*arrays: np.ndarray):'), (140, '    """"""'), (141, '    Copied from https://stackoverflow.com/a/11146645'), (142, '    """"""'), (143, '    la = len(arrays)'), (144, '    dtype = np.result_type(*arrays)'), (145, '    arr = np.empty([len(a) for a in arrays] + [la], dtype=dtype)'), (146, '    for i, a in enumerate(np.ix_(*arrays)):'), (147, '        arr[..., i] = a'), (148, '    return arr.reshape(-1, la)'), (149, ''), (150, '')]",[],No
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,13d4ab1eb079ef2c278da8a7d382a88324853ab3,c8cf83eedf90fae385ae63b9d0b722913015c15e,Stylistic change,"[(209, '    return array / norms[:, np.newaxis]')]","[(209, '    return (array.T / norms).T')]",No
manimlib/utils/tex_to_symbol_count.py,manimlib/utils/tex_to_symbol_count.py,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,13d4ab1eb079ef2c278da8a7d382a88324853ab3,Add \dots and \mathds to tex_to_symbol_count,"[(52, '    R""\\dots"": 3,'), (106, '    R""\\mathds"": 0,')]",[],No
manimlib/config.py,manimlib/config.py,65e7943ff7582d64fdc5b012f05e5679c3d6e248,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix aspect_ratio other than 16:9 issue,"[(475, '            ""frame_shape"": ((width / height) * get_frame_height(), get_frame_height()),'), (522, ''), (523, 'def get_frame_height():'), (524, '    return 8.0'), (525, ''), (526, 'def get_aspect_ratio():'), (527, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (528, ""    return cam_config['pixel_width'] / cam_config['pixel_height']""), (529, ''), (530, 'def get_default_pixel_width():'), (531, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (532, ""    return cam_config['pixel_width']""), (533, ''), (534, 'def get_default_pixel_height():'), (535, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (536, ""    return cam_config['pixel_height']"")]","[(16, 'from manimlib.constants import FRAME_HEIGHT'), (476, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),')]",No
manimlib/constants.py,manimlib/constants.py,65e7943ff7582d64fdc5b012f05e5679c3d6e248,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix aspect_ratio other than 16:9 issue,"[(4, 'from manimlib.config import get_aspect_ratio,get_default_pixel_width,get_default_pixel_height,get_frame_height'), (5, ''), (13, 'ASPECT_RATIO: float = get_aspect_ratio()'), (14, 'FRAME_HEIGHT: float = get_frame_height()'), (20, 'DEFAULT_PIXEL_HEIGHT: int = get_default_pixel_height()'), (21, 'DEFAULT_PIXEL_WIDTH: int = get_default_pixel_width()')]","[(11, 'ASPECT_RATIO: float = 16.0 / 9.0'), (12, 'FRAME_HEIGHT: float = 8.0'), (18, 'DEFAULT_PIXEL_HEIGHT: int = 1080'), (19, 'DEFAULT_PIXEL_WIDTH: int = 1920')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,65e7943ff7582d64fdc5b012f05e5679c3d6e248,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix aspect_ratio other than 16:9 issue,"[(12, 'from manimlib.constants import ASPECT_RATIO'), (116, ''), (117, '        result = re.sub(r""\\s+ASPECT_RATIO\\s+=\\s+[\\s0-9/.]+"", f"" ASPECT_RATIO = {ASPECT_RATIO}"", result)')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,0b5e9d4a8bda88a9ccd69477e3d80b5512c61160,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,add zorder to mobject,"[(86, '        zorder: int = 0,'), (94, '        self.zorder = zorder'), (95, '        self._scene_order = 0')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,0b5e9d4a8bda88a9ccd69477e3d80b5512c61160,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,add zorder to mobject,"[(417, '        idx = 0'), (418, '        scene_order = len(self.mobjects)'), (419, '        for m in new_mobjects:'), (420, '            m._scene_order = scene_order+idx'), (421, '            idx += 1'), (423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.zorder,m._scene_order))')]",[],No
manimlib/animation/indication.py,manimlib/animation/indication.py,f0a61beaf5e844f6478b2eade8fc8e95d3f1d81b,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,fix VShowPassingFlash index out of bounds issue,"[(247, '        if len(widths * gaussian) !=0:'), (248, '            submobject.set_stroke(width=widths * gaussian)')]","[(247, '        submobject.set_stroke(width=widths * gaussian)')]",No
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,72780959212f3071ea92b199a75647d55ad6f04d,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,"Change ImageMobject rendering mode to TRIANGLES

And add vertices","[(5, 'from moderngl import TRIANGLES'), (28, '    render_primitive: int = TRIANGLES'), (42, '        super().init_data(length=6)'), (43, '        self.data[""point""][:] = [UL, DL, UR, DR, UR, DL]'), (44, '        self.data[""im_coords""][:] = [(0, 0), (0, 1), (1, 0), (1, 1), (1, 0), (0, 1)]')]","[(40, '        super().init_data(length=4)'), (41, '        self.data[""point""][:] = [UL, DL, UR, DR]'), (42, '        self.data[""im_coords""][:] = [(0, 0), (0, 1), (1, 0), (1, 1)]')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,Add surround method for Rectangles and SurroundingRectangles,"[(10, 'from manimlib.constants import MED_SMALL_BUFF, SMALL_BUFF'), (1049, '    def surround(self, mobject, buff=SMALL_BUFF) -> Self:'), (1050, '        target_shape = np.array(mobject.get_shape()) + 2 * buff'), (1051, '        self.set_shape(*target_shape)'), (1052, '        self.move_to(mobject)'), (1053, '        return self'), (1054, '')]","[(10, 'from manimlib.constants import MED_SMALL_BUFF')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,Add surround method for Rectangles and SurroundingRectangles,"[(1543, '    def get_shape(self) -> Tuple[float]:'), (1544, '        return tuple(self.length_over_dim(dim) for dim in range(3))'), (1545, '')]",[],No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,fa798a2018065de4a0ad80e4c5532c1ed41c2d14,Add surround method for Rectangles and SurroundingRectangles,"[(30, '        super().__init__(color=color, **kwargs)'), (31, '        self.buff = buff'), (32, '        self.surround(mobject)'), (33, ''), (34, '    def surround(self, mobject, buff=None) -> Self:'), (35, '        self.mobject = mobject'), (36, '        self.buff = buff if buff is not None else self.buff'), (37, '        super().surround(mobject, self.buff)'), (38, '        return self'), (39, ''), (40, '    def set_buff(self, buff) -> Self:'), (41, '        self.buff = buff'), (42, '        self.surround(self.mobject)'), (43, '        return self')]","[(30, '        super().__init__('), (31, '            width=mobject.get_width() + 2 * buff,'), (32, '            height=mobject.get_height() + 2 * buff,'), (33, '            color=color,'), (34, '            **kwargs'), (35, '        )'), (36, '        self.move_to(mobject)')]",No
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,0a642133ad73ccc87f32c4bbdc07ead6746f270c,87e4a71ca3d747acdecbfbaf22b41e49dfb47e34,Add scale_radii method for DotCloud,"[(120, '    def scale_radii(self, scale_factor: float) -> Self:'), (121, '        self.set_radius(scale_factor * self.get_radii())'), (122, '        return self'), (123, '')]",[],No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,60a4f0e167852ce3aaed9ae9668b26a73125d187,0a642133ad73ccc87f32c4bbdc07ead6746f270c,Factor out Arc.create_quadratic_bezier_points to quadratic_bezier_points_for_arc,"[(16, 'from manimlib.utils.bezier import quadratic_bezier_points_for_arc'), (30, 'from manimlib.utils.space_ops import rotation_about_z'), (218, '        self.set_points(quadratic_bezier_points_for_arc(angle, n_components))'), (219, '        self.rotate(start_angle, about_point=ORIGIN)'), (436, '        outer_path = outer_radius * quadratic_bezier_points_for_arc(TAU)'), (437, '        inner_path = inner_radius * quadratic_bezier_points_for_arc(-TAU)'), (478, '            raw_arc_points = quadratic_bezier_points_for_arc(path_arc - 2 * buff / radius)'), (479, '            rot_matrix = rotation_about_z(angle_of_vector(start - center) + buff / radius)'), (480, '            raw_arc_points = raw_arc_points @ rot_matrix.T'), (804, '            points1 = quadratic_bezier_points_for_arc(path_arc)')]","[(216, '        self.set_points(Arc.create_quadratic_bezier_points('), (217, '            angle=angle,'), (218, '            start_angle=start_angle,'), (219, '            n_components=n_components'), (220, '        ))'), (224, '    @staticmethod'), (225, '    def create_quadratic_bezier_points('), (226, '        angle: float,'), (227, '        start_angle: float = 0,'), (228, '        n_components: int = 8'), (229, '    ) -> Vect3Array:'), (230, '        n_points = 2 * n_components + 1'), (231, '        angles = np.linspace(start_angle, start_angle + angle, n_points)'), (232, '        points = np.array([np.cos(angles), np.sin(angles), np.zeros(n_points)]).T'), (233, '        # Adjust handles'), (234, '        theta = angle / n_components'), (235, '        points[1::2] /= np.cos(theta / 2)'), (236, '        return points'), (237, ''), (451, '        outer_path = outer_radius * Arc.create_quadratic_bezier_points(TAU, 0)'), (452, '        inner_path = inner_radius * Arc.create_quadratic_bezier_points(-TAU, 0)'), (493, '            raw_arc_points = Arc.create_quadratic_bezier_points('), (494, '                angle=path_arc - 2 * buff / radius,'), (495, '                start_angle=angle_of_vector(start - center) + buff / radius,'), (496, '            )'), (820, '            points1 = Arc.create_quadratic_bezier_points(path_arc)')]",No
manimlib/utils/bezier.py,manimlib/utils/bezier.py,60a4f0e167852ce3aaed9ae9668b26a73125d187,0a642133ad73ccc87f32c4bbdc07ead6746f270c,Factor out Arc.create_quadratic_bezier_points to quadratic_bezier_points_for_arc,"[(174, 'def quadratic_bezier_points_for_arc(angle: float, n_components: int = 8):'), (175, '    n_points = 2 * n_components + 1'), (176, '    angles = np.linspace(0, angle, n_points)'), (177, '    points = np.array([np.cos(angles), np.sin(angles), np.zeros(n_points)]).T'), (178, '    # Adjust handles'), (179, '    theta = angle / n_components'), (180, '    points[1::2] /= np.cos(theta / 2)'), (181, '    return points'), (182, ''), (183, '')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,690eb24562b77953b17f86102878ed54fc779fd4,60a4f0e167852ce3aaed9ae9668b26a73125d187,Add VMobject.add_arc_to method,"[(25, 'from manimlib.utils.bezier import partial_quadratic_bezier_points'), (26, 'from manimlib.utils.bezier import quadratic_bezier_points_for_arc'), (43, 'from manimlib.utils.space_ops import rotation_between_vectors'), (553, '    def add_arc_to(self, point: Vect3, angle: float, n_components: int = 8) -> Self:'), (554, '        self.throw_error_if_no_points()'), (555, '        arc_points = quadratic_bezier_points_for_arc(angle, n_components)'), (556, '        target_vect = point - self.get_end()'), (557, '        curr_vect = arc_points[-1] - arc_points[0]'), (558, ''), (559, '        arc_points = arc_points @ rotation_between_vectors(curr_vect, target_vect).T'), (560, '        arc_points *= get_norm(target_vect) / get_norm(curr_vect)'), (561, '        arc_points += (self.get_end() - arc_points[0])'), (562, '        self.append_points(arc_points[1:])'), (563, '        return self'), (564, '')]","[(24, 'from manimlib.utils.bezier import partial_quadratic_bezier_points')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,5f41e238ba347b93cc3b56c078073badcde618f3,690eb24562b77953b17f86102878ed54fc779fd4,Improve VMobject.add_arc_to,"[(14, 'from manimlib.constants import TAU'), (382, '    def get_stroke_width(self) -> float:'), (554, '    def add_arc_to(self, point: Vect3, angle: float, n_components: int | None = None, threshold: float = 1e-3) -> Self:'), (556, '        if abs(angle) < threshold:'), (557, '            self.add_line_to(point)'), (558, '            return self'), (559, ''), (560, '        # Assign default value for n_components'), (561, '        if n_components is None:'), (562, '            n_components = int(np.ceil(8 * angle / TAU))'), (563, '')]","[(381, '    def get_stroke_width(self) -> float | np.ndarray:'), (553, '    def add_arc_to(self, point: Vect3, angle: float, n_components: int = 8) -> Self:')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,b53ab02675c01812d477188851973c99e611ce92,5f41e238ba347b93cc3b56c078073badcde618f3,Simplify initialization of Line with path arc,"[(454, '        self.buff = buff'), (465, '        self.clear_points()'), (466, '        self.start_new_path(start)'), (467, '        self.add_arc_to(end, path_arc)'), (468, ''), (469, '        # Apply buffer'), (470, '        if buff > 0:'), (471, '            length = self.get_arc_length()'), (472, '            alpha = min(buff / length, 0.5)'), (473, '            self.pointwise_become_partial(self, alpha, 1 - alpha)'), (654, '        self.n_tip_points = 3'), (683, ''), (684, '        if self.path_arc > 0 and self.buff > 0:'), (685, '            self.insert_n_curves(10)  # Is this needed?'), (686, '        self.pointwise_become_partial(self, 0.0, 1.0 - alpha)'), (687, '        self.append_points([self.get_end(), self.get_end()])'), (689, '        self.n_tip_points = 3'), (700, '        ntp = self.n_tip_points'), (701, ""        self.data['stroke_width'][:-ntp] = self.data['stroke_width'][0]""), (702, ""        self.data['stroke_width'][-ntp:, 0] = tip_width * np.linspace(1, 0, ntp)"")]","[(464, '        vect = end - start'), (465, '        dist = get_norm(vect)'), (466, '        if np.isclose(dist, 0):'), (467, '            self.set_points_as_corners([start, end])'), (468, '            return self'), (469, '        if path_arc:'), (470, '            neg = path_arc < 0'), (471, '            if neg:'), (472, '                path_arc = -path_arc'), (473, '                start, end = end, start'), (474, '            radius = (dist / 2) / math.sin(path_arc / 2)'), (475, '            alpha = (PI - path_arc) / 2'), (476, '            center = start + radius * normalize(rotate_vector(end - start, alpha))'), (477, ''), (478, '            raw_arc_points = quadratic_bezier_points_for_arc(path_arc - 2 * buff / radius)'), (479, '            rot_matrix = rotation_about_z(angle_of_vector(start - center) + buff / radius)'), (480, '            raw_arc_points = raw_arc_points @ rot_matrix.T'), (481, '            if neg:'), (482, '                raw_arc_points = raw_arc_points[::-1]'), (483, '            self.set_points(center + radius * raw_arc_points)'), (484, '        else:'), (485, '            if buff > 0 and dist > 0:'), (486, '                start = start + vect * (buff / dist)'), (487, '                end = end - vect * (buff / dist)'), (488, '            self.set_points_as_corners([start, end])'), (697, '        self.pointwise_become_partial(self, 0, 1 - alpha)'), (698, '        # Dumb that this is needed'), (699, '        self.start_new_path(self.point_from_proportion(1 - 1e-5))'), (711, ""        self.data['stroke_width'][:-3] = self.data['stroke_width'][0]""), (712, ""        self.data['stroke_width'][-3:, 0] = tip_width * np.linspace(1, 0, 3)"")]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2b00a9cf8020defc38832ab0e2166860c912f7d3,b53ab02675c01812d477188851973c99e611ce92,Fix add_curve_to,"[(562, '            n_components = int(np.ceil(8 * abs(angle) / TAU))')]","[(562, '            n_components = int(np.ceil(8 * angle / TAU))')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,295a0f76cc0d7ced0af8ffbd41e56f6343b52c82,2b00a9cf8020defc38832ab0e2166860c912f7d3,Formatting tweak,"[(778, '        assert n < self.get_num_curves()'), (779, '        return self.get_points()[2 * n:2 * n + 3]')]","[(778, '        assert(n < self.get_num_curves())'), (779, '        return self.get_points()[2 * n : 2 * n + 3]')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,39e5d24858bb985923eab3e88bd1830007525bbc,295a0f76cc0d7ced0af8ffbd41e56f6343b52c82,Factor out partial results from point_from_proportion,"[(794, '    def curve_and_prop_of_partial_point(self, alpha) -> Tuple[int, float]:'), (795, '        """"""'), (796, '        If you want a point a proportion alpha along the curve, this'), (797, '        gives you the index of the appropriate bezier curve, together'), (798, ""        with the proportion along that curve you'd need to travel""), (799, '        """"""'), (800, '        if alpha == 0:'), (801, '            return (0, 0.0)'), (813, '            return len(partials), 1.0'), (815, '        index = next('), (817, '            len(partials) - 1  # Default'), (819, '        residue = float(inverse_interpolate('), (820, '            partials[index - 1] / full, partials[index] / full, alpha'), (821, '        ))'), (822, '        return index - 1, residue'), (823, ''), (824, '    def point_from_proportion(self, alpha: float) -> Vect3:'), (825, '        if alpha <= 0:'), (826, '            return self.get_start()'), (827, '        elif alpha >= 1:'), (828, '            return self.get_end()'), (829, '        index, residue = self.curve_and_prop_of_partial_point(alpha)'), (830, '        return self.get_nth_curve_function(index)(residue)')]","[(794, '    def point_from_proportion(self, alpha: float) -> Vect3:'), (795, '        if alpha <= 0:'), (796, '            return self.get_start()'), (797, '        elif alpha >= 1:'), (798, '            return self.get_end()'), (799, ''), (811, '            return self.get_start()'), (813, '        i = next('), (815, '            len(partials)  # Default'), (817, '        residue = float(inverse_interpolate(partials[i - 1] / full, partials[i] / full, alpha))'), (818, '        return self.get_nth_curve_function(i - 1)(residue)')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,a8b1791ff5939950a90feec3700fe3d3b20aed3f,39e5d24858bb985923eab3e88bd1830007525bbc,Small tweaks to arrow tip implementation,"[(16, 'from manimlib.utils.bezier import bezier'), (18, 'from manimlib.utils.bezier import partial_quadratic_bezier_points'), (689, '        self.add_line_to(self.get_end())')]","[(687, '        self.append_points([self.get_end(), self.get_end()])')]",No
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,916ab94efd402b730b44455fb9dd1f3aff864699,a8b1791ff5939950a90feec3700fe3d3b20aed3f,Remove white space,"[(28, '    def __init__(')]","[(28, '    def __init__(')]",Yes
manimlib/animation/animation.py,manimlib/animation/animation.py,f4778b57ef0254b5b05d0ea60f1fb15d31d731fd,916ab94efd402b730b44455fb9dd1f3aff864699,Have Animation keep track of whether a mobject had had it's updating suspended before resuming it at the end,"[(77, '            self.mobject_was_updating = not self.mobject.updating_suspended'), (85, '        if self.suspend_mobject_updating and self.mobject_was_updating:')]","[(84, '        if self.suspend_mobject_updating:')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,cbc32468bf2b23610294b534ec77ef134b20c506,f4778b57ef0254b5b05d0ea60f1fb15d31d731fd,Note chanted stroke and fill after DrawBorderThenFill  has complete,"[(142, '        submob.note_changed_stroke()'), (143, '        submob.note_changed_fill()')]",[],No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,0d046a7eab8c5272a40fd14a656b34abc90caed7,cbc32468bf2b23610294b534ec77ef134b20c506,Add an option for a graph to continually update to its defining function,"[(178, '        bind: bool = False,'), (199, ''), (200, '        if bind:'), (201, '            self.bind_graph_to_func(graph, function)'), (202, '')]",[],No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,2cdb85cae90b41e5fe43abc2e63a2d8d5db2ec25,0d046a7eab8c5272a40fd14a656b34abc90caed7,Don't assign a fixed default depth to ThreeDAxes,"[(532, '        depth: float | None = None,')]","[(532, '        depth: float = 6.0,')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,17cd5979046db60b7b5885f10fe0a708301c76dc,2cdb85cae90b41e5fe43abc2e63a2d8d5db2ec25,Have Arrow track what stroke width it was set to,"[(657, '        self.original_stroke_width = stroke_width'), (699, '        stroke_width = min('), (700, '            self.original_stroke_width,'), (703, '        tip_width = self.tip_width_ratio * stroke_width'), (723, '        self.original_stroke_width = self.get_stroke_width()')]","[(698, '        tip_width = self.tip_width_ratio * min('), (699, '            float(self.get_stroke_width()),')]",No
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,246a010799d8554f7e532daab4a48299db2378bd,17cd5979046db60b7b5885f10fe0a708301c76dc,Add default border width to StringMobject,"[(50, '        fill_border_width: float = 0.5,'), (69, '        super().__init__(**kwargs)'), (70, '        self.set_stroke(stroke_color, stroke_width)'), (71, '        self.set_fill(fill_color, border_width=fill_border_width)'), (72, '        self.note_changed_stroke()')]","[(68, '        super().__init__('), (69, '            stroke_color=stroke_color,'), (70, '            fill_color=fill_color,'), (71, '            stroke_width=stroke_width,'), (72, '            **kwargs'), (73, '        )')]",No
manimlib/window.py,manimlib/window.py,8a4d7b4e8cec4239e5ef58a4ef9d4dbb0f07adab,246a010799d8554f7e532daab4a48299db2378bd,Add a small hack to ensure Window resets properly in non-primary monitors,"[(30, '        samples: int = 0'), (51, '        # Hack. Sometimes, namely when configured to open in a separate window,'), (52, '        # the window needs to be resized to display correctly.'), (53, '        w, h = self.default_size'), (54, '        self.size = (w - 1, h - 1)'), (55, '        self.size = (w, h)')]","[(30, '        samples = 0'), (50, '        self.size = self.default_size'), (52, '        self.swap_buffers()')]",No
.gitignore,.gitignore,dcf3eb8416cd096cb46f3fedf9cd3e16347c7347,8a4d7b4e8cec4239e5ef58a4ef9d4dbb0f07adab,Ignore pyright configuration,"[(94, 'pyrightconfig.json')]",[],No
requirements.txt,requirements.txt,fa017b94d94e673317f53fdaef7d5239641d1606,d8428585f84681055fed8aa3fabfb6ae95e4a0ff,"Update requirements.txt

Now, the ipython version needs to be 8.18.0 or greater","[(2, 'ipython>=8.18.0')]","[(2, 'ipython')]",No
manimlib/animation/movement.py,manimlib/animation/movement.py,f8fedffa4c4aefb18bf736067fdbe62da2b9d073,dcf3eb8416cd096cb46f3fedf9cd3e16347c7347,Use rate function on MoveAlongPath,"[(117, '        point = self.path.quick_point_from_proportion(self.rate_func(alpha))')]","[(117, '        point = self.path.quick_point_from_proportion(alpha)')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,88672a21ff84cfe4c4f82cc7d8663aa7e404eeeb,f8fedffa4c4aefb18bf736067fdbe62da2b9d073,"Include texture id in shader wrapper id

This ensure that, among other things, ImageMobjects appearing in groups don't get lumped together in rendering.","[(141, '            self.texture_names_to_ids,')]",[],No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,41ece958fd1fe5b0138255d3003e321df3d6ad01,88672a21ff84cfe4c4f82cc7d8663aa7e404eeeb,Explicitly call out global naure of ID_TO_TEXTURE map,"[(24, '# Global maps updated as textures are allocated')]",[],No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,855ef9be8d19a4e7ae53e6a46736bf5b85c9de63,41ece958fd1fe5b0138255d3003e321df3d6ad01,"Refactor Matrix, DecimalMatrix, MobjectMatrix, etc.","[(7, 'from manimlib.constants import DOWN, LEFT, RIGHT, ORIGIN'), (16, '    from typing import Sequence, Union, Tuple'), (17, '    from manimlib.typing import ManimColor, Vect3, VectNArray, Self'), (18, ''), (19, '    StringMatrixType = Union[Sequence[Sequence[str]], np.ndarray[int, np.dtype[np.str_]]]'), (20, '    FloatMatrixType = Union[Sequence[Sequence[float]], VectNArray]'), (21, '    VMobjectMatrixType = Sequence[Sequence[VMobject]]'), (22, '    GenericMatrixType = Union[FloatMatrixType, StringMatrixType, VMobjectMatrixType]'), (23, ''), (29, '        matrix: GenericMatrixType,'), (30, '        v_buff: float = 0.5,'), (31, '        h_buff: float = 0.5,'), (34, '        height: float | None = None,'), (35, '        element_config: dict = dict(),'), (44, '        self.mob_matrix = self.create_mobject_matrix('), (45, '            matrix, v_buff, h_buff, element_alignment_corner,'), (46, '            **element_config'), (47, '        )'), (48, '        # Create helpful groups for the elements'), (49, '        n_cols = len(self.mob_matrix[0])'), (50, '        self.elements = VGroup(*it.chain(*self.mob_matrix))'), (51, '        self.columns = VGroup(*('), (52, '            VGroup(*(row[i] for row in self.mob_matrix))'), (53, '            for i in range(n_cols)'), (54, '        ))'), (55, '        self.rows = VGroup(*(VGroup(*row) for row in self.mob_matrix))'), (56, ''), (57, '        # Add elements and brackets'), (59, '        if height is not None:'), (60, '            self.set_height(height - 2 * bracket_v_buff)'), (64, '    def create_mobject_matrix('), (66, '        matrix: GenericMatrixType,'), (67, '        v_buff: float,'), (68, '        h_buff: float,'), (69, '        aligned_corner: Vect3,'), (70, '        **element_config'), (71, '    ) -> VMobjectMatrixType:'), (72, '        """"""'), (73, '        Creates and organizes the matrix of mobjects'), (74, '        """"""'), (75, '        mob_matrix = ['), (77, '                self.element_to_mobject(element, **element_config)'), (78, '                for element in row'), (82, '        max_width = max(elem.get_width() for row in mob_matrix for elem in row)'), (83, '        max_height = max(elem.get_height() for row in mob_matrix for elem in row)'), (84, '        x_step = (max_width + h_buff) * RIGHT'), (85, '        y_step = (max_height + v_buff) * DOWN'), (86, '        for i, row in enumerate(mob_matrix):'), (88, '                elem.move_to(i * y_step + j * x_step, aligned_corner)'), (89, '        return mob_matrix'), (90, ''), (91, '    def element_to_mobject(self, element, **config) -> VMobject:'), (92, '        if isinstance(element, VMobject):'), (93, '            return element'), (94, '        elif isinstance(element, float | complex):'), (95, '            return DecimalNumber(element, **config)'), (96, '        else:'), (97, '            return Tex(str(element), **config)'), (112, '        self.brackets = VGroup(l_bracket, r_bracket)'), (116, '    def get_column(self, index: int):'), (117, '        if not 0 <= index < len(self.columns):'), (118, '            raise IndexError(f""Index {index} out of bound for matrix with {len(self.columns)} columns"")'), (119, '        return self.columns[index]'), (120, ''), (121, '    def get_row(self, index: int):'), (122, '        if not 0 <= index < len(self.rows):'), (123, '            raise IndexError(f""Index {index} out of bound for matrix with {len(self.rows)} rows"")'), (124, '        return self.rows[index]'), (125, ''), (127, '        return self.columns'), (130, '        return self.rows'), (143, '    def get_mob_matrix(self) -> VMobjectMatrixType:'), (154, '    def __init__('), (155, '        self,'), (156, '        matrix: FloatMatrixType,'), (157, '        num_decimal_places: int = 2,'), (158, '        decimal_config: dict = dict(),'), (159, '        **config'), (160, '    ):'), (161, '        super().__init__('), (162, '            matrix,'), (163, '            element_config=dict('), (164, '                num_decimal_places=num_decimal_places,'), (165, '                **decimal_config'), (166, '            ),'), (167, '            **config'), (168, '        )'), (170, '    def element_to_mobject(self, element, **decimal_config) -> VMobject:'), (171, '        return DecimalNumber(element, **decimal_config)'), (173, ''), (174, 'class IntegerMatrix(DecimalMatrix):'), (177, '        matrix: FloatMatrixType,'), (178, '        num_decimal_places: int = 0,'), (179, '        decimal_config: dict = dict(),'), (180, '        **config'), (182, '        super().__init__(matrix, num_decimal_places, decimal_config, **config)'), (183, ''), (184, ''), (185, ''), (186, 'class TexMatrix(Matrix):'), (187, '    def __init__('), (188, '        self,'), (189, '        matrix: StringMatrixType,'), (190, '        tex_config: dict = dict(),'), (191, '        **config,'), (192, '    ):'), (193, '        super().__init__('), (194, '            matrix,'), (195, '            element_config=tex_config,'), (196, '            **config'), (197, '        )'), (202, '    def __init__('), (203, '        self,'), (204, '        group: VGroup,'), (205, '        n_rows: int | None = None,'), (206, '        n_cols: int | None = None,'), (207, '        height: float = 4.0,'), (208, '        element_alignment_corner=ORIGIN,'), (209, '        **config,'), (210, '    ):'), (211, '        # Have fallback defaults of n_rows and n_cols'), (212, '        n_mobs = len(group)'), (213, '        if n_rows is None:'), (214, '            n_rows = int(np.sqrt(n_mobs)) if n_cols is None else n_mobs // n_cols'), (215, '        if n_cols is None:'), (216, '            n_cols = n_mobs // n_rows'), (217, ''), (218, '        if len(group) < n_rows * n_cols:'), (219, '            raise Exception(""Input to MobjectMatrix must have at least n_rows * n_cols entries"")'), (220, ''), (221, '        mob_matrix = ['), (222, '            [group[n * n_cols + k] for k in range(n_cols)]'), (223, '            for n in range(n_rows)'), (224, '        ]'), (225, '        config.update('), (226, '            height=height,'), (227, '            element_alignment_corner=element_alignment_corner,'), (228, '        )'), (229, '        super().__init__(mob_matrix,  **config)'), (230, '')]","[(7, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFFER'), (8, 'from manimlib.constants import DOWN, LEFT, RIGHT, UP'), (9, 'from manimlib.constants import WHITE'), (11, 'from manimlib.mobject.numbers import Integer'), (12, 'from manimlib.mobject.shape_matchers import BackgroundRectangle'), (14, 'from manimlib.mobject.svg.tex_mobject import TexText'), (21, '    from typing import Sequence'), (22, '    import numpy.typing as npt'), (23, '    from manimlib.mobject.mobject import Mobject'), (24, '    from manimlib.typing import ManimColor, Vect3, Self'), (25, ''), (26, ''), (27, 'VECTOR_LABEL_SCALE_FACTOR = 0.8'), (28, ''), (29, ''), (30, 'def matrix_to_tex_string(matrix: npt.ArrayLike) -> str:'), (31, '    matrix = np.array(matrix).astype(""str"")'), (32, '    if matrix.ndim == 1:'), (33, '        matrix = matrix.reshape((matrix.size, 1))'), (34, '    n_rows, n_cols = matrix.shape'), (35, '    prefix = R""\\left[ \\begin{array}{%s}"" % (""c"" * n_cols)'), (36, '    suffix = R""\\end{array} \\right]""'), (37, '    rows = ['), (38, '        "" & "".join(row)'), (39, '        for row in matrix'), (40, '    ]'), (41, '    return prefix + R"" \\\\ "".join(rows) + suffix'), (42, ''), (43, ''), (44, 'def matrix_to_mobject(matrix: npt.ArrayLike) -> Tex:'), (45, '    return Tex(matrix_to_tex_string(matrix))'), (46, ''), (47, ''), (48, 'def vector_coordinate_label('), (49, '    vector_mob: VMobject,'), (50, '    integer_labels: bool = True,'), (51, '    n_dim: int = 2,'), (52, '    color: ManimColor = WHITE'), (53, ') -> Matrix:'), (54, '    vect = np.array(vector_mob.get_end())'), (55, '    if integer_labels:'), (56, '        vect = np.round(vect).astype(int)'), (57, '    vect = vect[:n_dim]'), (58, '    vect = vect.reshape((n_dim, 1))'), (59, '    label = Matrix(vect, add_background_rectangles_to_entries=True)'), (60, '    label.scale(VECTOR_LABEL_SCALE_FACTOR)'), (61, ''), (62, '    shift_dir = np.array(vector_mob.get_end())'), (63, '    if shift_dir[0] >= 0:  # Pointing right'), (64, '        shift_dir -= label.get_left() + DEFAULT_MOBJECT_TO_MOBJECT_BUFFER * LEFT'), (65, '    else:  # Pointing left'), (66, '        shift_dir -= label.get_right() + DEFAULT_MOBJECT_TO_MOBJECT_BUFFER * RIGHT'), (67, '    label.shift(shift_dir)'), (68, '    label.set_color(color)'), (69, '    label.rect = BackgroundRectangle(label)'), (70, '    label.add_to_back(label.rect)'), (71, '    return label'), (77, '        matrix: Sequence[Sequence[str | float | VMobject]],'), (78, '        v_buff: float = 0.8,'), (79, '        h_buff: float = 1.0,'), (82, '        add_background_rectangles_to_entries: bool = False,'), (83, '        include_background_rectangle: bool = False,'), (85, '        **kwargs'), (93, '        mob_matrix = self.matrix_to_mob_matrix(matrix, **kwargs)'), (94, '        self.mob_matrix = mob_matrix'), (95, ''), (96, '        self.organize_mob_matrix(mob_matrix, v_buff, h_buff, element_alignment_corner)'), (97, '        self.elements = VGroup(*it.chain(*mob_matrix))'), (101, '        if add_background_rectangles_to_entries:'), (102, '            for mob in self.elements:'), (103, '                mob.add_background_rectangle()'), (104, '        if include_background_rectangle:'), (105, '            self.add_background_rectangle()'), (107, ''), (108, '    def element_to_mobject(self, element: str | float | VMobject, **config) -> VMobject:'), (109, '        if isinstance(element, VMobject):'), (110, '            return element'), (111, '        return Tex(str(element), **config)'), (112, ''), (113, '    def matrix_to_mob_matrix('), (115, '        matrix: Sequence[Sequence[str | float | VMobject]],'), (116, '        **config'), (117, '    ) -> list[list[VMobject]]:'), (118, '        return ['), (120, '                self.element_to_mobject(item, **config)'), (121, '                for item in row'), (125, ''), (126, '    def organize_mob_matrix('), (127, '        self,'), (128, '        matrix: list[list[VMobject]],'), (129, '        v_buff: float,'), (130, '        h_buff: float,'), (131, '        aligned_corner: Vect3,'), (132, '    ) -> Self:'), (133, '        for i, row in enumerate(matrix):'), (135, '                mob = matrix[i][j]'), (136, '                mob.move_to('), (137, '                    i * v_buff * DOWN + j * h_buff * RIGHT,'), (138, '                    aligned_corner'), (139, '                )'), (140, '        return self'), (155, '        self.brackets = brackets'), (160, '        return VGroup(*['), (161, '            VGroup(*[row[i] for row in self.mob_matrix])'), (162, '            for i in range(len(self.mob_matrix[0]))'), (163, '        ])'), (166, '        return VGroup(*['), (167, '            VGroup(*row)'), (168, '            for row in self.mob_matrix'), (169, '        ])'), (182, '    def get_mob_matrix(self) -> list[list[Mobject]]:'), (193, '    def element_to_mobject(self, element: float, num_decimal_places: int = 1, **config) -> DecimalNumber:'), (194, '        return DecimalNumber(element, num_decimal_places=num_decimal_places, **config)'), (197, 'class IntegerMatrix(Matrix):'), (200, '        matrix: npt.ArrayLike,'), (201, '        element_alignment_corner: Vect3 = UP,'), (202, '        **kwargs'), (204, '        super().__init__(matrix, element_alignment_corner=element_alignment_corner, **kwargs)'), (206, '    def element_to_mobject(self, element: int, **config) -> Integer:'), (207, '        return Integer(element, **config)'), (213, ''), (214, ''), (215, 'def get_det_text('), (216, '    matrix: Matrix,'), (217, '    determinant: int | str | None = None,'), (218, '    background_rect: bool = False,'), (219, '    initial_scale_factor: int = 2'), (220, ') -> VGroup:'), (221, '    parens = Tex(""()"")'), (222, '    parens.scale(initial_scale_factor)'), (223, '    parens.stretch_to_fit_height(matrix.get_height())'), (224, '    l_paren, r_paren = parens.split()'), (225, '    l_paren.next_to(matrix, LEFT, buff=0.1)'), (226, '    r_paren.next_to(matrix, RIGHT, buff=0.1)'), (227, '    det = TexText(""det"")'), (228, '    det.scale(initial_scale_factor)'), (229, '    det.next_to(l_paren, LEFT, buff=0.1)'), (230, '    if background_rect:'), (231, '        det.add_background_rectangle()'), (232, '    det_text = VGroup(det, l_paren, r_paren)'), (233, '    if determinant is not None:'), (234, '        eq = Tex(""="")'), (235, '        eq.next_to(r_paren, RIGHT, buff=0.1)'), (236, '        result = Tex(str(determinant))'), (237, '        result.next_to(eq, RIGHT, buff=0.2)'), (238, '        det_text.add(eq, result)'), (239, '    return det_text')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,8179ba88d01c6da468a9cd64405abd181f5bc1fc,855ef9be8d19a4e7ae53e6a46736bf5b85c9de63,Reformat defaults for n_rows and n_cols in Mobject.arrange_in_grid,"[(498, '        n_submobs = len(submobs)'), (500, '            n_rows = int(np.sqrt(n_submobs)) if n_cols is None else n_submobs // n_cols'), (502, '            n_cols = n_submobs // n_rows')]","[(498, '        if n_rows is None and n_cols is None:'), (499, '            n_rows = int(np.sqrt(len(submobs)))'), (501, '            n_rows = len(submobs) // n_cols'), (503, '            n_cols = len(submobs) // n_rows')]",No
manimlib/shaders/inserts/get_gl_Position.glsl,N/A,60b762ca4339c611c7e4d19f27d5ed3f878ecb14,8179ba88d01c6da468a9cd64405abd181f5bc1fc,Remove redundant and unused get_gl_Position.glsl file,[],"[(1, 'uniform float is_fixed_in_frame;'), (2, 'uniform mat4 view;'), (3, 'uniform float focal_distance;'), (4, ''), (5, 'const float DEFAULT_FRAME_HEIGHT = 8.0;'), (6, 'const float ASPECT_RATIO = 16.0 / 9.0;'), (7, 'const float X_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT / ASPECT_RATIO;'), (8, 'const float Y_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT;'), (9, ''), (10, 'void emit_gl_Position(vec3 point){'), (11, '    vec4 result = vec4(point, 1.0);'), (12, '    if(!bool(is_fixed_in_frame)){'), (13, '        result = view * result;'), (14, '    }'), (15, '    // Essentially a projection matrix'), (16, '    result.x *= X_SCALE;'), (17, '    result.y *= Y_SCALE;'), (18, '    result.z /= focal_distance;'), (19, '    result.w = 1.0 - result.z;'), (20, '    // Flip and scale to prevent premature clipping'), (21, '    result.z *= -0.1;'), (22, '    gl_Position = result;'), (23, '}')]",No
manimlib/shaders/inserts/emit_gl_Position.glsl,manimlib/shaders/inserts/emit_gl_Position.glsl,d3dee240c329245166013220b1b54af9066da7b9,60b762ca4339c611c7e4d19f27d5ed3f878ecb14,Allow for smooth transitions between mobjects fixed and unfixed from the frame,"[(12, '    // This allow for smooth transitions between objects fixed and unfixed from frame'), (13, '    result = mix(view * result, result, is_fixed_in_frame);')]","[(12, '    if(!bool(is_fixed_in_frame)){'), (13, '        result = view * result;'), (14, '    }')]",No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,d3dee240c329245166013220b1b54af9066da7b9,60b762ca4339c611c7e4d19f27d5ed3f878ecb14,Allow for smooth transitions between mobjects fixed and unfixed from the frame,"[(24, '    v_stroke_width *= mix(frame_scale, 1, is_fixed_in_frame);')]","[(24, '    if(!bool(is_fixed_in_frame)){'), (25, '        v_stroke_width *= frame_scale;'), (26, '    }')]",No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,1c72059725d244ecae0846dec7b8bb7f84b9af9e,d3dee240c329245166013220b1b54af9066da7b9,Have surrounding rectangle match framed fixed status of what it surrounds,"[(33, '        if mobject.is_fixed_in_frame():'), (34, '            self.fix_in_frame()')]",[],No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,cde709fcfada100eb1c8fc430ad773085c4718fd,1c72059725d244ecae0846dec7b8bb7f84b9af9e,Replace fix_in_frame matching for DecimalNumber.set_value to general uniform matching,"[(174, '        for submob in self.get_family():'), (175, '            submob.uniforms.update(self.uniforms)')]","[(174, '        self.fix_in_frame(self._is_fixed_in_frame)')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,711438f625c4be9aab6b89a616963daacb215e54,cde709fcfada100eb1c8fc430ad773085c4718fd,"Update the types in decorator methods using @wraps

This is method to address issues flagged by pyright","[(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Any'), (56, ""    T = TypeVar('T')""), (168, '    @staticmethod'), (169, '    def affects_data(func: Callable[..., T]) -> Callable[..., T]:'), (172, '            result = func(self, *args, **kwargs)'), (174, '            return result'), (177, '    @staticmethod'), (178, '    def affects_family_data(func: Callable[..., T]) -> Callable[..., T]:'), (181, '            result = func(self, *args, **kwargs)'), (184, '            return result'), (585, '    @staticmethod'), (586, '    def stash_mobject_pointers(func: Callable[..., T]) -> Callable[..., T]:'), (1871, '    @staticmethod'), (1872, '    def affects_shader_info_id(func: Callable[..., T]) -> Callable[..., T]:')]","[(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional'), (167, '    def affects_data(func: Callable):'), (170, '            func(self, *args, **kwargs)'), (174, '    def affects_family_data(func: Callable):'), (177, '            func(self, *args, **kwargs)'), (180, '            return self'), (581, '    def stash_mobject_pointers(func: Callable):'), (1866, '    def affects_shader_info_id(func: Callable):')]",No
manimlib/animation/composition.py,manimlib/animation/composition.py,45d904940562d681bf0dbce9c60cc0615c30284c,711438f625c4be9aab6b89a616963daacb215e54,Minor clean up,"[(29, '    def __init__('), (30, '        self,')]","[(29, '    def __init__(self,')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,661814deea7fcfeed0f370a67668d2191fb63edc,45d904940562d681bf0dbce9c60cc0615c30284c,Add all orientation options into CameraFrame.reorient,"[(138, '        center: Vect3 | tuple[float, float, float] | None = None,'), (139, '        height: float | None = None'), (146, '        if center is not None:'), (147, '            self.move_to(np.array(center))'), (148, '        if height is not None:'), (149, '            self.set_height(height)')]",[],No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,4aef0d1bf549c9cf2f6201dc9c28d88b18a7a3a3,661814deea7fcfeed0f370a67668d2191fb63edc,Add add_ambient_rotation,"[(173, '    def add_ambient_rotation(self, angular_speed=1 * DEGREES):'), (174, '        self.add_updater(lambda m, dt: m.increment_theta(angular_speed * dt))'), (175, '        return self'), (176, '')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,ebe689dedece2df6b90bc73bc3e40fd8c71cc3bb,4aef0d1bf549c9cf2f6201dc9c28d88b18a7a3a3,"Treat is_fixed_in_frame as a float in uniforms, to allow for transformations between","[(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar'), (120, '        if is_fixed_in_frame:'), (121, '            self.fix_in_frame()'), (139, '            ""is_fixed_in_frame"": 0.0,'), (2139, '        super().__init__(**kwargs)'), (2143, '        assert isinstance(other, Mobject)'), (2147, '')]","[(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Any'), (92, '        self._is_fixed_in_frame = is_fixed_in_frame'), (138, '            ""is_fixed_in_frame"": float(self._is_fixed_in_frame),'), (2138, '        Mobject.__init__(self, **kwargs)'), (2140, '        if any(m.is_fixed_in_frame() for m in mobjects):'), (2141, '            self.fix_in_frame()'), (2144, '        assert(isinstance(other, Mobject))')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,dfa96c20479262a1e731e09cbede6b15e7c91109,ebe689dedece2df6b90bc73bc3e40fd8c71cc3bb,Update copy_frame_positioning,"[(508, '            self.copy_frame_positioning()'), (618, '    def copy_frame_positioning(self):'), (624, '        call = f""reorient(""'), (625, '        theta, phi, gamma = (angles / DEGREES).astype(int)'), (626, '        call += f""{theta}, {phi}, {gamma}""'), (628, '            call += f"", {tuple(np.round(center, 2))}""'), (630, '            call += "", {:.2f}"".format(height)'), (631, '        call += "")""')]","[(508, '            self.copy_frame_anim_call()'), (618, '    def copy_frame_anim_call(self):'), (624, '        call = f""self.frame.animate.reorient""'), (625, '        call += str(tuple((angles / DEGREES).astype(int)))'), (627, '            call += f"".move_to({list(np.round(center, 2))})""'), (629, '            call += "".set_height({:.2f})"".format(height)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7009f0f53e4edc6aa5a91e362d8990c20655b300,dfa96c20479262a1e731e09cbede6b15e7c91109,Add space after assert,"[(1426, '        assert isinstance(other, VMobject)')]","[(1426, '        assert(isinstance(other, VMobject))')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,100b108ad18d952977f4f0e27a28267aa7b72734,7009f0f53e4edc6aa5a91e362d8990c20655b300,"Treat Group and VGroup more like list types

This may not be the best way to address it, but at least temporarily it prevents linting issues for calls like VGroup(Circle())[0].get_radius()","[(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Generic, List'), (60, ""    SubmobjectType = TypeVar('SubmobjectType', bound='Mobject')""), (356, '    def __getitem__(self, value: int | slice) -> Mobject:'), (2136, 'class Group(Mobject, Generic[SubmobjectType]):'), (2137, '    def __init__(self, *mobjects: SubmobjectType, **kwargs):'), (2147, '    # This is just here to make linters happy with references to things like Group(...)[0]'), (2148, '    def __getitem__(self, index) -> SubmobjectType:'), (2149, '        return super().__getitem__(index)')]","[(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar'), (355, '    def __getitem__(self, value: int | slice) -> Self:'), (2135, 'class Group(Mobject):'), (2136, '    def __init__(self, *mobjects: Mobject, **kwargs):')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,100b108ad18d952977f4f0e27a28267aa7b72734,7009f0f53e4edc6aa5a91e362d8990c20655b300,"Treat Group and VGroup more like list types

This may not be the best way to address it, but at least temporarily it prevents linting issues for calls like VGroup(Circle())[0].get_radius()","[(53, '    from typing import Callable, Iterable, Tuple, Any, Generic, TypeVar'), (56, ""    SubVmobjectType = TypeVar('SubVmobjectType', bound='VMobject')""), (61, ''), (1420, 'class VGroup(VMobject, Generic[SubVmobjectType]):'), (1421, '    def __init__(self, *vmobjects: SubVmobjectType, **kwargs):'), (1431, '    # This is just here to make linters happy with references to things like VGroup(...)[0]'), (1432, '    def __getitem__(self, index) -> SubVmobjectType:'), (1433, '        return super().__getitem__(index)'), (1434, '')]","[(53, '    from typing import Callable, Iterable, Tuple, Any'), (1418, 'class VGroup(VMobject):'), (1419, '    def __init__(self, *vmobjects: VMobject, **kwargs):')]",No
manimlib/utils/color.py,manimlib/utils/color.py,31b2bcd9e6ca8714accea22b0ddea2acea496650,100b108ad18d952977f4f0e27a28267aa7b72734,Add interpolate_color_by_hsl,"[(105, 'def interpolate_color_by_hsl('), (106, '    color1: ManimColor,'), (107, '    color2: ManimColor,'), (108, '    alpha: float'), (109, ') -> Color:'), (110, '    hsl1 = np.array(Color(color1).get_hsl())'), (111, '    hsl2 = np.array(Color(color2).get_hsl())'), (112, '    return Color(hsl=interpolate(hsl1, hsl2, alpha))'), (113, ''), (114, '')]",[],No
manimlib/utils/color.py,manimlib/utils/color.py,e4c824e672444b139d30148e070ff3692dcbc9ba,31b2bcd9e6ca8714accea22b0ddea2acea496650,Update random_bright_color to operate based on hsl ranges,"[(124, 'def random_bright_color('), (125, '    hue_range: tuple[float, float] = (0.0, 1.0),'), (126, '    saturation_range: tuple[float, float] = (0.5, 0.8),'), (127, '    luminance_range: tuple[float, float] = (0.5, 1.0),'), (128, ') -> Color:'), (129, '    return Color(hsl=('), (130, '        interpolate(*hue_range, random.random()),'), (131, '        interpolate(*saturation_range, random.random()),'), (132, '        interpolate(*luminance_range, random.random()),'), (133, '    ))')]","[(124, 'def random_bright_color() -> Color:'), (125, '    color = random_color()'), (126, '    return average_color(color, Color(WHITE))')]",No
manimlib/utils/color.py,manimlib/utils/color.py,f3571cf2cbeb2588e49d7784258f6df0e3243307,e4c824e672444b139d30148e070ff3692dcbc9ba,Add random import,"[(7, 'import random')]",[],No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,8417369da12d68b4ab863de7d4f9218d6635f5df,f3571cf2cbeb2588e49d7784258f6df0e3243307,Performance improvement for DecimalNumber.set_value,"[(2, 'from functools import lru_cache'), (21, '@lru_cache()'), (22, 'def char_to_cahced_mob(char: str, **text_config):'), (23, '    return Text(char, **text_config)'), (24, ''), (25, ''), (55, '        self.text_config[""font_size""] = font_size'), (68, '        # Create the submobject list'), (70, '        self.num_string = self.get_num_string(number)'), (72, '        # Submob_templates will be a list of cached Tex and Text mobjects,'), (73, '        # with the intent of calling .copy or .become on them'), (74, '        submob_templates = list(map(self.char_to_mob, self.num_string))'), (78, '            submob_templates.append(dots)'), (80, '            submob_templates.append(self.char_to_mob(self.unit))'), (82, '        # Set internals'), (83, '        if len(submob_templates) == len(self.submobjects):'), (84, '            for sm, smt in zip(self.submobjects, submob_templates):'), (85, '                sm.become(smt)'), (86, '        else:'), (87, '            self.set_submobjects([smt.copy() for smt in submob_templates])'), (88, ''), (89, '        font_size = self.get_font_size()'), (90, '        digit_buff = self.digit_buff_per_font_unit * font_size'), (91, '        self.scale(font_size / self.text_config[""font_size""])'), (92, '        self.arrange(RIGHT, buff=digit_buff, aligned_edge=DOWN)'), (94, '        # Handle alignment of special characters'), (95, '        for i, c in enumerate(self.num_string):'), (96, '            if c == ""–"" and len(self.num_string) > i + 1:'), (102, '            self[-1].align_to(self, UP)'), (125, '    def char_to_mob(self, char: str) -> Text:'), (126, '        return char_to_cahced_mob(char, **self.text_config)')]","[(49, '        self.char_to_mob_map = dict()'), (63, '        self.set_submobjects([])'), (64, '        self.text_config[""font_size""] = self.get_font_size()'), (65, '        num_string = self.num_string = self.get_num_string(number)'), (66, '        self.add(*map(self.char_to_mob, num_string))'), (68, '        # Add non-numerical bits'), (72, '            self.add(dots)'), (74, '            self.unit_sign = Tex(self.unit, font_size=self.get_font_size())'), (75, '            self.add(self.unit_sign)'), (77, '        self.arrange('), (78, '            buff=self.digit_buff_per_font_unit * self.get_font_size(),'), (79, '            aligned_edge=DOWN'), (80, '        )'), (82, '        # Handle alignment of parts that should be aligned'), (83, '        # to the bottom'), (84, '        for i, c in enumerate(num_string):'), (85, '            if c == ""–"" and len(num_string) > i + 1:'), (91, '            self.unit_sign.align_to(self, UP)'), (114, '    def char_to_mob(self, char: str) -> Tex | Text:'), (115, '        if char not in self.char_to_mob_map:'), (116, '            self.char_to_mob_map[char] = Text(char, **self.text_config)'), (117, '        result = self.char_to_mob_map[char].copy()'), (118, '        result.scale(self.get_font_size() / result.font_size)'), (119, '        return result')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,2966f358a36b70809a314d37266fafb6946bdb07,8417369da12d68b4ab863de7d4f9218d6635f5df,Pull type definitions used for Generic[SubmobjectType] outside of if TYPE_CHECKING block,"[(49, 'from typing import TypeVar, Generic'), (50, ""SubmobjectType = TypeVar('SubmobjectType', bound='Mobject')""), (51, ''), (54, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional')]","[(51, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional, TypeVar, Generic, List'), (60, ""    SubmobjectType = TypeVar('SubmobjectType', bound='Mobject')"")]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2966f358a36b70809a314d37266fafb6946bdb07,8417369da12d68b4ab863de7d4f9218d6635f5df,Pull type definitions used for Generic[SubmobjectType] outside of if TYPE_CHECKING block,"[(50, 'from typing import Generic, TypeVar'), (51, ""SubVmobjectType = TypeVar('SubVmobjectType', bound='VMobject')""), (54, '    from typing import Callable, Iterable, Tuple, Any')]","[(43, 'from manimlib.utils.space_ops import normalize_along_axis'), (53, '    from typing import Callable, Iterable, Tuple, Any, Generic, TypeVar'), (56, ""    SubVmobjectType = TypeVar('SubVmobjectType', bound='VMobject')"")]",No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,45f8ca764348f0131a3110483b96fd9a6aa2b185,2966f358a36b70809a314d37266fafb6946bdb07,Specify output type for DecimalMatrix.element_to_mobject,"[(169, '    def element_to_mobject(self, element, **decimal_config) -> DecimalNumber:')]","[(25, ''), (170, '    def element_to_mobject(self, element, **decimal_config) -> VMobject:')]",No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,c531e56a2f132448f6e6b5e932048e5f0336e6ef,45f8ca764348f0131a3110483b96fd9a6aa2b185,Fix DecimalNumber.set_value font size issue,"[(82, '        font_size = self.get_font_size()'), (86, '                sm.scale(font_size / smt.font_size)'), (88, '            self.set_submobjects(['), (89, '                smt.copy().scale(font_size / smt.font_size)'), (90, '                for smt in submob_templates'), (91, '            ])')]","[(55, '        self.text_config[""font_size""] = font_size'), (87, '            self.set_submobjects([smt.copy() for smt in submob_templates])'), (89, '        font_size = self.get_font_size()'), (91, '        self.scale(font_size / self.text_config[""font_size""])')]",No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,578427543c1978c0056d960f93caa1e2fbdedabb,c531e56a2f132448f6e6b5e932048e5f0336e6ef,Add defaults for Matrix object to have ellipses,"[(8, 'from manimlib.constants import DEGREES'), (17, '    from typing import Sequence, Union, Tuple, Optional'), (37, '        ellipses_row: Optional[int] = None,'), (38, '        ellipses_col: Optional[int] = None,'), (58, '        self.ellipses = VGroup()'), (61, '        self.elements.center()'), (66, '        self.add(self.ellipses)'), (67, ''), (68, '        # Potentially add ellipses'), (69, '        self.swap_entries_for_ellipses('), (70, '            ellipses_row,'), (71, '            ellipses_col,'), (72, '        )'), (153, '    def swap_entries_for_ellipses('), (154, '        self,'), (155, '        row_index: Optional[int] = None,'), (156, '        col_index: Optional[int] = None,'), (157, '        height_ratio: float = 0.65,'), (158, '        width_ratio: float = 0.4'), (159, '    ):'), (160, '        rows = self.get_rows()'), (161, '        cols = self.get_columns()'), (162, ''), (163, '        avg_row_height = rows.get_height() / len(rows)'), (164, '        vdots_height = height_ratio * avg_row_height'), (165, ''), (166, '        avg_col_width = cols.get_width() / len(cols)'), (167, '        hdots_width = width_ratio * avg_col_width'), (168, ''), (169, '        use_vdots = row_index is not None and -len(rows) <= row_index < len(rows)'), (170, '        use_hdots = col_index is not None and -len(cols) <= col_index < len(cols)'), (171, ''), (172, '        def swap_entry_for_dots(entry, dots):'), (173, '            dots.move_to(entry)'), (174, '            entry.become(dots)'), (175, '            self.elements.remove(entry)'), (176, '            self.ellipses.add(entry)'), (177, ''), (178, '        if use_vdots:'), (179, '            for column in cols:'), (180, '                # Add vdots'), (181, '                dots = Tex(R""\\vdots"")'), (182, '                dots.set_height(vdots_height)'), (183, '                swap_entry_for_dots(column[row_index], dots)'), (184, '        if use_hdots:'), (185, '            for row in rows:'), (186, '                # Add hdots'), (187, '                dots = Tex(R""\\hdots"")'), (188, '                dots.set_width(hdots_width)'), (189, '                swap_entry_for_dots(row[col_index], dots)'), (190, '        if use_vdots and use_hdots:'), (191, '            rows[row_index][col_index].rotate(-45 * DEGREES)'), (192, '        return self'), (193, '')]","[(16, '    from typing import Sequence, Union, Tuple'), (61, '        self.center()')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,d44e248277f4c7215a0689abb78a634ab5502c56,578427543c1978c0056d960f93caa1e2fbdedabb,Specify type of argument in Mobject.add,"[(1026, '    def add(self, *mobjects: Mobject, set_depth_test: bool = True):')]","[(1026, '    def add(self, *mobjects, set_depth_test: bool = True):')]",No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,4ce8a3ba9d1135b4fde3db7c7fc992b89b7b32b6,d44e248277f4c7215a0689abb78a634ab5502c56,Fix computation of normals for Surface,"[(136, '        # For each point, find two adjacent points at indices'), (137, '        # step1 and step2, such that crossing points[step1] - points'), (138, '        # with points[step1] - points gives a normal vector'), (139, '        step1 = indices + 1'), (140, '        step2 = indices + nu'), (142, '        # Right edge'), (143, '        step1[nu - 1::nu] = indices[nu - 1::nu] + nu'), (144, '        step2[nu - 1::nu] = indices[nu - 1::nu] - 1'), (145, ''), (146, '        # Bottom edge'), (147, '        step1[-nu:] = indices[-nu:] - nu'), (148, '        step2[-nu:] = indices[-nu:] + 1'), (149, ''), (150, '        # Lower right point'), (151, '        step1[-1] = indices[-1] - 1'), (152, '        step2[-1] = indices[-1] - nu'), (156, '            points[step1] - points,'), (157, '            points[step2] - points,')]","[(136, '        left = indices - 1'), (137, '        right = indices + 1'), (138, '        up = indices - nv'), (139, '        down = indices + nv'), (141, '        left[0] = indices[0]'), (142, '        right[-1] = indices[-1]'), (143, '        up[:nv] = indices[:nv]'), (144, '        down[-nv:] = indices[-nv:]'), (148, '            points[right] - points[left],'), (149, '            points[up] - points[down],')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,ed3ac74d671b17c8e1cf19314344ea186d219f79,4ce8a3ba9d1135b4fde3db7c7fc992b89b7b32b6,Add option to change Euler axes,"[(28, '        euler_axes: str = ""zxz"",'), (39, '        self.euler_axes = euler_axes'), (67, '        return orientation.as_euler(self.euler_axes)[::-1]'), (131, '            rot = Rotation.from_euler(self.euler_axes, eulers[::-1])'), (135, '    def increment_euler_angles('), (136, '        self,'), (137, '        dtheta: float | None = None,'), (138, '        dphi: float | None = None,'), (139, '        dgamma: float | None = None,'), (140, '        units: float = RADIANS'), (141, '    ):'), (142, '        angles = self.get_euler_angles()'), (143, '        for i, value in enumerate([dtheta, dphi, dgamma]):'), (144, '            if value is not None:'), (145, '                angles[i] += value * units'), (146, '        self.set_euler_angles(*angles)'), (147, '        return self'), (148, ''), (149, '    def set_euler_axes(self, seq: str):'), (150, '        self.euler_axes = seq'), (151, ''), (180, '    def increment_theta(self, dtheta: float, units=RADIANS):'), (181, '        self.increment_euler_angles(dtheta=dtheta, units=units)'), (184, '    def increment_phi(self, dphi: float, units=RADIANS):'), (185, '        self.increment_euler_angles(dphi=dphi, units=units)'), (188, '    def increment_gamma(self, dgamma: float, units=RADIANS):'), (189, '        self.increment_euler_angles(dgamma=dgamma, units=units)')]","[(65, '        return orientation.as_euler(""zxz"")[::-1]'), (129, '            rot = Rotation.from_euler(""zxz"", eulers[::-1])'), (161, '    def increment_theta(self, dtheta: float):'), (162, '        self.rotate(dtheta, OUT)'), (165, '    def increment_phi(self, dphi: float):'), (166, '        self.rotate(dphi, self.get_inverse_camera_rotation_matrix()[0])'), (169, '    def increment_gamma(self, dgamma: float):'), (170, '        self.rotate(dgamma, self.get_inverse_camera_rotation_matrix()[2])')]",No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,7b577e9fc10121f9a38bea665c2be381bf12458f,ed3ac74d671b17c8e1cf19314344ea186d219f79,Have matrix keep track of elements and ellipses as lists instead of VGroups,"[(50, ''), (53, '        self.elements = [elem for row in self.mob_matrix for elem in row]'), (59, '        if height is not None:'), (60, '            self.rows.set_height(height - 2 * bracket_v_buff)'), (61, '        self.brackets = self.create_brackets(self.rows, bracket_v_buff, bracket_h_buff)'), (62, '        self.ellipses = []'), (65, '        self.add(*self.elements)'), (66, '        self.add(*self.brackets)'), (67, '        self.center()'), (75, '    def copy(self, deep: bool = False):'), (76, '        result = super().copy(deep)'), (77, '        self_family = self.get_family()'), (78, '        copy_family = result.get_family()'), (79, '        for attr in [""elements"", ""ellipses""]:'), (80, '            setattr(result, attr, ['), (81, '                copy_family[self_family.index(mob)]'), (82, '                for mob in getattr(self, attr)'), (83, '            ])'), (84, '        return result'), (85, ''), (121, '    def create_brackets(self, rows, v_buff: float, h_buff: float) -> VGroup:'), (124, '            *len(rows) * [R""\\quad \\\\""],'), (127, '        brackets.set_height(rows.get_height() + v_buff)'), (130, '        l_bracket.next_to(rows, LEFT, h_buff)'), (131, '        r_bracket.next_to(rows, RIGHT, h_buff)'), (132, '        return VGroup(l_bracket, r_bracket)'), (161, '    def swap_entry_for_dots(self, entry, dots):'), (162, '        dots.move_to(entry)'), (163, '        entry.become(dots)'), (164, '        if entry in self.elements:'), (165, '            self.elements.remove(entry)'), (166, '        if entry not in self.ellipses:'), (167, '            self.ellipses.append(entry)'), (168, ''), (193, '                self.swap_entry_for_dots(column[row_index], dots)'), (199, '                self.swap_entry_for_dots(row[col_index], dots)'), (208, '        return VGroup(*self.elements)'), (211, '        return VGroup(*self.brackets)'), (212, ''), (213, '    def get_ellipses(self) -> VGroup:'), (214, '        return VGroup(*self.ellipses)')]","[(52, '        self.elements = VGroup(*it.chain(*self.mob_matrix))'), (58, '        self.ellipses = VGroup()'), (61, '        self.elements.center()'), (62, '        self.add(self.elements)'), (63, '        if height is not None:'), (64, '            self.set_height(height - 2 * bracket_v_buff)'), (65, '        self.add_brackets(bracket_v_buff, bracket_h_buff)'), (66, '        self.add(self.ellipses)'), (109, '    def add_brackets(self, v_buff: float, h_buff: float) -> Self:'), (110, '        height = len(self.mob_matrix)'), (113, '            *height * [R""\\quad \\\\""],'), (116, '        brackets.set_height(self.get_height() + v_buff)'), (119, '        l_bracket.next_to(self, LEFT, h_buff)'), (120, '        r_bracket.next_to(self, RIGHT, h_buff)'), (121, '        brackets.set_submobjects([l_bracket, r_bracket])'), (122, '        self.brackets = VGroup(l_bracket, r_bracket)'), (123, '        self.add(*brackets)'), (124, '        return self'), (172, '        def swap_entry_for_dots(entry, dots):'), (173, '            dots.move_to(entry)'), (174, '            entry.become(dots)'), (175, '            self.elements.remove(entry)'), (176, '            self.ellipses.add(entry)'), (177, ''), (183, '                swap_entry_for_dots(column[row_index], dots)'), (189, '                swap_entry_for_dots(row[col_index], dots)'), (198, '        return self.elements'), (201, '        return self.brackets')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,5632fee9a3a04012126fad90c871ed1feda5e849,7b577e9fc10121f9a38bea665c2be381bf12458f,Ensure get_opacity returns float,"[(1379, '        return float(self.data[""rgba""][0, 3])')]","[(1379, '        return self.data[""rgba""][0, 3]')]",No
manimlib/mobject/svg/brace.py,manimlib/mobject/svg/brace.py,712fa301748b65dfbe0803a7683296f6c8cbe0ea,5632fee9a3a04012126fad90c871ed1feda5e849,Ensure Brace.get_tex uses buff key word arg,"[(94, '        buff = kwargs.pop(""buff"", SMALL_BUFF)'), (95, '        tex_mob = Tex(*tex, **kwargs)'), (96, '        self.put_at_tip(tex_mob, buff=buff)')]","[(94, '        tex_mob = Tex(*tex)'), (95, '        self.put_at_tip(tex_mob, **kwargs)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,4a89376fdd9377eeab03cf950b96f345b215f6c2,712fa301748b65dfbe0803a7683296f6c8cbe0ea,Add method for resetting which plane in 3d space behaves like the floor when panning,"[(839, '    def set_floor_plane(self, plane: str = ""xy""):'), (840, '        if plane == ""xy"":'), (841, '            self.frame.set_euler_axes(""zxz"")'), (842, '        elif plane == ""xz"":'), (843, '            self.frame.set_euler_axes(""zxy"")'), (844, '        else:'), (845, '            raise Exception(""Only `xz` and `xy` are valid floor planes"")')]",[],No
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,e784c42f0d280978e0b30b6567995d82da5ece11,4a89376fdd9377eeab03cf950b96f345b215f6c2,Add big_tick_spacing option NumberLine,"[(19, '    from typing import Iterable, Optional'), (31, '        width: Optional[float] = None,'), (37, '        big_tick_spacing: Optional[float] = None,'), (58, '        if big_tick_spacing is not None:'), (59, '            self.numbers_with_elongated_ticks = np.arange('), (60, '                x_range[0],'), (61, '                x_range[1] + big_tick_spacing,'), (62, '                big_tick_spacing,'), (63, '            )'), (64, '        else:'), (65, '            self.numbers_with_elongated_ticks = list(numbers_with_elongated_ticks)')]","[(19, '    from typing import Iterable'), (31, '        width: float | None = None,'), (57, '        self.numbers_with_elongated_ticks = list(numbers_with_elongated_ticks)')]",No
example_scenes.py,example_scenes.py,7edc4b64ad5134f404e08c53ce9bb34802a0aede,e784c42f0d280978e0b30b6567995d82da5ece11,Replace numbers_with_elongated_ticks -> big_tick_numbers,"[(362, '                big_tick_numbers=[-2, 2],')]","[(362, '                numbers_with_elongated_ticks=[-2, 2],')]",No
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,7edc4b64ad5134f404e08c53ce9bb34802a0aede,e784c42f0d280978e0b30b6567995d82da5ece11,Replace numbers_with_elongated_ticks -> big_tick_numbers,"[(38, '        big_tick_numbers: list[float] = [],'), (59, '            self.big_tick_numbers = np.arange('), (65, '            self.big_tick_numbers = list(big_tick_numbers)'), (112, '            if np.isclose(self.big_tick_numbers, x).any():'), (221, '        big_tick_numbers: list[float] = [0, 1],'), (229, '            big_tick_numbers=big_tick_numbers,')]","[(38, '        numbers_with_elongated_ticks: list[float] = [],'), (59, '            self.numbers_with_elongated_ticks = np.arange('), (65, '            self.numbers_with_elongated_ticks = list(numbers_with_elongated_ticks)'), (112, '            if np.isclose(self.numbers_with_elongated_ticks, x).any():'), (221, '        numbers_with_elongated_ticks: list[float] = [0, 1],'), (229, '            numbers_with_elongated_ticks=numbers_with_elongated_ticks,')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,ffbe5c8114c2940d7f011c58e4ab4eec457bcbee,7edc4b64ad5134f404e08c53ce9bb34802a0aede,Add type hints for affects_mobject_list,"[(47, '    from typing import Callable, Iterable, TypeVar'), (50, ""    T = TypeVar('T')""), (51, ''), (404, '    @staticmethod'), (405, '    def affects_mobject_list(func: Callable[..., T]) -> Callable[..., T]:')]","[(47, '    from typing import Callable, Iterable'), (402, '    def affects_mobject_list(func: Callable):')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,9432a73a9f7594d48375a8d74a2e1ba7c64c5ef0,ffbe5c8114c2940d7f011c58e4ab4eec457bcbee,Let checkpoint_paste work on methods of the current scene,"[(10, 'import re'), (781, '        lines = pasted.split(""\\n"")'), (782, ''), (783, '        # Commented lines trigger saved checkpoints'), (784, '        if lines[0].lstrip().startswith(""#""):'), (785, '            if lines[0] not in self.checkpoint_states:'), (786, '                self.checkpoint(lines[0])'), (788, '                self.revert_to_checkpoint(lines[0])'), (789, ''), (790, '        # Copied methods of a scene are handled specially'), (791, '        # A bit hacky, yes, but convenient'), (792, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (793, '        method_names = re.findall(method_pattern ,lines[0].strip())'), (794, '        if method_names:'), (795, '            method_name = method_names[0]'), (796, '            indent = "" "" * lines[0].index(lines[0].strip())'), (797, '            pasted = ""\\n"".join(['), (798, '                # Remove self from function signature'), (799, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (800, '                *lines[1:],'), (801, '                # Attach to scene via self.func_name = func_name'), (802, '                f""{indent}self.{method_name} = {method_name}""'), (803, '            ])'), (805, '        # Keep track of skipping and progress bar status')]","[(780, '        line0 = pasted.lstrip().split(""\\n"")[0]'), (781, '        if line0.startswith(""#""):'), (782, '            if line0 not in self.checkpoint_states:'), (783, '                self.checkpoint(line0)'), (785, '                self.revert_to_checkpoint(line0)')]",No
manimlib/animation/numbers.py,manimlib/animation/numbers.py,2e9c89502d8ec2fc613bafdbc5f5341f8430afb1,9432a73a9f7594d48375a8d74a2e1ba7c64c5ef0,Restrict alpha in CountInFrom,"[(6, 'from manimlib.utils.simple_functions import clip'), (59, '        start_number = decimal_mob.get_value()'), (62, '            lambda a: interpolate(source_number, start_number, clip(a, 0, 1)),')]","[(58, '        start_number = decimal_mob.number'), (61, '            lambda a: interpolate(source_number, start_number, a),')]",No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,a5f2ac689ffe05ac3c99a33de811967e0bb04cc4,2e9c89502d8ec2fc613bafdbc5f5341f8430afb1,Spacing,[],"[(249, ''), (264, '')]",No
manimlib/utils/iterables.py,manimlib/utils/iterables.py,4d67361800867fe685ca310ca44d289b81ff9206,a5f2ac689ffe05ac3c99a33de811967e0bb04cc4,Add shuffled,"[(6, 'import random'), (87, 'def shuffled(iterable: Iterable) -> list:'), (88, '    as_list = list(iterable)'), (89, '    random.shuffle(as_list)'), (90, '    return as_list'), (91, ''), (92, '')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1372cf101cc6e97a863c0eb2a58a46155bd3a225,4d67361800867fe685ca310ca44d289b81ff9206,Allow VGroup and Group to accept generators and iterables as arguments,"[(49, 'from typing import TypeVar, Generic, Iterable'), (54, '    from typing import Callable, Iterator, Union, Tuple, Optional'), (2139, '    def __init__(self, *mobjects: SubmobjectType | Iterable[SubmobjectType], **kwargs):'), (2141, '        self._ingest_args(*mobjects)'), (2142, ''), (2143, '    def _ingest_args(self, *args: Mobject | Iterable[Mobject]):'), (2144, '        if len(args) == 0:'), (2145, '            return'), (2146, '        if all(isinstance(mob, Mobject) for mob in args):'), (2147, '            self.add(*args)'), (2148, '        elif isinstance(args[0], Iterable):'), (2149, '            self.add(*args[0])'), (2150, '        else:'), (2151, '            raise Exception(f""Invalid argument to Group of type {type(args[0])}"")')]","[(49, 'from typing import TypeVar, Generic'), (54, '    from typing import Callable, Iterable, Iterator, Union, Tuple, Optional'), (2139, '    def __init__(self, *mobjects: SubmobjectType, **kwargs):'), (2140, '        if not all([isinstance(m, Mobject) for m in mobjects]):'), (2141, '            raise Exception(""All submobjects must be of type Mobject"")'), (2143, '        self.add(*mobjects)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1372cf101cc6e97a863c0eb2a58a46155bd3a225,4d67361800867fe685ca310ca44d289b81ff9206,Allow VGroup and Group to accept generators and iterables as arguments,"[(16, 'from manimlib.mobject.mobject import Group'), (51, 'from typing import Generic, TypeVar, Iterable'), (55, '    from typing import Callable, Tuple, Any'), (1421, 'class VGroup(Group, VMobject, Generic[SubVmobjectType]):'), (1422, '    def __init__(self, *vmobjects: SubVmobjectType | Iterable[SubVmobjectType], **kwargs):'), (1424, '        if any(isinstance(vmob, Mobject) and not isinstance(vmob, VMobject) for vmob in vmobjects):'), (1425, '            raise Exception(""Only VMobjects can be passed into VGroup"")'), (1426, '        self._ingest_args(*vmobjects)'), (1427, '        if self.submobjects:'), (1428, '            self.uniforms.update(self.submobjects[0].uniforms)')]","[(50, 'from typing import Generic, TypeVar'), (54, '    from typing import Callable, Iterable, Tuple, Any'), (1420, 'class VGroup(VMobject, Generic[SubVmobjectType]):'), (1421, '    def __init__(self, *vmobjects: SubVmobjectType, **kwargs):'), (1423, '        self.add(*vmobjects)'), (1424, '        if vmobjects:'), (1425, '            self.uniforms.update(vmobjects[0].uniforms)')]",No
manimlib/animation/composition.py,manimlib/animation/composition.py,2380ffd6162304e75d574c044301875329be2e3f,1372cf101cc6e97a863c0eb2a58a46155bd3a225,Allow LaggedStart to accept an iterable as an argument,"[(16, 'from typing import TYPE_CHECKING, Union, Iterable'), (17, 'AnimationType = Union[Animation, _AnimationBuilder]'), (32, '        *args: AnimationType | Iterable[AnimationType],'), (39, '        animations = args[0] if isinstance(args[0], Iterable) else args')]","[(16, 'from typing import TYPE_CHECKING'), (31, '        *animations: Animation | _AnimationBuilder,')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a6b46c641bd6ca97036670a33493f5f6360411fa,2380ffd6162304e75d574c044301875329be2e3f,"Add Mobject.always and Mobject.f_always

For nicer syntax in creating updaters","[(165, '    @property'), (166, '    def always(self) -> _UpdaterBuilder:'), (167, '        """"""'), (168, '        Methods called with mobject.always.method(*args, **kwargs)'), (169, '        will result in the call mobject.method(*args, **kwargs)'), (170, '        on every frame'), (171, '        """"""'), (172, '        return _UpdaterBuilder(self)'), (173, ''), (174, '    @property'), (175, '    def f_always(self) -> _FunctionalUpdaterBuilder:'), (176, '        """"""'), (177, '        Similar to Mobject.always, but with the intent that arguments'), (178, '        are functions returning the corresponding type fit for the method'), (179, '        Methods called with'), (180, '        mobject.f_always.method('), (181, '            func1, func2, ...,'), (182, '            kwarg1=kw_func1,'), (183, '            kwarg2=kw_func2,'), (184, '            ...'), (185, '        )'), (186, '        will result in the call'), (187, '        mobject.method('), (188, '            func1(), func2(), ...,'), (189, '            kwarg1=kw_func1(),'), (190, '            kwarg2=kw_func2(),'), (191, '            ...'), (192, '        )'), (193, '        on every frame'), (194, '        """"""'), (195, '        return _FunctionalUpdaterBuilder(self)'), (196, ''), (2299, ''), (2300, ''), (2301, 'class _UpdaterBuilder:'), (2302, '    def __init__(self, mobject: Mobject):'), (2303, '        self.mobject = mobject'), (2304, ''), (2305, '    def __getattr__(self, method_name: str):'), (2306, '        def add_updater(*method_args, **method_kwargs):'), (2307, '            self.mobject.add_updater('), (2308, '                lambda m: getattr(m, method_name)(*method_args, **method_kwargs)'), (2309, '            )'), (2310, '            return self'), (2311, '        return add_updater'), (2312, ''), (2313, ''), (2314, 'class _FunctionalUpdaterBuilder:'), (2315, '    def __init__(self, mobject: Mobject):'), (2316, '        self.mobject = mobject'), (2317, ''), (2318, '    def __getattr__(self, method_name: str):'), (2319, '        def add_updater(*method_args, **method_kwargs):'), (2320, '            self.mobject.add_updater('), (2321, '                lambda m: getattr(m, method_name)('), (2322, '                    *(arg() for arg in method_args),'), (2323, '                    **{'), (2324, '                        key: value()'), (2325, '                        for key, value in method_kwargs.items()'), (2326, '                    }'), (2327, '                )'), (2328, '            )'), (2329, '            return self'), (2330, '        return add_updater')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,3c778ba678e4d11408ee281a9259a35275b47e12,a6b46c641bd6ca97036670a33493f5f6360411fa,Add comment to Mobject.animate,"[(162, '        """"""'), (163, '        Methods called with Mobject.animate.method() can be passed'), (164, '        into a Scene.play call, as if you were calling'), (165, '        ApplyMethod(mobject.method)'), (166, ''), (167, '        Borrowed from https://github.com/ManimCommunity/manim/'), (168, '        """"""')]","[(162, '        # Borrowed from https://github.com/ManimCommunity/manim/')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e124aecd6b037af390acfeb8948d91cd2ac6bd7f,3c778ba678e4d11408ee281a9259a35275b47e12,Clarify Mobject.needs_new_bounding_box is private,"[(107, '        self._is_animating: bool = False'), (108, '        self._needs_new_bounding_box: bool = True'), (334, '        if self._needs_new_bounding_box:'), (336, '            self._needs_new_bounding_box = False'), (363, '            mob._needs_new_bounding_box = True'), (421, '    def get_family(self, recurse: bool = True) -> list[Mobject]:'), (747, '            sm1._needs_new_bounding_box = sm2._needs_new_bounding_box')]","[(104, '        self.needs_new_bounding_box: bool = True'), (105, '        self._is_animating: bool = False'), (334, '        if self.needs_new_bounding_box:'), (336, '            self.needs_new_bounding_box = False'), (363, '            mob.needs_new_bounding_box = True'), (421, '    def get_family(self, recurse: bool = True) -> list[Self]:'), (747, '            sm1.needs_new_bounding_box = sm2.needs_new_bounding_box')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,4b14c11e4b2b97c7436dfe3f8823a700062985cb,e124aecd6b037af390acfeb8948d91cd2ac6bd7f,Only reconstruct family as needed,"[(100, '        self.family: list[Mobject] | None = [self]'), (412, '    def note_updated_family(self, only_changed_order=False) -> Self:'), (413, '        self.family = None'), (414, '        if not only_changed_order:'), (415, '            self.refresh_has_updater_status()'), (416, '            self.refresh_bounding_box()'), (418, '            parent.note_updated_family()'), (422, '        if not recurse:'), (424, '        if self.family is None:'), (425, '            # Reconstruct and save'), (426, '            sub_families = (sm.get_family() for sm in self.submobjects)'), (427, '            self.family = [self, *it.chain(*sub_families)]'), (428, '        return self.family'), (430, '    def family_members_with_points(self) -> list[Mobject]:'), (431, '        return [m for m in self.get_family() if len(m.data) > 0]'), (462, '        self.note_updated_family()'), (478, '                parent.note_updated_family()'), (495, '        self.note_updated_family()'), (500, '        self.note_updated_family()'), (612, '        self.note_updated_family(only_changed_order=True)'), (620, '        self.note_updated_family(only_changed_order=True)'), (625, '        self.note_updated_family(only_changed_order=True)'), (698, '                    setattr(result, attr, result.family[family.index(value)])')]","[(100, '        self.family: list[Mobject] = [self]'), (412, '    def assemble_family(self) -> Self:'), (413, '        sub_families = (sm.get_family() for sm in self.submobjects)'), (414, '        self.family = [self, *it.chain(*sub_families)]'), (415, '        self.refresh_has_updater_status()'), (416, '        self.refresh_bounding_box()'), (418, '            parent.assemble_family()'), (422, '        if recurse:'), (423, '            return self.family'), (424, '        else:'), (427, '    def family_members_with_points(self) -> list[Self]:'), (428, '        return [m for m in self.family if len(m.data) > 0]'), (459, '        self.assemble_family()'), (475, '                parent.assemble_family()'), (492, '        self.assemble_family()'), (497, '        self.assemble_family()'), (609, '        self.assemble_family()'), (617, '        self.assemble_family()'), (622, '        self.assemble_family()'), (695, '                    setattr(result, attr, result.family[self.family.index(value)])')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,fd35433a6285e014aa5377cc0aece32e1a2d10c4,4b14c11e4b2b97c7436dfe3f8823a700062985cb,Change name note_updated_family -> note_changed_family,"[(412, '    def note_changed_family(self, only_changed_order=False) -> Self:'), (418, '            parent.note_changed_family()'), (462, '        self.note_changed_family()'), (478, '                parent.note_changed_family()'), (495, '        self.note_changed_family()'), (500, '        self.note_changed_family()'), (612, '        self.note_changed_family(only_changed_order=True)'), (620, '        self.note_changed_family(only_changed_order=True)'), (625, '        self.note_changed_family(only_changed_order=True)')]","[(412, '    def note_updated_family(self, only_changed_order=False) -> Self:'), (418, '            parent.note_updated_family()'), (462, '        self.note_updated_family()'), (478, '                parent.note_updated_family()'), (495, '        self.note_updated_family()'), (500, '        self.note_updated_family()'), (612, '        self.note_updated_family(only_changed_order=True)'), (620, '        self.note_updated_family(only_changed_order=True)'), (625, '        self.note_updated_family(only_changed_order=True)')]",No
manimlib/animation/transform.py,manimlib/animation/transform.py,70b839e188bc1837b7ddd992edbc0a64ea626e61,fd35433a6285e014aa5377cc0aece32e1a2d10c4,Change to only compute has_updater status as needed,"[(68, '        if not self.mobject.has_updaters():')]","[(68, '        if not self.mobject.has_updaters:')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,70b839e188bc1837b7ddd992edbc0a64ea626e61,fd35433a6285e014aa5377cc0aece32e1a2d10c4,Change to only compute has_updater status as needed,"[(840, '        if not self.has_updaters() or self.updating_suspended:'), (865, '        update_func: Updater,'), (868, '        if ""dt"" in get_parameters(update_func):'), (869, '            self.time_based_updaters.append(update_func)'), (871, '            self.non_time_updaters.append(update_func)'), (873, '        if call_updater:'), (874, '            self.update(dt=0)'), (875, ''), (876, '        self.refresh_has_updater_status()'), (877, '        return self'), (878, ''), (879, '    def insert_updater(self, update_func: Updater, index=0):'), (880, '        if ""dt"" in get_parameters(update_func):'), (881, '            self.time_based_updaters.insert(index, update_func)'), (883, '            self.non_time_updaters.insert(index, update_func)'), (888, '    def remove_updater(self, update_func: Updater) -> Self:'), (890, '            while update_func in updater_list:'), (891, '                updater_list.remove(update_func)'), (928, '    def has_updaters(self) -> bool:'), (929, '        if self._has_updaters_in_family is None:'), (930, '            # Recompute and save'), (931, '            res = bool(self.time_based_updaters or self.non_time_updaters)'), (932, '            self._has_updaters_in_family = res or any(sm.has_updaters() for sm in self.submobjects)'), (933, '        return self._has_updaters_in_family'), (934, ''), (936, '        for mob in (self, *self.parents):'), (937, '            mob._has_updaters_in_family = None'), (943, '        return self._is_animating or self.has_updaters()'), (1878, '        if self.has_updaters():'), (1884, '        if self.has_updaters():')]","[(840, '        if not self.has_updaters or self.updating_suspended:'), (865, '        update_function: Updater,'), (866, '        index: int | None = None,'), (869, '        if ""dt"" in get_parameters(update_function):'), (870, '            updater_list = self.time_based_updaters'), (872, '            updater_list = self.non_time_updaters'), (874, '        if index is None:'), (875, '            updater_list.append(update_function)'), (877, '            updater_list.insert(index, update_function)'), (880, '        for parent in self.parents:'), (881, '            parent.has_updaters = True'), (882, '        if call_updater:'), (883, '            self.update(dt=0)'), (886, '    def remove_updater(self, update_function: Updater) -> Self:'), (888, '            while update_function in updater_list:'), (889, '                updater_list.remove(update_function)'), (927, '        self.has_updaters = any(mob.get_updaters() for mob in self.get_family())'), (933, '        return self._is_animating or self.has_updaters'), (1868, '        if self.has_updaters:'), (1874, '        if self.has_updaters:')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,83cd5d6246aa0be7f37b3bada34c46e57ef68508,70b839e188bc1837b7ddd992edbc0a64ea626e61,"Clean up updater matters, prune unused functions","[(43, 'from manimlib.utils.simple_functions import get_num_args'), (55, '    from typing import Callable, Iterator, Union, Tuple, Optional, Any'), (835, '        self.time_based_updaters: list[TimeBasedUpdater] = list()'), (836, '        self.non_time_updaters: list[NonTimeUpdater] = list()'), (837, '        self._has_updaters_in_family: Optional[bool] = False'), (853, '        return [*self.time_based_updaters, *self.non_time_updaters]'), (855, '    def add_updater(self, update_func: Updater, call: bool = True) -> Self:'), (856, '        if get_num_args(update_func) > 1:'), (861, '        if call:'), (868, '        if get_num_args(update_func) > 1:')]","[(54, '    from typing import Callable, Iterator, Union, Tuple, Optional'), (834, '        self.time_based_updaters: list[TimeBasedUpdater] = []'), (835, '        self.non_time_updaters: list[NonTimeUpdater] = []'), (836, '        self.has_updaters: bool = False'), (851, '    def get_time_based_updaters(self) -> list[TimeBasedUpdater]:'), (852, '        return self.time_based_updaters'), (853, ''), (854, '    def has_time_based_updater(self) -> bool:'), (855, '        return len(self.time_based_updaters) > 0'), (856, ''), (858, '        return self.time_based_updaters + self.non_time_updaters'), (859, ''), (860, '    def get_family_updaters(self) -> list[Updater]:'), (861, '        return list(it.chain(*[sm.get_updaters() for sm in self.get_family()]))'), (863, '    def add_updater('), (864, '        self,'), (865, '        update_func: Updater,'), (866, '        call_updater: bool = True'), (867, '    ) -> Self:'), (868, '        if ""dt"" in get_parameters(update_func):'), (873, '        if call_updater:'), (880, '        if ""dt"" in get_parameters(update_func):')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,83cd5d6246aa0be7f37b3bada34c46e57ef68508,70b839e188bc1837b7ddd992edbc0a64ea626e61,"Clean up updater matters, prune unused functions","[(348, '        return self.always_update_mobjects or any('), (349, '            mob.has_updaters() for mob in self.mobjects'), (350, '        )')]","[(348, '        return self.always_update_mobjects or any(['), (349, '            len(mob.get_family_updaters()) > 0'), (350, '            for mob in self.mobjects'), (351, '        ])'), (352, ''), (353, '    def has_time_based_updaters(self) -> bool:'), (354, '        return any(['), (355, '            sm.has_time_based_updater()'), (356, '            for mob in self.mobjects()'), (357, '            for sm in mob.get_family()'), (358, '        ])')]",No
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,83cd5d6246aa0be7f37b3bada34c46e57ef68508,70b839e188bc1837b7ddd992edbc0a64ea626e61,"Clean up updater matters, prune unused functions","[(12, '    from typing import Callable, TypeVar, Iterable'), (33, '    return len(list(get_parameters(function)))'), (36, 'def get_parameters(function: Callable) -> Iterable[str]:'), (37, '    return inspect.signature(function).parameters.keys()')]","[(12, '    from typing import Callable, TypeVar'), (33, '    return len(get_parameters(function))'), (36, 'def get_parameters(function: Callable) -> list:'), (37, '    return list(inspect.signature(function).parameters.keys())')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d3ba101ee5960cc920e756a73245ee2ac3986805,83cd5d6246aa0be7f37b3bada34c46e57ef68508,Change from tracking time_based_updater and non_time_updater lists separately to just tracking one list,"[(688, '        result.updaters = list(self.updaters)'), (832, '        self.updaters: list[Updater] = list()'), (842, '        for updater in self.updaters:'), (843, '            # This is hacky, but if an updater takes dt as an arg,'), (844, '            # it will be passed the change in time from here'), (845, '            if ""dt"" in updater.__code__.co_varnames:'), (846, '                updater(self, dt=dt)'), (847, '            else:'), (848, '                updater(self)'), (852, '        return self.updaters'), (855, '        self.updaters.append(update_func)'), (862, '        self.updaters.insert(index, update_func)'), (867, '        while update_func in self.updaters:'), (868, '            self.updaters.remove(update_func)'), (873, '        for mob in self.get_family(recurse):'), (874, '            mob.updaters = []'), (875, '            mob._has_updaters_in_family = False'), (876, '        for parent in self.get_ancestors():'), (877, '            parent._has_updaters_in_family = False'), (881, '        self.updaters = list(mobject.updaters)'), (882, '        self.refresh_has_updater_status()'), (906, '            self._has_updaters_in_family = bool(self.updaters) or any('), (907, '                sm.has_updaters() for sm in self.submobjects'), (908, '            )'), (912, '        self._has_updaters_in_family = None'), (913, '        for parent in self.parents:'), (914, '            parent.refresh_has_updater_status()')]","[(42, 'from manimlib.utils.simple_functions import get_parameters'), (43, 'from manimlib.utils.simple_functions import get_num_args'), (690, '        result.non_time_updaters = list(self.non_time_updaters)'), (691, '        result.time_based_updaters = list(self.time_based_updaters)'), (835, '        self.time_based_updaters: list[TimeBasedUpdater] = list()'), (836, '        self.non_time_updaters: list[NonTimeUpdater] = list()'), (846, '        for updater in self.time_based_updaters:'), (847, '            updater(self, dt)'), (848, '        for updater in self.non_time_updaters:'), (849, '            updater(self)'), (853, '        return [*self.time_based_updaters, *self.non_time_updaters]'), (856, '        if get_num_args(update_func) > 1:'), (857, '            self.time_based_updaters.append(update_func)'), (858, '        else:'), (859, '            self.non_time_updaters.append(update_func)'), (860, ''), (863, ''), (868, '        if get_num_args(update_func) > 1:'), (869, '            self.time_based_updaters.insert(index, update_func)'), (870, '        else:'), (871, '            self.non_time_updaters.insert(index, update_func)'), (872, ''), (877, '        for updater_list in [self.time_based_updaters, self.non_time_updaters]:'), (878, '            while update_func in updater_list:'), (879, '                updater_list.remove(update_func)'), (884, '        self.time_based_updaters = []'), (885, '        self.non_time_updaters = []'), (886, '        if recurse:'), (887, '            for submob in self.submobjects:'), (888, '                submob.clear_updaters()'), (889, '        self.refresh_has_updater_status()'), (893, '        self.clear_updaters()'), (894, '        for updater in mobject.get_updaters():'), (895, '            self.add_updater(updater)'), (919, '            res = bool(self.time_based_updaters or self.non_time_updaters)'), (920, '            self._has_updaters_in_family = res or any(sm.has_updaters() for sm in self.submobjects)'), (924, '        for mob in (self, *self.parents):'), (925, '            mob._has_updaters_in_family = None')]",No
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,d3ba101ee5960cc920e756a73245ee2ac3986805,83cd5d6246aa0be7f37b3bada34c46e57ef68508,Change from tracking time_based_updater and non_time_updater lists separately to just tracking one list,"[(33, '    return function.__code__.co_argcount')]","[(33, '    return len(list(get_parameters(function)))')]",No
example_scenes.py,example_scenes.py,226d649ee602ff077d28fd757670eadef8bf9d0b,d3ba101ee5960cc920e756a73245ee2ac3986805,Change UpdatersExample scene to feature .always and .f_always syntax,"[(296, '        label.always.next_to(brace, UP)'), (305, '        number.f_always.set_value(square.get_width)')]","[(296, '        always(label.next_to, brace, UP)'), (305, '        f_always(number.set_value, square.get_width)')]",No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,27f397e0a6c6a884fb9f7cb7193fbfe3c33feee0,2c110790d259636e1ace5d63b7d682642a864a30,Have stroke width change continuously with fixed_in_frame status,"[(24, '    v_stroke_width *= mix(frame_scale, 1, is_fixed_in_frame);')]","[(24, '    if(!bool(is_fixed_in_frame)){'), (25, '        v_stroke_width *= frame_scale;'), (26, '    }')]",No
example_scenes.py,example_scenes.py,8235607b2a45849bc799b79049678668f091a635,4729e44e057fcc4f02b4d6bdb64c010af4a540b3,remove include_background_rectangle,"[(29, '            IntegerMatrix(matrix),')]","[(29, '            IntegerMatrix(matrix, include_background_rectangle=True),')]",No
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,fa99eafe2b50efa623df5386be11653352c575ab,226d649ee602ff077d28fd757670eadef8bf9d0b,Account for rgba case in point_to_rgb,"[(74, '        ))[:3]')]","[(74, '        ))')]",No
manimlib/animation/composition.py,manimlib/animation/composition.py,7db69e32aa6a0763aa2053dbdf95a33b18d43919,fa99eafe2b50efa623df5386be11653352c575ab,Update input type to LaggedStartMap,"[(171, '        anim_func: Callable[[Mobject], Animation] | Animation,')]","[(171, '        anim_func: Callable[[Mobject], Animation],')]",No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,b26feb70458cd212b911ea152b08391ca7c032b1,7db69e32aa6a0763aa2053dbdf95a33b18d43919,Adjust Underline configuration,"[(121, '        stroke_width: float | Sequence[float] = [0, 2, 3, 3, 2, 0],'), (125, '        super().__init__(LEFT, RIGHT, **kwargs)'), (126, '        if not isinstance(stroke_width, (float, int)):'), (127, '            self.insert_n_curves(len(stroke_width) - 2)')]","[(121, '        stroke_width: float | Sequence[float] = [0, 3, 3, 0],'), (125, '        super().__init__('), (126, '            LEFT, RIGHT,'), (127, '            stroke_color=stroke_color,'), (128, '            stroke_width=stroke_width,'), (129, '            **kwargs'), (130, '        )'), (131, '        self.insert_n_curves(30)')]",No
manimlib/animation/composition.py,manimlib/animation/composition.py,6b3834739c3a687f434a8d7070c2c3e05f1bb465,b26feb70458cd212b911ea152b08391ca7c032b1,Undo redundant previous tweak to LaggedStartMap input type,"[(171, '        anim_func: Callable[[Mobject], Animation],')]","[(171, '        anim_func: Callable[[Mobject], Animation] | Animation,')]",No
example_scenes.py,example_scenes.py,7e6a37d4996ff43f673d63ba088d777896fa3f2e,6b3834739c3a687f434a8d7070c2c3e05f1bb465,Typo fix: make_number_changable -> make_number_changeable,"[(292, '        number = label.make_number_changeable(""0.00"")'), (518, '        value = tex.make_number_changeable(""4.00"")'), (540, '        # By default, tex.make_number_changeable replaces the first occurance'), (543, '        exponents = tex.make_number_changeable(""2"", replace_all=True)')]","[(292, '        number = label.make_number_changable(""0.00"")'), (518, '        value = tex.make_number_changable(""4.00"")'), (540, '        # By default, tex.make_number_changable replaces the first occurance'), (543, '        exponents = tex.make_number_changable(""2"", replace_all=True)')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,7e6a37d4996ff43f673d63ba088d777896fa3f2e,6b3834739c3a687f434a8d7070c2c3e05f1bb465,Typo fix: make_number_changable -> make_number_changeable,"[(234, '    def make_number_changeable('), (244, '            log.warning(f""{value} not found in Tex.make_number_changeable call"")')]","[(234, '    def make_number_changable('), (244, '            log.warning(f""{value} not found in Tex.make_number_changable call"")')]",No
manimlib/__init__.py,manimlib/__init__.py,223d671eea295401f993a968628b11242ff5a5fe,7e6a37d4996ff43f673d63ba088d777896fa3f2e,Remove redundancy,[],"[(46, 'from manimlib.mobject.svg.tex_mobject import *')]",No
manimlib/animation/fading.py,manimlib/animation/fading.py,ec42326618125d95dffc7c9c4654bd9d559e7eeb,223d671eea295401f993a968628b11242ff5a5fe,Fix remover=True case for FadeTransform,"[(137, '        if not self.remover:'), (138, '            scene.add(self.to_add_on_completion)')]","[(137, '        scene.add(self.to_add_on_completion)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0509e824c63af8be0681fbb96dbf8ac288388066,ec42326618125d95dffc7c9c4654bd9d559e7eeb,Have border_width default to 0 for lower opacity,"[(193, '        if border_width is None:'), (194, '            border_width = 0 if self.get_fill_opacity() < 1 else 0.5'), (195, '        for mob in self.get_family(recurse):'), (196, '            mob.data[""fill_border_width""] = border_width')]","[(193, '        if border_width is not None:'), (194, '            for mob in self.get_family(recurse):'), (195, '                mob.data[""fill_border_width""] = border_width')]",No
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,1d6aa47933833442dd57f949b892a48a187355af,0509e824c63af8be0681fbb96dbf8ac288388066,Reimplement SpeechBubble and ThoughtBubble,"[(5, 'import random'), (28, 'from manimlib.constants import LARGE_BUFF'), (46, 'from manimlib.mobject.boolean_ops import Union'), (57, 'from manimlib.mobject.shape_matchers import SurroundingRectangle'), (66, 'from manimlib.mobject.svg.text_mobject import Text'), (67, 'from manimlib.utils.bezier import interpolate'), (68, 'from manimlib.utils.iterables import adjacent_pairs'), (72, 'from manimlib.utils.space_ops import get_norm'), (355, 'class Bubble(VGroup):'), (357, '    bubble_center_adjustment_factor = 0.125'), (361, '        content: str | VMobject | None = None,'), (362, '        buff: float = 1.0,'), (363, '        filler_shape: Tuple[float, float] = (3.0, 2.0),'), (364, '        pin_point: Vect3 | None = None,'), (366, '        add_content: bool = True,'), (373, '        super().__init__(**kwargs)'), (374, '        self.direction = direction'), (376, '        if content is None:'), (377, '            content = Rectangle(*filler_shape)'), (378, '            content.set_fill(opacity=0)'), (379, '            content.set_stroke(width=0)'), (380, '        elif isinstance(content, str):'), (381, '            content = Text(content)'), (382, '        self.content = content'), (384, '        self.body = self.get_body(content, direction, buff)'), (385, '        self.body.set_fill(fill_color, fill_opacity)'), (386, '        self.body.set_stroke(stroke_color, stroke_width)'), (387, '        self.add(self.body)'), (388, ''), (389, '        if add_content:'), (390, '            self.add(self.content)'), (392, '        if pin_point is not None:'), (393, '            self.pin_to(pin_point)'), (394, ''), (395, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (396, '        body = SVGMobject(self.file_name)'), (397, '        if direction[0] > 0:'), (398, '            body.flip()'), (399, '        # Resize'), (400, '        width = content.get_width()'), (401, '        height = content.get_height()'), (402, '        target_width = width + min(buff, height)'), (403, '        target_height = 1.35 * (height + buff)  # Magic number?'), (404, '        body.set_shape(target_width, target_height)'), (405, '        body.move_to(content)'), (406, '        body.shift(self.bubble_center_adjustment_factor * body.get_height() * DOWN)'), (407, '        return body'), (410, '        return self.get_corner(DOWN + self.direction)'), (417, '        self.shift(point - self.get_tip())'), (420, '    def flip(self, axis=UP, only_body=True, **kwargs):'), (421, '        if only_body:'), (422, '            self.body.flip(axis=axis, **kwargs)'), (423, '        else:'), (424, '            super().flip(axis=axis, **kwargs)'), (439, '    def position_mobject_inside(self, mobject, buff=MED_LARGE_BUFF):'), (440, '        mobject.set_max_width(self.body.get_width() - 2 * buff)'), (441, '        mobject.set_max_height(self.body.get_height() / 1.5 - 2 * buff)'), (450, '    def write(self, text):'), (451, '        self.add_content(Text(text))'), (454, '    def resize_to_content(self, buff=1.0):  # TODO'), (455, '        self.body.match_points(self.get_body('), (456, '            self.content, self.direction, buff'), (457, '        ))'), (460, '        self.remove(self.content)'), (465, '    def __init__('), (466, '        self,'), (467, '        content: str | VMobject | None = None,'), (468, '        buff: float = MED_SMALL_BUFF,'), (469, '        filler_shape: Tuple[float, float] = (2.0, 1.0),'), (470, '        stem_height_to_bubble_height: float = 0.5,'), (471, '        stem_top_x_props: Tuple[float, float] = (0.2, 0.3),'), (472, '        **kwargs'), (473, '    ):'), (474, '        self.stem_height_to_bubble_height = stem_height_to_bubble_height'), (475, '        self.stem_top_x_props = stem_top_x_props'), (476, '        super().__init__(content, buff, filler_shape, **kwargs)'), (477, ''), (478, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (479, '        rect = SurroundingRectangle(content, buff=buff)'), (480, '        rect.round_corners()'), (481, '        lp = rect.get_corner(DL)'), (482, '        rp = rect.get_corner(DR)'), (483, '        stem_height = self.stem_height_to_bubble_height * rect.get_height()'), (484, '        low_prop, high_prop = self.stem_top_x_props'), (485, '        triangle = Polygon('), (486, '            interpolate(lp, rp, low_prop),'), (487, '            interpolate(lp, rp, high_prop),'), (488, '            lp + stem_height * DOWN,'), (489, '        )'), (490, '        result = Union(rect, triangle)'), (491, '        result.insert_n_curves(20)'), (492, '        if direction[0] > 0:'), (493, '            result.flip()'), (494, ''), (495, '        return result'), (496, ''), (497, ''), (498, 'class ThoughtBubble(Bubble):'), (499, '    def __init__('), (500, '        self,'), (501, '        content: str | VMobject | None = None,'), (502, '        buff: float = SMALL_BUFF,'), (503, '        filler_shape: Tuple[float, float] = (2.0, 1.0),'), (504, '        bulge_radius: float = 0.35,'), (505, '        bulge_overlap: float = 0.25,'), (506, '        noise_factor: float = 0.1,'), (507, '        circle_radii: list[float] = [0.1, 0.15, 0.2],'), (508, '        **kwargs'), (509, '    ):'), (510, '        self.bulge_radius = bulge_radius'), (511, '        self.bulge_overlap = bulge_overlap'), (512, '        self.noise_factor = noise_factor'), (513, '        self.circle_radii = circle_radii'), (514, '        super().__init__(content, buff, filler_shape, **kwargs)'), (515, ''), (516, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (517, '        rect = SurroundingRectangle(content, buff)'), (518, '        perimeter = rect.get_arc_length()'), (519, '        radius = self.bulge_radius'), (520, '        step = (1 - self.bulge_overlap) * (2 * radius)'), (521, '        nf = self.noise_factor'), (522, '        corners = [rect.get_corner(v) for v in [DL, UL, UR, DR]]'), (523, '        points = []'), (524, '        for c1, c2 in adjacent_pairs(corners):'), (525, '            n_alphas = int(get_norm(c1 - c2) / step) + 1'), (526, '            for alpha in np.linspace(0, 1, n_alphas):'), (527, '                points.append(interpolate('), (528, '                    c1, c2, alpha + nf * (step / n_alphas) * (random.random() - 0.5)'), (529, '                ))'), (530, ''), (531, '        cloud = Union(rect, *('), (532, '            # Add bulges'), (533, '            Circle(radius=radius * (1 + nf * random.random())).move_to(point)'), (534, '            for point in points'), (535, '        ))'), (536, '        cloud.set_stroke(WHITE, 2)'), (537, ''), (538, '        circles = VGroup(Circle(radius=radius) for radius in self.circle_radii)'), (539, '        circ_buff = 0.25 * self.circle_radii[0]'), (540, '        circles.arrange(UR, buff=circ_buff)'), (541, '        circles[1].shift(circ_buff * DR)'), (542, '        circles.next_to(cloud, DOWN, 4 * circ_buff, aligned_edge=LEFT)'), (543, '        circles.set_stroke(WHITE, 2)'), (544, ''), (545, '        result = VGroup(*circles, cloud)'), (546, ''), (547, '        if direction[0] > 0:'), (548, '            result.flip()'), (549, ''), (550, '        return result'), (551, ''), (552, ''), (553, 'class OldSpeechBubble(Bubble):'), (561, 'class OldThoughtBubble(Bubble):'), (564, '    def get_body(self, content: VMobject, direction: Vect3, buff: float) -> VMobject:'), (565, '        body = super().get_body(content, direction, buff)'), (566, '        body.sort(lambda p: p[1])'), (567, '        return body'), (570, '        self.body[-1].set_fill(GREEN_SCREEN, opacity=1)')]","[(347, 'class Bubble(SVGMobject):'), (353, '        center_point: Vect3 = ORIGIN,'), (354, '        content_scale_factor: float = 0.7,'), (355, '        height: float = 4.0,'), (356, '        width: float = 8.0,'), (357, '        max_height: float | None = None,'), (358, '        max_width: float | None = None,'), (359, '        bubble_center_adjustment_factor: float = 0.125,'), (366, '        self.direction = LEFT  # Possibly updated below by self.flip()'), (367, '        self.bubble_center_adjustment_factor = bubble_center_adjustment_factor'), (368, '        self.content_scale_factor = content_scale_factor'), (370, '        super().__init__('), (371, '            fill_color=fill_color,'), (372, '            fill_opacity=fill_opacity,'), (373, '            stroke_color=stroke_color,'), (374, '            stroke_width=stroke_width,'), (375, '            **kwargs'), (376, '        )'), (378, '        self.center()'), (379, '        self.set_height(height, stretch=True)'), (380, '        self.set_width(width, stretch=True)'), (381, '        if max_height:'), (382, '            self.set_max_height(max_height)'), (383, '        if max_width:'), (384, '            self.set_max_width(max_width)'), (385, '        if direction[0] > 0:'), (386, '            self.flip()'), (388, '        self.content = VMobject()'), (391, '        # TODO, find a better way'), (392, '        return self.get_corner(DOWN + self.direction) - 0.6 * self.direction'), (399, '        mover = VGroup(self)'), (400, '        if self.content is not None:'), (401, '            mover.add(self.content)'), (402, '        mover.shift(point - self.get_tip())'), (405, '    def flip(self, axis=UP):'), (406, '        super().flip(axis=axis)'), (421, '    def position_mobject_inside(self, mobject):'), (422, '        mobject.set_max_width(self.content_scale_factor * self.get_width())'), (423, '        mobject.set_max_height(self.content_scale_factor * self.get_height() / 1.5)'), (432, '    def write(self, *text):'), (433, '        self.add_content(TexText(*text))'), (436, '    def resize_to_content(self, buff=0.75):'), (437, '        width = self.content.get_width()'), (438, '        height = self.content.get_height()'), (439, '        target_width = width + min(buff, height)'), (440, '        target_height = 1.35 * (self.content.get_height() + buff)'), (441, '        tip_point = self.get_tip()'), (442, '        self.stretch_to_fit_width(target_width, about_point=tip_point)'), (443, '        self.stretch_to_fit_height(target_height, about_point=tip_point)'), (444, '        self.position_mobject_inside(self.content)'), (447, '        self.add_content(VMobject())'), (459, 'class ThoughtBubble(Bubble):'), (462, '    def __init__(self, **kwargs):'), (463, '        Bubble.__init__(self, **kwargs)'), (464, '        self.submobjects.sort('), (465, '            key=lambda m: m.get_bottom()[1]'), (466, '        )'), (469, '        self.submobjects[-1].set_fill(GREEN_SCREEN, opacity=1)')]",No
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,7565e936fa32579d610890f4a40977cd43c768e0,1d6aa47933833442dd57f949b892a48a187355af,Better bubble flipping,"[(421, '        super().flip(axis=axis, **kwargs)'), (423, ""            # Flip in place, don't use kwargs""), (424, '            self.content.flip(axis=axis)')]","[(422, '            self.body.flip(axis=axis, **kwargs)'), (423, '        else:'), (424, '            super().flip(axis=axis, **kwargs)')]",No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,920f2407e03d8416ba56fb2f333ebc7c9c115fea,7565e936fa32579d610890f4a40977cd43c768e0,Revert default underline stroke width,"[(121, '        stroke_width: float | Sequence[float] = [0, 3, 3, 0],')]","[(121, '        stroke_width: float | Sequence[float] = [0, 2, 3, 3, 2, 0],')]",No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,f5d1a9c449bb0bbb878888aa1753fe6adfaf2398,920f2407e03d8416ba56fb2f333ebc7c9c115fea,Keep track of original float matrix in DecimalMatrix,"[(225, '        self.float_matrix = matrix')]",[],No
manimlib/animation/fading.py,manimlib/animation/fading.py,772a3283023ed8965dee5e759912278eeedcbaa9,f5d1a9c449bb0bbb878888aa1753fe6adfaf2398,Have FadeTransform target match all uniforms of source,"[(121, '        source.set_uniform(**target.get_uniforms())')]",[],No
example_scenes.py,example_scenes.py,c970f776bba4a0f4070c876aaeab72a3dca39835,4729e44e057fcc4f02b4d6bdb64c010af4a540b3,Removed old argument from example,"[(29, '            IntegerMatrix(matrix),')]","[(29, '            IntegerMatrix(matrix, include_background_rectangle=True),')]",No
manimlib/utils/rate_functions.py,manimlib/utils/rate_functions.py,ab28804ae5776d480e88fb38c11593919aeee6fb,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,fix: `there_and_back_with_pause`,"[(49, '    a = 2. / (1. - pause_ratio)')]","[(49, '    a = 1. / pause_ratio')]",No
manimlib/tex_templates.yml,manimlib/tex_templates.yml,63e98eee94aa74f4efac66c5e1cabcae414b0aff,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,"Update tex_templates.yml

Fix the error when using Chinese, and add international typesetting support","[(48, '    \\usepackage{fontspec}'), (49, '    \\usepackage{xeCJK}'), (50, '    \\setmainfont{Microsoft YaHei}')]",[],No
manimlib/animation/composition.py,manimlib/animation/composition.py,4feb831a11054d32f5fc7e4aa294f8b8387f1633,772a3283023ed8965dee5e759912278eeedcbaa9,Pass group parameter in LaggedStartMap -> AnimationGroup,"[(183, '            group=group')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,a07ccf4aca1b6400d559c956c3b4932f5c256b47,4feb831a11054d32f5fc7e4aa294f8b8387f1633,"Include *args, **kwargs in embed shell event pre_cell and post_cell functions","[(216, '            # Embed is only relevant with a preview'), (217, '            return'), (264, '            lambda *args, **kwargs: shell.user_global_ns.update(shell.user_ns)'), (268, '        def post_cell_func(*args, **kwargs):'), (277, ""            # Show the error don't just swallow it"")]","[(216, '            return  # Embed is only relevant with a preview'), (263, '            lambda: shell.user_global_ns.update(shell.user_ns)'), (267, '        def post_cell_func():'), (276, ""            # still show the error don't just swallow it"")]",No
manimlib/animation/animation.py,manimlib/animation/animation.py,0eae42977a153e1627e87d4ea929c0a9f87dc4a8,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,fix(animation): `time_span` doesn't work for mobjects with submobjects,"[(150, '    def time_spanned_alpha(self, alpha: float) -> float:'), (151, '        if self.time_span is not None:'), (152, '            start, end = self.time_span'), (153, '            return clip(alpha * self.run_time - start, 0, end - start) / (end - start)'), (154, '        return alpha'), (155, ''), (158, '            sub_alpha = self.get_sub_alpha(self.time_spanned_alpha(alpha), i, len(self.families))')]","[(65, '            self.rate_func = squish_rate_func('), (66, '                self.rate_func, start / self.run_time, end / self.run_time,'), (67, '            )'), (155, '            sub_alpha = self.get_sub_alpha(alpha, i, len(self.families))')]",No
manimlib/animation/rotation.py,manimlib/animation/rotation.py,0eae42977a153e1627e87d4ea929c0a9f87dc4a8,88c7e9d2c96be1ea729b089c06cabb1bd3b2c187,fix(animation): `time_span` doesn't work for mobjects with submobjects,"[(51, '            self.rate_func(self.time_spanned_alpha(alpha)) * self.angle,')]","[(51, '            self.rate_func(alpha) * self.angle,')]",No
example_scenes.py,example_scenes.py,79c89ad34d1d479afb8268328d43c2c910eeed9c,a07ccf4aca1b6400d559c956c3b4932f5c256b47,Remove (outdated) background rectangle arg from example scene,"[(29, '            IntegerMatrix(matrix),'), (254, '')]","[(29, '            IntegerMatrix(matrix, include_background_rectangle=True),'), (254, '')]",No
manimlib/config.py,manimlib/config.py,d1314e5a3c95e52de28992d4da37718a90a2732a,79c89ad34d1d479afb8268328d43c2c910eeed9c,Catch screeninfo.ScreenInfoError error,"[(9, 'import screeninfo'), (436, '    try:'), (437, '        monitors = screeninfo.get_monitors()'), (438, '    except screeninfo.ScreenInfoError:'), (439, '        pass')]","[(9, 'from screeninfo import get_monitors'), (436, '    monitors = get_monitors()')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,57d4732ef12f88744c8abf81e3149bb9c9affee1,d1314e5a3c95e52de28992d4da37718a90a2732a,Remove unused lines,[],"[(606, '        xu = self.x_axis.get_unit_size()'), (607, '        yu = self.y_axis.get_unit_size()'), (608, '        zu = self.z_axis.get_unit_size()')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,a7765dcac3e9161c948e11e2f4f8af340d51bda6,57d4732ef12f88744c8abf81e3149bb9c9affee1,Change copy frame position command,"[(51, ""COPY_FRAME_POSITION_KEY = 'p'""), (508, '        elif char == ""d"" and modifiers == SHIFT_MODIFIER:')]","[(507, '        elif char == PAN_3D_KEY and modifiers == COMMAND_MODIFIER:')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,c1efd1490459c1bfe01e6892a021601f5ad91749,a7765dcac3e9161c948e11e2f4f8af340d51bda6,Add touch and notouch to embed vocabulary,"[(243, '            touch=lambda: shell.enable_gui(""manim""),'), (244, '            notouch=lambda: shell.enable_gui(None),')]",[],No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a105216a4776d458f998f58a0ec611af63f3ab79,c1efd1490459c1bfe01e6892a021601f5ad91749,Small clean up,"[(191, '            float sign = (i % 2 == 0 ? -1 : 1);')]","[(166, ''), (192, '            float sign = vec2(-1, 1)[i % 2];')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,bbc89d13e99587cd0b4fd4df1e51f5b910634617,a105216a4776d458f998f58a0ec611af63f3ab79,Don't save state after each embed cell call,[],"[(273, '            self.save_state()')]",No
manimlib/mobject/changing.py,manimlib/mobject/changing.py,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,bbc89d13e99587cd0b4fd4df1e51f5b910634617,Hot fix for Traicing Tail,"[(170, '        self.add_updater(lambda m: m.set_stroke(width=stroke_width, opacity=stroke_opacity))')]",[],No
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,First pass at a polyline implementation for stroke,"[(3, 'in float signed_dist_to_curve;'), (15, '    float signed_dist_to_region = abs(signed_dist_to_curve) - 0.5 * uv_stroke_width;'), (16, '    frag_color.a *= smoothstep(1.0, 0.0, signed_dist_to_region / uv_anti_alias_width);'), (17, '    frag_color.a += 0.2;  // undo')]","[(3, 'in vec2 uv_coords;'), (4, ''), (9, 'in float is_linear;'), (10, ''), (13, 'const float QUICK_DIST_WIDTH = 0.2;'), (14, ''), (15, 'float dist_to_curve(){'), (16, '    // In the linear case, the curve will have'), (17, '    // been set to equal the x axis'), (18, '    if(bool(is_linear)) return abs(uv_coords.y);'), (19, ''), (20, '    // Otherwise, find the distance from uv_coords to the curve y = x^2'), (21, '    float x0 = uv_coords.x;'), (22, '    float y0 = uv_coords.y;'), (23, ''), (24, '    // This is a quick approximation for computing'), (25, '    // the distance to the curve.'), (26, '    // Evaluate F(x, y) = y - x^2'), (27, ""    // divide by its gradient's magnitude""), (28, '    float Fxy = y0 - x0 * x0;'), (29, '    float approx_dist = abs(Fxy) * inversesqrt(1.0 + 4 * x0 * x0);'), (30, '    if(approx_dist < QUICK_DIST_WIDTH) return approx_dist;'), (31, ''), (32, '    // Otherwise, solve for the minimal distance.'), (33, '    // The distance squared between (x0, y0) and a point (x, x^2) looks like'), (34, '    //'), (35, '    // (x0 - x)^2 + (y0 - x^2)^2 = x^4 + (1 - 2y0)x^2 - 2x0 * x + (x0^2 + y0^2)'), (36, '    //'), (37, '    // Setting the derivative equal to zero (and rescaling) looks like'), (38, '    //'), (39, '    // x^3 + (0.5 - y0) * x - 0.5 * x0 = 0'), (40, '    //'), (41, '    // Adapted from https://www.shadertoy.com/view/ws3GD7'), (42, '    x0 = abs(x0);'), (43, ""    float p = (0.5 - y0) / 3.0;  // p / 3 in usual Cardano's formula notation""), (44, ""    float q = 0.25 * x0;         // -q / 2 in usual Cardano's formula notation""), (45, '    float disc = q*q + p*p*p;'), (46, '    float r = sqrt(abs(disc));'), (47, ''), (48, '    float x = (disc > 0.0) ?'), (49, '        // 1 root'), (50, '        pow(q + r, 1.0 / 3.0) + pow(abs(q - r), 1.0 / 3.0) * sign(-p) :'), (51, '        // 3 roots'), (52, '        2.0 * cos(atan(r, q) / 3.0) * sqrt(-p);'), (53, ''), (54, '    return length(vec2(x0 - x, y0 - x * x));'), (55, '}'), (56, ''), (57, ''), (63, '    float signed_dist = dist_to_curve() - 0.5 * uv_stroke_width;'), (64, ''), (65, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist / uv_anti_alias_width);')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,First pass at a polyline implementation for stroke,"[(4, 'layout (triangle_strip, max_vertices = 32) out;  // Related to MAX_STEPS below'), (20, 'out float signed_dist_to_curve;'), (31, 'const float COS_THRESHOLD = 0.999;'), (32, 'const int MAX_STEPS = 16;'), (84, 'vec3 get_perp(vec4 joint_product, vec3 point, vec3 tangent){'), (89, '    float mult = 1.0;'), (90, '    if(joint_product.w < -0.75) mult *= 4 * (joint_product.w + 1.0);'), (97, '        return mult * normalize(cross(normal, tangent));'), (99, '        return mult * normalize(cross(camera_position - point, tangent));'), (104, 'vec3 point_on_curve(float t){'), (105, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (106, '}'), (107, ''), (108, ''), (109, 'vec3 tangent_on_curve(float t){'), (110, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (111, '}'), (112, ''), (113, ''), (114, 'void emit_point_with_width('), (115, '    vec3 point,'), (116, '    vec3 tangent,'), (117, '    vec4 joint_product,'), (118, '    float width,'), (119, '    vec4 joint_color,'), (120, '    float aaw'), (121, '){'), (122, '    vec3 unit_tan = normalize(tangent);'), (123, '    vec4 njp = normalized_joint_product(joint_product);'), (124, '    float buff = 0.5 * width + aaw;'), (125, '    vec3 perp = buff * get_perp(njp, point, unit_tan);'), (126, ''), (127, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (128, '    create_joint('), (129, '        njp, unit_tan, length(perp),'), (130, '        corners[0], corners[0],'), (131, '        corners[1], corners[1]'), (132, '    );'), (133, ''), (134, '    color = finalize_color(joint_color, point, unit_normal);'), (135, '    uv_anti_alias_width = aaw;'), (136, '    uv_stroke_width = width;'), (137, ''), (138, '    // Emit two corners'), (139, '    for(int i = 0; i < 2; i++){'), (140, '        float sign = i % 2 == 0 ? -1 : 1;'), (141, '        signed_dist_to_curve = sign * buff;'), (142, '        emit_gl_Position(corners[i]);'), (143, '        EmitVertex();'), (154, '    bool is_linear = jp1.w > COS_THRESHOLD; // TODO, something with this'), (155, ''), (156, '    // Compute subdivision'), (157, '    int n_steps;'), (158, '    if (is_linear){'), (159, '        n_steps = 2;'), (160, '    }else{'), (161, '        n_steps = MAX_STEPS;  // TODO'), (164, '    float subdivision[MAX_STEPS];'), (165, '    vec3 points[MAX_STEPS];'), (166, '    for(int i = 0; i < MAX_STEPS; i++){'), (167, '        if (i >= n_steps) break;'), (168, '        subdivision[i] = float(i) / (n_steps - 1);'), (169, '        points[i] = point_on_curve(subdivision[i]);'), (170, '    }'), (171, ''), (172, '    // Compute joint products'), (173, '    vec4 joint_products[MAX_STEPS];'), (174, '    joint_products[0] = v_joint_product[0];'), (175, '    joint_products[0].xyz *= -1;'), (176, '    joint_products[n_steps - 1] = v_joint_product[2];'), (177, '    for (int i = 1; i < MAX_STEPS; i++){'), (178, '        if (i >= n_steps - 1) break;'), (179, '        vec3 v1 = points[i] - points[i - 1];'), (180, '        vec3 v2 = points[i + 1] - points[i];'), (181, '        joint_products[i].xyz = cross(v1, v2);'), (182, '        joint_products[i].w = dot(v1, v2);'), (183, '    }'), (184, ''), (185, '    // Intermediate points'), (187, '    for (int i = 0; i < MAX_STEPS; i++){'), (188, '        if (i >= n_steps) break;'), (189, '        float t = subdivision[i];'), (190, '        emit_point_with_width('), (191, '            points[i],'), (192, '            tangent_on_curve(t),'), (193, '            joint_products[i],  // TODO'), (194, '            mix(v_stroke_width[0], v_stroke_width[2], t),'), (195, '            mix(v_color[0], v_color[2], t),'), (196, '            scaled_aaw'), (197, '        );')]","[(4, 'layout (triangle_strip, max_vertices = 6) out;'), (20, ''), (21, 'out float is_linear;'), (22, ''), (23, 'out vec2 uv_coords;'), (34, 'const float COS_THRESHOLD = 0.99;'), (86, 'vec3 get_perp(int index, vec4 joint_product, vec3 point, vec3 tangent, float aaw){'), (90, '    float buff = 0.5 * v_stroke_width[index] + aaw;'), (92, '    if(joint_product.w < -0.75) buff *= 4 * (joint_product.w + 1.0);'), (99, '        return buff * normalize(cross(normal, tangent));'), (101, '        return buff * normalize(cross(camera_position - point, tangent));'), (105, '// This function is responsible for finding the corners of'), (106, '// a bounding region around the bezier curve, which can be'), (107, '// emitted as a triangle fan, with vertices vaguely close'), (108, '// to control points so that the passage of vert data to'), (109, '// frag shaders is most natural.'), (110, 'void get_corners('), (111, '    // Control points for a bezier curve'), (112, '    vec3 p0,'), (113, '    vec3 p1,'), (114, '    vec3 p2,'), (115, '    // Unit tangent vectors at p0 and p2'), (116, '    vec3 v01,'), (117, '    vec3 v12,'), (118, '    // Anti-alias width'), (119, '    float aaw,'), (120, '    out vec3 corners[6]'), (121, '){'), (122, '    bool linear = bool(is_linear);'), (123, '    vec4 jp0 = normalized_joint_product(v_joint_product[0]);'), (124, '    vec4 jp2 = normalized_joint_product(v_joint_product[2]);'), (125, '    vec3 p0_perp = get_perp(0, jp0, p0, v01, aaw);'), (126, '    vec3 p2_perp = get_perp(2, jp2, p2, v12, aaw);'), (127, '    vec3 p1_perp = 0.5 * (p0_perp + p2_perp);'), (128, '    if(linear){'), (129, '        p1_perp *= (0.5 * v_stroke_width[1] + aaw) / length(p1_perp);'), (130, '    }'), (132, '    // The order of corners should be for a triangle_strip.'), (133, '    vec3 c0 = p0 + p0_perp;'), (134, '    vec3 c1 = p0 - p0_perp;'), (135, '    vec3 c2 = p1 + p1_perp;'), (136, '    vec3 c3 = p1 - p1_perp;'), (137, '    vec3 c4 = p2 + p2_perp;'), (138, '    vec3 c5 = p2 - p2_perp;'), (139, '    // Move the inner middle control point to make'), (140, '    // room for the curve'), (141, '    // float orientation = dot(unit_normal, v_joint_product[1].xyz);'), (142, '    float orientation = v_joint_product[1].z;'), (143, '    if(!linear && orientation >= 0.0)     c2 = 0.5 * (c0 + c4);'), (144, '    else if(!linear && orientation < 0.0) c3 = 0.5 * (c1 + c5);'), (145, ''), (146, '    // Account for previous and next control points'), (147, '    if(bool(flat_stroke)){'), (148, '        create_joint(jp0, v01, length(p0_perp), c1, c1, c0, c0);'), (149, '        create_joint(jp2, -v12, length(p2_perp), c5, c5, c4, c4);'), (152, '    corners = vec3[6](c0, c1, c2, c3, c4, c5);'), (160, '    vec3 p0 = verts[0];'), (161, '    vec3 p1 = verts[1];'), (162, '    vec3 p2 = verts[2];'), (163, '    vec3 v01 = normalize(p1 - p0);'), (164, '    vec3 v12 = normalize(p2 - p1);'), (165, ''), (167, '    is_linear = float(jp1.w > COS_THRESHOLD);'), (168, ''), (169, '    // We want to change the coordinates to a space where the curve'), (170, '    // coincides with y = x^2, between some values x0 and x2. Or, in'), (171, '    // the case of a linear curve just put it on the x-axis'), (172, '    mat4 xyz_to_uv;'), (173, '    float uv_scale_factor;'), (174, '    if(!bool(is_linear)){'), (175, '        bool too_steep;'), (176, '        xyz_to_uv = get_xyz_to_uv(p0, p1, p2, 2.0, too_steep);'), (177, '        is_linear = float(too_steep);'), (178, '        uv_scale_factor = length(xyz_to_uv[0].xyz);'), (182, '    vec3 corners[6];'), (183, '    get_corners(p0, p1, p2, v01, v12, scaled_aaw, corners);'), (184, ''), (185, '    // Emit each corner'), (186, '    float max_sw = max(v_stroke_width[0], v_stroke_width[2]);'), (187, '    for(int i = 0; i < 6; i++){'), (188, '        float stroke_width = v_stroke_width[i / 2];'), (189, ''), (190, '        if(bool(is_linear)){'), (191, '            float sign = (i % 2 == 0 ? -1 : 1);'), (192, '            // In this case, we only really care about'), (193, '            // the v coordinate'), (194, '            uv_coords = vec2(0, sign * (0.5 * stroke_width + scaled_aaw));'), (195, '            uv_anti_alias_width = scaled_aaw;'), (196, '            uv_stroke_width = stroke_width;'), (197, '        }else{'), (198, '            uv_coords = (xyz_to_uv * vec4(corners[i], 1.0)).xy;'), (199, '            uv_stroke_width = uv_scale_factor * stroke_width;'), (200, '            uv_anti_alias_width = uv_scale_factor * scaled_aaw;'), (201, '        }'), (202, ''), (203, '        color = finalize_color(v_color[i / 2], corners[i], unit_normal);'), (204, '        emit_gl_Position(corners[i]);'), (205, '        EmitVertex();')]",No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,5aeb457bb1ae9c0a86a20279eccbe1b69e2d7e33,First pass at a polyline implementation for stroke,"[(23, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')]","[(23, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width;'), (24, '    v_stroke_width *= mix(frame_scale, 1, is_fixed_in_frame);')]",No
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,c6a6503544a0caaa92d2ca61ea841f3b693157bb,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,Cleaning up first pass implementation,"[(16, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist_to_region / uv_anti_alias_width);')]","[(16, '    frag_color.a *= smoothstep(1.0, 0.0, signed_dist_to_region / uv_anti_alias_width);'), (17, '    frag_color.a += 0.2;  // undo')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c6a6503544a0caaa92d2ca61ea841f3b693157bb,3ea8393e9a0f8dbf8554294567b6fbec71660d1c,Cleaning up first pass implementation,"[(54, 'vec3 point_on_curve(float t){'), (55, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (56, '}'), (57, ''), (58, ''), (59, 'vec3 tangent_on_curve(float t){'), (60, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (61, '}'), (62, ''), (63, ''), (64, 'void map_to_basic(out float x0, out float x2, out float scale_factor){'), (65, '    /* Find the coordinates and scale factor such that the bezier curve'), (66, '    defined by verts[] is congruent to a section of the parabola y = x^2'), (67, '    between x0 and x2, with scale_factor'), (68, '    */'), (69, '}'), (70, ''), (71, ''), (72, 'void compute_subdivision(out int n_steps, out float subdivision[MAX_STEPS]){'), (73, '    /*'), (74, '    Based on https://raphlinus.github.io/graphics/curves/2019/12/23/flatten-quadbez.html'), (75, '    */'), (76, '    float x0;'), (77, '    float x2;'), (78, '    float scale_factor;'), (79, '    map_to_basic(x0, x2, scale_factor);'), (80, ''), (81, '    if (normalized_joint_product(v_joint_product[1]).w > COS_THRESHOLD){'), (82, '        // Linear'), (83, '        n_steps = 2;'), (84, '    }else{'), (85, '        n_steps = MAX_STEPS;  // TODO'), (86, '    }'), (87, ''), (88, '    for(int i = 0; i < MAX_STEPS; i++){'), (89, '        if (i >= n_steps) break;'), (90, '        subdivision[i] = float(i) / (n_steps - 1);'), (91, '    }'), (92, '}'), (93, ''), (94, ''), (124, ''), (125, 'vec3 get_perp(vec3 point, vec3 tangent, vec4 joint_product){'), (156, '    vec3 perp = buff * get_perp(point, unit_tan, njp);'), (186, '    compute_subdivision(n_steps, subdivision);'), (187, ''), (188, '    // Compute joint products'), (190, '    vec4 joint_products[MAX_STEPS];'), (191, '    for (int i = 0; i < MAX_STEPS; i++){'), (206, '    // Emit vertex pairs aroudn subdivided points'), (214, '            joint_products[i],')]","[(37, '#INSERT get_xyz_to_uv.glsl'), (84, 'vec3 get_perp(vec4 joint_product, vec3 point, vec3 tangent){'), (104, 'vec3 point_on_curve(float t){'), (105, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (106, '}'), (107, ''), (108, ''), (109, 'vec3 tangent_on_curve(float t){'), (110, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (111, '}'), (112, ''), (113, ''), (125, '    vec3 perp = buff * get_perp(njp, point, unit_tan);'), (145, ''), (153, '    vec4 jp1 = normalized_joint_product(v_joint_product[1]);'), (154, '    bool is_linear = jp1.w > COS_THRESHOLD; // TODO, something with this'), (155, ''), (158, '    if (is_linear){'), (159, '        n_steps = 2;'), (160, '    }else{'), (161, '        n_steps = MAX_STEPS;  // TODO'), (162, '    }'), (163, ''), (166, '    for(int i = 0; i < MAX_STEPS; i++){'), (168, '        subdivision[i] = float(i) / (n_steps - 1);'), (171, ''), (172, '    // Compute joint products'), (173, '    vec4 joint_products[MAX_STEPS];'), (185, '    // Intermediate points'), (193, '            joint_products[i],  // TODO')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a3469c236e10fa72eba97dab5cdf2840aadb8085,c6a6503544a0caaa92d2ca61ea841f3b693157bb,Simpler compute_subdivisions,"[(4, 'layout (triangle_strip, max_vertices = 64) out;  // Related to MAX_STEPS below'), (10, 'uniform float frame_scale;'), (22, 'out float flag;'), (33, 'const float COS_THRESHOLD = 0.99;'), (34, '// Used to determine how many lines to break the curve into'), (35, 'const float POLYLINE_FACTOR = 20;'), (36, 'const int MAX_STEPS = 32;'), (64, '    return 2 * (verts[1] - verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (69, '    // Crude estimate for the number of polyline segments to use, based'), (70, '    // on the area spanned by the control points'), (71, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (72, '    int count = 2 + int(round(POLYLINE_FACTOR * sqrt(area) / frame_scale));'), (74, '    n_steps = min(count, MAX_STEPS);'), (166, '    flag = 0.0;')]","[(4, 'layout (triangle_strip, max_vertices = 32) out;  // Related to MAX_STEPS below'), (31, 'const float COS_THRESHOLD = 0.999;'), (32, 'const int MAX_STEPS = 16;'), (60, '    return 2 * (verts[1] + -verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (61, '}'), (62, ''), (63, ''), (64, 'void map_to_basic(out float x0, out float x2, out float scale_factor){'), (65, '    /* Find the coordinates and scale factor such that the bezier curve'), (66, '    defined by verts[] is congruent to a section of the parabola y = x^2'), (67, '    between x0 and x2, with scale_factor'), (68, '    */'), (73, '    /*'), (74, '    Based on https://raphlinus.github.io/graphics/curves/2019/12/23/flatten-quadbez.html'), (75, '    */'), (76, '    float x0;'), (77, '    float x2;'), (78, '    float scale_factor;'), (79, '    map_to_basic(x0, x2, scale_factor);'), (80, ''), (81, '    if (normalized_joint_product(v_joint_product[1]).w > COS_THRESHOLD){'), (82, '        // Linear'), (83, '        n_steps = 2;'), (84, '    }else{'), (85, '        n_steps = MAX_STEPS;  // TODO'), (86, '    }')]",No
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,361817b5065f461e8e51b373ce72dfe7cc271d1a,a3469c236e10fa72eba97dab5cdf2840aadb8085,Pass fewer values to frag shader,"[(3, '// Value between -1 and 1'), (4, 'in float scaled_signed_dist_to_curve;'), (5, 'in float scaled_anti_alias_width;'), (14, '    float signed_dist_to_region = abs(scaled_signed_dist_to_curve) - 1.0;'), (15, '    frag_color.a *= smoothstep('), (16, '        scaled_anti_alias_width,'), (17, '        -scaled_anti_alias_width,'), (18, '        signed_dist_to_region'), (19, '    );')]","[(3, 'in float signed_dist_to_curve;'), (4, 'in float uv_stroke_width;'), (5, 'in float uv_anti_alias_width;'), (11, '    if (uv_stroke_width == 0) discard;'), (15, '    float signed_dist_to_region = abs(signed_dist_to_curve) - 0.5 * uv_stroke_width;'), (16, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist_to_region / uv_anti_alias_width);')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,361817b5065f461e8e51b373ce72dfe7cc271d1a,a3469c236e10fa72eba97dab5cdf2840aadb8085,Pass fewer values to frag shader,"[(19, 'out float scaled_anti_alias_width;'), (20, 'out float scaled_signed_dist_to_curve;'), (144, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (152, '    if (width == 0) scaled_anti_alias_width = 0;'), (153, '    else scaled_anti_alias_width = 2.0 * aaw / width;'), (156, '    // The frag shader will just receive a value from -1 to 1, reflecting where in the'), (157, '    // stroke that point is'), (158, '    scaled_signed_dist_to_curve = -1.0;'), (159, '    emit_gl_Position(corners[0]);'), (160, '    EmitVertex();'), (161, ''), (162, '    scaled_signed_dist_to_curve = +1.0;'), (163, '    emit_gl_Position(corners[1]);'), (164, '    EmitVertex();')]","[(19, 'out float uv_stroke_width;'), (20, 'out float uv_anti_alias_width;'), (21, 'out float signed_dist_to_curve;'), (145, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (153, '    uv_anti_alias_width = aaw;'), (154, '    uv_stroke_width = width;'), (157, '    for(int i = 0; i < 2; i++){'), (158, '        float sign = i % 2 == 0 ? -1 : 1;'), (159, '        signed_dist_to_curve = sign * buff;'), (160, '        emit_gl_Position(corners[i]);'), (161, '        EmitVertex();'), (162, '    }')]",No
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,aea747b6d3de7a4cc269f3e005b8b0b62916b3b8,361817b5065f461e8e51b373ce72dfe7cc271d1a,Final refinements on polyline stroke implementations,"[(11, '    if(scaled_anti_alias_width < 0) discard;'), (17, '        0, -scaled_anti_alias_width,')]","[(16, '        scaled_anti_alias_width,'), (17, '        -scaled_anti_alias_width,')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,aea747b6d3de7a4cc269f3e005b8b0b62916b3b8,361817b5065f461e8e51b373ce72dfe7cc271d1a,Final refinements on polyline stroke implementations,"[(33, 'const float POLYLINE_FACTOR = 30;'), (110, 'vec3 left_step(vec3 point, vec3 tangent, vec4 joint_product){'), (135, '    vec4 joint_color'), (138, '    vec4 normed_join_product = normalized_joint_product(joint_product);'), (139, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, normed_join_product);'), (143, '        normed_join_product, unit_tan, length(perp),'), (149, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in frag'), (150, '    else scaled_anti_alias_width = 2.0 * anti_alias_width * pixel_size / width;'), (153, '    // The frag shader will receive a value from -1 to 1,'), (154, '    // reflecting where in the stroke that point is'), (177, ''), (178, '    // Compute joint products'), (179, '    vec4 joint_products[MAX_STEPS];'), (200, '            mix(v_color[0], v_color[2], t)')]","[(21, 'out float flag;'), (34, 'const float POLYLINE_FACTOR = 20;'), (111, 'vec3 get_perp(vec3 point, vec3 tangent, vec4 joint_product){'), (136, '    vec4 joint_color,'), (137, '    float aaw'), (140, '    vec4 njp = normalized_joint_product(joint_product);'), (141, '    float buff = 0.5 * width + aaw;'), (142, '    vec3 perp = buff * get_perp(point, unit_tan, njp);'), (146, '        njp, unit_tan, length(perp),'), (152, '    if (width == 0) scaled_anti_alias_width = 0;'), (153, '    else scaled_anti_alias_width = 2.0 * aaw / width;'), (156, '    // The frag shader will just receive a value from -1 to 1, reflecting where in the'), (157, '    // stroke that point is'), (161, ''), (168, '    flag = 0.0;'), (177, ''), (178, '    // Compute joint products'), (180, '    vec4 joint_products[MAX_STEPS];'), (197, '    float scaled_aaw = anti_alias_width * pixel_size;'), (206, '            mix(v_color[0], v_color[2], t),'), (207, '            scaled_aaw')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,5decf810e789d5fac13052f9599142415803e46a,aea747b6d3de7a4cc269f3e005b8b0b62916b3b8,Change default anti_alias_width to 1.5,"[(103, '        anti_alias_width: float = 1.5,')]","[(103, '        anti_alias_width: float = 1.0,')]",No
example_scenes.py,example_scenes.py,71814a118bbe5ff4718fc7325156ac8d4046cebd,d644e3b184d52f1a432966885027fe1b3840c28c,Fix dot updater in graph example,"[(491, '        dot.add_updater(lambda d: d.move_to(axes.i2gp(x_tracker.get_value(), parabola)))')]","[(491, '        f_always('), (492, '            dot.move_to,'), (493, '            lambda: axes.i2gp(x_tracker.get_value(), parabola)'), (494, '        )')]",No
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,71814a118bbe5ff4718fc7325156ac8d4046cebd,Small clean up to stroke shaders,"[(16, '    frag_color.a *= smoothstep(0, -scaled_anti_alias_width, signed_dist_to_region);')]","[(16, '    frag_color.a *= smoothstep('), (17, '        0, -scaled_anti_alias_width,'), (18, '        signed_dist_to_region'), (19, '    );')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,71814a118bbe5ff4718fc7325156ac8d4046cebd,Small clean up to stroke shaders,"[(56, 'vec3 point_on_quadratic(float t, vec3 c0, vec3 c1, vec3 c2){'), (57, '    return c0 + c1 * t + c2 * t * t;'), (61, 'vec3 tangent_on_quadratic(float t, vec3 c1, vec3 c2){'), (62, '    return c1 + 2 * c2 * t;'), (101, '    unit_normal = normal;  // Set global unit normal'), (102, '    if(normal.z < 0) normal *= -1;  // Choose the ""outward"" normal direction'), (104, '        return normalize(cross(normal, tangent));'), (106, '        return normalize(cross(camera_position - point, tangent));'), (119, '    vec4 unit_jp = normalized_joint_product(joint_product);'), (120, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, unit_jp);'), (122, '    vec3 left = point + perp;'), (123, '    vec3 right = point - perp;'), (124, '    create_joint(unit_jp, unit_tan, length(perp), left, left, right, right);'), (134, '    emit_gl_Position(left);'), (137, '    emit_gl_Position(right);'), (141, ''), (147, '    // Coefficients such that the quadratic bezier is c0 + c1 * t  + c2 * t^2'), (148, '    vec3 c0 = verts[0];'), (149, '    vec3 c1 = 2 * (verts[1] - verts[0]);'), (150, '    vec3 c2 = verts[0] - 2 * verts[1] + verts[2];'), (151, ''), (152, '    // Estimate how many line segment the curve should be divided into'), (153, '    // based on the area of the triangle defined by these control points'), (154, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (155, '    int count = int(round(POLYLINE_FACTOR * sqrt(area) / frame_scale));'), (156, '    int n_steps = min(2 + count, MAX_STEPS);'), (157, ''), (158, '    // Compute points along the curve'), (162, '        float t = float(i) / (n_steps - 1);'), (163, '        points[i] = point_on_quadratic(t, c0, c1, c2);'), (175, '        joint_products[i] = vec4(cross(v1, v2), dot(v1, v2));'), (181, '        float t = float(i) / (n_steps - 1);'), (184, '            tangent_on_quadratic(t, c1, c2),')]","[(56, 'vec3 point_on_curve(float t){'), (57, '    return verts[0] + 2 * (verts[1] - verts[0]) * t + (verts[0] - 2 * verts[1] + verts[2]) * t * t;'), (61, 'vec3 tangent_on_curve(float t){'), (62, '    return 2 * (verts[1] - verts[0]) + 2 * (verts[0] - 2 * verts[1] + verts[2]) * t;'), (63, '}'), (64, ''), (65, ''), (66, 'void compute_subdivision(out int n_steps, out float subdivision[MAX_STEPS]){'), (67, '    // Crude estimate for the number of polyline segments to use, based'), (68, '    // on the area spanned by the control points'), (69, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (70, '    int count = 2 + int(round(POLYLINE_FACTOR * sqrt(area) / frame_scale));'), (71, ''), (72, '    n_steps = min(count, MAX_STEPS);'), (73, '    for(int i = 0; i < MAX_STEPS; i++){'), (74, '        if (i >= n_steps) break;'), (75, '        subdivision[i] = float(i) / (n_steps - 1);'), (76, '    }'), (114, '    // Add correction for sharp angles to prevent weird bevel effects'), (115, '    float mult = 1.0;'), (116, '    if(joint_product.w < -0.75) mult *= 4 * (joint_product.w + 1.0);'), (118, '    // Set global unit normal'), (119, '    unit_normal = normal;'), (120, '    // Choose the ""outward"" normal direction'), (121, '    if(normal.z < 0) normal *= -1;'), (123, '        return mult * normalize(cross(normal, tangent));'), (125, '        return mult * normalize(cross(camera_position - point, tangent));'), (138, '    vec4 normed_join_product = normalized_joint_product(joint_product);'), (139, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, normed_join_product);'), (141, '    vec3 corners[2] = vec3[2](point + perp, point - perp);'), (142, '    create_joint('), (143, '        normed_join_product, unit_tan, length(perp),'), (144, '        corners[0], corners[0],'), (145, '        corners[1], corners[1]'), (146, '    );'), (156, '    emit_gl_Position(corners[0]);'), (159, '    emit_gl_Position(corners[1]);'), (168, '    // Compute subdivision'), (169, '    int n_steps;'), (170, '    float subdivision[MAX_STEPS];'), (171, '    compute_subdivision(n_steps, subdivision);'), (175, '        points[i] = point_on_curve(subdivision[i]);'), (187, '        joint_products[i].xyz = cross(v1, v2);'), (188, '        joint_products[i].w = dot(v1, v2);'), (194, '        float t = subdivision[i];'), (197, '            tangent_on_curve(t),')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,26249c34bb322048b2f9972c2ff93eeee3312b61,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,Have non-flat stroke operate based on projecting tangents,"[(35, 'const float MITER_LIMIT = 3.0;'), (65, 'vec4 get_joint_product(vec3 v1, vec3 v2){'), (66, '    return vec4(cross(v1, v2), dot(v1, v2));'), (67, '}'), (69, ''), (70, 'vec3 project(vec3 vect, vec3 normal){'), (71, '    /* Project the vector onto the plane perpendicular to a given unit normal */'), (72, '    return vect - dot(vect, normal) * normal;'), (73, '}'), (74, ''), (75, 'vec3 inverse_joint_product(vec3 vect, vec4 joint_product){'), (76, '    /*'), (77, '    If joint_product represents vec4(cross(v1, v2), dot(v1, v2)),'), (78, '    then given v1, this function recovers v2'), (79, '    */'), (80, '    float dp = joint_product.w;'), (81, '    if (abs(dp) > COS_THRESHOLD) return vect;'), (82, '    vec3 cp = joint_product.xyz;'), (83, '    vec3 perp = cross(cp, vect);'), (84, '    float a = dp / dot(vect, vect);'), (85, '    float b = length(cp) / length(cross(vect, perp));'), (86, '    return a * vect + b * perp;'), (90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product){'), (92, '    Step the the left of a curve.'), (93, '    First a perpendicular direction is calculated, then it is adjusted'), (94, '    so as to make a joint.'), (96, '    vec3 step = normalize(cross(unit_normal, unit_tan));'), (97, ''), (98, '    // Check if an adjustment is needed'), (99, '    float cos_angle = joint_product.w;'), (100, '    if(abs(cos_angle) > 1 - 1e-5 || int(joint_type) == NO_JOINT){'), (101, '        return step;'), (102, '    }'), (103, ''), (104, '    // Adjust based on the joint'), (105, '    float sin_angle = length(joint_product.xyz) * sign(joint_product.z);'), (106, '    float shift = (int(joint_type) == MITER_JOINT) ?'), (107, '        (cos_angle + 1.0) / sin_angle :'), (108, '        (cos_angle - 1.0) / sin_angle;'), (109, ''), (110, '    // return step + shift * unit_tan;'), (111, '    vec3 result = step + shift * unit_tan;'), (112, '    if (length(result) > MITER_LIMIT){'), (113, '        result = MITER_LIMIT * normalize(result);'), (115, '    return result;'), (126, '    // Normalize relevant vectors'), (127, '    vec3 unit_tan;'), (128, '    vec4 unit_jp;'), (129, '    vec3 unit_normal;'), (130, '    if(bool(flat_stroke)){'), (131, '        unit_tan = normalize(tangent);'), (132, '        unit_jp = normalized_joint_product(joint_product);'), (133, '        unit_normal = get_joint_unit_normal(joint_product);'), (134, '    }else{'), (135, '        unit_normal = normalize(camera_position - point);'), (136, '        unit_tan = normalize(project(tangent, unit_normal));'), (137, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (138, '        adj_tan = project(adj_tan, unit_normal);'), (139, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (140, '    }'), (141, '    if(unit_normal.z < 0) unit_normal *= -1;  // Choose the ""outward"" normal direction'), (143, '    // Figure out the step from the point to the corners of the'), (144, '    // triangle strip around the polyline'), (145, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp);'), (147, '    // Set styling'), (155, '    for (int sign = -1; sign <= 1; sign += 2){'), (156, '        scaled_signed_dist_to_curve = sign;'), (157, '        emit_gl_Position(point + 0.5 * width * sign * step);'), (158, '        EmitVertex();'), (159, '    }'), (196, '        joint_products[i] = get_joint_product(v1, v2);')]","[(35, ''), (36, 'vec3 unit_normal = vec3(0.0, 0.0, 1.0);'), (66, 'void create_joint('), (67, '    vec4 joint_product,'), (68, '    vec3 unit_tan,'), (69, '    float buff,'), (70, '    vec3 static_c0,'), (71, '    out vec3 changing_c0,'), (72, '    vec3 static_c1,'), (73, '    out vec3 changing_c1'), (74, '){'), (75, '    float cos_angle = joint_product.w;'), (76, '    if(abs(cos_angle) > COS_THRESHOLD || int(joint_type) == NO_JOINT){'), (77, '        // No joint'), (78, '        changing_c0 = static_c0;'), (79, '        changing_c1 = static_c1;'), (80, '        return;'), (81, '    }'), (83, '    float shift;'), (84, '    float sin_angle = length(joint_product.xyz) * sign(joint_product.z);'), (85, '    if(int(joint_type) == MITER_JOINT){'), (86, '        shift = buff * (-1.0 - cos_angle) / sin_angle;'), (87, '    }else{'), (88, '        // For a Bevel joint'), (89, '        shift = buff * (1.0 - cos_angle) / sin_angle;'), (90, '    }'), (91, '    changing_c0 = static_c0 - shift * unit_tan;'), (92, '    changing_c1 = static_c1 + shift * unit_tan;'), (96, 'vec3 left_step(vec3 point, vec3 tangent, vec4 joint_product){'), (98, '    Perpendicular vectors to the left of the curve'), (100, '    vec3 normal = get_joint_unit_normal(joint_product);'), (101, '    unit_normal = normal;  // Set global unit normal'), (102, '    if(normal.z < 0) normal *= -1;  // Choose the ""outward"" normal direction'), (103, '    if(bool(flat_stroke)){'), (104, '        return normalize(cross(normal, tangent));'), (105, '    }else{'), (106, '        return normalize(cross(camera_position - point, tangent));'), (118, '    vec3 unit_tan = normalize(tangent);'), (119, '    vec4 unit_jp = normalized_joint_product(joint_product);'), (120, '    vec3 perp = 0.5 * width * left_step(point, unit_tan, unit_jp);'), (122, '    vec3 left = point + perp;'), (123, '    vec3 right = point - perp;'), (124, '    create_joint(unit_jp, unit_tan, length(perp), left, left, right, right);'), (133, '    scaled_signed_dist_to_curve = -1.0;'), (134, '    emit_gl_Position(left);'), (135, '    EmitVertex();'), (136, '    scaled_signed_dist_to_curve = +1.0;'), (137, '    emit_gl_Position(right);'), (138, '    EmitVertex();'), (175, '        joint_products[i] = vec4(cross(v1, v2), dot(v1, v2));')]",No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,26249c34bb322048b2f9972c2ff93eeee3312b61,b3bbc31ea940a46ba2909d7f2b6a819ac0c339a9,Have non-flat stroke operate based on projecting tangents,"[(19, 'const float STROKE_WIDTH_CONVERSION = 0.015;')]","[(19, 'const float STROKE_WIDTH_CONVERSION = 0.01;')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c61c18486cc9b49101e5f7a5011384c7cc38444a,26249c34bb322048b2f9972c2ff93eeee3312b61,Don't bevel corners on inner joints of quadratic bezier curves,"[(70, 'vec3 project(vec3 vect, vec3 unit_normal){'), (72, '    return vect - dot(vect, unit_normal) * unit_normal;'), (90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (98, '    // Check if an adjustment is needed,'), (100, '    if(inner_joint || int(joint_type) == NO_JOINT || cos_angle > 1 - 1e-5){'), (114, ''), (124, '    vec4 joint_color,'), (125, '    bool inner_joint'), (131, '    vec3 to_camera = camera_position - point;'), (132, '    if(flat_stroke == 1.0){'), (137, '        unit_normal = normalize(to_camera);'), (143, '    // Choose the ""outward"" normal direction'), (144, '    if(to_camera.z * dot(unit_normal, to_camera) < 0) unit_normal *= -1;'), (148, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp, inner_joint);'), (211, '            mix(v_color[0], v_color[2], t),'), (212, '            (i > 0 && i < n_steps - 1)  // Is this an inner joint')]","[(70, 'vec3 project(vec3 vect, vec3 normal){'), (72, '    return vect - dot(vect, normal) * normal;'), (90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product){'), (98, '    // Check if an adjustment is needed'), (100, '    if(abs(cos_angle) > 1 - 1e-5 || int(joint_type) == NO_JOINT){'), (110, '    // return step + shift * unit_tan;'), (124, '    vec4 joint_color'), (130, '    if(bool(flat_stroke)){'), (135, '        unit_normal = normalize(camera_position - point);'), (141, '    if(unit_normal.z < 0) unit_normal *= -1;  // Choose the ""outward"" normal direction'), (145, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp);'), (208, '            mix(v_color[0], v_color[2], t)')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,f363eaa2fdc42a3a235a7875349146599012d69e,c61c18486cc9b49101e5f7a5011384c7cc38444a,Add stand in for a ribboning effect,"[(150, ""    // TODO, this gives a somewhat nice effect that's like a ribbon mostly with its""), (151, '    // broad side to the camera. Currently unused by VMobject'), (152, '    if(flat_stroke == 2.0){'), (153, '        // Rotate the step towards the unit normal by an amount depending'), (154, '        // on the camera position'), (155, '        float cos_angle = dot(unit_normal, normalize(camera_position));'), (156, '        float sin_angle = sqrt(max(1 - cos_angle * cos_angle, 0));'), (157, '        step = cos_angle * step + sin_angle * unit_normal;'), (158, '    }'), (159, '')]",[],No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,557819ad032305fb72011edf47a6880c02fe5161,f363eaa2fdc42a3a235a7875349146599012d69e,Remove pre-computation of curve points and joint products,"[(192, '    // Emit vertex pairs aroudn subdivided points'), (197, '        // Point and tangent'), (198, '        vec3 point = point_on_quadratic(t, c0, c1, c2);'), (199, '        vec3 tangent = tangent_on_quadratic(t, c1, c2);'), (200, ''), (201, '        // Style'), (202, '        float stroke_width = mix(v_stroke_width[0], v_stroke_width[2], t);'), (203, '        vec4 color = mix(v_color[0], v_color[2], t);'), (204, ''), (205, '        // Use middle joint product for inner points, flip cross sign for first'), (206, '        vec4 joint_product;'), (207, '        if (i == 0)               joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (208, '        else if (i < n_steps - 1) joint_product = v_joint_product[1];'), (209, '        else                      joint_product = v_joint_product[2];'), (210, ''), (211, '        // This is sent along to prevent needless joint creation'), (212, '        bool inside_curve = (i > 0 && i < n_steps - 1);'), (215, '            point, tangent, joint_product,'), (216, '            stroke_width, color,'), (217, '            inside_curve')]","[(192, '    // Compute points along the curve'), (193, '    vec3 points[MAX_STEPS];'), (197, '        points[i] = point_on_quadratic(t, c0, c1, c2);'), (198, '    }'), (200, '    // Compute joint products'), (201, '    vec4 joint_products[MAX_STEPS];'), (202, '    joint_products[0] = v_joint_product[0];'), (203, '    joint_products[0].xyz *= -1;'), (204, '    joint_products[n_steps - 1] = v_joint_product[2];'), (205, '    for (int i = 1; i < MAX_STEPS; i++){'), (206, '        if (i >= n_steps - 1) break;'), (207, '        vec3 v1 = points[i] - points[i - 1];'), (208, '        vec3 v2 = points[i + 1] - points[i];'), (209, '        joint_products[i] = get_joint_product(v1, v2);'), (210, '    }'), (212, '    // Emit vertex pairs aroudn subdivided points'), (213, '    for (int i = 0; i < MAX_STEPS; i++){'), (214, '        if (i >= n_steps) break;'), (215, '        float t = float(i) / (n_steps - 1);'), (217, '            points[i],'), (218, '            tangent_on_quadratic(t, c1, c2),'), (219, '            joint_products[i],'), (220, '            mix(v_stroke_width[0], v_stroke_width[2], t),'), (221, '            mix(v_color[0], v_color[2], t),'), (222, '            (i > 0 && i < n_steps - 1)  // Is this an inner joint')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a5926195eed81ed0b09f94b4d68df9e2968d00f2,557819ad032305fb72011edf47a6880c02fe5161,Clean up stroke shader,"[(90, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (96, '    vec3 unit_tan = normalize(flat_stroke == 0.0 ? project(tangent, unit_normal) : tangent);'), (97, ''), (100, '    // Check if we can avoid creating a joint'), (101, '    if (inner_joint || int(joint_type) == NO_JOINT) return step;'), (102, ''), (103, '    // Find the appropriate unit joint product'), (104, '    vec4 unit_jp;'), (105, '    if (flat_stroke == 0){'), (106, '        // Figure out what joint product would be for everything projected onto'), (107, '        // the plane perpendicular to the normal direction (which here would be to_camera)'), (108, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (109, '        adj_tan = project(adj_tan, unit_normal);'), (110, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (111, '    }else {'), (112, '        unit_jp = normalized_joint_product(joint_product);'), (115, '    float cos_angle = unit_jp.w;'), (116, '    if(cos_angle > 1 - 1e-5) return step;'), (117, ''), (119, '    float sin_angle = length(unit_jp.xyz) * sign(unit_jp.z);'), (124, '    step = step + shift * unit_tan;'), (125, '    if (length(step) > MITER_LIMIT){'), (126, '        step = MITER_LIMIT * normalize(step);'), (129, '    return step;'), (143, '    vec3 unit_normal = (flat_stroke == 0.0) ?'), (144, '        normalize(to_camera) :'), (145, '        get_joint_unit_normal(joint_product);'), (151, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inner_joint);'), (165, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in the frag shader'), (211, ""        // Use middle joint product for inner points, flip sign for first one's cross product component""), (212, '        vec4 joint_product;'), (213, '        if (i == 0)            joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (214, '        else if (inside_curve) joint_product = v_joint_product[1];'), (215, '        else                   joint_product = v_joint_product[2];'), (216, '')]","[(90, 'vec3 step_to_corner(vec3 point, vec3 unit_tan, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (98, '    // Check if an adjustment is needed,'), (99, '    float cos_angle = joint_product.w;'), (100, '    if(inner_joint || int(joint_type) == NO_JOINT || cos_angle > 1 - 1e-5){'), (101, '        return step;'), (105, '    float sin_angle = length(joint_product.xyz) * sign(joint_product.z);'), (110, '    vec3 result = step + shift * unit_tan;'), (111, '    if (length(result) > MITER_LIMIT){'), (112, '        result = MITER_LIMIT * normalize(result);'), (115, '    return result;'), (128, '    vec3 unit_tan;'), (129, '    vec4 unit_jp;'), (130, '    vec3 unit_normal;'), (132, '    if(flat_stroke == 1.0){'), (133, '        unit_tan = normalize(tangent);'), (134, '        unit_jp = normalized_joint_product(joint_product);'), (135, '        unit_normal = get_joint_unit_normal(joint_product);'), (136, '    }else{'), (137, '        unit_normal = normalize(to_camera);'), (138, '        unit_tan = normalize(project(tangent, unit_normal));'), (139, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (140, '        adj_tan = project(adj_tan, unit_normal);'), (141, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (142, '    }'), (148, '    vec3 step = step_to_corner(point, unit_tan, unit_normal, unit_jp, inner_joint);'), (162, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in frag'), (205, '        // Use middle joint product for inner points, flip cross sign for first'), (206, '        vec4 joint_product;'), (207, '        if (i == 0)               joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (208, '        else if (i < n_steps - 1) joint_product = v_joint_product[1];'), (209, '        else                      joint_product = v_joint_product[2];'), (210, '')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,2b6ec2d95fe63467db1d37c15be11f9983f2db45,a5926195eed81ed0b09f94b4d68df9e2968d00f2,Add spacing on assert lines,"[(676, '        assert mode in (""jagged"", ""approx_smooth"", ""true_smooth"")'), (725, '        assert len(points) % 2 == 1 or len(points) == 0')]","[(676, '        assert(mode in (""jagged"", ""approx_smooth"", ""true_smooth""))'), (725, '        assert(len(points) % 2 == 1 or len(points) == 0)')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,b45c71d3c2cd332c05506b0dc088a917159c98c4,2b6ec2d95fe63467db1d37c15be11f9983f2db45,Account for Gimbal lock in panning,"[(4, 'import warnings'), (13, 'from manimlib.constants import PI'), (16, 'from manimlib.utils.simple_functions import clip'), (68, '        if np.isclose(orientation.as_quat(), [0, 0, 0, 1]).all():'), (70, '        with warnings.catch_warnings():'), (71, ""            warnings.simplefilter('ignore', UserWarning)  # Ignore UserWarnings""), (72, '            angles = orientation.as_euler(self.euler_axes)[::-1]'), (73, '        # Handle Gimble lock case'), (74, '        if np.isclose(angles[1], 0, atol=1e-2):'), (75, '            angles[0] = angles[0] + angles[2]'), (76, '            angles[2] = 0'), (77, '        return angles'), (147, '        dtheta: float = 0,'), (148, '        dphi: float = 0,'), (149, '        dgamma: float = 0,'), (153, '        new_angles = angles + np.array([dtheta, dphi, dgamma]) * units'), (154, '        new_angles[1] = clip(new_angles[1], 0, PI)  # Limit range for phi'), (155, '        new_rot = Rotation.from_euler(self.euler_axes, new_angles[::-1])'), (156, '        self.set_orientation(new_rot)')]","[(65, '        if all(orientation.as_quat() == [0, 0, 0, 1]):'), (67, '        return orientation.as_euler(self.euler_axes)[::-1]'), (137, '        dtheta: float | None = None,'), (138, '        dphi: float | None = None,'), (139, '        dgamma: float | None = None,'), (143, '        for i, value in enumerate([dtheta, dphi, dgamma]):'), (144, '            if value is not None:'), (145, '                angles[i] += value * units'), (146, '        self.set_euler_angles(*angles)')]",No
manimlib/mobject/changing.py,manimlib/mobject/changing.py,4223bb63202e5e122e0bc95c842ae5829fe6d62d,b45c71d3c2cd332c05506b0dc088a917159c98c4,Small cleanup on TracedPath,"[(108, '        super().__init__(**kwargs)'), (115, '        self.set_stroke(stroke_color, stroke_width)')]","[(106, '        fill_opacity: float = 0.0,'), (109, '        super().__init__('), (110, '            stroke_width=stroke_width,'), (111, '            stroke_color=stroke_color,'), (112, '            fill_opacity=fill_opacity,'), (113, '            **kwargs'), (114, '        )')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,4ff61ed561fed31d324dcf8613a964c7a2f7f5e0,4223bb63202e5e122e0bc95c842ae5829fe6d62d,Default approximate smoothing (non-approx has a bug in 3d),"[(700, '    def make_smooth(self, approx=True, recurse=True) -> Self:')]","[(700, '    def make_smooth(self, approx=False, recurse=True) -> Self:')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,44ec9933b7396ee20546916237622fca5211a9fb,4ff61ed561fed31d324dcf8613a964c7a2f7f5e0,Small format fix,"[(1204, '        if len(points) < 3:')]","[(1204, '        if(len(points) < 3):')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,ec88673e927af5292925ce40f18f820c12bbe9df,44ec9933b7396ee20546916237622fca5211a9fb,Fix kink issue in flat stroke,"[(119, '    float sin_angle = length(unit_jp.xyz) * sign(dot(unit_jp.xyz, unit_normal));'), (147, '    unit_normal *= sign(dot(unit_normal, to_camera));')]","[(119, '    float sin_angle = length(unit_jp.xyz) * sign(unit_jp.z);'), (147, '    if(to_camera.z * dot(unit_normal, to_camera) < 0) unit_normal *= -1;')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,edb438e5e23a670e16cc5890762f5ea7aedb5be0,ec88673e927af5292925ce40f18f820c12bbe9df,Further clean up to stroke shader,"[(35, 'const float MITER_LIMIT = 5.0;'), (42, '    float tol = 1e-8;'), (43, '    if (length(joint_product.xyz) > tol){'), (44, '        return normalize(joint_product.xyz);'), (45, '    }'), (46, '    if (length(v_joint_product[1].xyz) > tol){'), (47, '        return normalize(v_joint_product[1].xyz);'), (48, '    }'), (49, '    return vec3(0.0, 0.0, 1.0);'), (73, 'vec3 inverse_vector_product(vec3 vect, vec3 cross_product, float dot_product){'), (75, '    Suppose cross(v1, v2) = cross_product and dot(v1, v2) = dot_product.'), (76, '    Given v1, this function return v2.'), (78, '    return (vect * dot_product - cross(vect, cross_product)) / dot(vect, vect);'), (94, '    // Find the angle between'), (95, ''), (99, '        vec3 adj_tan = inverse_vector_product(tangent, joint_product.xyz, joint_product.w);'), (101, '        joint_product = get_joint_product(unit_tan, adj_tan);'), (104, '    float cos_angle = (length(joint_product) > 1e-10) ? normalize(joint_product).w : 1.0;'), (105, '    if(cos_angle > 1 - 1e-3) return step;'), (106, '    float sin_angle = sqrt(1 - cos_angle * cos_angle) * sign(dot(joint_product.xyz, unit_normal));'), (130, '    // Find unit normal'), (132, '    vec3 unit_normal;'), (133, '    if (flat_stroke == 0.0){'), (134, '        unit_normal = normalize(to_camera);'), (135, '    }else{'), (136, '        unit_normal = get_joint_unit_normal(joint_product);'), (137, '        unit_normal *= sign(dot(unit_normal, to_camera));  // Choose the ""outward"" normal direction'), (138, '    }'), (144, ""    // TODO, this gives a potentially nice effect that's like a ribbon mostly with its""), (145, '    // broad side to the camera. Currently hard to access via VMobject')]","[(35, 'const float MITER_LIMIT = 3.0;'), (42, '    vec3 result = (joint_product.w < COS_THRESHOLD) ?'), (43, '        joint_product.xyz : v_joint_product[1].xyz;'), (44, '    float norm = length(result);'), (45, '    return (norm > 1e-5) ? result / norm : vec3(0.0, 0.0, 1.0);'), (46, '}'), (47, ''), (48, ''), (49, 'vec4 normalized_joint_product(vec4 joint_product){'), (50, '    float norm = length(joint_product);'), (51, '    return (norm > 1e-10) ? joint_product / norm : vec4(0.0, 0.0, 0.0, 1.0);'), (75, 'vec3 inverse_joint_product(vec3 vect, vec4 joint_product){'), (77, '    If joint_product represents vec4(cross(v1, v2), dot(v1, v2)),'), (78, '    then given v1, this function recovers v2'), (80, '    float dp = joint_product.w;'), (81, '    if (abs(dp) > COS_THRESHOLD) return vect;'), (82, '    vec3 cp = joint_product.xyz;'), (83, '    vec3 perp = cross(cp, vect);'), (84, '    float a = dp / dot(vect, vect);'), (85, '    float b = length(cp) / length(cross(vect, perp));'), (86, '    return a * vect + b * perp;'), (97, ''), (103, '    // Find the appropriate unit joint product'), (104, '    vec4 unit_jp;'), (108, '        vec3 adj_tan = inverse_joint_product(tangent, joint_product);'), (110, '        unit_jp = normalized_joint_product(get_joint_product(unit_tan, adj_tan));'), (111, '    }else {'), (112, '        unit_jp = normalized_joint_product(joint_product);'), (115, '    float cos_angle = unit_jp.w;'), (116, '    if(cos_angle > 1 - 1e-5) return step;'), (119, '    float sin_angle = length(unit_jp.xyz) * sign(dot(unit_jp.xyz, unit_normal));'), (141, '    // Normalize relevant vectors'), (143, '    vec3 unit_normal = (flat_stroke == 0.0) ?'), (144, '        normalize(to_camera) :'), (145, '        get_joint_unit_normal(joint_product);'), (146, '    // Choose the ""outward"" normal direction'), (147, '    unit_normal *= sign(dot(unit_normal, to_camera));'), (153, ""    // TODO, this gives a somewhat nice effect that's like a ribbon mostly with its""), (154, '    // broad side to the camera. Currently unused by VMobject')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,61a2b4d0da0fdf27d0a57a3fa9107405cb017300,edb438e5e23a670e16cc5890762f5ea7aedb5be0,Improve flat stroke for sharp corners with a smooth transition to miter joints,"[(31, 'const float COS_THRESHOLD = 0.999;'), (52, 'vec4 unit_joint_product(vec4 joint_product){'), (53, '    float tol = 1e-8;'), (54, '    float norm = length(joint_product);'), (55, '    return (norm < tol) ? vec4(0.0, 0.0, 0.0, 1.0) : joint_product / norm;'), (56, '}'), (57, ''), (58, ''), (95, '    vec4 unit_jp = unit_joint_product(joint_product);'), (96, '    float cos_angle = unit_jp.w;'), (97, ''), (98, '    // Step to stroke width bound should be perpendicular'), (99, '    // both to the tangent and the normal direction'), (102, '    // Conditions where no joint needs to be created'), (103, '    if (inner_joint || int(joint_type) == NO_JOINT || cos_angle > COS_THRESHOLD) return step;'), (108, '        vec3 adj_tan = inverse_vector_product(tangent, unit_jp.xyz, unit_jp.w);'), (110, '        vec4 flat_jp = get_joint_product(unit_tan, adj_tan);'), (111, '        cos_angle = unit_joint_product(flat_jp).w;'), (114, '    // Adjust based on the joint.'), (115, '    // Bevel for cos(angle) > -0.7, smoothly transition'), (116, '    // to miter for those with sharper angles'), (118, '    float miter_factor = (int(joint_type) == MITER_JOINT) ?'), (119, '        1.0 : smoothstep(-0.7, -0.9, cos_angle);'), (120, '    float shift = (cos_angle + mix(-1, 1, miter_factor)) / sin_angle;'), (122, '    return step + shift * unit_tan;'), (162, '    width += anti_alias_width * pixel_size;')]","[(31, 'const float COS_THRESHOLD = 0.99;'), (35, 'const float MITER_LIMIT = 5.0;'), (91, '    // Check if we can avoid creating a joint'), (92, '    if (inner_joint || int(joint_type) == NO_JOINT) return step;'), (94, '    // Find the angle between'), (95, ''), (99, '        vec3 adj_tan = inverse_vector_product(tangent, joint_product.xyz, joint_product.w);'), (101, '        joint_product = get_joint_product(unit_tan, adj_tan);'), (104, '    float cos_angle = (length(joint_product) > 1e-10) ? normalize(joint_product).w : 1.0;'), (105, '    if(cos_angle > 1 - 1e-3) return step;'), (108, '    // Adjust based on the joint'), (109, '    float shift = (int(joint_type) == MITER_JOINT) ?'), (110, '        (cos_angle + 1.0) / sin_angle :'), (111, '        (cos_angle - 1.0) / sin_angle;'), (112, ''), (113, '    step = step + shift * unit_tan;'), (114, '    if (length(step) > MITER_LIMIT){'), (115, '        step = MITER_LIMIT * normalize(step);'), (116, '    }'), (117, ''), (118, '    return step;')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0dcf6302226cbd76fa10769e654fd816a9d34ada,61a2b4d0da0fdf27d0a57a3fa9107405cb017300,Change default to non-flat stroke rendering,"[(100, '        flat_stroke: bool = False,')]","[(100, '        flat_stroke: bool = True,')]",No
manimlib/utils/bezier.py,manimlib/utils/bezier.py,e130625b9b61dcedb8b12b112a306f14e05db22b,0dcf6302226cbd76fa10769e654fd816a9d34ada,Handle edge case of single point passed into approx_smooth_quadratic_bezier_handles,"[(201, '    if len(points) == 1:'), (202, '        return points[0]'), (203, '    elif len(points) == 2:')]","[(201, '    if len(points) == 2:')]",No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,0a43a3ff9acda0ab8d9220f8b214233d606b4f37,e130625b9b61dcedb8b12b112a306f14e05db22b,Remove unnecessary stroke vert input,[],"[(9, 'in vec3 joint_normal;')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,bc91e91634ca10ffae8458e2935ffa9f23b96ade,0a43a3ff9acda0ab8d9220f8b214233d606b4f37,"In get_euler_angles, add edge case for gimbal lock on the low side","[(77, '        if np.isclose(angles[1], PI, atol=1e-2):'), (78, '            angles[0] = angles[0] - angles[2]'), (79, '            angles[2] = 0')]",[],No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,f677a02036b19f7a90d34ce151ebd147345516cd,bc91e91634ca10ffae8458e2935ffa9f23b96ade,Allow for manually setting miter or bevel joints,"[(115, '    // If joint type is auto, it will bevel for cos(angle) > -0.7,'), (116, '    // and smoothly transition to miter for those with sharper angles'), (117, '    float miter_factor;'), (118, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(-0.7, -0.9, cos_angle);'), (119, '    else if (joint_type == BEVEL_JOINT) miter_factor = 0.0;'), (120, '    else                                miter_factor = 1.0;'), (121, '')]","[(115, '    // Bevel for cos(angle) > -0.7, smoothly transition'), (116, '    // to miter for those with sharper angles'), (118, '    float miter_factor = (int(joint_type) == MITER_JOINT) ?'), (119, '        1.0 : smoothstep(-0.7, -0.9, cos_angle);')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,70862a068f75f3846f2f35d5cbc3add394184435,f677a02036b19f7a90d34ce151ebd147345516cd,Don't buff out stroke width by antialias width,[],"[(165, '    width += anti_alias_width * pixel_size;')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,099aaaee43f8b44f9f62a9fe42e30cad08e5b5d9,70862a068f75f3846f2f35d5cbc3add394184435,Increase polyline factor,"[(33, 'const float POLYLINE_FACTOR = 100;')]","[(33, 'const float POLYLINE_FACTOR = 30;')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bf43a648a436849d5f10256cb0dfb465922a8c98,099aaaee43f8b44f9f62a9fe42e30cad08e5b5d9,Allow for setting flat stroke in VMobject.set_stroke,"[(206, '        flat: bool | None = None,'), (225, '        if flat is not None:'), (226, '            self.set_flat_stroke(flat)'), (227, '')]",[],No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,1ff758dea878af07c7d60e8b3b56a6c8663137c7,bf43a648a436849d5f10256cb0dfb465922a8c98,Remove (no longer necessary) specifications of non-flat stroke for 3d things,[],"[(533, '        flat_stroke: bool = False,'), (558, '        self.set_flat_stroke(flat_stroke)'), (559, '')]",No
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,1ff758dea878af07c7d60e8b3b56a6c8663137c7,bf43a648a436849d5f10256cb0dfb465922a8c98,Remove (no longer necessary) specifications of non-flat stroke for 3d things,[],"[(41, '        flat_stroke: bool = False,'), (55, '        self.set_flat_stroke(flat_stroke)')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,c345d76de09e32e3ff3a7b125aaf77996d6accd3,1ff758dea878af07c7d60e8b3b56a6c8663137c7,Patch for glitches associated with non-flat stroke when tangency direction lines up with camera view,"[(88, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inside_curve){'), (100, '    // For non-flat stroke, there can be glitches when the tangent direction'), (101, '    // lines up very closely with the direction to the camera, treated here'), (102, '    // as the unit normal. To avoid those, this smoothly transitions to a step'), (103, '    // direction perpendicular to the true curve normal.'), (104, '    float alignment = abs(dot(normalize(tangent), unit_normal));'), (105, '    float alignment_threshold = 0.97;  // This could maybe be chosen in a more principled way based on stroke width'), (106, '    if (alignment > alignment_threshold) {'), (107, '        vec3 perp = normalize(cross(get_joint_unit_normal(joint_product), tangent));'), (108, '        step = mix(step, project(step, perp), smoothstep(alignment_threshold, 1.0, alignment));'), (109, '    }'), (110, ''), (111, '    if (inside_curve || int(joint_type) == NO_JOINT) return step;'), (112, ''), (113, '    vec4 unit_jp = unit_joint_product(joint_product);'), (114, '    float cos_angle = unit_jp.w;'), (115, ''), (116, '    if (cos_angle > COS_THRESHOLD) return step;'), (118, '    // Below here, figure out the adjustment to bevel or miter a joint'), (122, '        step = normalize(cross(unit_normal, unit_tan));  // Back to original step'), (149, '    bool inside_curve'), (163, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inside_curve);')]","[(88, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inner_joint){'), (95, '    vec4 unit_jp = unit_joint_product(joint_product);'), (96, '    float cos_angle = unit_jp.w;'), (102, '    // Conditions where no joint needs to be created'), (103, '    if (inner_joint || int(joint_type) == NO_JOINT || cos_angle > COS_THRESHOLD) return step;'), (114, '    // Adjust based on the joint.'), (135, '    bool inner_joint'), (149, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inner_joint);')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,9f54b85c4e35a09afa58ac915dcb78f305421e4f,c345d76de09e32e3ff3a7b125aaf77996d6accd3,Change miter threshold to global constant,"[(35, 'const float MITER_COS_ANGLE_THRESHOLD = -0.8;'), (130, '    // If joint type is auto, it will bevel for cos(angle) > MITER_COS_ANGLE_THRESHOLD,'), (132, '    float mcat1 = MITER_COS_ANGLE_THRESHOLD;'), (133, '    float mcat2 = 0.5 * (mcat1 - 1.0);'), (135, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(mcat1, mcat2, cos_angle);')]","[(129, '    // If joint type is auto, it will bevel for cos(angle) > -0.7,'), (132, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(-0.7, -0.9, cos_angle);')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,cff3bdf8d4f10f12bbc7cf45eed7c98979706fd7,9f54b85c4e35a09afa58ac915dcb78f305421e4f,Remove unnecessary flat stroke option,[],"[(168, ""    // TODO, this gives a potentially nice effect that's like a ribbon mostly with its""), (169, '    // broad side to the camera. Currently hard to access via VMobject'), (170, '    if(flat_stroke == 2.0){'), (171, '        // Rotate the step towards the unit normal by an amount depending'), (172, '        // on the camera position'), (173, '        float cos_angle = dot(unit_normal, normalize(camera_position));'), (174, '        float sin_angle = sqrt(max(1 - cos_angle * cos_angle, 0));'), (175, '        step = cos_angle * step + sin_angle * unit_normal;'), (176, '    }'), (177, ''), (178, '    // Set styling'), (179, '    color = finalize_color(joint_color, point, unit_normal);'), (180, '    if (width == 0) scaled_anti_alias_width = -1.0;  // Signal to discard in the frag shader'), (181, '    else scaled_anti_alias_width = 2.0 * anti_alias_width * pixel_size / width;'), (182, '')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,31b6affabb6ae3b8d7fc9c0300adf697b731fc71,cff3bdf8d4f10f12bbc7cf45eed7c98979706fd7,Push up pointwise styling update,"[(164, '    // Set styling'), (165, '    color = finalize_color(joint_color, point, unit_normal);'), (166, '    scaled_anti_alias_width = (width == 0) ?'), (167, '        -1.0 : // Signal to discard in the frag shader'), (168, '        2.0 * anti_alias_width * pixel_size / width;'), (169, '')]",[],No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,a4858918ddd58069021c5c608fd39ef51344149a,31b6affabb6ae3b8d7fc9c0300adf697b731fc71,Small reformatting,"[(133, '    if (joint_type == BEVEL_JOINT){'), (134, '        miter_factor = 0.0;'), (135, '    }else if (joint_type == MITER_JOINT){'), (136, '        miter_factor = 1.0;'), (137, '    }else {'), (138, '        float mcat1 = MITER_COS_ANGLE_THRESHOLD;'), (139, '        float mcat2 = 0.5 * (mcat1 - 1.0);'), (140, '        miter_factor = smoothstep(mcat1, mcat2, cos_angle);'), (141, '    }')]","[(132, '    float mcat1 = MITER_COS_ANGLE_THRESHOLD;'), (133, '    float mcat2 = 0.5 * (mcat1 - 1.0);'), (135, '    if (joint_type == AUTO_JOINT)       miter_factor = smoothstep(mcat1, mcat2, cos_angle);'), (136, '    else if (joint_type == BEVEL_JOINT) miter_factor = 0.0;'), (137, '    else                                miter_factor = 1.0;')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,a4858918ddd58069021c5c608fd39ef51344149a,Brighten up fill,"[(185, '                color *= 1.06;')]","[(185, '                color.a *= 1.06;')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,a5ba721f96479dff29b677bde1c6399fb43ce183,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,"Cease useless rendering

Change so that with a live window, rendering only happens if there has been an event (mouse motion, key press, etc.) to respond to.","[(127, '        if self.window:'), (128, '            self.window.clear()'), (232, ''), (233, '        if self.window:'), (234, '            self.window.swap_buffers()'), (235, '            if self.fbo is not self.window_fbo:'), (236, '                self.blit(self.fbo, self.window_fbo)')]","[(230, '        if self.window is not None and self.fbo is not self.window_fbo:'), (231, '            self.blit(self.fbo, self.window_fbo)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,a5ba721f96479dff29b677bde1c6399fb43ce183,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,"Cease useless rendering

Change so that with a live window, rendering only happens if there has been an event (mouse motion, key press, etc.) to respond to.","[(217, '            return'), (272, '                self.window._has_undrawn_event = True'), (329, '        if self.window and dt == 0 and not self.window.has_undrawn_event():'), (330, ""            # In this case, there's no need for new rendering, but we""), (331, '            # shoudl still listen for new events'), (332, '            self.window._window.dispatch_events()'), (333, '            return'), (334, ''), (340, '            time.sleep(max(vt - rt, 0))'), (536, '        self.real_animation_start_time = time.time()'), (604, '            self.real_animation_start_time = time.time()')]","[(217, '            return'), (328, '        if self.window:'), (329, '            self.window.clear()'), (333, '            self.window.swap_buffers()'), (336, '            if rt < vt:'), (337, '                self.update_frame(0)'), (599, '            self.real_animation_start_time = time.time()')]",No
manimlib/window.py,manimlib/window.py,a5ba721f96479dff29b677bde1c6399fb43ce183,c7acbe5de63ec4290cdbb5d37ac156f88ff2e76b,"Cease useless rendering

Change so that with a live window, rendering only happens if there has been an event (mouse motion, key press, etc.) to respond to.","[(9, 'from functools import wraps'), (43, '        self._has_undrawn_event = True'), (44, ''), (101, '    def has_undrawn_event(self) -> bool:'), (102, '        return self._has_undrawn_event'), (103, ''), (104, '    def swap_buffers(self):'), (105, '        super().swap_buffers()'), (106, '        self._has_undrawn_event = False'), (107, ''), (108, '    @staticmethod'), (109, '    def note_undrawn_event(func: Callable[..., T]) -> Callable[..., T]:'), (110, '        @wraps(func)'), (111, '        def wrapper(self, *args, **kwargs):'), (112, '            func(self, *args, **kwargs)'), (113, '            self._has_undrawn_event = True'), (114, '        return wrapper'), (115, ''), (116, '    @note_undrawn_event'), (123, '    @note_undrawn_event'), (130, '    @note_undrawn_event'), (136, '    @note_undrawn_event'), (142, '    @note_undrawn_event'), (149, '    @note_undrawn_event'), (155, '    @note_undrawn_event'), (161, '    @note_undrawn_event'), (166, '    @note_undrawn_event'), (171, '    @note_undrawn_event'), (176, '    @note_undrawn_event')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,65d594796663082ce26365751d264f18f7cf3643,a5ba721f96479dff29b677bde1c6399fb43ce183,Change ignore_skipping name to force_draw,"[(272, '                self.update_frame(dt=0, force_draw=True)'), (316, '        self.update_frame(force_draw=True)'), (319, '    def update_frame(self, dt: float = 0, force_draw: bool = False) -> None:'), (322, '        if self.skip_animations and not force_draw:'), (328, '        if self.window and dt == 0 and not self.window.has_undrawn_event() and not force_draw:'), (611, '            self.update_frame(dt=0, force_draw=True)')]","[(272, '                self.window._has_undrawn_event = True'), (273, '                self.update_frame(dt=0, ignore_skipping=True)'), (317, '        self.update_frame(ignore_skipping=True)'), (320, '    def update_frame(self, dt: float = 0, ignore_skipping: bool = False) -> None:'), (323, '        if self.skip_animations and not ignore_skipping:'), (329, '        if self.window and dt == 0 and not self.window.has_undrawn_event():'), (612, '            self.update_frame(dt=0, ignore_skipping=True)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,59235d3eedef07ec5c6748e1a959f3e41eb9a302,65d594796663082ce26365751d264f18f7cf3643,"Include flat stroke in get_style, set_style, match_style","[(251, '        flat_stroke: bool = False,'), (270, '                    flat=flat_stroke,'), (278, '                    flat=flat_stroke,'), (280, '                    recurse=False,'), (296, '            ""flat_stroke"": bool(self.uniforms[""flat_stroke""]),')]","[(276, '                    recurse=False,')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,df0ae6fdc94215c0f43f3da3b24bcd386fe51f9f,59235d3eedef07ec5c6748e1a959f3e41eb9a302,Fix missing ignore_skipping -> force_draw,"[(253, '            self.scene.update_frame(force_draw=True)')]","[(253, '            self.scene.update_frame(ignore_skipping=True)')]",No
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,04347e7876dca60f004dcf3a0dcdd220f9e62e9f,df0ae6fdc94215c0f43f3da3b24bcd386fe51f9f,Fix thin stroke issue for low resolutions,"[(5, 'in float anti_alias_prop;'), (11, '    if(anti_alias_prop < 0) discard;'), (16, '    frag_color.a *= smoothstep(0, -anti_alias_prop, signed_dist_to_region);')]","[(5, 'in float scaled_anti_alias_width;'), (11, '    if(scaled_anti_alias_width < 0) discard;'), (16, '    frag_color.a *= smoothstep(0, -scaled_anti_alias_width, signed_dist_to_region);')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,04347e7876dca60f004dcf3a0dcdd220f9e62e9f,df0ae6fdc94215c0f43f3da3b24bcd386fe51f9f,Fix thin stroke issue for low resolutions,"[(19, 'out float anti_alias_prop;'), (170, '    float aaw = anti_alias_width * pixel_size;'), (171, '    anti_alias_prop = (width == 0) ? -1.0 : 2 * aaw / (width + 2 * aaw);'), (182, '        emit_gl_Position(point + 0.5 * (width + aaw) * sign * step);')]","[(19, 'out float scaled_anti_alias_width;'), (170, '    scaled_anti_alias_width = (width == 0) ?'), (171, '        -1.0 : // Signal to discard in the frag shader'), (172, '        2.0 * anti_alias_width * pixel_size / width;'), (183, '        emit_gl_Position(point + 0.5 * width * sign * step);')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,4a6e6ca64603a4ddcf0e5c82202f9fb762868c41,04347e7876dca60f004dcf3a0dcdd220f9e62e9f,"Double the size of the fill canvas, to effectively do msaa","[(151, '    # Double the size so as to effectively to 4x multi-sample antialiasing'), (152, ""    size = (2 * cam_config['pixel_width'], 2 * cam_config['pixel_height'])"")]","[(151, ""    size = (cam_config['pixel_width'], cam_config['pixel_height'])"")]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,430a88cf131a2229381607a590c1a138269e3db7,4a6e6ca64603a4ddcf0e5c82202f9fb762868c41,"Change default border width to 0, and only draw it for opacity 1","[(4, 'from functools import reduce'), (8, 'import operator as op'), (106, '        fill_border_width: float = 0.0,'), (195, '        if border_width is not None:'), (196, '            for mob in self.get_family(recurse):'), (197, '                mob.data[""fill_border_width""] = border_width'), (1393, ''), (1394, '            draw_border_width = reduce(op.and_, ['), (1395, '                (not submob._has_stroke) or submob.stroke_behind,'), (1396, ""                submob.data['fill_border_width'][0] > 0,""), (1397, ""                submob.data['fill_rgba'][0, 3] == 1""), (1398, '            ])'), (1399, '            if draw_border_width:')]","[(104, '        fill_border_width: float = 0.5,'), (193, '        if border_width is None:'), (194, '            border_width = 0 if self.get_fill_opacity() < 1 else 0.5'), (195, '        for mob in self.get_family(recurse):'), (196, '            mob.data[""fill_border_width""] = border_width'), (442, '        fill_border_width: float = 0,'), (447, '        self.set_fill(border_width=fill_border_width)'), (453, '        fill_border_width: float = 0.5,'), (458, '        self.set_fill(border_width=fill_border_width)'), (1396, '            if (not submob._has_stroke) or submob.stroke_behind:')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,174f3186028ec31a0ba2eec61f81549e4d06dc50,430a88cf131a2229381607a590c1a138269e3db7,Push _data_default initialization into init_data,"[(137, '        self._data_defaults = np.ones(1, dtype=self.data.dtype)')]","[(113, '        self._data_defaults = np.ones(1, dtype=self.data.dtype)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,174f3186028ec31a0ba2eec61f81549e4d06dc50,Use _data_defaults for initializing fill border width,"[(197, '                data = mob.data if mob.has_points() > 0 else mob._data_defaults'), (198, '                data[""fill_border_width""] = border_width')]","[(197, '                mob.data[""fill_border_width""] = border_width')]",No
manimlib/animation/animation.py,manimlib/animation/animation.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(52, '        assert isinstance(mobject, Mobject)')]","[(52, '        assert(isinstance(mobject, Mobject))')]",No
manimlib/animation/composition.py,manimlib/animation/composition.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(136, '        assert len(self.animations) > 0')]","[(136, '        assert(len(self.animations) > 0)')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(87, '        assert isinstance(vmobject, VMobject)')]","[(87, '        assert(isinstance(vmobject, VMobject))')]",No
manimlib/animation/numbers.py,manimlib/animation/numbers.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(22, '        assert isinstance(decimal_mob, DecimalNumber)')]","[(22, '        assert(isinstance(decimal_mob, DecimalNumber))')]",No
manimlib/animation/transform.py,manimlib/animation/transform.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(182, '        assert isinstance(method.__self__, Mobject)')]","[(182, '        assert(isinstance(method.__self__, Mobject))')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(102, '        assert self.window is not None')]","[(102, '        assert(self.window is not None)')]",No
manimlib/event_handler/event_dispatcher.py,manimlib/event_handler/event_dispatcher.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(23, '        assert isinstance(event_listner, EventListener)'), (28, '        assert isinstance(event_listner, EventListener)'), (59, '                assert isinstance(listner, EventListener)')]","[(23, '        assert(isinstance(event_listner, EventListener))'), (28, '        assert(isinstance(event_listner, EventListener))'), (59, '                assert(isinstance(listner, EventListener))')]",No
manimlib/mobject/interactive.py,manimlib/mobject/interactive.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(40, '        assert isinstance(mobject, Mobject)'), (61, '        assert isinstance(mobject, Mobject)'), (122, '        assert isinstance(value, bool)'), (171, '        assert isinstance(value, bool)'), (255, '        assert self.min_value <= value <= self.max_value'), (354, '            assert isinstance(square, Square)')]","[(40, '        assert(isinstance(mobject, Mobject))'), (61, '        assert(isinstance(mobject, Mobject))'), (122, '        assert(isinstance(value, bool))'), (171, '        assert(isinstance(value, bool))'), (255, '        assert(self.min_value <= value <= self.max_value)'), (354, '            assert(isinstance(square, Square))')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(128, '        assert isinstance(other, Mobject)'), (132, '        assert isinstance(other, int)'), (231, '        assert data.dtype == self.data.dtype')]","[(128, '        assert(isinstance(other, Mobject))'), (132, '        assert(isinstance(other, int))'), (231, '        assert(data.dtype == self.data.dtype)')]",No
manimlib/mobject/mobject_update_utils.py,manimlib/mobject/mobject_update_utils.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(21, '    assert inspect.ismethod(method)'), (23, '    assert isinstance(mobject, Mobject)')]","[(21, '    assert(inspect.ismethod(method))'), (23, '    assert(isinstance(mobject, Mobject))')]",No
manimlib/mobject/probability.py,manimlib/mobject/probability.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(156, '        assert hasattr(self, ""horizontal_parts"")'), (165, '        assert hasattr(self, ""vertical_parts"")'), (174, '        assert hasattr(self, ""vertical_parts"")')]","[(156, '        assert(hasattr(self, ""horizontal_parts""))'), (165, '        assert(hasattr(self, ""vertical_parts""))'), (174, '        assert(hasattr(self, ""vertical_parts""))')]",No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(170, '        assert isinstance(smobject, Surface)')]","[(170, '        assert(isinstance(smobject, Surface))')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(476, '        assert len(anchors) == len(handles) + 1'), (1060, '        assert isinstance(vmobject, VMobject)'), (1262, '        assert len(points) == 0 or len(points) % 2 == 1'), (1272, '        assert len(points) % 2 == 0')]","[(476, '        assert(len(anchors) == len(handles) + 1)'), (1060, '        assert(isinstance(vmobject, VMobject))'), (1262, '        assert(len(points) == 0 or len(points) % 2 == 1)'), (1272, '        assert(len(points) % 2 == 0)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(871, '        assert self.window is not None')]","[(871, '        assert(self.window is not None)')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,3f15715ff1ca7b6cf648683590caf6be9a4f85b6,Add white space after assert statements,"[(222, '        assert self.vao is not None')]","[(222, '        assert(self.vao is not None)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,21c0bcb8b68dc3efcfd1089bbd621c1bb8862adb,902a4f264e57a0dfbb92ce9b383e44bc99b3acd4,Don't wait for animations while skipping,"[(336, '        if self.window and not self.skip_animations:')]","[(336, '        if self.window:')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,108db870872c7aaa7519d52ad29cfd556c1f897a,21c0bcb8b68dc3efcfd1089bbd621c1bb8862adb,"Rather than ignoring border with for non-one opacity, go back to having set_fill default to setting 0 border width for intermediate opacities","[(194, '        if opacity is not None and 0 < opacity < 1 and border_width is None:'), (195, '            border_width = 0'), (197, '            self.border_width = border_width'), (1397, '            draw_border_width = op.and_('), (1399, '                (not submob._has_stroke) or submob.stroke_behind,'), (1400, '            )')]","[(4, 'from functools import reduce'), (1395, '            draw_border_width = reduce(op.and_, ['), (1396, '                (not submob._has_stroke) or submob.stroke_behind,'), (1398, ""                submob.data['fill_rgba'][0, 3] == 1""), (1399, '            ])')]",No
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier_stroke/frag.glsl,d8edccdab4a542781477adc1d1dd6cea59d0b94a,108db870872c7aaa7519d52ad29cfd556c1f897a,Fix zero stroke width issue,"[(4, 'in float dist_to_curve;'), (5, 'in float half_stroke_width;'), (6, 'in float half_anti_alias_width;'), (12, '    if(half_stroke_width == 0) discard;'), (16, '    float signed_dist_to_region = abs(dist_to_curve) - half_stroke_width;'), (17, '    frag_color.a *= smoothstep(half_anti_alias_width, -half_anti_alias_width, signed_dist_to_region);')]","[(4, 'in float scaled_signed_dist_to_curve;'), (5, 'in float anti_alias_prop;'), (11, '    if(anti_alias_prop < 0) discard;'), (15, '    float signed_dist_to_region = abs(scaled_signed_dist_to_curve) - 1.0;'), (16, '    frag_color.a *= smoothstep(0, -anti_alias_prop, signed_dist_to_region);')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,d8edccdab4a542781477adc1d1dd6cea59d0b94a,108db870872c7aaa7519d52ad29cfd556c1f897a,Fix zero stroke width issue,"[(19, 'out float dist_to_curve;'), (20, 'out float half_stroke_width;'), (21, 'out float half_anti_alias_width;'), (171, '    half_anti_alias_width = 0.5 * anti_alias_width * pixel_size;'), (172, '    half_stroke_width = 0.5 * width;'), (182, '        dist_to_curve = sign * (half_stroke_width + half_anti_alias_width);'), (183, '        emit_gl_Position(point + dist_to_curve * step);')]","[(19, 'out float anti_alias_prop;'), (20, 'out float scaled_signed_dist_to_curve;'), (170, '    float aaw = anti_alias_width * pixel_size;'), (171, '    anti_alias_prop = (width == 0) ? -1.0 : 2 * aaw / (width + 2 * aaw);'), (181, '        scaled_signed_dist_to_curve = sign;'), (182, '        emit_gl_Position(point + 0.5 * (width + aaw) * sign * step);')]",No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,0267740bdec6f149f4dccdbd75b8103f3249555c,d8edccdab4a542781477adc1d1dd6cea59d0b94a,Change STROKE_WIDTH_CONVERSION width back to older value,"[(18, 'const float STROKE_WIDTH_CONVERSION = 0.01;')]","[(18, 'const float STROKE_WIDTH_CONVERSION = 0.015;')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,c20ce8d6332daa0b741b985e052d92480cca99f1,0267740bdec6f149f4dccdbd75b8103f3249555c,Have arrows default to flat stroke,"[(645, '        flat_stroke: bool = True,'), (663, '            flat_stroke=flat_stroke,')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bb42b66201d0c73f5e80015657659e3c81b99bed,c20ce8d6332daa0b741b985e052d92480cca99f1,Include fill border width in style,"[(250, '        fill_border_width: float | None = None,'), (267, '                    border_width=fill_border_width,'), (299, '            ""fill_border_width"": data[\'fill_border_width\'].copy(),')]",[],No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,ccc84f4ab14b8fded450c84e4945e98f8260c7e5,bb42b66201d0c73f5e80015657659e3c81b99bed,Give Numbers a default border width,"[(33, '        fill_border_width: float = 0.5,'), (61, '            fill_border_width=fill_border_width,')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0efa96e399a3b6f5f9c1e30f4c195f39f04570dd,ccc84f4ab14b8fded450c84e4945e98f8260c7e5,Just use L-inf norm for point equality,"[(753, '        return all(abs(p1 - p0) < self.tolerance_for_point_equality)')]","[(753, '        return get_norm(p1 - p0) < self.tolerance_for_point_equality')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f9b9cf69fdea86f1d591613131ef7d0d18728300,0efa96e399a3b6f5f9c1e30f4c195f39f04570dd,"Update so that vbo is not recreated on each from, but is read into","[(2053, '                shader_wrapper.load_data()')]","[(2053, '                shader_wrapper.generate_vao()')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f9b9cf69fdea86f1d591613131ef7d0d18728300,0efa96e399a3b6f5f9c1e30f4c195f39f04570dd,"Update so that vbo is not recreated on each from, but is read into","[(232, '    def get_vertex_buffer_object(self):'), (233, '        self.vbo = self.ctx.buffer(self.vert_data)'), (236, '    def get_index_buffer_object(self):'), (237, '        if len(self.vert_indices) > 0:'), (241, '    def load_data(self):'), (242, '        if self.vao is None:'), (243, '            self.generate_vao()'), (244, '        elif self.vao.vertices != len(self.vert_data):'), (245, '            self.release()'), (246, '            self.generate_vao()'), (247, '        else:'), (248, '            self.vbo.write(self.vert_data)'), (249, '            if self.ibo is not None:'), (250, '                self.ibo.write(self.self.vert_indices.astype(np.uint32))'), (251, ''), (252, '    def generate_vao(self):'), (254, '        vbo = self.get_vertex_buffer_object()'), (255, '        ibo = self.get_index_buffer_object()')]","[(232, '    def get_vertex_buffer_object(self, refresh: bool = True):'), (233, '        if refresh:'), (234, '            self.vbo = self.ctx.buffer(self.vert_data)'), (237, '    def get_index_buffer_object(self, refresh: bool = True):'), (238, '        if refresh and len(self.vert_indices) > 0:'), (242, '    def generate_vao(self, refresh: bool = True):'), (243, '        self.release()'), (245, '        vbo = self.get_vertex_buffer_object(refresh)'), (246, '        ibo = self.get_index_buffer_object(refresh)')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other",[],"[(2052, '            for shader_wrapper in self.shader_wrappers:'), (2053, '                shader_wrapper.load_data()')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","[(8, 'import itertools as it'), (50, 'from manimlib.shader_wrapper import VShaderWrapper'), (78, ""    fill_data_names = ['point', 'fill_rgba', 'base_point', 'unit_normal']  # Delete these""), (79, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']  # Delete these""), (1329, ''), (1331, '        self.shader_indices = np.zeros(0)'), (1332, '        self.shader_wrapper = VShaderWrapper('), (1334, '            vert_data=self.data,'), (1338, '    def get_shader_vert_indices(self):'), (1339, '        return self.get_outer_vert_indices()'), (1350, '        for submob in family:'), (1351, '            if submob._has_fill:'), (1352, '                submob.data[""base_point""] = submob.data[""point""][0]'), (1354, '        self.shader_wrapper.read_in('), (1355, '            # [sm.data for sm in family],'), (1356, '            list(it.chain(*([sm.data, sm.data[-1:]] for sm in family)))'), (1357, '            # [sm.get_shader_vert_indices() for sm in family]'), (1358, '        )'), (1359, '        rep = family[0]  # Representative family member'), (1360, '        self.shader_wrapper.bind_to_mobject_uniforms(rep.get_uniforms())'), (1361, '        self.shader_wrapper.depth_test = rep.depth_test'), (1362, '        return [self.shader_wrapper]')]","[(49, 'from manimlib.shader_wrapper import FillShaderWrapper'), (77, ""    fill_data_names = ['point', 'fill_rgba', 'base_point', 'unit_normal']""), (78, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']""), (1329, '        dtype = self.shader_dtype'), (1330, '        fill_dtype, stroke_dtype = ('), (1331, '            np.dtype(['), (1332, '                (name, dtype[name].base, dtype[name].shape)'), (1333, '                for name in names'), (1334, '            ])'), (1335, '            for names in [self.fill_data_names, self.stroke_data_names]'), (1336, '        )'), (1337, '        fill_data = np.zeros(0, dtype=fill_dtype)'), (1338, '        stroke_data = np.zeros(0, dtype=stroke_dtype)'), (1339, '        self.fill_shader_wrapper = FillShaderWrapper('), (1340, '            ctx=ctx,'), (1341, '            vert_data=fill_data,'), (1342, '            mobject_uniforms=self.uniforms,'), (1343, '            shader_folder=self.fill_shader_folder,'), (1344, '            render_primitive=self.fill_render_primitive,'), (1345, '        )'), (1346, '        self.stroke_shader_wrapper = ShaderWrapper('), (1348, '            vert_data=stroke_data,'), (1350, '            shader_folder=self.stroke_shader_folder,'), (1351, '            render_primitive=self.stroke_render_primitive,'), (1353, '        self.back_stroke_shader_wrapper = self.stroke_shader_wrapper.copy()'), (1354, '        self.shader_wrappers = ['), (1355, '            self.back_stroke_shader_wrapper,'), (1356, '            self.fill_shader_wrapper,'), (1357, '            self.stroke_shader_wrapper,'), (1358, '        ]'), (1359, '        for sw in self.shader_wrappers:'), (1360, '            family = self.family_members_with_points()'), (1361, '            rep = family[0] if family else self'), (1362, '            for old, new in rep.shader_code_replacements.items():'), (1363, '                sw.replace_code(old, new)'), (1365, '    def refresh_shader_wrapper_id(self) -> Self:'), (1366, '        if not self._shaders_initialized:'), (1367, '            return self'), (1368, '        for wrapper in self.shader_wrappers:'), (1369, '            wrapper.refresh_id()'), (1370, '        return self'), (1380, '        fill_names = self.fill_data_names'), (1381, '        stroke_names = self.stroke_data_names'), (1382, ''), (1383, '        fill_family = (sm for sm in family if sm._has_fill)'), (1384, '        stroke_family = (sm for sm in family if sm._has_stroke)'), (1385, ''), (1386, '        # Build up fill data lists'), (1387, '        fill_datas = []'), (1388, '        fill_indices = []'), (1389, '        fill_border_datas = []'), (1390, '        for submob in fill_family:'), (1391, '            indices = submob.get_outer_vert_indices()'), (1392, '            if submob._use_winding_fill:'), (1393, '                data = submob.data[fill_names]'), (1394, '                data[""base_point""][:] = data[""point""][0]'), (1395, '                fill_datas.append(data[indices])'), (1396, '            else:'), (1397, '                fill_datas.append(submob.data[fill_names])'), (1398, '                fill_indices.append(submob.get_triangulation())'), (1400, '            draw_border_width = op.and_('), (1401, ""                submob.data['fill_border_width'][0] > 0,""), (1402, '                (not submob._has_stroke) or submob.stroke_behind,'), (1403, '            )'), (1404, '            if draw_border_width:'), (1405, '                # Add fill border'), (1406, '                submob.get_joint_products()'), (1407, '                names = list(stroke_names)'), (1408, ""                names[names.index('stroke_rgba')] = 'fill_rgba'""), (1409, ""                names[names.index('stroke_width')] = 'fill_border_width'""), (1410, '                border_stroke_data = submob.data[names].astype('), (1411, '                    self.stroke_shader_wrapper.vert_data.dtype'), (1412, '                )'), (1413, '                fill_border_datas.append(border_stroke_data[indices])'), (1414, ''), (1415, '        # Build up stroke data lists'), (1416, '        stroke_datas = []'), (1417, '        back_stroke_datas = []'), (1418, '        for submob in stroke_family:'), (1419, '            submob.get_joint_products()'), (1420, '            indices = submob.get_outer_vert_indices()'), (1421, '            if submob.stroke_behind:'), (1422, '                back_stroke_datas.append(submob.data[stroke_names][indices])'), (1423, '            else:'), (1424, '                stroke_datas.append(submob.data[stroke_names][indices])'), (1426, '        shader_wrappers = ['), (1427, '            self.back_stroke_shader_wrapper.read_in([*back_stroke_datas, *fill_border_datas]),'), (1428, '            self.fill_shader_wrapper.read_in(fill_datas, fill_indices or None),'), (1429, '            self.stroke_shader_wrapper.read_in(stroke_datas),'), (1430, '        ]'), (1431, '        for sw in shader_wrappers:'), (1432, '            rep = family[0]  # Representative family member'), (1433, '            sw.bind_to_mobject_uniforms(rep.get_uniforms())'), (1434, '            sw.depth_test = rep.depth_test'), (1435, '        return [sw for sw in shader_wrappers if len(sw.vert_data) > 0]')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","[(60, '        self.init_vertex_objects()'), (82, '        self.programs = [self.program]'), (90, '    def init_vertex_objects(self):'), (99, '            # np.all(self.vert_data == shader_wrapper.vert_data),'), (113, '        result.init_vertex_objects()'), (128, '        program_id = hash("""".join(map(str, self.program_code.values())))'), (169, '            self.read_in([self.vert_data, (sw.vert_data for sw in shader_wrappers)])'), (170, '            vbos = ['), (171, '                vbo'), (172, '                for vbo in [self.vbo, *(sw.vbo for sw in shader_wrappers)]'), (173, '                if vbo is not None'), (174, '            ]'), (175, '            total_size = sum(vbo.size for vbo in vbos)'), (176, '            new_vbo = self.ctx.buffer(reserve=total_size)'), (177, '            offset = 0'), (178, '            for vbo in vbos:'), (179, '                new_vbo.write(vbo.read(), offset=offset)'), (180, '                offset += vbo.size'), (181, '            self.vbo = new_vbo'), (186, '        data_list: Iterable[np.ndarray],'), (187, '        indices_list: Iterable[np.ndarray] | None = None'), (188, '    ):'), (189, '        if indices_list is not None:'), (190, '            data_list = [data[indices] for data, indices in zip(data_list, indices_list)]'), (191, '            total_len = sum(map(len, indices_list))'), (192, '        else:'), (193, '            total_len = sum(map(len, data_list))'), (194, ''), (196, '            if self.vbo is not None:'), (197, '                self.vbo.clear()'), (198, '            return'), (199, ''), (200, '        # If possible, read concatenated data into existing list'), (201, '        if len(self.vert_data) != total_len:'), (202, '            self.vert_data = np.concatenate(data_list)'), (203, '        else:'), (204, '            np.concatenate(data_list, out=self.vert_data)'), (205, ''), (206, '        # Either create new vbo, or read data into it'), (207, '        total_size = self.vert_data.itemsize * total_len'), (208, '        if self.vbo is None:'), (209, '            self.vbo = self.ctx.buffer(self.vert_data)'), (210, '        elif self.vbo.size != total_size:'), (211, '            self.vbo.release()'), (212, '            self.vbo = self.ctx.buffer(self.vert_data)'), (213, '        else:'), (214, '            self.vbo.write(self.vert_data)'), (222, '        if self.vao is None:'), (223, '            self.generate_vao()'), (227, '        for program in self.programs:'), (228, '            if program is None:'), (229, '                continue'), (230, '            for uniforms in [self.mobject_uniforms, camera_uniforms, self.texture_names_to_ids]:'), (231, '                for name, value in uniforms.items():'), (232, '                    set_program_uniform(program, name, value)'), (235, '        if self.vbo is None:'), (236, '            self.vbo = self.ctx.buffer(self.vert_data)'), (241, '            content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (246, '        for obj in (self.vbo, self.vao):'), (253, 'class VShaderWrapper(ShaderWrapper):'), (257, '        vert_data: np.ndarray,'), (258, '        shader_folder: Optional[str] = None,'), (259, '        mobject_uniforms: Optional[UniformDict] = None,  # A dictionary mapping names of uniform variables'), (260, '        texture_paths: Optional[dict[str, str]] = None,  # A dictionary mapping names to filepaths for textures.'), (261, '        depth_test: bool = False,'), (262, '        # render_primitive: int = moderngl.TRIANGLES,'), (263, '        render_primitive: int = moderngl.TRIANGLE_STRIP,'), (265, '        super().__init__('), (266, '            ctx=ctx,'), (267, '            vert_data=vert_data,'), (268, '            shader_folder=shader_folder,'), (269, '            mobject_uniforms=mobject_uniforms,'), (270, '            texture_paths=texture_paths,'), (271, '            depth_test=depth_test,'), (272, '            render_primitive=render_primitive,'), (273, '        )'), (276, '    def init_program_code(self) -> None:'), (277, '        self.program_code = {'), (278, '            f""{vtype}_{name}"": get_shader_code_from_file('), (279, '                os.path.join(f""quadratic_bezier_{vtype}"", f""{name}.glsl"")'), (280, '            )'), (281, '            for vtype in [""stroke"", ""fill""]'), (282, '            for name in [""vert"", ""geom"", ""frag""]'), (283, '        }'), (284, ''), (285, '    def init_program(self):'), (286, '        self.stroke_program = get_shader_program('), (287, '            self.ctx,'), (288, '            vertex_shader=self.program_code[""stroke_vert""],'), (289, '            geometry_shader=self.program_code[""stroke_geom""],'), (290, '            fragment_shader=self.program_code[""stroke_frag""],'), (291, '        )'), (292, '        self.fill_program = get_shader_program('), (293, '            self.ctx,'), (294, '            vertex_shader=self.program_code[""fill_vert""],'), (295, '            geometry_shader=self.program_code[""fill_geom""],'), (296, '            fragment_shader=self.program_code[""fill_frag""],'), (297, '        )'), (298, '        self.programs = [self.stroke_program, self.fill_program]'), (299, ''), (300, '        # Full vert format looks like this (total of 4x23 = 92 bytes):'), (301, '        # point 3'), (302, '        # stroke_rgba 4'), (303, '        # stroke_width 1'), (304, '        # joint_product 4'), (305, '        # fill_rgba 4'), (306, '        # base_point 3'), (307, '        # unit_normal 3'), (308, '        # fill_border_width 1'), (309, ""        self.stroke_vert_format = '3f 4f 1f 4f 44x'""), (310, ""        self.stroke_vert_attributes = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']""), (311, ''), (312, ""        self.fill_vert_format = '3f 36x 4f 3f 3f 4x'""), (313, ""        self.fill_vert_attributes = ['point', 'fill_rgba', 'base_point', 'unit_normal']""), (314, ''), (315, '    def init_vertex_objects(self):'), (316, '        self.vbo = None'), (317, '        self.stroke_vao = None'), (318, '        self.fill_vao = None'), (319, ''), (320, '    # TODO, think about create_id, replace_code'), (321, '    def is_valid(self) -> bool:'), (322, '        return self.vert_data is not None'), (323, ''), (324, '    # TODO, motidify read in to handle triangulation case for non-winding fill?'), (325, ''), (326, '    # Rendering'), (327, '    def render_stroke(self):'), (328, '        if self.stroke_vao is None:'), (329, '            return'), (330, '        self.stroke_vao.render()'), (331, ''), (332, '    def render_fill(self):'), (333, '        if self.fill_vao is None:'), (334, '            return'), (335, ''), (336, '        # TODO, need a new test here'), (337, '        winding = True'), (338, ""        self.fill_program['winding'].value = winding""), (340, '            self.fill_vao.render()'), (356, '        self.fill_vao.render()'), (364, ''), (365, '    def render(self):'), (366, '        if self.stroke_vao is None or self.fill_vao is None:'), (367, '            self.generate_vao()'), (368, '        self.render_fill()'), (369, '        self.render_stroke()'), (370, ''), (371, '    def generate_vao(self):'), (372, '        self.stroke_vao = self.ctx.vertex_array('), (373, '            program=self.stroke_program,'), (374, '            content=[(self.vbo, self.stroke_vert_format, *self.stroke_vert_attributes)],'), (375, '            mode=self.render_primitive,'), (376, '        )'), (377, '        self.fill_vao = self.ctx.vertex_array('), (378, '            program=self.fill_program,'), (379, '            content=[(self.vbo, self.fill_vert_format, *self.fill_vert_attributes)],'), (380, '            mode=self.render_primitive,'), (381, '        )'), (382, ''), (383, '    def release(self):'), (384, '        attrs = [""vbo"", ""stroke_vao"", ""fill_vao""]'), (385, '        for attr in attrs:'), (386, '            obj = getattr(self, attr)'), (387, '            if obj is not None:'), (388, '                obj.release()'), (389, '            setattr(self, attr, None)')]","[(39, '        vert_indices: Optional[np.ndarray] = None,'), (48, '        self.vert_indices = (vert_indices or np.zeros(0)).astype(int)'), (62, '        self.init_vao()'), (91, '    def init_vao(self):'), (93, '        self.ibo = None'), (101, '            np.all(self.vert_data == shader_wrapper.vert_data),'), (102, '            np.all(self.vert_indices == shader_wrapper.vert_indices),'), (116, '        result.vert_indices = self.vert_indices.copy()'), (117, '        result.init_vao()'), (132, '        program_id = hash("""".join('), (133, '            self.program_code[f""{name}_shader""] or """"'), (134, '            for name in (""vertex"", ""geometry"", ""fragment"")'), (135, '        ))'), (176, '            data_list = [self.vert_data, *(sw.vert_data for sw in shader_wrappers)]'), (177, '            indices_list = [self.vert_indices, *(sw.vert_indices for sw in shader_wrappers)]'), (178, '            self.read_in(data_list, indices_list)'), (183, '        data_list: List[np.ndarray],'), (184, '        indices_list: List[np.ndarray] | None = None'), (185, '    ) -> ShaderWrapper:'), (186, '        # Assume all are of the same type'), (187, '        total_len = sum(len(data) for data in data_list)'), (188, '        self.vert_data = resize_array(self.vert_data, total_len)'), (190, '            return self'), (191, ''), (192, '        # Stack the data'), (193, '        np.concatenate(data_list, out=self.vert_data)'), (194, ''), (195, '        if indices_list is None:'), (196, '            self.vert_indices = resize_array(self.vert_indices, 0)'), (197, '            return self'), (198, ''), (199, '        total_verts = sum(len(vi) for vi in indices_list)'), (200, '        if total_verts == 0:'), (201, '            return self'), (202, ''), (203, '        self.vert_indices = resize_array(self.vert_indices, total_verts)'), (204, ''), (205, '        # Stack vert_indices, but adding the appropriate offset'), (206, '        # alogn the way'), (207, '        n_points = 0'), (208, '        n_verts = 0'), (209, '        for data, indices in zip(data_list, indices_list):'), (210, '            new_n_verts = n_verts + len(indices)'), (211, '            self.vert_indices[n_verts:new_n_verts] = indices + n_points'), (212, '            n_verts = new_n_verts'), (213, '            n_points += len(data)'), (214, '        return self'), (222, '        assert self.vao is not None'), (226, '        if self.program is None:'), (227, '            return'), (228, '        for uniforms in [self.mobject_uniforms, camera_uniforms, self.texture_names_to_ids]:'), (229, '            for name, value in uniforms.items():'), (230, '                set_program_uniform(self.program, name, value)'), (231, ''), (232, '    def get_vertex_buffer_object(self):'), (233, '        self.vbo = self.ctx.buffer(self.vert_data)'), (234, '        return self.vbo'), (235, ''), (236, '    def get_index_buffer_object(self):'), (237, '        if len(self.vert_indices) > 0:'), (238, '            self.ibo = self.ctx.buffer(self.vert_indices.astype(np.uint32))'), (239, '        return self.ibo'), (240, ''), (241, '    def load_data(self):'), (242, '        if self.vao is None:'), (243, '            self.generate_vao()'), (244, '        elif self.vao.vertices != len(self.vert_data):'), (245, '            self.release()'), (246, '            self.generate_vao()'), (247, '        else:'), (248, '            self.vbo.write(self.vert_data)'), (249, '            if self.ibo is not None:'), (250, '                self.ibo.write(self.self.vert_indices.astype(np.uint32))'), (253, '        # Data buffer'), (254, '        vbo = self.get_vertex_buffer_object()'), (255, '        ibo = self.get_index_buffer_object()'), (260, '            content=[(vbo, self.vert_format, *self.vert_attributes)],'), (261, '            index_buffer=ibo,'), (264, '        return self.vao'), (267, '        for obj in (self.vbo, self.ibo, self.vao):'), (271, '        self.ibo = None'), (275, 'class FillShaderWrapper(ShaderWrapper):'), (279, '        *args,'), (280, '        **kwargs'), (282, '        super().__init__(ctx, *args, **kwargs)'), (285, '    def render(self):'), (286, '        winding = (len(self.vert_indices) == 0)'), (287, ""        self.program['winding'].value = winding""), (289, '            super().render()'), (305, '        super().render()')]",No
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","[(12, 'in int v_vert_index[3];'), (60, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (61, '    // every other one needs to be rendered'), (62, '    if (v_vert_index[0] % 2 != 0) return;'), (63, ''), (68, '    // Check zero fill'), (69, '    if (vec3(v_color[0].a, v_color[1].a, v_color[2].a) == vec3(0.0, 0.0, 0.0)) return;'), (70, ''), (71, '')]","[(11, 'in float v_vert_index[3];')]",No
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","[(12, 'out int v_vert_index;')]","[(12, 'out float v_vert_index;')]",No
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier_stroke/geom.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","[(17, 'in int v_vert_index[3];'), (191, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (192, '    // every other one needs to be rendered'), (193, '    if (v_vert_index[0] % 2 != 0) return;'), (194, ''), (199, '    // Check null stroke'), (200, '    if (vec3(v_stroke_width[0], v_stroke_width[1], v_stroke_width[2]) == vec3(0.0, 0.0, 0.0)) return;'), (201, '    if (vec3(v_color[0].a, v_color[1].a, v_color[2].a) == vec3(0.0, 0.0, 0.0)) return;'), (202, ''), (203, '')]",[],No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,24b160f9f9c3fde3a6c0f735f75df259173e32c3,f9b9cf69fdea86f1d591613131ef7d0d18728300,"Update VMobject shader wrapper

Use a combined VBO
Render with TRIANGLE_STRIP, and ignore every other","[(17, 'out int v_vert_index;'), (26, '    v_vert_index = gl_VertexID;')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,24b160f9f9c3fde3a6c0f735f75df259173e32c3,Add border width and backstroke,"[(1350, '        stroke_behind = False'), (1354, '            if submob.stroke_behind:'), (1355, '                stroke_behind = True'), (1365, '        self.shader_wrapper.stroke_behind = stroke_behind')]",[],No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,24b160f9f9c3fde3a6c0f735f75df259173e32c3,Add border width and backstroke,"[(264, '        stroke_behind: bool = False,'), (275, '        self.stroke_behind = stroke_behind'), (317, ""        self.fill_border_vert_format = '3f 20x 4f 4f 24x 1f'""), (318, ""        self.fill_border_vert_attributes = ['point', 'joint_product', 'stroke_rgba', 'stroke_width']""), (319, ''), (324, '        self.fill_border_vao = None'), (325, ''), (326, '    def generate_vao(self):'), (327, '        self.stroke_vao = self.ctx.vertex_array('), (328, '            program=self.stroke_program,'), (329, '            content=[(self.vbo, self.stroke_vert_format, *self.stroke_vert_attributes)],'), (330, '            mode=self.render_primitive,'), (331, '        )'), (332, '        self.fill_vao = self.ctx.vertex_array('), (333, '            program=self.fill_program,'), (334, '            content=[(self.vbo, self.fill_vert_format, *self.fill_vert_attributes)],'), (335, '            mode=self.render_primitive,'), (336, '        )'), (337, '        self.fill_border_vao = self.ctx.vertex_array('), (338, '            program=self.stroke_program,'), (339, '            content=[(self.vbo, self.fill_border_vert_format, *self.fill_border_vert_attributes)],'), (340, '            mode=self.render_primitive,'), (341, '        )'), (342, ''), (343, '    def set_backstroke(self, value: bool = True):'), (344, '        self.stroke_behind = value'), (391, '        self.fill_border_vao.render()'), (392, ''), (396, '        if self.stroke_behind:'), (397, '            self.render_stroke()'), (398, '            self.render_fill()'), (399, '        else:'), (400, '            self.render_fill()'), (401, '            self.render_stroke()')]","[(368, '        self.render_fill()'), (369, '        self.render_stroke()'), (370, ''), (371, '    def generate_vao(self):'), (372, '        self.stroke_vao = self.ctx.vertex_array('), (373, '            program=self.stroke_program,'), (374, '            content=[(self.vbo, self.stroke_vert_format, *self.stroke_vert_attributes)],'), (375, '            mode=self.render_primitive,'), (376, '        )'), (377, '        self.fill_vao = self.ctx.vertex_array('), (378, '            program=self.fill_program,'), (379, '            content=[(self.vbo, self.fill_vert_format, *self.fill_vert_attributes)],'), (380, '            mode=self.render_primitive,'), (381, '        )')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,"Reorganize, and ensure get_shader_wrapper_list works for general Groups","[(1995, '        self.shader_indices = None'), (2022, '        family = self.family_members_with_points()'), (2023, '        for submob in family:'), (2024, '            submob.get_shader_wrapper(ctx)'), (2025, '        batches = batch_by_property(family, lambda submob: submob.shader_wrapper.get_id())'), (2028, '        for submobs, sid in batches:'), (2029, '            shader_wrapper = submobs[0].shader_wrapper'), (2030, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2031, '            indices_list = [sm.get_shader_vert_indices() for sm in submobs]'), (2032, '            if indices_list[0] is None:'), (2033, '                indices_list = None'), (2034, '            shader_wrapper.read_in(data_list, indices_list)'), (2035, '            result.append(shader_wrapper)')]","[(1995, '        self.shader_indices = np.zeros(0)'), (2015, '        self.shader_wrapper.vert_data = self.get_shader_data()'), (2016, '        self.shader_wrapper.vert_indices = self.get_shader_vert_indices()'), (2024, '        shader_wrappers = it.chain('), (2025, '            [self.get_shader_wrapper(ctx)],'), (2026, '            *[sm.get_shader_wrapper_list(ctx) for sm in self.submobjects]'), (2027, '        )'), (2028, '        batches = batch_by_property(shader_wrappers, lambda sw: sw.get_id())'), (2031, '        for wrapper_group, sid in batches:'), (2032, '            shader_wrapper = wrapper_group[0]'), (2033, '            if not shader_wrapper.is_valid():'), (2034, '                continue'), (2035, '            shader_wrapper.combine_with(*wrapper_group[1:])'), (2036, '            if len(shader_wrapper.vert_data) > 0:'), (2037, '                result.append(shader_wrapper)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,"Reorganize, and ensure get_shader_wrapper_list works for general Groups","[(1339, '        return None'), (1340, ''), (1341, '    def get_shader_data(self):'), (1342, '        # This should only come up when VMobjects appear together in a group'), (1343, '        return np.hstack([self.data, self.data[-1:]])')]","[(1339, '        return self.get_outer_vert_indices()'), (1358, '            # [sm.data for sm in family],'), (1360, '            # [sm.get_shader_vert_indices() for sm in family]')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,f2bca0045f1cb0aa2ccc5b923b0ee7025b723ec5,"Reorganize, and ensure get_shader_wrapper_list works for general Groups","[(79, '            self.programs = []'), (93, '        self.vaos = []'), (119, '            # self.vert_data is not None,'), (170, '            self.read_in([self.vert_data, *(sw.vert_data for sw in shader_wrappers)])'), (193, '        total_len = sum(map(len, data_list))'), (207, '        if self.vbo is not None and self.vbo.size != total_size:'), (208, '            self.release()  # This sets vbo to be None'), (211, '            self.generate_vaos()'), (215, '    def generate_vaos(self):'), (216, '        # Vertex array object'), (217, '        self.vaos = ['), (218, '            self.ctx.vertex_array('), (219, '                program=program,'), (220, '                content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (221, '                mode=self.render_primitive,'), (222, '            )'), (223, '            for program in self.programs'), (224, '        ]'), (225, ''), (232, '        for vao in self.vaos:'), (233, '            vao.render()'), (244, '        for obj in (self.vbo, *self.vaos):'), (247, '        self.init_vertex_objects()'), (322, '        self.vaos = []'), (324, '    def generate_vaos(self):'), (340, '        self.vaos = [self.stroke_vao, self.fill_vao, self.fill_border_vao]'), (347, ""        return self.vert_data is not None  # Isn't this always true?""), (361, '        # TODO, need a new test here...or to just kill non-winding fill?')]","[(92, '        self.vao = None'), (118, '            self.vert_data is not None,'), (169, '            self.read_in([self.vert_data, (sw.vert_data for sw in shader_wrappers)])'), (191, '            total_len = sum(map(len, indices_list))'), (192, '        else:'), (193, '            total_len = sum(map(len, data_list))'), (210, '        elif self.vbo.size != total_size:'), (211, '            self.vbo.release()'), (212, '            self.vbo = self.ctx.buffer(self.vert_data)'), (222, '        if self.vao is None:'), (223, '            self.generate_vao()'), (224, '        self.vao.render()'), (234, '    def generate_vao(self):'), (235, '        if self.vbo is None:'), (236, '            self.vbo = self.ctx.buffer(self.vert_data)'), (237, ''), (238, '        # Vertex array object'), (239, '        self.vao = self.ctx.vertex_array('), (240, '            program=self.program,'), (241, '            content=[(self.vbo, self.vert_format, *self.vert_attributes)],'), (242, '            mode=self.render_primitive,'), (243, '        )'), (244, ''), (246, '        for obj in (self.vbo, self.vao):'), (249, '        self.vbo = None'), (250, '        self.vao = None'), (326, '    def generate_vao(self):'), (348, '        return self.vert_data is not None'), (362, '        # TODO, need a new test here'), (394, '        if self.stroke_vao is None or self.fill_vao is None:'), (395, '            self.generate_vao()'), (402, ''), (403, '    def release(self):'), (404, '        attrs = [""vbo"", ""stroke_vao"", ""fill_vao""]'), (405, '        for attr in attrs:'), (406, '            obj = getattr(self, attr)'), (407, '            if obj is not None:'), (408, '                obj.release()'), (409, '            setattr(self, attr, None)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a12fa0c03d25cd286937fb3e9766aeb084720f55,4174f314b4dd21ff8a21abbd94b22ee3ad83bf5f,Remove attributes from VMobject which are now handled in VShaderWrapper,[],"[(66, '    fill_shader_folder: str = ""quadratic_bezier_fill""'), (67, '    stroke_shader_folder: str = ""quadratic_bezier_stroke""'), (78, ""    fill_data_names = ['point', 'fill_rgba', 'base_point', 'unit_normal']  # Delete these""), (79, ""    stroke_data_names = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']  # Delete these""), (80, ''), (81, '    fill_render_primitive: int = moderngl.TRIANGLES'), (82, '    stroke_render_primitive: int = moderngl.TRIANGLES'), (83, '')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,a12fa0c03d25cd286937fb3e9766aeb084720f55,Don't apply depth test during winding fill,"[(381, '        # Be sure not to apply depth test while rendering fill'), (382, '        # but set it back to where it was after'), (383, '        apply_depth_test = bool(gl.glGetBooleanv(gl.GL_DEPTH_TEST))'), (384, '        self.ctx.disable(moderngl.DEPTH_TEST)'), (386, '        if apply_depth_test:'), (387, '            self.ctx.enable(moderngl.DEPTH_TEST)')]",[],No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"[(280, '            for vtype in [""stroke"", ""fill"", ""depth""]'), (297, '        self.fill_depth_program = get_shader_program('), (298, '            self.ctx,'), (299, '            vertex_shader=self.program_code[""depth_vert""],'), (300, '            geometry_shader=self.program_code[""depth_geom""],'), (301, '            fragment_shader=self.program_code[""depth_frag""],'), (302, '        )'), (303, '        self.programs = [self.stroke_program, self.fill_program, self.fill_depth_program]'), (323, ""        self.fill_depth_vert_format = '3f 52x 3f 16x'""), (324, ""        self.fill_depth_vert_attributes = ['point', 'base_point']""), (325, ''), (349, '        self.fill_depth_vao = self.ctx.vertex_array('), (350, '            program=self.fill_depth_program,'), (351, '            content=[(self.vbo, self.fill_depth_vert_format, *self.fill_depth_vert_attributes)],'), (352, '            mode=self.render_primitive,'), (353, '        )'), (354, '        self.vaos = [self.stroke_vao, self.fill_vao, self.fill_border_vao, self.fill_depth_vao]'), (383, '        texture_fbo, depth_texture_fbo, texture_vao = self.fill_canvas'), (401, '            depth_texture_fbo.clear(1.0)'), (402, '            depth_texture_fbo.use()'), (403, '            gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE)'), (404, '            gl.glBlendEquation(gl.GL_MIN)'), (405, '            self.fill_depth_vao.render()'), (408, '        # Border width is used for antialiasing. Take the maximum between these'), (409, '        # two alphas, before compositing back to the rest of the scene'), (410, '        gl.glBlendFuncSeparate('), (411, '            gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA,'), (412, '            gl.GL_ONE, gl.GL_ZERO'), (413, '        )'), (414, '        gl.glBlendEquationSeparate(gl.GL_FUNC_ADD, gl.GL_MAX)'), (415, '        self.fill_border_vao.render()'), (417, '        original_fbo.use()'), (419, '        gl.glBlendEquation(gl.GL_FUNC_ADD)'), (420, '        texture_vao.render()')]","[(280, '            for vtype in [""stroke"", ""fill""]'), (297, '        self.programs = [self.stroke_program, self.fill_program]'), (340, '        self.vaos = [self.stroke_vao, self.fill_vao, self.fill_border_vao]'), (369, '        texture_fbo, texture_vao = self.fill_canvas'), (389, '        original_fbo.use()'), (390, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (391, ''), (392, '        texture_vao.render()'), (395, ''), (396, '        self.fill_border_vao.render()')]",No
N/A,manimlib/shaders/quadratic_bezier_depth/frag.glsl,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"[(1, '#version 330'), (2, ''), (3, 'out float frag_depth;'), (4, ''), (5, 'void main() {'), (6, '    frag_depth = gl_FragCoord.z;'), (7, '}')]",[],No
N/A,manimlib/shaders/quadratic_bezier_depth/geom.glsl,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"[(1, '#version 330'), (2, ''), (3, 'layout (triangles) in;'), (4, 'layout (triangle_strip, max_vertices = 6) out;'), (5, ''), (6, 'in vec3 verts[3];'), (7, 'in vec3 v_base_point[3];'), (8, 'in int v_vert_index[3];'), (9, ''), (10, 'out float depth;'), (11, ''), (12, '#INSERT emit_gl_Position.glsl'), (13, ''), (14, ''), (15, 'void emit_triangle(vec3 points[3]){'), (16, '    for(int i = 0; i < 3; i++){'), (17, '        emit_gl_Position(points[i]);'), (18, '        // float z = gl_Position.z / gl_Position.w;'), (19, '        // depth = 0.5 * z + 0.5;'), (20, '        EmitVertex();'), (21, '    }'), (22, '    EndPrimitive();'), (23, '}'), (24, ''), (25, ''), (26, 'void main(){'), (27, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (28, '    // every other one needs to be rendered'), (29, '    if (v_vert_index[0] % 2 != 0) return;'), (30, ''), (31, '    // Curves are marked as ended when the handle after'), (32, '    // the first anchor is set equal to that anchor'), (33, '    if (verts[0] == verts[1]) return;'), (34, ''), (35, '    // Emit main triangle'), (36, '    emit_triangle(vec3[3](v_base_point[0], verts[0], verts[2]));'), (37, '    emit_triangle(vec3[3](verts[0], verts[1], verts[2]));'), (38, '}'), (39, '')]",[],No
N/A,manimlib/shaders/quadratic_bezier_depth/vert.glsl,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"[(1, '#version 330'), (2, ''), (3, 'in vec3 point;'), (4, 'in vec3 base_point;'), (5, ''), (6, 'out vec3 verts;'), (7, 'out vec3 v_base_point;'), (8, 'out int v_vert_index;'), (9, ''), (10, 'void main(){'), (11, '    verts = point;'), (12, '    v_base_point = base_point;'), (13, '    v_vert_index = gl_VertexID;'), (14, '}')]",[],No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,4cb16dfc0b76d2287f73f4d0287cc9635d61c6e8,Add depth shader to handle winding fill depth test.,"[(151, ""    size = (cam_config['pixel_width'], cam_config['pixel_height'])""), (156, ""    depth_texture = ctx.texture(size=size, components=1, dtype='f4')""), (157, '    texture_fbo = ctx.framebuffer(texture)'), (158, '    depth_texture_fbo = ctx.framebuffer(depth_texture)'), (203, '    return (texture_fbo, depth_texture_fbo, fill_texture_vao)')]","[(151, '    # Double the size so as to effectively to 4x multi-sample antialiasing'), (152, ""    size = (2 * cam_config['pixel_width'], 2 * cam_config['pixel_height'])""), (157, '    depth_texture = ctx.depth_texture(size=size)'), (158, '    texture_fbo = ctx.framebuffer(texture, depth_texture)'), (203, '    return (texture_fbo, fill_texture_vao)')]",No
manimlib/animation/fading.py,manimlib/animation/fading.py,28eba26beef617b6f307624c008d848974023e81,3b5d63d2faf56155d901924fc1b4cbd6e013cf5f,Remove stray new line,[],"[(23, '')]",No
manimlib/shaders/quadratic_bezier_depth/geom.glsl,manimlib/shaders/quadratic_bezier_depth/geom.glsl,39bcead679a0cdd5dc52c01fc83ce61a1e794734,28eba26beef617b6f307624c008d848974023e81,Clean up,"[(33, '    // Emit two triangles')]","[(18, '        // float z = gl_Position.z / gl_Position.w;'), (19, '        // depth = 0.5 * z + 0.5;'), (35, '    // Emit main triangle')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,39bcead679a0cdd5dc52c01fc83ce61a1e794734,"Set default border width to 0.5, and keep it for opacities < 1","[(98, '        fill_border_width: float = 0.5,')]","[(98, '        fill_border_width: float = 0.0,'), (187, '        if opacity is not None and 0 < opacity < 1 and border_width is None:'), (188, '            border_width = 0')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,195264f079beceedf11559f1efc39130f81550b6,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,"Stop pretending to support non-winding fill in the fill shader.

Possibly, if we want to reintroduce it later on, it should have its own dedicated shader, and maybe a distinct Mobject type too",[],"[(375, '        # TODO, need a new test here...or to just kill non-winding fill?'), (376, '        winding = True'), (377, ""        self.fill_program['winding'].value = winding""), (378, '        if not winding:'), (379, '            self.fill_vao.render()'), (380, '            return'), (381, '')]",No
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,195264f079beceedf11559f1efc39130f81550b6,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,"Stop pretending to support non-winding fill in the fill shader.

Possibly, if we want to reintroduce it later on, it should have its own dedicated shader, and maybe a distinct Mobject type too","[(32, '    float a = 0.95 * frag_color.a;'), (33, '    if(orientation < 0) a = -a / (1 - a);'), (34, '    frag_color.a = a;'), (41, '    // if(!winding && orientation < 0) Fxy *= -1;')]","[(32, '    if(winding){'), (33, '        float a = 0.95 * frag_color.a;'), (34, '        if(orientation < 0) a = -a / (1 - a);'), (35, '        frag_color.a = a;'), (36, '    }'), (43, '    if(!winding && orientation < 0) Fxy *= -1;')]",No
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,195264f079beceedf11559f1efc39130f81550b6,09d147c8ef0c9611b0ce0a10a403ae5b40c75ac9,"Stop pretending to support non-winding fill in the fill shader.

Possibly, if we want to reintroduce it later on, it should have its own dedicated shader, and maybe a distinct Mobject type too","[(61, '    // Emit main triangle'), (62, '    fill_all = 1.0;'), (63, '    emit_triangle('), (64, '        vec3[3](v_base_point[0], verts[0], verts[2]),'), (65, '        vec4[3](v_color[1], v_color[0], v_color[2])'), (66, '    );'), (67, '    // Edge triangle'), (68, '    fill_all = 0.0;'), (69, '    emit_triangle('), (70, '        vec3[3](verts[0], verts[1], verts[2]),'), (71, '        vec4[3](v_color[0], v_color[1], v_color[2])'), (72, '    );')]","[(6, 'uniform bool winding;'), (7, ''), (51, 'void emit_simple_triangle(){'), (52, '    emit_triangle('), (53, '        vec3[3](verts[0], verts[1], verts[2]),'), (54, '        vec4[3](v_color[0], v_color[1], v_color[2])'), (55, '    );'), (56, '}'), (57, ''), (58, ''), (71, ''), (72, '    if(winding){'), (73, '        // Emit main triangle'), (74, '        fill_all = 1.0;'), (75, '        emit_triangle('), (76, '            vec3[3](v_base_point[0], verts[0], verts[2]),'), (77, '            vec4[3](v_color[1], v_color[0], v_color[2])'), (78, '        );'), (79, '        // Edge triangle'), (80, '        fill_all = 0.0;'), (81, '        emit_simple_triangle();'), (82, '    }else{'), (83, '        // In this case, one should fill all if the vertices are'), (84, '        // not in sequential order'), (85, '        fill_all = float('), (86, '            (v_vert_index[1] - v_vert_index[0]) != 1.0 ||'), (87, '            (v_vert_index[2] - v_vert_index[1]) != 1.0'), (88, '        );'), (89, '        emit_simple_triangle();'), (90, '    }')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,b7337f07814f54e3bd7e9d20a1d979619d948571,195264f079beceedf11559f1efc39130f81550b6,Remove some ShaderWrapper methods which are no longer needed,[],"[(98, '    def __eq__(self, shader_wrapper: ShaderWrapper):'), (99, '        return all(('), (100, '            # np.all(self.vert_data == shader_wrapper.vert_data),'), (101, '            self.shader_folder == shader_wrapper.shader_folder,'), (102, '            all('), (103, '                self.mobject_uniforms[key] == shader_wrapper.mobject_uniforms[key]'), (104, '                for key in self.mobject_uniforms'), (105, '            ),'), (106, '            self.depth_test == shader_wrapper.depth_test,'), (107, '            self.render_primitive == shader_wrapper.render_primitive,'), (108, '        ))'), (109, ''), (110, '    def copy(self):'), (111, '        result = copy.copy(self)'), (112, '        result.ctx = self.ctx'), (113, '        result.vert_data = self.vert_data.copy()'), (114, '        result.init_vertex_objects()'), (115, '        return result'), (116, ''), (117, '    def is_valid(self) -> bool:'), (118, '        return all(['), (119, '            # self.vert_data is not None,'), (120, '            self.program_code[""vertex_shader""] is not None,'), (121, '            self.program_code[""fragment_shader""] is not None,'), (122, '        ])'), (123, ''), (168, '    def combine_with(self, *shader_wrappers: ShaderWrapper) -> ShaderWrapper:'), (169, '        if len(shader_wrappers) > 0:'), (170, '            self.read_in([self.vert_data, *(sw.vert_data for sw in shader_wrappers)])'), (171, '            vbos = ['), (172, '                vbo'), (173, '                for vbo in [self.vbo, *(sw.vbo for sw in shader_wrappers)]'), (174, '                if vbo is not None'), (175, '            ]'), (176, '            total_size = sum(vbo.size for vbo in vbos)'), (177, '            new_vbo = self.ctx.buffer(reserve=total_size)'), (178, '            offset = 0'), (179, '            for vbo in vbos:'), (180, '                new_vbo.write(vbo.read(), offset=offset)'), (181, '                offset += vbo.size'), (182, '            self.vbo = new_vbo'), (183, '        return self'), (184, ''), (359, '    # TODO, think about create_id, replace_code'), (360, '    def is_valid(self) -> bool:'), (361, ""        return self.vert_data is not None  # Isn't this always true?""), (362, '')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"[(72, ""        ('base_normal', np.float32, (3,)),  # Every other holds base point and unit normal vector""), (909, '        self.data[""base_normal""][1::2] = normal'), (1280, '            mob.data[""base_normal""][1::2] *= -1'), (1346, '                submob.data[""base_normal""][0::2] = submob.data[""point""][0]')]","[(72, ""        ('base_point', np.float32, (3,)),""), (73, ""        ('unit_normal', np.float32, (3,)),""), (910, '        self.data[""unit_normal""][:] = normal'), (1281, '            mob.data[""unit_normal""] *= -1'), (1347, '                submob.data[""base_point""] = submob.data[""point""][0]')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"[(268, '        # base_normal 3'), (270, ""        self.stroke_vert_format = '3f 4f 1f 4f 32x'""), (273, ""        self.fill_vert_format = '3f 36x 4f 3f 4x'""), (274, ""        self.fill_vert_attributes = ['point', 'fill_rgba', 'base_normal']""), (276, ""        self.fill_border_vert_format = '3f 20x 4f 4f 12x 1f'""), (279, ""        self.fill_depth_vert_format = '3f 40x 3f 16x'""), (280, ""        self.fill_depth_vert_attributes = ['point', 'base_normal']"")]","[(268, '        # base_point 3'), (269, '        # unit_normal 3'), (271, ""        self.stroke_vert_format = '3f 4f 1f 4f 44x'""), (274, ""        self.fill_vert_format = '3f 36x 4f 3f 3f 4x'""), (275, ""        self.fill_vert_attributes = ['point', 'fill_rgba', 'base_point', 'unit_normal']""), (277, ""        self.fill_border_vert_format = '3f 20x 4f 4f 24x 1f'""), (280, ""        self.fill_depth_vert_format = '3f 52x 3f 16x'""), (281, ""        self.fill_depth_vert_attributes = ['point', 'base_point']"")]",No
manimlib/shaders/quadratic_bezier_depth/vert.glsl,manimlib/shaders/quadratic_bezier_depth/vert.glsl,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"[(4, 'in vec3 base_normal;'), (12, '    v_base_point = base_normal;')]","[(4, 'in vec3 base_point;'), (12, '    v_base_point = base_point;')]",No
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"[(8, 'in vec3 v_base_normal[3];'), (30, '    vec3 unit_normal = v_base_normal[1];'), (63, '        vec3[3](v_base_normal[0], verts[0], verts[2]),')]","[(8, 'in vec3 v_base_point[3];'), (9, 'in vec3 v_unit_normal[3];'), (31, '    vec3 unit_normal = v_unit_normal[1];'), (64, '        vec3[3](v_base_point[0], verts[0], verts[2]),')]",No
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier_fill/vert.glsl,c064b11e2a4700b51177de6ed4b2a64e1050f344,b7337f07814f54e3bd7e9d20a1d979619d948571,Interleave base_point and unit_normal in the same array,"[(5, 'in vec3 base_normal;'), (9, 'out vec3 v_base_normal;'), (15, '    v_base_normal = base_normal;')]","[(5, 'in vec3 base_point;'), (6, 'in vec3 unit_normal;'), (10, 'out vec3 v_base_point;'), (11, 'out vec3 v_unit_normal;'), (17, '    v_base_point = base_point;'), (18, '    v_unit_normal = unit_normal;')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,058914fdd2edf2c08d29a24e8cbd98705887b616,c064b11e2a4700b51177de6ed4b2a64e1050f344,Mildly more efficient CameraFrame.get_view_matrix(),"[(41, '        self.id4x4 = np.identity(4)'), (104, '            shift = self.id4x4.copy()'), (105, '            rotation = self.id4x4.copy()'), (107, '            scale = self.get_scale()'), (110, '            np.dot(rotation, shift, out=self.view_matrix)'), (112, '                self.view_matrix[:3, :4] /= scale')]","[(103, '            shift = np.identity(4)'), (104, '            rotation = np.identity(4)'), (105, '            scale_mat = np.identity(4)'), (109, '            scale = self.get_scale()'), (111, '                scale_mat[:3, :3] /= self.get_scale()'), (112, ''), (113, '            self.view_matrix = np.dot(scale_mat, np.dot(rotation, shift))')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,b288d5301ea40fcca958f7e6300d9f95823505b2,058914fdd2edf2c08d29a24e8cbd98705887b616,Get rid of cached _has_stroke and _has_fill parameters,[],"[(142, '        submob.note_changed_stroke()'), (143, '        submob.note_changed_fill()')]",No
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,b288d5301ea40fcca958f7e6300d9f95823505b2,058914fdd2edf2c08d29a24e8cbd98705887b616,Get rid of cached _has_stroke and _has_fill parameters,[],"[(72, '        self.note_changed_stroke()')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b288d5301ea40fcca958f7e6300d9f95823505b2,058914fdd2edf2c08d29a24e8cbd98705887b616,Get rid of cached _has_stroke and _has_fill parameters,"[(72, ""        ('base_normal', np.float32, (3,)),  # Base points and unit normal vectors are interleaved in this array""), (1017, '        if not self._use_winding_fill and self.has_fill():'), (1313, '            # Maybe do this on set points instead? Or on noting changed data?'), (1314, '            submob.data[""base_normal""][0::2] = submob.data[""point""][0]')]","[(72, ""        ('base_normal', np.float32, (3,)),  # Every other holds base point and unit normal vector""), (115, '        self._has_fill = False'), (116, '        self._has_stroke = False'), (140, '    def note_changed_fill(self) -> Self:'), (141, '        for submob in self.get_family():'), (142, '            submob._has_fill = submob.has_fill()'), (143, '        return self'), (144, ''), (145, '    def note_changed_stroke(self) -> Self:'), (146, '        for submob in self.get_family():'), (147, '            submob._has_stroke = submob.has_stroke()'), (148, '        return self'), (149, ''), (167, '    def set_rgba_array('), (168, '        self,'), (169, '        rgba_array: Vect4Array,'), (170, '        name: str = ""stroke_rgba"",'), (171, '        recurse: bool = False'), (172, '    ) -> Self:'), (173, '        super().set_rgba_array(rgba_array, name, recurse)'), (174, '        self.note_changed_fill()'), (175, '        self.note_changed_stroke()'), (176, '        return self'), (177, ''), (191, '        self.note_changed_fill()'), (222, '        self.note_changed_stroke()'), (281, '        self.note_changed_fill()'), (282, '        self.note_changed_stroke()'), (1044, '        self._has_stroke = mobject1._has_stroke or mobject2._has_stroke'), (1045, '        self._has_fill = mobject1._has_fill or mobject2._has_fill'), (1046, ''), (1047, '        if self._has_fill and not self._use_winding_fill:'), (1287, '        self.note_changed_fill()'), (1288, '        self.note_changed_stroke()'), (1345, '            if submob._has_fill:'), (1346, '                submob.data[""base_normal""][0::2] = submob.data[""point""][0]')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,b288d5301ea40fcca958f7e6300d9f95823505b2,Reorganize VShaderWrapper.render_fill,"[(330, '        # First, draw the border for antialiasing'), (331, '        self.fill_border_vao.render()'), (332, ''), (333, '        # Render to a separate texture, due to strange alpha compositing'), (334, '        # for the blended winding calculation'), (337, ''), (338, '        # Be sure not to apply depth test while rendering fill'), (339, '        # but set it back to where it was after'), (340, '        apply_depth_test = bool(gl.glGetBooleanv(gl.GL_DEPTH_TEST))'), (341, ''), (342, '        self.ctx.disable(moderngl.DEPTH_TEST)'), (362, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (366, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)'), (367, '        gl.glBlendEquation(gl.GL_FUNC_ADD)'), (368, '')]","[(340, '        # Be sure not to apply depth test while rendering fill'), (341, '        # but set it back to where it was after'), (342, '        apply_depth_test = bool(gl.glGetBooleanv(gl.GL_DEPTH_TEST))'), (343, '        self.ctx.disable(moderngl.DEPTH_TEST)'), (353, '        # Border width is used for antialiasing. Take the maximum between these'), (354, '        # two alphas, before compositing back to the rest of the scene'), (355, '        gl.glBlendFuncSeparate('), (356, '            gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA,'), (357, '            gl.GL_ONE, gl.GL_ZERO'), (358, '        )'), (359, '        gl.glBlendEquationSeparate(gl.GL_FUNC_ADD, gl.GL_MAX)'), (360, '        self.fill_border_vao.render()'), (363, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,b288d5301ea40fcca958f7e6300d9f95823505b2,Reorganize VShaderWrapper.render_fill,"[(160, ""    simple_vert = '''""), (161, '        #version 330'), (163, '        in vec2 texcoord;'), (164, '        out vec2 uv;'), (166, '        void main() {'), (167, '            gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (168, '            uv = texcoord;'), (169, '        }'), (170, ""    '''""), (171, ""    alpha_adjust_frag = '''""), (172, '        #version 330'), (174, '        uniform sampler2D Texture;'), (175, '        uniform sampler2D DepthTexture;'), (177, '        in vec2 uv;'), (178, '        out vec4 color;'), (180, '        void main() {'), (181, '            color = texture(Texture, uv);'), (182, '            if(color.a == 0) discard;'), (184, '            // Counteract scaling in fill frag'), (185, '            color.a *= 1.06;'), (187, '            gl_FragDepth = texture(DepthTexture, uv)[0];'), (188, '        }'), (189, ""    '''""), (190, '    simple_program = ctx.program('), (191, '        vertex_shader=simple_vert,'), (192, '        fragment_shader=alpha_adjust_frag,'), (199, ""    simple_vbo = ctx.buffer(verts.astype('f4').tobytes())""), (201, ""        simple_program, simple_vbo, 'texcoord',"")]","[(160, '    simple_program = ctx.program('), (161, ""        vertex_shader='''""), (162, '            #version 330'), (164, '            in vec2 texcoord;'), (165, '            out vec2 uv;'), (167, '            void main() {'), (168, '                gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (169, '                uv = texcoord;'), (170, '            }'), (171, ""        ''',""), (172, ""        fragment_shader='''""), (173, '            #version 330'), (175, '            uniform sampler2D Texture;'), (176, '            uniform sampler2D DepthTexture;'), (178, '            in vec2 uv;'), (179, '            out vec4 color;'), (181, '            void main() {'), (182, '                color = texture(Texture, uv);'), (183, '                if(color.a == 0) discard;'), (185, '                // Counteract scaling in fill frag'), (186, '                color *= 1.06;'), (188, '                gl_FragDepth = texture(DepthTexture, uv)[0];'), (189, '            }'), (190, ""        ''',""), (198, '        simple_program,'), (199, ""        ctx.buffer(verts.astype('f4').tobytes()),""), (200, ""        'texcoord',"")]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,6223623b40499ba509f94f074a91917d6af3901c,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,Ensure border width blends better within filled VMobject for opacity < 1,"[(328, '        fill_tx_fbo, fill_tx_vao, border_tx_fbo, border_tx_vao, depth_tx_fbo = self.fill_canvas'), (331, '        border_tx_fbo.clear()'), (332, '        border_tx_fbo.use()'), (337, '        fill_tx_fbo.clear()'), (338, '        fill_tx_fbo.use()'), (347, '            # With this blend function, the effect of blending alpha a with'), (348, '            # -a / (1 - a) cancels out, so we can cancel positively and negatively'), (349, '            # oriented triangles'), (350, '            gl.GL_ONE_MINUS_DST_ALPHA, gl.GL_ONE'), (353, ''), (355, '            depth_tx_fbo.clear(1.0)'), (356, '            depth_tx_fbo.use()'), (362, '        # Render fill onto the border_width fbo'), (363, '        # two alphas, before compositing back to the rest of the scene'), (364, '        border_tx_fbo.use()'), (365, '        gl.glEnable(gl.GL_BLEND)'), (366, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE)'), (367, '        gl.glBlendEquation(gl.GL_MAX)'), (368, '        fill_tx_vao.render()'), (373, '        border_tx_vao.render()')]","[(328, '        texture_fbo, depth_texture_fbo, texture_vao = self.fill_canvas'), (335, '        texture_fbo.clear()'), (336, '        texture_fbo.use()'), (344, '            # Ordinary blending for colors'), (346, '            # The effect of blending with -a / (1 - a)'), (347, '            # should be to cancel out'), (348, '            gl.GL_ONE_MINUS_DST_ALPHA, gl.GL_ONE,'), (350, ''), (353, '            depth_texture_fbo.clear(1.0)'), (354, '            depth_texture_fbo.use()'), (362, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (363, '        gl.glBlendEquation(gl.GL_FUNC_ADD)'), (364, '        texture_vao.render()'), (365, '')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,6223623b40499ba509f94f074a91917d6af3901c,7217c9fca5af84cee03cd0ca07bdf2cab44a0346,Ensure border width blends better within filled VMobject for opacity < 1,"[(155, ""    fill_texture = ctx.texture(size=size, components=4, dtype='f2')""), (156, '    # Use a separate texture to firset render the antialiased border'), (157, ""    border_texture = ctx.texture(size=size, components=4, dtype='f1')""), (158, '    # Use yet another one to keep track of depth'), (160, ''), (161, '    fill_texture_fbo = ctx.framebuffer(fill_texture)'), (162, '    border_texture_fbo = ctx.framebuffer(border_texture)'), (191, '            // Cancel out what was effectively a premultiplication'), (192, '            color.rgb /= color.a;'), (197, ""    simple_frag = '''""), (198, '        #version 330'), (199, ''), (200, '        uniform sampler2D Texture;'), (201, ''), (202, '        in vec2 uv;'), (203, '        out vec4 color;'), (204, ''), (205, '        void main() {'), (206, '            color = texture(Texture, uv);'), (207, '            if(color.a == 0) discard;'), (208, '        }'), (209, ""    '''""), (210, '    fill_program = ctx.program('), (214, '    border_program = ctx.program('), (215, '        vertex_shader=simple_vert,'), (216, '        fragment_shader=simple_frag,'), (217, '    )'), (219, ""    fill_program['Texture'].value = get_texture_id(fill_texture)""), (220, ""    fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (221, ""    border_program['Texture'].value = get_texture_id(border_texture)""), (226, ""        fill_program, simple_vbo, 'texcoord',""), (227, '        mode=moderngl.TRIANGLE_STRIP'), (228, '    )'), (229, '    border_texture_vao = ctx.simple_vertex_array('), (230, ""        border_program, simple_vbo, 'texcoord',""), (233, '    return ('), (234, '        fill_texture_fbo, fill_texture_vao,'), (235, '        border_texture_fbo, border_texture_vao,'), (236, '        depth_texture_fbo,'), (237, '    )')]","[(155, ""    texture = ctx.texture(size=size, components=4, dtype='f2')""), (157, '    texture_fbo = ctx.framebuffer(texture)'), (190, '    simple_program = ctx.program('), (195, ""    simple_program['Texture'].value = get_texture_id(texture)""), (196, ""    simple_program['DepthTexture'].value = get_texture_id(depth_texture)""), (201, ""        simple_program, simple_vbo, 'texcoord',""), (204, '    return (texture_fbo, depth_texture_fbo, fill_texture_vao)')]",No
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier_fill/frag.glsl,0b2c59ac6bd77c0ad31b5f0276acd3237b07ab1a,6223623b40499ba509f94f074a91917d6af3901c,More explicitly unpack v_base_normal,[],"[(41, '    // if(!winding && orientation < 0) Fxy *= -1;')]",No
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier_fill/geom.glsl,0b2c59ac6bd77c0ad31b5f0276acd3237b07ab1a,6223623b40499ba509f94f074a91917d6af3901c,More explicitly unpack v_base_normal,"[(29, 'void emit_triangle(vec3 points[3], vec4 v_color[3], vec3 unit_normal){'), (58, '    vec3 base_point = v_base_normal[0];'), (59, '    vec3 unit_normal = v_base_normal[1];'), (63, '        vec3[3](base_point, verts[0], verts[2]),'), (64, '        vec4[3](v_color[1], v_color[0], v_color[2]),'), (65, '        unit_normal'), (71, '        vec4[3](v_color[0], v_color[1], v_color[2]),'), (72, '        unit_normal')]","[(29, 'void emit_triangle(vec3 points[3], vec4 v_color[3]){'), (30, '    vec3 unit_normal = v_base_normal[1];'), (31, ''), (63, '        vec3[3](v_base_normal[0], verts[0], verts[2]),'), (64, '        vec4[3](v_color[1], v_color[0], v_color[2])'), (70, '        vec4[3](v_color[0], v_color[1], v_color[2])')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,08e33faab8f76084e522ddc7059b7cedcdb4392a,0b2c59ac6bd77c0ad31b5f0276acd3237b07ab1a,Ensure scene properly updates on an embed,"[(219, '        self.update_frame(force_draw=True)')]","[(219, '        self.update_frame()')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","[(1947, '        for mob in self.get_family():'), (1948, '            mob.shader_code_replacements[old] = new'), (1949, '            mob._shaders_initialized = False'), (2004, '            code_replacements=self.shader_code_replacements,'), (2008, '        for submob in self.get_family():'), (2009, '            if submob._shaders_initialized:'), (2010, '                submob.shader_wrapper.depth_test = submob.depth_test'), (2011, '                submob.shader_wrapper.refresh_id()'), (2022, '        batches = batch_by_property(family, lambda sm: sm.get_shader_wrapper(ctx).get_id())'), (2027, '            data_list = list(it.chain(*(sm.get_shader_data() for sm in submobs)))'), (2028, '            shader_wrapper.read_in(data_list, indices_list=None)'), (2032, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (2033, '        indices = self.get_shader_vert_indices()'), (2034, '        if indices is not None:'), (2035, '            return [self.data[indices]]'), (2036, '        else:'), (2037, '            return [self.data]'), (2042, '    def get_shader_vert_indices(self) -> Optional[np.ndarray]:')]","[(1947, '        self.shader_code_replacements[old] = new'), (1948, '        self._shaders_initialized = False'), (2006, '        if self._shaders_initialized:'), (2007, '            self.shader_wrapper.refresh_id()'), (2014, ''), (2015, '        self.shader_wrapper.bind_to_mobject_uniforms(self.get_uniforms())'), (2016, '        self.shader_wrapper.depth_test = self.depth_test'), (2017, '        for old, new in self.shader_code_replacements.items():'), (2018, '            self.shader_wrapper.replace_code(old, new)'), (2023, '        for submob in family:'), (2024, '            submob.get_shader_wrapper(ctx)'), (2025, '        batches = batch_by_property(family, lambda submob: submob.shader_wrapper.get_id())'), (2030, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2031, '            indices_list = [sm.get_shader_vert_indices() for sm in submobs]'), (2032, '            if indices_list[0] is None:'), (2033, '                indices_list = None'), (2034, '            shader_wrapper.read_in(data_list, indices_list)'), (2038, '    def get_shader_data(self):'), (2039, '        return self.data'), (2044, '    def get_shader_vert_indices(self):')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","[(194, '                mob.refresh_shader_wrapper_id()'), (1289, '        self.shader_indices = None'), (1294, '            code_replacements=self.shader_code_replacements,'), (1295, '            stroke_behind=self.stroke_behind,'), (1296, '            depth_test=self.depth_test'), (1299, '    def refresh_shader_wrapper_id(self):'), (1300, '        for submob in self.get_family():'), (1301, '            if submob._shaders_initialized:'), (1302, '                submob.shader_wrapper.stroke_behind = submob.stroke_behind'), (1303, '        super().refresh_shader_wrapper_id()'), (1304, '        return self'), (1306, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (1307, '        # Do we want this elsewhere? Say whenever points are refreshed or something?'), (1308, '        self.data[""base_normal""][0::2] = self.data[""point""][0]'), (1309, '        return [self.data, self.data[-1:]]')]","[(1288, '        self.shader_indices = np.zeros(0)'), (1295, '    def get_shader_vert_indices(self):'), (1296, '        return None'), (1297, ''), (1298, '    def get_shader_data(self):'), (1299, '        # This should only come up when VMobjects appear together in a group'), (1300, '        return np.hstack([self.data, self.data[-1:]])'), (1301, ''), (1302, '    def get_shader_wrapper_list(self, ctx: Context) -> list[ShaderWrapper]:'), (1303, '        if not self._shaders_initialized:'), (1304, '            self.init_shader_data(ctx)'), (1305, '            self._shaders_initialized = True'), (1306, ''), (1307, '        family = self.family_members_with_points()'), (1308, '        if not family:'), (1309, '            return []'), (1310, ''), (1311, '        stroke_behind = False'), (1312, '        for submob in family:'), (1313, '            # Maybe do this on set points instead? Or on noting changed data?'), (1314, '            submob.data[""base_normal""][0::2] = submob.data[""point""][0]'), (1315, '            if submob.stroke_behind:'), (1316, '                stroke_behind = True'), (1318, '        self.shader_wrapper.read_in('), (1319, '            list(it.chain(*([sm.data, sm.data[-1:]] for sm in family)))'), (1320, '        )'), (1321, '        rep = family[0]  # Representative family member'), (1322, '        self.shader_wrapper.bind_to_mobject_uniforms(rep.get_uniforms())'), (1323, '        self.shader_wrapper.depth_test = rep.depth_test'), (1324, '        self.shader_wrapper.stroke_behind = stroke_behind'), (1325, '        return [self.shader_wrapper]')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","[(391, '            lambda m: m.get_shader_wrapper(self.camera.ctx).get_id()')]","[(391, '            lambda m: str(type(m)) + str(m.get_uniforms())')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f12b143d169610b3240c92c05264c6be6fbac814,08e33faab8f76084e522ddc7059b7cedcdb4392a,"Unify get_shader_wrapper_list, and and better subdivide render groups by ShaderWrapper ids","[(44, '        code_replacements: dict[str, str] = dict(),'), (52, '        self.texture_names_to_ids = dict()'), (58, '        for old, new in code_replacements.items():'), (59, '            self.replace_code(old, new)'), (104, '    def refresh_id(self) -> None:'), (105, '        self.id = hash("""".join(map(str, ['), (106, '            """".join(map(str, self.program_code.values())),'), (111, '        ])))'), (215, '        code_replacements: dict[str, str] = dict(),'), (218, '        self.stroke_behind = stroke_behind'), (219, '        self.fill_canvas = get_fill_canvas(ctx)'), (228, '            code_replacements=code_replacements,'), (314, '    def refresh_id(self):'), (315, '        super().refresh_id()'), (316, '        self.id = hash(str(self.id) + str(self.stroke_behind))'), (317, '')]","[(57, '        self.texture_names_to_ids = dict()'), (101, '    def create_id(self) -> str:'), (102, '        # A unique id for a shader'), (103, '        program_id = hash("""".join(map(str, self.program_code.values())))'), (104, '        return ""|"".join(map(str, ['), (105, '            program_id,'), (110, '        ]))'), (111, ''), (112, '    def refresh_id(self) -> None:'), (113, '        self.id = self.create_id()'), (216, '        # render_primitive: int = moderngl.TRIANGLES,'), (229, '        self.stroke_behind = stroke_behind'), (230, '        self.fill_canvas = get_fill_canvas(self.ctx)')]",No
manimlib/utils/color.py,manimlib/utils/color.py,5ff80ffc6c25768c09688dc7e6a5a4a036e07a06,f12b143d169610b3240c92c05264c6be6fbac814,Fix matplotlib color map import,"[(153, '    from matplotlib.cm import cmaps_listed'), (158, '        rgbs = cmaps_listed[map_name].colors  # Make more general?')]","[(153, '    from matplotlib.cm import get_cmap'), (158, '        rgbs = get_cmap(map_name).colors  # Make more general?')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,e796a0c6d61ae625dcf34f7906b7e4ec6be89e0b,5ff80ffc6c25768c09688dc7e6a5a4a036e07a06,Remove stray TODO,[],"[(318, '    # TODO, motidify read in to handle triangulation case for non-winding fill?'), (319, '')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a8ef9629eb34813553bc5ab9ab239b047ce48c68,e796a0c6d61ae625dcf34f7906b7e4ec6be89e0b,More direct lerp in Mobject.interpolate,"[(1818, '            if path_func in self.pointlike_data_keys:'), (1819, '                self.data[key] = path_func(md1, md2, alpha)'), (1820, '            else:'), (1821, '                self.data[key] = (1 - alpha) * md1 + alpha * md2'), (1823, '        for key in self.uniforms:'), (1824, '            if key in self.locked_uniform_keys:'), (1825, '                continue'), (1828, '            self.uniforms[key] = (1 - alpha) * mobject1.uniforms[key] + alpha * mobject2.uniforms[key]'), (1829, '        self.bounding_box[:] = path_func(mobject1.bounding_box, mobject2.bounding_box, alpha)')]","[(1813, '            func = path_func if key in self.pointlike_data_keys else interpolate'), (1819, '            self.data[key] = func(md1, md2, alpha)'), (1821, '        keys = [k for k in self.uniforms if k not in self.locked_uniform_keys]'), (1822, '        for key in keys:'), (1825, '            self.uniforms[key] = interpolate('), (1826, '                mobject1.uniforms[key],'), (1827, '                mobject2.uniforms[key],'), (1828, '                alpha'), (1829, '            )'), (1830, '        self.bounding_box[:] = path_func('), (1831, '            mobject1.bounding_box, mobject2.bounding_box, alpha'), (1832, '        )')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e61957a4e0d2b8b826b867cb33cb43df6f357eea,a8ef9629eb34813553bc5ab9ab239b047ce48c68,Fix wrong check for path_func in last commit,"[(1818, '            if key in self.pointlike_data_keys:')]","[(1818, '            if path_func in self.pointlike_data_keys:')]",No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,87ca6e56aa2fc3da6a561c479e0f9f30b533d798,e61957a4e0d2b8b826b867cb33cb43df6f357eea,Don't treat font size as a uniform,"[(11, 'from manimlib.utils.paths import straight_path'), (12, 'from manimlib.utils.bezier import interpolate'), (134, '    def interpolate('), (135, '        self,'), (136, '        mobject1: Mobject,'), (137, '        mobject2: Mobject,'), (138, '        alpha: float,'), (139, '        path_func: Callable[[np.ndarray, np.ndarray, float], np.ndarray] = straight_path'), (140, '    ) -> Self:'), (141, '        super().interpolate(mobject1, mobject2, alpha, path_func)'), (142, '        if hasattr(mobject1, ""font_size"") and hasattr(mobject2, ""font_size""):'), (143, '            self.font_size = interpolate(mobject1.font_size, mobject2.font_size, alpha)'), (146, '        return self.font_size'), (199, '        self.font_size *= scale_factor')]","[(132, '    def init_uniforms(self) -> None:'), (133, '        super().init_uniforms()'), (134, '        self.uniforms[""font_size""] = self.font_size'), (137, '        return float(self.uniforms[""font_size""])'), (190, '        self.uniforms[""font_size""] = scale_factor * self.uniforms[""font_size""]')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b9645ad1960a539c2507bf85cee1c195334eeb11,87ca6e56aa2fc3da6a561c479e0f9f30b533d798,Only update shader wrapper when stroke_behind genuinely changes,"[(193, '                if mob.stroke_behind != background:'), (194, '                    mob.refresh_shader_wrapper_id()'), (195, '                    mob.stroke_behind = background')]","[(193, '                mob.stroke_behind = background'), (194, '                mob.refresh_shader_wrapper_id()')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,0ac9ee1fbf5127d88154b35f5d7054bc39438243,b9645ad1960a539c2507bf85cee1c195334eeb11,Don't deepcopy ShaderWrapper,"[(655, '        self.parents = []'), (656, '        result.target = None'), (657, '        result.saved_state = None'), (658, '        for submob in self.get_family():'), (659, '            submob._shaders_initialized = False'), (660, '            submob._data_has_changed = True')]","[(656, '        result._shaders_initialized = False'), (657, '        result._data_has_changed = True')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,0ac9ee1fbf5127d88154b35f5d7054bc39438243,b9645ad1960a539c2507bf85cee1c195334eeb11,Don't deepcopy ShaderWrapper,"[(66, '    def __deepcopy__(self, memo):'), (67, ""        # Don't allow deepcopies, e.g. if the mobject with this ShaderWrapper as an""), (68, '        # attribute gets copies. Returning None means the parent object with this ShaderWrapper'), (69, '        # as an attribute should smoothly handle this case.'), (70, '        return None'), (71, '')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e0191d81d95bdcbdd85ab35f08ce69fce811c23e,0ac9ee1fbf5127d88154b35f5d7054bc39438243,"Instead of tracking _shaders_initialized, just check if self.shader_wrapper is None","[(106, '        self.shader_wrapper: Optional[ShaderWrapper] = None'), (655, '        parents = self.parents'), (658, '        self.parents = parents'), (691, '        result.shader_wrapper = None'), (1947, '            mob.shader_wrapper = None'), (1991, '    def init_shader_wrapper(self, ctx: Context):'), (2004, '            if submob.shader_wrapper is not None:'), (2010, '        if self.shader_wrapper is None:'), (2011, '            self.init_shader_wrapper(ctx)'), (2037, '        return None')]","[(108, '        self._shaders_initialized: bool = False'), (656, '        result.target = None'), (657, '        result.saved_state = None'), (658, '        for submob in self.get_family():'), (659, '            submob._shaders_initialized = False'), (660, '            submob._data_has_changed = True'), (694, '        result._shaders_initialized = False'), (1950, '            mob._shaders_initialized = False'), (1951, '        for mob in self.get_ancestors():'), (1952, '            mob._shaders_initialized = False'), (1996, '    def init_shader_data(self, ctx: Context):'), (1997, '        self.shader_indices = None'), (2010, '            if submob._shaders_initialized:'), (2016, '        if not self._shaders_initialized:'), (2017, '            self.init_shader_data(ctx)'), (2018, '            self._shaders_initialized = True'), (2044, '        return self.shader_indices')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e0191d81d95bdcbdd85ab35f08ce69fce811c23e,0ac9ee1fbf5127d88154b35f5d7054bc39438243,"Instead of tracking _shaders_initialized, just check if self.shader_wrapper is None","[(1289, '    def init_shader_wrapper(self, ctx: Context):'), (1301, '            if submob.shader_wrapper is not None:')]","[(1289, '    def init_shader_data(self, ctx: Context):'), (1290, '        self.shader_indices = None'), (1302, '            if submob._shaders_initialized:')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0414f8786c48d14cf49e57fa5c310078e40c9477,e0191d81d95bdcbdd85ab35f08ce69fce811c23e,Use Mobject.set_uniform to reassign flat_stroke,"[(268, '            ""flat_stroke"": self.get_flat_stroke(),'), (396, '        self.set_uniform(recurse, flat_stroke=flat_stroke)'), (1307, '        self.get_joint_products()')]","[(268, '            ""flat_stroke"": bool(self.uniforms[""flat_stroke""]),'), (396, '        for mob in self.get_family(recurse):'), (397, '            mob.uniforms[""flat_stroke""] = float(flat_stroke)')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,0414f8786c48d14cf49e57fa5c310078e40c9477,"When shader_id is updated, have ancestors mark data as changed","[(2007, '        for mob in (self, *self.get_ancestors()):'), (2008, '            mob._data_has_changed = True')]",[],No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","[(533, '        flat_stroke: bool = False,'), (557, '        self.set_flat_stroke(flat_stroke)')]",[],No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations",[],"[(645, '        flat_stroke: bool = True,'), (663, '            flat_stroke=flat_stroke,')]",No
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","[(41, '        flat_stroke: bool = False,'), (53, '            flat_stroke=flat_stroke,')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","[(93, '        flat_stroke: bool = True,'), (396, '        self.set_uniform(recurse, flat_stroke=float(flat_stroke))')]","[(93, '        flat_stroke: bool = False,'), (396, '        self.set_uniform(recurse, flat_stroke=flat_stroke)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,7474ae17b054f3f2f56480d093afde19906ff29a,b8931e7b9cdd494bf3d0e4fe5944e22a17316afb,"Change default to flat stroke, except in 3d situations","[(1052, '    def add(self, *mobjects: Mobject, set_depth_test: bool = True, perp_stroke: bool = True):'), (1056, '            if isinstance(mob, VMobject) and mob.has_stroke() and perp_stroke:'), (1057, '                mob.set_flat_stroke(False)')]","[(1052, '    def add(self, *mobjects: Mobject, set_depth_test: bool = True):')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,910f28f52eb2d75618307c463b7210ee85b2cb9c,7474ae17b054f3f2f56480d093afde19906ff29a,Don't have a default flat stroke in set_style,"[(223, '        flat_stroke: Optional[bool] = None,')]","[(223, '        flat_stroke: bool = False,')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,0a585b123c8eb4063771a4ce8a25a141294ddc8d,910f28f52eb2d75618307c463b7210ee85b2cb9c,Use stash_mobject_pointers on Mobject.deepcopy,"[(654, '    @stash_mobject_pointers'), (656, '        return copy.deepcopy(self)')]","[(655, '        parents = self.parents'), (656, '        self.parents = []'), (657, '        result = copy.deepcopy(self)'), (658, '        self.parents = parents'), (659, '        return result')]",No
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier_stroke/vert.glsl,5eb5a1149975646a55ca4f0dba21331f22976e2d,0a585b123c8eb4063771a4ce8a25a141294ddc8d,Don't have absolute stroke width change with frame size (at least temporarily),"[(23, '    // v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);'), (24, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width;')]","[(23, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')]",No
manimlib/shaders/quadratic_bezier_depth/frag.glsl,manimlib/shaders/quadratic_bezier/depth/frag.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_depth/geom.glsl,manimlib/shaders/quadratic_bezier/depth/geom.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_depth/vert.glsl,manimlib/shaders/quadratic_bezier/depth/vert.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_fill/frag.glsl,manimlib/shaders/quadratic_bezier/fill/frag.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_fill/geom.glsl,manimlib/shaders/quadratic_bezier/fill/geom.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_fill/vert.glsl,manimlib/shaders/quadratic_bezier/fill/vert.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_stroke/frag.glsl,manimlib/shaders/quadratic_bezier/stroke/frag.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shaders/quadratic_bezier_stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,0a313eb119b747bb5253b82ea8821c29422c85ff,5eb5a1149975646a55ca4f0dba21331f22976e2d,Reorganize quadratic bezier shader files,[],[],Yes
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,a8784692e81491b9899c817c36dfbd4d4f235efe,0a313eb119b747bb5253b82ea8821c29422c85ff,Reference new shader file structure,"[(240, '                os.path.join(""quadratic_bezier"", f""{vtype}"", f""{name}.glsl"")')]","[(240, '                os.path.join(f""quadratic_bezier_{vtype}"", f""{name}.glsl"")')]",No
manimlib/shaders/quadratic_bezier/stroke/frag.glsl,manimlib/shaders/quadratic_bezier/stroke/frag.glsl,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,a8784692e81491b9899c817c36dfbd4d4f235efe,Fewer parameters for stroke frag shader,"[(3, '// Distance to the curve, and half the curve width, both as'), (4, '// a ratio of the antialias width'), (5, 'in float dist_to_aaw;'), (6, 'in float half_width_to_aaw;'), (14, '    float signed_dist_to_region = abs(dist_to_aaw) - half_width_to_aaw;'), (15, '    frag_color.a *= smoothstep(0.5, -0.5, signed_dist_to_region);')]","[(3, '// Value between -1 and 1'), (4, 'in float dist_to_curve;'), (5, 'in float half_stroke_width;'), (6, 'in float half_anti_alias_width;'), (12, '    if(half_stroke_width == 0) discard;'), (14, ''), (16, '    float signed_dist_to_region = abs(dist_to_curve) - half_stroke_width;'), (17, '    frag_color.a *= smoothstep(half_anti_alias_width, -half_anti_alias_width, signed_dist_to_region);')]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,a8784692e81491b9899c817c36dfbd4d4f235efe,Fewer parameters for stroke frag shader,"[(20, 'out float dist_to_aaw;'), (21, 'out float half_width_to_aaw;'), (175, '    float aaw = max(anti_alias_width * pixel_size, 1e-8);'), (181, '        float dist_to_curve = sign * 0.5 * (width + aaw);'), (183, '        half_width_to_aaw = 0.5 * width / aaw;'), (184, '        dist_to_aaw = dist_to_curve / aaw;')]","[(20, 'out float dist_to_curve;'), (21, 'out float half_stroke_width;'), (22, 'out float half_anti_alias_width;'), (172, '    half_anti_alias_width = 0.5 * anti_alias_width * pixel_size;'), (173, '    half_stroke_width = 0.5 * width;'), (183, '        dist_to_curve = sign * (half_stroke_width + half_anti_alias_width);')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,304856e6e02b68165977a9b61c2547cf2ae7f6c1,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,Remove indices_list argument on ShaderWrapper.read_in,"[(2021, '            shader_wrapper.read_in(data_list)')]","[(2021, '            shader_wrapper.read_in(data_list, indices_list=None)')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,304856e6e02b68165977a9b61c2547cf2ae7f6c1,82582d08bd40270ad89a2d95d26b3d6d2cc305bd,Remove indices_list argument on ShaderWrapper.read_in,"[(146, '    def read_in(self, data_list: Iterable[np.ndarray]):')]","[(146, '    def read_in('), (147, '        self,'), (148, '        data_list: Iterable[np.ndarray],'), (149, '        indices_list: Iterable[np.ndarray] | None = None'), (150, '    ):'), (151, '        if indices_list is not None:'), (152, '            data_list = [data[indices] for data, indices in zip(data_list, indices_list)]'), (153, '')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,7ddbd13e3869ebfd72600fbcc90810fe5ec3f48a,304856e6e02b68165977a9b61c2547cf2ae7f6c1,Ensure mobject uniforms get passed to ShaderWrapper on init,"[(1993, '            mobject_uniforms=self.uniforms,')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,35ce4c6704c415117867a0b98d0728a4fbbca634,7ddbd13e3869ebfd72600fbcc90810fe5ec3f48a,Use Mobject.set_uniform in Mobject.set_shading,"[(1447, '            shading = mob.uniforms[""shading""]'), (1450, '                    shading[i] = value'), (1451, '            mob.set_uniform(shading=shading, recurse=False)')]","[(1449, '                    mob.uniforms[""shading""][i] = value')]",No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,35ce4c6704c415117867a0b98d0728a4fbbca634,Fix normal orientation on Surface,"[(157, '            points[step1] - points,')]","[(156, '            points[step1] - points,')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,"Have border width pre-multiply by alpha, and don't use a separate texture for that border width","[(252, '        self.fill_border_program = get_shader_program('), (253, '            self.ctx,'), (254, '            vertex_shader=self.program_code[""stroke_vert""],'), (255, '            geometry_shader=self.program_code[""stroke_geom""],'), (256, '            fragment_shader=self.program_code[""stroke_frag""].replace('), (257, '                ""// MODIFY FRAG COLOR"",'), (258, '                ""frag_color.a *= 0.95; frag_color.rgb *= frag_color.a;"",'), (259, '            )'), (260, '        )'), (267, '        self.programs = [self.stroke_program, self.fill_program, self.fill_border_program, self.fill_depth_program]'), (308, '            program=self.fill_border_program,'), (337, '        fill_tx_fbo, fill_tx_vao, depth_tx_fbo = self.fill_canvas'), (348, ''), (349, '        # With this blend function, the effect of blending alpha a with'), (350, '        # -a / (1 - a) cancels out, so we can cancel positively and negatively'), (351, '        # oriented triangles'), (366, '        # Now add border, just taking the max alpha'), (369, '        self.fill_border_vao.render()'), (371, '        # Take the texture we were just drawing to, and render it to'), (372, '        # the main scene. Account for how alphas have been premultiplied'), (374, '        gl.glBlendFunc(gl.GL_ONE, gl.GL_ONE_MINUS_SRC_ALPHA)'), (376, '        fill_tx_vao.render()'), (377, ''), (378, '        # Return to original blending state'), (379, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)')]","[(258, '        self.programs = [self.stroke_program, self.fill_program, self.fill_depth_program]'), (299, '            program=self.stroke_program,'), (328, '        fill_tx_fbo, fill_tx_vao, border_tx_fbo, border_tx_vao, depth_tx_fbo = self.fill_canvas'), (329, ''), (330, '        # First, draw the border for antialiasing'), (331, '        border_tx_fbo.clear()'), (332, '        border_tx_fbo.use()'), (333, '        self.fill_border_vao.render()'), (343, ''), (347, '            # With this blend function, the effect of blending alpha a with'), (348, '            # -a / (1 - a) cancels out, so we can cancel positively and negatively'), (349, '            # oriented triangles'), (362, '        # Render fill onto the border_width fbo'), (363, '        # two alphas, before compositing back to the rest of the scene'), (364, '        border_tx_fbo.use()'), (365, '        gl.glEnable(gl.GL_BLEND)'), (368, '        fill_tx_vao.render()'), (371, '        gl.glBlendFunc(gl.GL_SRC_ALPHA, gl.GL_ONE_MINUS_SRC_ALPHA)'), (373, '        border_tx_vao.render()')]",No
manimlib/shaders/quadratic_bezier/stroke/frag.glsl,manimlib/shaders/quadratic_bezier/stroke/frag.glsl,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,"Have border width pre-multiply by alpha, and don't use a separate texture for that border width","[(16, '    // This line is replaced in VShaderWrapper'), (17, '    // MODIFY FRAG COLOR')]",[],No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,d0cb5b4eead641b8bbcef2cab5f13e7ce945f4da,"Have border width pre-multiply by alpha, and don't use a separate texture for that border width","[(156, '    # Use another one to keep track of depth'), (187, '            color *= 1.06;'), (206, '    return (fill_texture_fbo, fill_texture_vao, depth_texture_fbo)')]","[(156, '    # Use a separate texture to firset render the antialiased border'), (157, ""    border_texture = ctx.texture(size=size, components=4, dtype='f1')""), (158, '    # Use yet another one to keep track of depth'), (162, '    border_texture_fbo = ctx.framebuffer(border_texture)'), (190, '            color.a *= 1.06;'), (191, '            // Cancel out what was effectively a premultiplication'), (192, '            color.rgb /= color.a;'), (197, ""    simple_frag = '''""), (198, '        #version 330'), (199, ''), (200, '        uniform sampler2D Texture;'), (201, ''), (202, '        in vec2 uv;'), (203, '        out vec4 color;'), (204, ''), (205, '        void main() {'), (206, '            color = texture(Texture, uv);'), (207, '            if(color.a == 0) discard;'), (208, '        }'), (209, ""    '''""), (214, '    border_program = ctx.program('), (215, '        vertex_shader=simple_vert,'), (216, '        fragment_shader=simple_frag,'), (217, '    )'), (221, ""    border_program['Texture'].value = get_texture_id(border_texture)""), (229, '    border_texture_vao = ctx.simple_vertex_array('), (230, ""        border_program, simple_vbo, 'texcoord',""), (231, '        mode=moderngl.TRIANGLE_STRIP'), (232, '    )'), (233, '    return ('), (234, '        fill_texture_fbo, fill_texture_vao,'), (235, '        border_texture_fbo, border_texture_vao,'), (236, '        depth_texture_fbo,'), (237, '    )')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,748780378b1c880462d443046fae64d94a6115d4,dfc5f152dd9dae10a5ad1dd4a0f7c9c4a5aac129,Have stroke_behind default to True for VMobjects with fill and no stroke,"[(88, '        stroke_behind: Optional[bool] = None,'), (143, '            behind=self.stroke_behind,'), (144, '        )'), (145, '        self.set_fill('), (146, '            color=self.fill_color,'), (147, '            opacity=self.fill_opacity,'), (148, '            border_width=self.fill_border_width,'), (168, '        if self.has_fill() and not self.has_stroke():'), (169, '            self.set_stroke(behind=True)'), (177, '        behind: bool | None = None,'), (192, '        if behind is None and self.has_stroke() and not self.has_fill():'), (193, '            behind = False'), (195, '        if behind is not None:'), (197, '                if mob.stroke_behind != behind:'), (198, '                    mob.stroke_behind = behind'), (211, '        self.set_stroke(color, width, behind=True)'), (225, '        stroke_behind: bool | None = None,'), (245, '                    behind=stroke_behind,'), (255, '                    behind=stroke_behind,'), (270, '            ""stroke_behind"": self.stroke_behind,')]","[(88, '        stroke_behind: bool = False,'), (139, '        self.set_fill('), (140, '            color=self.fill_color,'), (141, '            opacity=self.fill_opacity,'), (142, '            border_width=self.fill_border_width,'), (143, '        )'), (148, '            background=self.stroke_behind,'), (175, '        background: bool | None = None,'), (191, '        if background is not None:'), (193, '                if mob.stroke_behind != background:'), (195, '                    mob.stroke_behind = background'), (206, '        background: bool = True'), (208, '        self.set_stroke(color, width, background=background)'), (222, '        stroke_background: bool = False,'), (242, '                    background=stroke_background,'), (252, '                    background=stroke_background,'), (267, '            ""stroke_background"": self.stroke_behind,')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,79ec791fc297ff9d8def3f6bf08c2dd23360b0db,748780378b1c880462d443046fae64d94a6115d4,Move get_fill_canvas into VShaderWrapper,"[(10, 'from functools import lru_cache'), (12, 'from manimlib.config import parse_cli'), (13, 'from manimlib.config import get_configuration'), (229, '        self.fill_canvas = VShaderWrapper.get_fill_canvas(self.ctx)'), (360, '            self.ctx.enable(moderngl.DEPTH_TEST)'), (382, '    # Meant to be a static method returning one shared value across all VShaderWrappers'), (383, '    @lru_cache'), (384, '    @staticmethod'), (385, '    def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray, Framebuffer]:'), (386, '        """"""'), (387, '        Because VMobjects with fill are rendered in a funny way, using'), (388, '        alpha blending to effectively compute the winding number around'), (389, '        each pixel, they need to be rendered to a separate texture, which'), (390, '        is then composited onto the ordinary frame buffer.'), (391, ''), (392, '        This returns a texture, loaded into a frame buffer, and a vao'), (393, '        which can display that texture as a simple quad onto a screen,'), (394, '        along with the rgb value which is meant to be discarded.'), (395, '        """"""'), (396, ""        cam_config = get_configuration(parse_cli())['camera_config']""), (397, ""        size = (cam_config['pixel_width'], cam_config['pixel_height'])""), (398, ''), (399, '        # Important to make sure dtype is floating point (not fixed point)'), (400, '        # so that alpha values can be negative and are not clipped'), (401, ""        fill_texture = ctx.texture(size=size, components=4, dtype='f2')""), (402, '        # Use another one to keep track of depth'), (403, ""        depth_texture = ctx.texture(size=size, components=1, dtype='f4')""), (404, ''), (405, '        fill_texture_fbo = ctx.framebuffer(fill_texture)'), (406, '        depth_texture_fbo = ctx.framebuffer(depth_texture)'), (407, ''), (408, ""        simple_vert = '''""), (409, '            #version 330'), (410, ''), (411, '            in vec2 texcoord;'), (412, '            out vec2 uv;'), (413, ''), (414, '            void main() {'), (415, '                gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (416, '                uv = texcoord;'), (417, '            }'), (418, ""        '''""), (419, ""        alpha_adjust_frag = '''""), (420, '            #version 330'), (421, ''), (422, '            uniform sampler2D Texture;'), (423, '            uniform sampler2D DepthTexture;'), (424, ''), (425, '            in vec2 uv;'), (426, '            out vec4 color;'), (427, ''), (428, '            void main() {'), (429, '                color = texture(Texture, uv);'), (430, '                if(color.a == 0) discard;'), (431, ''), (432, '                // Counteract scaling in fill frag'), (433, '                color *= 1.06;'), (434, ''), (435, '                gl_FragDepth = texture(DepthTexture, uv)[0];'), (436, '            }'), (437, ""        '''""), (438, '        fill_program = ctx.program('), (439, '            vertex_shader=simple_vert,'), (440, '            fragment_shader=alpha_adjust_frag,'), (441, '        )'), (442, ''), (443, ""        fill_program['Texture'].value = get_texture_id(fill_texture)""), (444, ""        fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (445, ''), (446, '        verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (447, ""        simple_vbo = ctx.buffer(verts.astype('f4').tobytes())""), (448, '        fill_texture_vao = ctx.simple_vertex_array('), (449, ""            fill_program, simple_vbo, 'texcoord',""), (450, '            mode=moderngl.TRIANGLE_STRIP'), (451, '        )'), (452, ''), (453, '        return (fill_texture_fbo, fill_texture_vao, depth_texture_fbo)'), (454, '')]","[(16, 'from manimlib.utils.shaders import get_fill_canvas'), (26, ''), (218, '        self.fill_canvas = get_fill_canvas(ctx)'), (364, '            self.ctx.enable(moderngl.DEPTH_TEST)')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,79ec791fc297ff9d8def3f6bf08c2dd23360b0db,748780378b1c880462d443046fae64d94a6115d4,Move get_fill_canvas into VShaderWrapper,[],"[(10, 'from manimlib.config import parse_cli'), (11, 'from manimlib.config import get_configuration'), (136, ''), (137, ''), (138, '@lru_cache()'), (139, 'def get_fill_canvas(ctx: moderngl.Context) -> Tuple[Framebuffer, VertexArray]:'), (140, '    """"""'), (141, '    Because VMobjects with fill are rendered in a funny way, using'), (142, '    alpha blending to effectively compute the winding number around'), (143, '    each pixel, they need to be rendered to a separate texture, which'), (144, '    is then composited onto the ordinary frame buffer.'), (145, ''), (146, '    This returns a texture, loaded into a frame buffer, and a vao'), (147, '    which can display that texture as a simple quad onto a screen,'), (148, '    along with the rgb value which is meant to be discarded.'), (149, '    """"""'), (150, ""    cam_config = get_configuration(parse_cli())['camera_config']""), (151, ""    size = (cam_config['pixel_width'], cam_config['pixel_height'])""), (152, ''), (153, '    # Important to make sure dtype is floating point (not fixed point)'), (154, '    # so that alpha values can be negative and are not clipped'), (155, ""    fill_texture = ctx.texture(size=size, components=4, dtype='f2')""), (156, '    # Use another one to keep track of depth'), (157, ""    depth_texture = ctx.texture(size=size, components=1, dtype='f4')""), (158, ''), (159, '    fill_texture_fbo = ctx.framebuffer(fill_texture)'), (160, '    depth_texture_fbo = ctx.framebuffer(depth_texture)'), (161, ''), (162, ""    simple_vert = '''""), (163, '        #version 330'), (164, ''), (165, '        in vec2 texcoord;'), (166, '        out vec2 uv;'), (167, ''), (168, '        void main() {'), (169, '            gl_Position = vec4((2.0 * texcoord - 1.0), 0.0, 1.0);'), (170, '            uv = texcoord;'), (171, '        }'), (172, ""    '''""), (173, ""    alpha_adjust_frag = '''""), (174, '        #version 330'), (175, ''), (176, '        uniform sampler2D Texture;'), (177, '        uniform sampler2D DepthTexture;'), (178, ''), (179, '        in vec2 uv;'), (180, '        out vec4 color;'), (181, ''), (182, '        void main() {'), (183, '            color = texture(Texture, uv);'), (184, '            if(color.a == 0) discard;'), (185, ''), (186, '            // Counteract scaling in fill frag'), (187, '            color *= 1.06;'), (188, ''), (189, '            gl_FragDepth = texture(DepthTexture, uv)[0];'), (190, '        }'), (191, ""    '''""), (192, '    fill_program = ctx.program('), (193, '        vertex_shader=simple_vert,'), (194, '        fragment_shader=alpha_adjust_frag,'), (195, '    )'), (196, ''), (197, ""    fill_program['Texture'].value = get_texture_id(fill_texture)""), (198, ""    fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (199, ''), (200, '    verts = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])'), (201, ""    simple_vbo = ctx.buffer(verts.astype('f4').tobytes())""), (202, '    fill_texture_vao = ctx.simple_vertex_array('), (203, ""        fill_program, simple_vbo, 'texcoord',""), (204, '        mode=moderngl.TRIANGLE_STRIP'), (205, '    )'), (206, '    return (fill_texture_fbo, fill_texture_vao, depth_texture_fbo)')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,67bedc6d1fba856f1a2348c58c4c18eae73845c8,79ec791fc297ff9d8def3f6bf08c2dd23360b0db,Fix fill_depth_vert_format,"[(287, ""        self.fill_depth_vert_format = '3f 52x 3f 4x'""), (382, '    # Static method returning one shared value across all VShaderWrappers')]","[(287, ""        self.fill_depth_vert_format = '3f 40x 3f 16x'""), (382, '    # Meant to be a static method returning one shared value across all VShaderWrappers')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","[(109, '        self.mobject.refresh_joint_angles()')]","[(109, '        self.mobject.refresh_joint_products()')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","[(70, ""        ('joint_angle', np.float32, (1,)),""), (118, '        self.needs_new_joint_angles = True'), (650, '        dots = np.cos(self.get_joint_angles()[0::2, :])'), (929, '                mob.get_joint_angles()'), (975, '            mob.get_joint_angles()'), (1031, '        self.data[""joint_angle""] = vmobject.data[""joint_angle""]'), (1066, '        self.data[""joint_angle""][:i1] = 0'), (1067, '        self.data[""joint_angle""][i4:] = 0'), (1157, '    def refresh_joint_angles(self) -> Self:'), (1159, '            mob.needs_new_joint_angles = True'), (1162, '    def get_joint_angles(self, refresh: bool = False) -> np.ndarray:'), (1167, '        if not self.needs_new_joint_angles and not refresh:'), (1168, '            return self.data[""joint_angle""]'), (1170, '        if ""joint_angle"" in self.locked_data_keys:'), (1171, '            return self.data[""joint_angle""]'), (1173, '        self.needs_new_joint_angles = False'), (1179, '            return self.data[""joint_angle""]'), (1206, '        to_dot_from = (vect_to_vert * vect_from_vert).sum(1)'), (1207, '        to_norm = np.sqrt((vect_to_vert * vect_to_vert).sum(1))'), (1208, '        from_norm = np.sqrt((vect_from_vert * vect_from_vert).sum(1))'), (1209, '        angles = np.arccos(to_dot_from / (to_norm * from_norm))'), (1210, ''), (1211, '        crosses = cross(vect_to_vert, vect_from_vert)'), (1212, '        unit_normal = self.get_unit_normal()'), (1213, '        angles[(crosses * unit_normal[np.newaxis, :]).sum(1) < 0] *= -1'), (1214, '        self.data[""joint_angle""][:, 0] = angles'), (1215, '        return self.data[""joint_angle""]'), (1219, '            mob.get_joint_angles()'), (1229, '                self.refresh_joint_angles()'), (1238, '            self.get_joint_angles(refresh=True)'), (1246, '        self.get_unit_normal()'), (1282, '        self.refresh_joint_angles()'), (1288, '            submob.get_joint_angles(refresh=True)'), (1314, '        self.get_joint_angles()')]","[(70, ""        ('joint_product', np.float32, (4,)),""), (118, '        self.needs_new_joint_products = True'), (650, '        dots = self.get_joint_products()[::2, 3]'), (929, '                mob.get_joint_products()'), (975, '            mob.get_joint_products()'), (1031, '        self.data[""joint_product""] = vmobject.data[""joint_product""]'), (1066, '        self.data[""joint_product""][:i1] = [0, 0, 0, 1]'), (1067, '        self.data[""joint_product""][i4:] = [0, 0, 0, 1]'), (1121, ''), (1158, '    def refresh_joint_products(self) -> Self:'), (1160, '            mob.needs_new_joint_products = True'), (1163, '    def get_joint_products(self, refresh: bool = False) -> np.ndarray:'), (1168, '        if not self.needs_new_joint_products and not refresh:'), (1169, '            return self.data[""joint_product""]'), (1171, '        if ""joint_product"" in self.locked_data_keys:'), (1172, '            return self.data[""joint_product""]'), (1174, '        self.needs_new_joint_products = False'), (1180, '            return self.data[""joint_product""]'), (1207, '        cross('), (1208, '            vect_to_vert, vect_from_vert,'), (1209, '            out=self.data[""joint_product""][:, :3]'), (1210, '        )'), (1211, '        self.data[""joint_product""][:, 3] = (vect_to_vert * vect_from_vert).sum(1)'), (1212, '        return self.data[""joint_product""]'), (1216, '            mob.get_joint_products()'), (1226, '                self.refresh_joint_products()'), (1235, '            self.get_joint_products(refresh=True)'), (1278, '        self.refresh_joint_products()'), (1284, '            submob.get_joint_products(refresh=True)'), (1310, '        self.get_joint_products()')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","[(274, '        # joint_angle 1'), (278, ""        self.stroke_vert_format = '3f 4f 1f 1f 16x 3f 4x'""), (279, ""        self.stroke_vert_attributes = ['point', 'stroke_rgba', 'stroke_width', 'joint_angle', 'unit_normal']""), (281, ""        self.fill_vert_format = '3f 24x 4f 3f 4x'""), (284, ""        self.fill_border_vert_format = '3f 20x 1f 4f 3f 1f'""), (285, ""        self.fill_border_vert_attributes = ['point', 'joint_angle', 'stroke_rgba', 'unit_normal', 'stroke_width']""), (287, ""        self.fill_depth_vert_format = '3f 40x 3f 4x'"")]","[(274, '        # joint_product 4'), (278, ""        self.stroke_vert_format = '3f 4f 1f 4f 32x'""), (279, ""        self.stroke_vert_attributes = ['point', 'stroke_rgba', 'stroke_width', 'joint_product']""), (281, ""        self.fill_vert_format = '3f 36x 4f 3f 4x'""), (284, ""        self.fill_border_vert_format = '3f 20x 4f 4f 12x 1f'""), (285, ""        self.fill_border_vert_attributes = ['point', 'joint_product', 'stroke_rgba', 'stroke_width']""), (287, ""        self.fill_depth_vert_format = '3f 52x 3f 4x'"")]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","[(14, 'in float v_joint_angle[3];'), (17, 'in vec3 v_unit_normal[3];'), (37, 'const float MITER_COS_ANGLE_THRESHOLD = -0.9;'), (59, ''), (60, 'vec3 rotate_vector(vec3 vect, vec3 unit_normal, float angle){'), (61, '    vec3 perp = cross(unit_normal, vect);'), (62, '    return cos(angle) * vect + sin(angle) * perp;'), (66, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve){'), (85, '        vec3 perp = normalize(cross(unit_normal, tangent));'), (91, '    float cos_angle = cos(joint_angle);'), (92, '    float sin_angle = sin(joint_angle);'), (101, '        vec3 adj_tan = rotate_vector(tangent, v_unit_normal[1], joint_angle);'), (103, '        cos_angle = dot(unit_tan, normalize(adj_tan));'), (104, '        sin_angle = sqrt(1 - cos_angle * cos_angle) * sign(joint_angle) * sign(dot(unit_normal, v_unit_normal[1]));'), (116, '        float mcat2 = mix(mcat1, -1.0, 0.5);'), (128, '    float joint_angle,'), (134, '    vec3 unit_normal = bool(flat_stroke) ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve);'), (178, '    float area = 0.5 * length(cross(verts[1] - verts[0], verts[2] - verts[0]));'), (199, '        float joint_angle;'), (200, '        if (i == 0){'), (201, '            joint_angle = -v_joint_angle[0];'), (202, '        }'), (203, '        else if (inside_curve){'), (204, '            joint_angle = 0;'), (205, '        }'), (206, '        else {'), (207, '            joint_angle = v_joint_angle[2];'), (208, '        }'), (211, '            point, tangent, joint_angle,')]","[(14, 'in vec4 v_joint_product[3];'), (36, 'const float MITER_COS_ANGLE_THRESHOLD = -0.8;'), (42, 'vec3 get_joint_unit_normal(vec4 joint_product){'), (43, '    float tol = 1e-8;'), (44, '    if (length(joint_product.xyz) > tol){'), (45, '        return normalize(joint_product.xyz);'), (46, '    }'), (47, '    if (length(v_joint_product[1].xyz) > tol){'), (48, '        return normalize(v_joint_product[1].xyz);'), (49, '    }'), (50, '    return vec3(0.0, 0.0, 1.0);'), (51, '}'), (52, ''), (53, ''), (54, 'vec4 unit_joint_product(vec4 joint_product){'), (55, '    float tol = 1e-8;'), (56, '    float norm = length(joint_product);'), (57, '    return (norm < tol) ? vec4(0.0, 0.0, 0.0, 1.0) : joint_product / norm;'), (58, '}'), (59, ''), (71, 'vec4 get_joint_product(vec3 v1, vec3 v2){'), (72, '    return vec4(cross(v1, v2), dot(v1, v2));'), (73, '}'), (74, ''), (75, ''), (81, 'vec3 inverse_vector_product(vec3 vect, vec3 cross_product, float dot_product){'), (82, '    /*'), (83, '    Suppose cross(v1, v2) = cross_product and dot(v1, v2) = dot_product.'), (84, '    Given v1, this function return v2.'), (85, '    */'), (86, '    return (vect * dot_product - cross(vect, cross_product)) / dot(vect, vect);'), (90, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, vec4 joint_product, bool inside_curve){'), (109, '        vec3 perp = normalize(cross(get_joint_unit_normal(joint_product), tangent));'), (115, '    vec4 unit_jp = unit_joint_product(joint_product);'), (116, '    float cos_angle = unit_jp.w;'), (125, '        vec3 adj_tan = inverse_vector_product(tangent, unit_jp.xyz, unit_jp.w);'), (127, '        vec4 flat_jp = get_joint_product(unit_tan, adj_tan);'), (128, '        cos_angle = unit_joint_product(flat_jp).w;'), (140, '        float mcat2 = 0.5 * (mcat1 - 1.0);'), (144, '    float sin_angle = sqrt(1 - cos_angle * cos_angle) * sign(dot(joint_product.xyz, unit_normal));'), (146, ''), (154, '    vec4 joint_product,'), (160, '    vec3 to_camera = camera_position - point;'), (161, '    vec3 unit_normal;'), (162, '    if (flat_stroke == 0.0){'), (163, '        unit_normal = normalize(to_camera);'), (164, '    }else{'), (165, '        unit_normal = get_joint_unit_normal(joint_product);'), (166, '        unit_normal *= sign(dot(unit_normal, to_camera));  // Choose the ""outward"" normal direction'), (167, '    }'), (174, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_product, inside_curve);'), (211, '    float area = 0.5 * length(v_joint_product[1].xzy);'), (232, '        vec4 joint_product;'), (233, '        if (i == 0)            joint_product = v_joint_product[0] * vec4(-1, -1, -1, 1);'), (234, '        else if (inside_curve) joint_product = v_joint_product[1];'), (235, '        else                   joint_product = v_joint_product[2];'), (238, '            point, tangent, joint_product,')]",No
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,67bedc6d1fba856f1a2348c58c4c18eae73845c8,"Instead of passing in joint_products to stroke shader, just track joint_angles and pass in global unit normal","[(9, 'in float joint_angle;'), (10, 'in vec3 unit_normal;'), (16, 'out float v_stroke_width;'), (17, 'out float v_joint_angle;'), (18, 'out vec3 v_unit_normal;'), (25, '    v_color = stroke_rgba;'), (28, '    v_joint_angle = joint_angle;'), (29, '    v_unit_normal = unit_normal;')]","[(9, 'in vec4 joint_product;'), (14, 'out vec4 v_joint_product;'), (15, 'out float v_stroke_width;'), (25, '    v_joint_product = joint_product;'), (26, '    v_color = stroke_rgba;')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,941513d68c4859efb63c0a7dd17af430373a3306,9a5386b0226b3435454d59a7bcbdc8d29a019bf9,Only recompute VMobject.get_unit_normal as needed,"[(119, '        self.needs_new_unit_normal = True'), (877, '        if not self.needs_new_unit_normal:'), (878, '            return self.data[""base_normal""][1, :]'), (879, ''), (885, '            p = self.get_points()'), (886, '            normal = get_unit_normal(p[1] - p[0], p[2] - p[1])'), (888, '        self.needs_new_unit_normal = False'), (892, '        self.needs_new_unit_normal = True'), (1241, '            self.refresh_unit_normal()'), (1248, '        self.refresh_unit_normal()')]","[(881, '            points = self.get_points()'), (882, '            normal = get_unit_normal('), (883, '                points[1] - points[0],'), (884, '                points[2] - points[1],'), (885, '            )'), (890, '        self.get_unit_normal()'), (1239, '            self.get_unit_normal()'), (1246, '        self.get_unit_normal()')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,43f1704f699c8f85bc43073bf65fe2de2ffaaad7,941513d68c4859efb63c0a7dd17af430373a3306,Fix computation of joint_angles to handle zero division case,"[(38, 'from manimlib.utils.simple_functions import fdiv'), (1189, '        # Tangent vectors into each vertex'), (1190, '        v_in = np.zeros(points.shape)'), (1191, '        # Tangent vectors out of each vertex'), (1192, '        v_out = np.zeros(points.shape)'), (1194, '        v_in[1::2] = a0_to_h'), (1195, '        v_in[2::2] = h_to_a1'), (1196, '        v_out[0:-1:2] = a0_to_h'), (1197, '        v_out[1::2] = h_to_a1'), (1204, '                v_in[start] = v_out[end - 1]'), (1205, '                v_out[end] = v_in[start + 1]'), (1207, '                v_in[start] = v_out[start]'), (1208, '                v_out[end] = v_in[end]'), (1211, '        in_dot_out = (v_in * v_out).sum(1)'), (1212, '        norm_product = np.sqrt((v_in * v_in).sum(1) * (v_out * v_out).sum(1))'), (1213, '        angles = np.arccos(fdiv(in_dot_out, norm_product, zero_over_zero_value=1))'), (1215, '        crosses = cross(v_in, v_out)')]","[(1188, '        vect_to_vert = np.zeros(points.shape)'), (1189, '        vect_from_vert = np.zeros(points.shape)'), (1191, '        vect_to_vert[1::2] = a0_to_h'), (1192, '        vect_to_vert[2::2] = h_to_a1'), (1193, '        vect_from_vert[0:-1:2] = a0_to_h'), (1194, '        vect_from_vert[1::2] = h_to_a1'), (1201, '                vect_to_vert[start] = vect_from_vert[end - 1]'), (1202, '                vect_from_vert[end] = vect_to_vert[start + 1]'), (1204, '                vect_to_vert[start] = vect_from_vert[start]'), (1205, '                vect_from_vert[end] = vect_to_vert[end]'), (1208, '        to_dot_from = (vect_to_vert * vect_from_vert).sum(1)'), (1209, '        to_norm = np.sqrt((vect_to_vert * vect_to_vert).sum(1))'), (1210, '        from_norm = np.sqrt((vect_from_vert * vect_from_vert).sum(1))'), (1211, '        angles = np.arccos(to_dot_from / (to_norm * from_norm))'), (1213, '        crosses = cross(vect_to_vert, vect_from_vert)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0cb7a8f6911ada2ad3f0d4873dcc2c4538280dc1,43f1704f699c8f85bc43073bf65fe2de2ffaaad7,Only recompute subpath_end_indices as needed,"[(121, '        self.subpath_end_indices = None'), (508, '        if self.consider_points_equal(last_point, anchor):'), (509, '            return self'), (519, '        if self.consider_points_equal(last_point, point):'), (520, '            return self'), (754, '        if self.subpath_end_indices is None:'), (755, '            self.subpath_end_indices = self.get_subpath_end_indices_from_points(self.get_points())'), (756, '        return self.subpath_end_indices'), (1234, '    def triggers_refresh(func: Callable):'), (1239, '                self.subpath_end_indices = None'), (1242, '                self.refresh_unit_normal()'), (1246, '    @triggers_refresh'), (1247, '    def resize_points('), (1248, '        self,'), (1249, '        new_length: int,'), (1250, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1251, '    ) -> Self:'), (1252, '        return super().resize_points(new_length, resize_func)'), (1253, ''), (1254, '    @triggers_refresh'), (1257, '        return super().set_points(points)'), (1259, '    @triggers_refresh'), (1262, '        return super().append_points(points)'), (1264, '    @triggers_refresh'), (1274, '        return super().reverse_points()'), (1276, '    @triggers_refresh'), (1278, '        return super().set_data(data)'), (1281, '    @triggers_refresh'), (1293, '    @triggers_refresh'), (1295, '        return super().apply_points_function(*args, **kwargs)')]","[(749, '        return self.get_subpath_end_indices_from_points(self.get_points())'), (1227, '    def triggers_refreshed_triangulation(func: Callable):'), (1239, '        super().set_points(points)'), (1240, '        self.refresh_triangulation()'), (1241, '        if refresh_joints:'), (1242, '            self.get_joint_angles(refresh=True)'), (1243, '            self.refresh_unit_normal()'), (1244, '        return self'), (1246, '    @triggers_refreshed_triangulation'), (1249, '        super().append_points(points)'), (1250, '        self.refresh_unit_normal()'), (1251, '        return self'), (1253, '    @triggers_refreshed_triangulation'), (1263, '        super().reverse_points()'), (1264, '        return self'), (1266, '    @triggers_refreshed_triangulation'), (1268, '        super().set_data(data)'), (1269, '        return self'), (1272, '    @triggers_refreshed_triangulation'), (1285, '        super().apply_points_function(*args, **kwargs)'), (1286, '        self.refresh_joint_angles()'), (1287, '        return self')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,0a89725090009e2c06d4998c3bbaeddb8c00154f,0cb7a8f6911ada2ad3f0d4873dcc2c4538280dc1,Tweaking what triggers refreshes,"[(1043, '            self.set_points(vm_points, refresh=False)'), (1078, '        self.set_points(new_points, refresh=False)'), (1247, '    def set_points(self, points: Vect3Array) -> Self:'), (1265, '            self.subpath_end_indices = None')]","[(1043, '            self.set_points(vm_points, refresh_joints=False)'), (1078, '        self.set_points(new_points, refresh_joints=False)'), (1247, '    def resize_points('), (1248, '        self,'), (1249, '        new_length: int,'), (1250, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1251, '    ) -> Self:'), (1252, '        return super().resize_points(new_length, resize_func)'), (1253, ''), (1254, '    @triggers_refresh'), (1255, '    def set_points(self, points: Vect3Array, refresh_joints: bool = True) -> Self:'), (1264, '    @triggers_refresh')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c83d03aeb7b592e14a775933fc4312139d3fda2d,0a89725090009e2c06d4998c3bbaeddb8c00154f,Simplify get_subpath_end_indices_from_points,"[(738, '        a0, h = points[0:-1:2], points[1::2]'), (741, '        is_end = (a0 == h).all(1)'), (742, '        end_indices = (2 * n for n, end in enumerate(is_end) if end)'), (743, '        return np.array([*end_indices, len(points) - 1])'), (1202, '            if start >= end - 2:'), (1203, '                continue')]","[(738, '        atol = self.tolerance_for_point_equality'), (739, '        a0, h, a1 = points[0:-1:2], points[1::2], points[2::2]'), (742, '        # To disambiguate this from cases with many null'), (743, '        # curves in a row, we also check that the following'), (744, '        # anchor is genuinely distinct'), (745, '        is_end = np.empty(len(points) // 2 + 1, dtype=bool)'), (746, '        is_end[:-1] = (a0 == h).all(1) & (abs(h - a1) > atol).any(1)'), (747, '        is_end[-1] = True'), (748, '        # If the curve immediately after an end marker is also an'), (749, ""        # end marker, don't mark the second one""), (750, '        is_end[:-1] = is_end[:-1] & ~is_end[1:]'), (751, '        return np.array([2 * n for n, end in enumerate(is_end) if end])')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,c83d03aeb7b592e14a775933fc4312139d3fda2d,Add an option for VMobject.add_line to add a null line,"[(690, '        self.add_line_to(self.get_end(), allow_null_line=True)')]","[(690, '        self.add_line_to(self.get_end())')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,c83d03aeb7b592e14a775933fc4312139d3fda2d,Add an option for VMobject.add_line to add a null line,"[(516, '    def add_line_to(self, point: Vect3, allow_null_line: bool = False) -> Self:'), (519, '        if not allow_null_line and self.consider_points_equal(last_point, point):')]","[(516, '    def add_line_to(self, point: Vect3) -> Self:'), (519, '        if self.consider_points_equal(last_point, point):')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,eea8416d57264ea108174072f8075d7a492f6b26,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,"Default to allowing null lines, except for SVGPaths","[(690, '        self.add_line_to(self.get_end())')]","[(690, '        self.add_line_to(self.get_end(), allow_null_line=True)')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,eea8416d57264ea108174072f8075d7a492f6b26,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,"Default to allowing null lines, except for SVGPaths","[(324, '            se.Line: (lambda p: self.add_line_to(p, allow_null_line=False), (""end"",)),'), (325, '            se.QuadraticBezier: (lambda c, e: self.add_quadratic_bezier_curve_to(c, e, allow_null_curve=False), (""control"", ""end"")),')]","[(324, '            se.Line: (self.add_line_to, (""end"",)),'), (325, '            se.QuadraticBezier: (self.add_quadratic_bezier_curve_to, (""control"", ""end"")),')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,eea8416d57264ea108174072f8075d7a492f6b26,b3386ad7a733e5ff5dc73983cbeaa0f3583518fe,"Default to allowing null lines, except for SVGPaths","[(505, '    def add_quadratic_bezier_curve_to(self, handle: Vect3, anchor: Vect3, allow_null_curve=True) -> Self:'), (508, '        if not allow_null_curve and self.consider_points_equal(last_point, anchor):'), (516, '    def add_line_to(self, point: Vect3, allow_null_line: bool = True) -> Self:')]","[(505, '    def add_quadratic_bezier_curve_to(self, handle: Vect3, anchor: Vect3) -> Self:'), (508, '        if self.consider_points_equal(last_point, anchor):'), (516, '    def add_line_to(self, point: Vect3, allow_null_line: bool = False) -> Self:')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,22ee13a884df4b9455f0b9989c8edf225f72c233,eea8416d57264ea108174072f8075d7a492f6b26,Have FillArrow take the place of StrokeArrow as the main Arrow,"[(638, 'class StrokeArrow(Line):'), (734, 'class Arrow(Line):'), (735, '    tickness_multiplier = 0.015'), (736, ''), (745, '        thickness: float = 3.0,'), (776, '        width = self.thickness * self.tickness_multiplier'), (777, '        w_ratio = fdiv(self.max_width_to_length_ratio, fdiv(width, length))'), (779, '            width *= w_ratio'), (781, '        tip_width = self.tip_width_ratio * width'), (791, '            points1 += width * UP / 2'), (792, '            points2 = points1[::-1] + width * DOWN'), (803, '            points1 *= (R + width / 2)'), (804, '            points2 *= (R - width / 2)')]","[(638, 'class Arrow(Line):'), (734, 'class FillArrow(Line):'), (743, '        thickness: float = 0.05,'), (774, '        thickness = self.thickness'), (775, '        w_ratio = fdiv(self.max_width_to_length_ratio, fdiv(thickness, length))'), (777, '            thickness *= w_ratio'), (779, '        tip_width = self.tip_width_ratio * thickness'), (789, '            points1 += thickness * UP / 2'), (790, '            points2 = points1[::-1] + thickness * DOWN'), (801, '            points1 *= (R + thickness / 2)'), (802, '            points2 *= (R - thickness / 2)')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,ceac4fbe1a14e4883d6507abb742ea739045285d,22ee13a884df4b9455f0b9989c8edf225f72c233,Fix up FillArrow,"[(741, '        buff: float = MED_SMALL_BUFF,'), (742, '        path_arc: float = 0,'), (764, '            path_arc=path_arc,'), (768, '    def get_key_dimensions(self, length):'), (781, '        return width, tip_width, tip_length'), (782, ''), (783, '    def set_points_by_ends('), (784, '        self,'), (785, '        start: Vect3,'), (786, '        end: Vect3,'), (787, '        buff: float = 0,'), (788, '        path_arc: float = 0'), (789, '    ) -> Self:'), (790, '        vect = end - start'), (791, '        length = max(get_norm(vect), 1e-8)  # More systematic min?'), (792, '        unit_vect = normalize(vect)'), (793, ''), (794, '        # Find the right tip length and thickness'), (795, '        width, tip_width, tip_length = self.get_key_dimensions(length - buff)'), (796, ''), (797, '        # Adjust start and end based on buff'), (798, '        if path_arc == 0:'), (799, '            start = start + buff * unit_vect'), (800, '            end = end - buff * unit_vect'), (801, '        else:'), (802, '            R = length / 2 / math.sin(path_arc / 2)'), (803, '            midpoint = 0.5 * (start + end)'), (804, '            center = midpoint + rotate_vector(0.5 * vect, PI / 2) / math.tan(path_arc / 2)'), (805, '            sign = 1'), (806, '            start = center + rotate_vector(start - center, buff / R)'), (807, '            end = center + rotate_vector(end - center, -buff / R)'), (808, '            path_arc -= (2 * buff + tip_length) / R'), (809, '        vect = end - start'), (810, '        length = get_norm(vect)'), (811, ''), (812, '        # Find points for the stem, imagining an arrow pointed to the left'), (839, '        # Reposition to match proper start and end'), (863, '    def get_start_and_end(self):'), (864, '        return (self.get_start(), self.get_end())'), (865, '')]","[(744, '        buff: float = MED_SMALL_BUFF,'), (766, '    def set_points_by_ends('), (767, '        self,'), (768, '        start: Vect3,'), (769, '        end: Vect3,'), (770, '        buff: float = 0,'), (771, '        path_arc: float = 0'), (772, '    ) -> Self:'), (773, '        # Find the right tip length and thickness'), (774, '        vect = end - start'), (775, '        length = max(get_norm(vect), 1e-8)'), (788, '        # Find points for the stem'), (794, '            # Solve for radius so that the tip-to-tail length matches |end - start|'), (795, '            a = 2 * (1 - np.cos(path_arc))'), (796, '            b = -2 * tip_length * np.sin(path_arc)'), (797, '            c = tip_length**2 - length**2'), (798, '            R = (-b + np.sqrt(b**2 - 4 * a * c)) / (2 * a)'), (799, ''), (805, '            if path_arc < 0:'), (806, '                tip_length *= -1'), (823, '        if length > 0 and self.get_length() > 0:'), (824, '            # Final correction'), (825, '            super().scale(length / self.get_length())'), (826, '')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,442206faadecf49e09d496e375f11c3729d7b70d,ceac4fbe1a14e4883d6507abb742ea739045285d,Go back to non-flat-stroke as the default,[],"[(533, '        flat_stroke: bool = False,'), (557, '        self.set_flat_stroke(flat_stroke)')]",No
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,442206faadecf49e09d496e375f11c3729d7b70d,ceac4fbe1a14e4883d6507abb742ea739045285d,Go back to non-flat-stroke as the default,[],"[(41, '        flat_stroke: bool = False,'), (53, '            flat_stroke=flat_stroke,')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,442206faadecf49e09d496e375f11c3729d7b70d,ceac4fbe1a14e4883d6507abb742ea739045285d,Go back to non-flat-stroke as the default,"[(94, '        flat_stroke: bool = False,')]","[(94, '        flat_stroke: bool = True,')]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,d870bb29deed2351d6ceb0ba2a060610be3c1aa9,442206faadecf49e09d496e375f11c3729d7b70d,Fix the non-flat stroke edge case for tangents near line of sight,"[(85, '        vec3 perp = normalize(cross(v_unit_normal[1], tangent));')]","[(85, '        vec3 perp = normalize(cross(unit_normal, tangent));')]",No
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,bda894959b35a235bc18181cfca9cefada677007,d870bb29deed2351d6ceb0ba2a060610be3c1aa9,"Keeps stroke width as a function of pixels, independent of zoom level","[(26, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')]","[(26, '    // v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);'), (27, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width;')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,cfe70ca869c3dbe0ff42305213475e8786f2c24b,bda894959b35a235bc18181cfca9cefada677007,Don't let Write override stroke_behind default,"[(118, '                behind=self.mobject.stroke_behind,')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,11df2563699122acb0859e0ae273359896e437d9,cfe70ca869c3dbe0ff42305213475e8786f2c24b,Fix error rect,"[(282, '            rect = FullScreenRectangle().set_stroke(RED, 30, flat=True).set_fill(opacity=0)')]","[(282, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,d5575cf1ef55e8d4139bf1ef37981c2e6890fc8e,11df2563699122acb0859e0ae273359896e437d9,Change how joint_angles are computed,"[(16, 'from manimlib.constants import PI'), (658, '        dots = np.cos(self.get_joint_angles()[0::2])'), (1171, '            return self.data[""joint_angle""][:, 0]'), (1174, '            return self.data[""joint_angle""][:, 0]'), (1179, '        # Rotate points such that positive z direction is the normal'), (1180, '        points = self.get_points() @ rotation_between_vectors(OUT, self.get_unit_normal())'), (1183, '            return self.data[""joint_angle""][:, 0]'), (1206, '            if (points[start] == points[end]).all():'), (1213, '        # Find the angles between vectors into each vertex, and out of it'), (1214, '        angles_in = np.arctan2(v_in[:, 1], v_in[:, 0])'), (1215, '        angles_out = np.arctan2(v_out[:, 1], v_out[:, 0])'), (1216, '        angle_diffs = angles_out - angles_in'), (1217, '        self.data[""joint_angle""][:, 0] = (angle_diffs + PI) % TAU - PI'), (1218, '        return self.data[""joint_angle""][:, 0]')]","[(657, '        dots = np.cos(self.get_joint_angles()[0::2, :])'), (1170, '            return self.data[""joint_angle""]'), (1173, '            return self.data[""joint_angle""]'), (1178, '        points = self.get_points()'), (1181, '            return self.data[""joint_angle""]'), (1204, '            if self.consider_points_equal(points[start], points[end]):'), (1211, '        # Compute dot and cross products'), (1212, '        in_dot_out = (v_in * v_out).sum(1)'), (1213, '        norm_product = np.sqrt((v_in * v_in).sum(1) * (v_out * v_out).sum(1))'), (1214, '        angles = np.arccos(fdiv(in_dot_out, norm_product, zero_over_zero_value=1))'), (1215, ''), (1216, '        crosses = cross(v_in, v_out)'), (1217, '        unit_normal = self.get_unit_normal()'), (1218, '        angles[(crosses * unit_normal[np.newaxis, :]).sum(1) < 0] *= -1'), (1219, '        self.data[""joint_angle""][:, 0] = angles'), (1220, '        return self.data[""joint_angle""]')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,eda7f81fb96e519d720616305688854c236ab3fc,d5575cf1ef55e8d4139bf1ef37981c2e6890fc8e,Update VMobject.is_smooth,"[(657, '    def is_smooth(self, angle_tol=1 * DEGREES) -> bool:'), (658, '        angles = np.abs(self.get_joint_angles()[0::2])'), (659, '        return (angles < angle_tol).all()')]","[(657, '    def is_smooth(self) -> bool:'), (658, '        dots = np.cos(self.get_joint_angles()[0::2])'), (659, '        return bool((dots > 1 - 1e-3).all())')]",No
manimlib/config.py,manimlib/config.py,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,eda7f81fb96e519d720616305688854c236ab3fc,Allow more file_writer configuration in default_config.yml,"[(416, '        **custom_config[""file_writer_config""],')]","[(405, '        ""break_into_partial_movies"": custom_config[""break_into_partial_movies""],')]",No
manimlib/default_config.yml,manimlib/default_config.yml,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,eda7f81fb96e519d720616305688854c236ab3fc,Allow more file_writer configuration in default_config.yml,"[(31, 'file_writer_config:'), (32, '  # If break_into_partial_movies is set to True, then many small'), (33, '  # files will be written corresponding to each Scene.play and'), (34, '  # Scene.wait call, and these files will then be combined'), (35, '  # to form the full scene.  Sometimes video-editing is made'), (36, '  # easier when working with the broken up scene, which'), (37, '  # effectively has cuts at all the places you might want.'), (38, '  break_into_partial_movies: False'), (39, '  video_codec: ""libx264""'), (40, '  pixel_format: ""yuv420p""'), (41, '  saturation: 1.0'), (42, '  gamma: 1.0')]","[(31, '# If break_into_partial_movies is set to True, then many small'), (32, '# files will be written corresponding to each Scene.play and'), (33, '# Scene.wait call, and these files will then be combined'), (34, '# to form the full scene.  Sometimes video-editing is made'), (35, '# easier when working with the broken up scene, which'), (36, '# effectively has cuts at all the places you might want.'), (37, 'break_into_partial_movies: False')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"[(72, '    data_dtype: np.dtype = np.dtype(['), (136, '        self.data = np.zeros(length, dtype=self.data_dtype)')]","[(72, '    shader_dtype: np.dtype = np.dtype(['), (136, '        self.data = np.zeros(length, dtype=self.shader_dtype)')]",No
manimlib/mobject/types/dot_cloud.py,manimlib/mobject/types/dot_cloud.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"[(29, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]","[(29, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]",No
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"[(22, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]","[(22, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]",No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"[(29, '    data_dtype: np.dtype = np.dtype(['), (292, '    data_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]","[(29, '    shader_dtype: np.dtype = np.dtype(['), (292, '    shader_dtype: Sequence[Tuple[str, type, Tuple[int]]] = [')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"[(68, '    data_dtype: np.dtype = np.dtype([')]","[(68, '    shader_dtype: np.dtype = np.dtype([')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,09bed1f8f48ca8d6c3694ba4d6e533193ba202f3,Rename shader_dtype -> data_dtype,"[(267, '        # if self.pixel_format.startswith(""yuv""):'), (268, ""        vf_arg += f',eq=saturation={self.saturation}:gamma={self.gamma}'"")]","[(267, '        if self.pixel_format.startswith(""yuv""):'), (268, ""            vf_arg += f',eq=saturation={self.saturation}:gamma={self.gamma}'"")]",No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","[(31, ""        ('du_point', np.float32, (3,)),""), (32, ""        ('dv_point', np.float32, (3,)),""), (35, ""    pointlike_data_keys = ['point', 'du_point', 'dv_point']""), (51, '        epsilon: float = 1e-4,'), (100, ""        self.data['du_point'][:] = du_points""), (101, ""        self.data['dv_point'][:] = dv_points""), (133, ""            self.data['du_point'] - points,""), (134, ""            self.data['dv_point'] - points,""), (136, '        return normalize_along_axis(crosses, 1)'), (270, ""        ('du_point', np.float32, (3,)),""), (271, ""        ('dv_point', np.float32, (3,)),""), (315, ""        self.data['du_point'][:] = surf.data['du_point']""), (316, ""        self.data['dv_point'][:] = surf.data['dv_point']"")]","[(31, ""        ('normal', np.float32, (3,)),""), (49, '        epsilon: float = 1e-5,'), (98, '        self.data[""normal""] = normalize_along_axis(cross('), (99, '            (du_points - points) / self.epsilon,'), (100, '            (dv_points - points) / self.epsilon,'), (101, '        ), 1)'), (131, '        nu, nv = self.resolution'), (132, '        indices = np.arange(nu * nv)'), (133, '        if len(indices) == 0:'), (134, '            return np.zeros((3, 0))'), (135, ''), (136, '        # For each point, find two adjacent points at indices'), (137, '        # step1 and step2, such that crossing points[step1] - points'), (138, '        # with points[step1] - points gives a normal vector'), (139, '        step1 = indices + 1'), (140, '        step2 = indices + nu'), (141, ''), (142, '        # Right edge'), (143, '        step1[nu - 1::nu] = indices[nu - 1::nu] + nu'), (144, '        step2[nu - 1::nu] = indices[nu - 1::nu] - 1'), (145, ''), (146, '        # Bottom edge'), (147, '        step1[-nu:] = indices[-nu:] - nu'), (148, '        step2[-nu:] = indices[-nu:] + 1'), (149, ''), (150, '        # Lower right point'), (151, '        step1[-1] = indices[-1] - 1'), (152, '        step2[-1] = indices[-1] - nu'), (153, ''), (156, '            points[step2] - points,'), (157, '            points[step1] - points,'), (159, '        self.data[""normal""] = normalize_along_axis(crosses, 1)'), (160, '        return self.data[""normal""]'), (294, ""        ('normal', np.float32, (3,)),""), (338, ""        self.data['normal'][:] = surf.data['normal']"")]",No
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","[(6, 'in vec3 du_point;'), (7, 'in vec3 dv_point;'), (8, '// in vec3 normal;'), (19, '    vec3 normal = cross(normalize(du_point - point), normalize(dv_point - point));')]","[(6, 'in vec3 normal;')]",No
manimlib/shaders/textured_surface/frag.glsl,manimlib/shaders/textured_surface/frag.glsl,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","[(8, 'in vec3 v_unit_normal;'), (24, '            v_unit_normal'), (33, '        v_unit_normal')]","[(8, 'in vec3 v_normal;'), (24, '            normalize(v_normal)'), (33, '        normalize(v_normal)')]",No
manimlib/shaders/textured_surface/vert.glsl,manimlib/shaders/textured_surface/vert.glsl,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,c8d5e914228d5c607da2ed2cdcdf4733eb0a94ba,"For Surface, calculate normals with neighboring points","[(4, 'in vec3 du_point;'), (5, 'in vec3 dv_point;'), (10, 'out vec3 v_unit_normal;'), (19, '    v_unit_normal = normalize(cross('), (20, '        normalize(du_point - point),'), (21, '        normalize(dv_point - point)'), (22, '    ));')]","[(4, 'in vec3 normal;'), (9, 'out vec3 v_normal;'), (18, '    v_normal = normal;')]",No
manimlib/animation/fading.py,manimlib/animation/fading.py,bd2947be2893ad2fab83f8c725bd962eb91152a2,9a7bfdd1c93c50ae6e94dd5d549fde15f8d2ec98,Use preferred group type for FadeTransform,"[(106, '        super().__init__(mobject.get_group_class()(mobject, target_mobject.copy()), **kwargs)')]","[(106, '        super().__init__(Group(mobject, target_mobject.copy()), **kwargs)')]",No
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,ada66ee8fb0a70948fa10ca70b64b037b5683251,bd2947be2893ad2fab83f8c725bd962eb91152a2,Remove stray comment,[],"[(8, '// in vec3 normal;')]",No
example_scenes.py,example_scenes.py,e4007f6915daf03766fabc8fbf2a579111dbbe9f,ada66ee8fb0a70948fa10ca70b64b037b5683251,Add glow dot to show light in SurfaceExample,"[(633, '        light_dot = GlowDot(color=WHITE, radius=0.5)'), (634, '        light_dot.always.move_to(light)'), (635, '        self.add(light, light_dot)')]","[(633, '        self.add(light)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,bcafcbf49051609c2eaa1d5db71c7af8cd9d7cc8,e4007f6915daf03766fabc8fbf2a579111dbbe9f,"Don't have VMobject refresh joint angles on shift, scale and rotate","[(1281, '    # General calls to apply_points_function should trigger a refresh'), (1282, ""    # to the joint angles, but these common ones shouldn't""), (1283, '    def dont_refresh_joint_angles(func: Callable):'), (1284, '        @wraps(func)'), (1285, '        def wrapper(self, *args, **kwargs):'), (1286, '            nnja = self.needs_new_joint_angles'), (1287, '            result = func(self, *args, **kwargs)'), (1288, '            self.needs_new_joint_angles = nnja'), (1289, '            return result'), (1290, '        return wrapper'), (1291, ''), (1292, '    @dont_refresh_joint_angles'), (1293, '    def shift(self, *args, **kwargs) -> Self:'), (1294, '        return super().shift(*args, **kwargs)'), (1295, ''), (1296, '    @dont_refresh_joint_angles'), (1297, '    def scale(self, *args, **kwargs) -> Self:'), (1298, '        return super().scale(*args, **kwargs)'), (1299, ''), (1300, '    @dont_refresh_joint_angles'), (1301, '    def rotate(self, *args, **kwargs) -> Self:'), (1302, '        return super().rotate(*args, **kwargs)'), (1303, '')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,a08523d746375c7e648e03690be4c565cc50d284,bcafcbf49051609c2eaa1d5db71c7af8cd9d7cc8,Fix get_subpath_end_indices_from_points,"[(739, '        atol = self.tolerance_for_point_equality'), (740, '        a0, h, a1 = points[0:-1:2], points[1::2], points[2::2]'), (743, '        # To disambiguate this from cases with many null'), (744, '        # curves in a row, we also check that the following'), (745, '        # anchor is genuinely distinct'), (746, '        is_end = (a0 == h).all(1) & (abs(h - a1) > atol).any(1)')]","[(739, '        a0, h = points[0:-1:2], points[1::2]'), (742, '        is_end = (a0 == h).all(1)')]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,5d6a1f30c40b8381bd2e835a9f687c86cd163e40,a08523d746375c7e648e03690be4c565cc50d284,Count joints near 180 degrees as straight,"[(94, '    if (abs(cos_angle) > COS_THRESHOLD) return step;')]","[(94, '    if (cos_angle > COS_THRESHOLD) return step;')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c26ebfc10f00006556004c684c91cd6a8f74ef8b,5d6a1f30c40b8381bd2e835a9f687c86cd163e40,Have is_closed use the last path,"[(582, '        ends = self.get_subpath_end_indices()'), (583, '        last_path_start = self.get_points()[0 if len(ends) == 1 else ends[-2] + 2]'), (592, '        ends = self.get_subpath_end_indices()'), (593, '        last_path_start = points[0 if len(ends) == 1 else ends[-2] + 2]'), (594, '        return self.consider_points_equal(last_path_start, points[-1])')]","[(582, '        last_path_start = self.get_subpaths()[-1][0]'), (591, '        return self.consider_points_equal(points[0], points[-1])')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,e939e1de0942cbe7bb721daf5f7a8308d699281b,c26ebfc10f00006556004c684c91cd6a8f74ef8b,Tweak the correction for angle_diffs in get_joint_angles,"[(1224, '        angle_diffs[angle_diffs < -PI] += TAU'), (1225, '        angle_diffs[angle_diffs > PI] -= TAU'), (1226, '        self.data[""joint_angle""][:, 0] = angle_diffs')]","[(1224, '        self.data[""joint_angle""][:, 0] = (angle_diffs + PI) % TAU - PI')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,487c714d9b49aa3396593ed82e55bebc349c363a,e939e1de0942cbe7bb721daf5f7a8308d699281b,Remove stray new line,[],"[(30, '')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,499803159c06ec49c9951e7ebfed5d8753d4502d,487c714d9b49aa3396593ed82e55bebc349c363a,Remove methods and tracking associated with triangulation and non-winding fill,[],"[(311, '            if not self._use_winding_fill:'), (312, '                self.subdivide_intersections()')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,499803159c06ec49c9951e7ebfed5d8753d4502d,487c714d9b49aa3396593ed82e55bebc349c363a,Remove methods and tracking associated with triangulation and non-winding fill,"[(432, '        # Only keeping this here because some old scene call it'), (1075, ""            return np.zeros(0, dtype='i4')"")]","[(100, '        use_winding_fill: bool = True,'), (116, '        self._use_winding_fill = use_winding_fill'), (118, '        self.needs_new_triangulation = True'), (119, ""        self.triangulation = np.zeros(0, dtype='i4')""), (435, '    @Mobject.affects_family_data'), (437, '        for submob in self.get_family(recurse):'), (438, '            submob._use_winding_fill = value'), (439, '            if not value and submob.has_points():'), (440, '                submob.subdivide_intersections()'), (923, '        winding = self._use_winding_fill and vmobject._use_winding_fill'), (924, '        if winding != self._use_winding_fill:'), (925, '            self.use_winding_fill(winding)'), (926, '        if winding != vmobject._use_winding_fill:'), (927, '            vmobject.use_winding_fill(winding)'), (929, '            # If both have fill, and they have the same shape, just'), (930, ""            # give them the same triangulation so that it's not recalculated""), (931, '            # needlessly throughout an animation'), (932, '            match_tris = not self._use_winding_fill and \\'), (933, '                         self.has_fill() and \\'), (934, '                         vmobject.has_fill() and \\'), (935, '                         self.has_same_shape_as(vmobject)'), (936, '            if match_tris:'), (937, '                vmobject.triangulation = self.triangulation'), (1022, '    def interpolate('), (1023, '        self,'), (1024, '        mobject1: VMobject,'), (1025, '        mobject2: VMobject,'), (1026, '        alpha: float,'), (1027, '        *args, **kwargs'), (1028, '    ) -> Self:'), (1029, '        super().interpolate(mobject1, mobject2, alpha, *args, **kwargs)'), (1030, ''), (1031, '        if not self._use_winding_fill and self.has_fill():'), (1032, '            tri1 = mobject1.get_triangulation()'), (1033, '            tri2 = mobject2.get_triangulation()'), (1034, '            if not arrays_match(tri1, tri2):'), (1035, '                self.refresh_triangulation()'), (1036, '        return self'), (1037, ''), (1106, '    def refresh_triangulation(self) -> Self:'), (1107, '        for mob in self.get_family():'), (1108, '            mob.needs_new_triangulation = True'), (1109, '        return self'), (1110, ''), (1115, '        if not self.needs_new_triangulation:'), (1116, '            return self.triangulation'), (1117, ''), (1121, ""            self.triangulation = np.zeros(0, dtype='i4')""), (1122, '            self.needs_new_triangulation = False'), (1123, '            return self.triangulation'), (1163, '        self.triangulation = tri_indices'), (1164, '        self.needs_new_triangulation = False'), (1241, '                self.refresh_triangulation()'), (1317, '            if not submob._use_winding_fill:'), (1318, '                submob.get_triangulation()')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,566fc87a60e839a7a74be0c5d986d3be7d1a7bb2,499803159c06ec49c9951e7ebfed5d8753d4502d,Don't keep an outer_vert_indices attribute,"[(1051, '        n_curves = self.get_num_curves()'), (1052, '        # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1053, '        return (np.arange(1, 3 * n_curves + 1) * 2) // 3')]","[(119, ""        self.outer_vert_indices = np.zeros(0, dtype='i4')""), (1048, '    def resize_points('), (1049, '        self,'), (1050, '        new_length: int,'), (1051, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1052, '    ) -> Self:'), (1053, '        super().resize_points(new_length, resize_func)'), (1054, ''), (1055, '        n_curves = self.get_num_curves()'), (1056, '        # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1057, '        self.outer_vert_indices = (np.arange(1, 3 * n_curves + 1) * 2) // 3'), (1058, '        return self'), (1059, ''), (1064, '        return self.outer_vert_indices')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,fcc5dc00f9c6bc8f11f93d29a04d24bafb40e8d2,566fc87a60e839a7a74be0c5d986d3be7d1a7bb2,Treat objects fixed in frame as having flat stroke,"[(282, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)')]","[(282, '            rect = FullScreenRectangle().set_stroke(RED, 30, flat=True).set_fill(opacity=0)')]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,fcc5dc00f9c6bc8f11f93d29a04d24bafb40e8d2,566fc87a60e839a7a74be0c5d986d3be7d1a7bb2,Treat objects fixed in frame as having flat stroke,"[(7, 'uniform float flat_stroke_float;'), (66, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve, bool flat_stroke){'), (72, '    vec3 unit_tan = normalize(flat_stroke ? tangent : project(tangent, unit_normal));'), (97, '    if (!flat_stroke){'), (131, '    bool inside_curve,'), (132, '    bool flat_stroke'), (135, '    vec3 unit_normal = flat_stroke ? v_unit_normal[1] : normalize(camera_position - point);'), (142, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve, flat_stroke);'), (171, '    bool flat_stroke = bool(flat_stroke_float) || bool(is_fixed_in_frame);'), (215, '            inside_curve, flat_stroke')]","[(7, 'uniform float flat_stroke;'), (66, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve){'), (72, '    vec3 unit_tan = normalize(flat_stroke == 0.0 ? project(tangent, unit_normal) : tangent);'), (97, '    if (flat_stroke == 0){'), (131, '    bool inside_curve'), (134, '    vec3 unit_normal = bool(flat_stroke) ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve);'), (213, '            inside_curve')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,513de196574d70716207b0debae1b1acf5db848d,fcc5dc00f9c6bc8f11f93d29a04d24bafb40e8d2,Clarify that ShaderWrapper id is an int,"[(108, '    def get_id(self) -> int:')]","[(108, '    def get_id(self) -> str:')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,a823901b980ff4184b9d46eb24cbe9a0c97f6bb5,513de196574d70716207b0debae1b1acf5db848d,"Only form render groups from Mobjects of the same type

I.e. bias against forming such groups","[(391, '            lambda m: str(type(m)) + str(m.get_shader_wrapper(self.camera.ctx).get_id())'), (397, '            batch[0].get_group_class()(*batch) if len(batch) > 1 else batch[0]')]","[(391, '            lambda m: m.get_shader_wrapper(self.camera.ctx).get_id()'), (397, '            batch[0].get_group_class()(*batch)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,8785eb1844d80f1dfb0bbae5c2ff8368290abbda,a823901b980ff4184b9d46eb24cbe9a0c97f6bb5,Don't have quiet default changes to stroke_behind,"[(90, '        stroke_behind: bool = False,')]","[(90, '        stroke_behind: Optional[bool] = None,'), (167, '        if self.has_fill() and not self.has_stroke():'), (168, '            self.set_stroke(behind=True)'), (191, '        if behind is None and self.has_stroke() and not self.has_fill():'), (192, '            behind = False')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,51de1fb6509f0fb2bf05523e49c71e9fa88c62f1,8785eb1844d80f1dfb0bbae5c2ff8368290abbda,For some reason RenderGroups must be groups for camera reorientation to function,"[(397, '            batch[0].get_group_class()(*batch)')]","[(397, '            batch[0].get_group_class()(*batch) if len(batch) > 1 else batch[0]')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,441ac77eae476897834e939a2950abc1a007e901,51de1fb6509f0fb2bf05523e49c71e9fa88c62f1,Change Euler axis limits for xz flat plane,"[(75, '        if self.euler_axes == ""zxz"":'), (76, '            if np.isclose(angles[1], 0, atol=1e-2):'), (77, '                angles[0] = angles[0] + angles[2]'), (78, '                angles[2] = 0'), (79, '            if np.isclose(angles[1], PI, atol=1e-2):'), (80, '                angles[0] = angles[0] - angles[2]'), (81, '                angles[2] = 0'), (157, ''), (158, '        # Limit range for phi'), (159, '        if self.euler_axes == ""zxz"":'), (160, '            new_angles[1] = clip(new_angles[1], 0, PI)'), (161, '        elif self.euler_axes == ""zxy"":'), (162, '            new_angles[1] = clip(new_angles[1], -PI / 2, PI / 2)'), (163, '')]","[(75, '        if np.isclose(angles[1], 0, atol=1e-2):'), (76, '            angles[0] = angles[0] + angles[2]'), (77, '            angles[2] = 0'), (78, '        if np.isclose(angles[1], PI, atol=1e-2):'), (79, '            angles[0] = angles[0] - angles[2]'), (80, '            angles[2] = 0'), (156, '        new_angles[1] = clip(new_angles[1], 0, PI)  # Limit range for phi')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,827f4db5e2055fdfba500535203652a997e30a27,441ac77eae476897834e939a2950abc1a007e901,Clarify where normal is being inverted,"[(1199, '            mob.data[""base_normal""][1::2] *= -1  # Invert normal vector')]","[(1199, '            mob.data[""base_normal""][1::2] *= -1')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,cd5c436ce46b1ecda86a02b0ce9be48a5ef7e5e3,827f4db5e2055fdfba500535203652a997e30a27,"Tighter (albeit arbitrary) constraint on path end detection

This is really not great","[(729, '        atol = 1e-4  # TODO, this is too unsystematic')]","[(729, '        atol = self.tolerance_for_point_equality')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,36ea70d99044bf040c2db9e4fba3f436f647160b,cd5c436ce46b1ecda86a02b0ce9be48a5ef7e5e3,Remove whitespace,"[(723, '        return (points[2 * i:2 * i + 3] for i in range(n_curves))')]","[(723, '        return (points[2 * i : 2 * i + 3] for i in range(n_curves))')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,5cf5e497e7a5855c8028fba324416f5f387051f6,7519ce15da200b692f8620964fecfa99778b6c3f,"Don't have joint_angles, unit_normal and path_end_indices get refreshed for shift/scale/rotate

Change unit_normal directly in rotate
In general, don't trigger refresh on apply_points_function","[(49, 'from manimlib.utils.space_ops import rotation_matrix_transpose'), (869, '    def get_unit_normal(self, refresh: bool = False) -> Vect3:'), (873, '        if not self.needs_new_unit_normal and not refresh:'), (1222, '    def stretch(self, *args, **kwargs) -> Self:'), (1223, '        return super().stretch(*args, **kwargs)'), (1225, '    @triggers_refresh'), (1226, '    def apply_matrix(self, *args, **kwargs) -> Self:'), (1227, '        return super().apply_matrix(*args, **kwargs)'), (1229, '    def rotate('), (1230, '        self,'), (1231, '        angle: float,'), (1232, '        axis: Vect3 = OUT,'), (1233, '        about_point: Vect3 | None = None,'), (1234, '        **kwargs'), (1235, '    ) -> Self:'), (1236, '        rot_matrix_T = rotation_matrix_transpose(angle, axis)'), (1237, '        self.apply_points_function('), (1238, '            lambda points: np.dot(points, rot_matrix_T),'), (1239, '            about_point,'), (1240, '            **kwargs'), (1241, '        )'), (1242, '        self.data[""base_normal""][1::2] = np.dot(self.data[""base_normal""][1::2], rot_matrix_T)'), (1243, '        return self')]","[(868, '    def get_unit_normal(self) -> Vect3:'), (872, '        if not self.needs_new_unit_normal:'), (1221, '    def apply_points_function(self, *args, **kwargs) -> Self:'), (1222, '        return super().apply_points_function(*args, **kwargs)'), (1224, '    # General calls to apply_points_function should trigger a refresh'), (1225, ""    # to the joint angles, but these common ones shouldn't""), (1226, '    def dont_refresh_joint_angles(func: Callable):'), (1227, '        @wraps(func)'), (1228, '        def wrapper(self, *args, **kwargs):'), (1229, '            nnja = self.needs_new_joint_angles'), (1230, '            result = func(self, *args, **kwargs)'), (1231, '            self.needs_new_joint_angles = nnja'), (1232, '            return result'), (1233, '        return wrapper'), (1234, ''), (1235, '    @dont_refresh_joint_angles'), (1236, '    def shift(self, *args, **kwargs) -> Self:'), (1237, '        return super().shift(*args, **kwargs)'), (1238, ''), (1239, '    @dont_refresh_joint_angles'), (1240, '    def scale(self, *args, **kwargs) -> Self:'), (1241, '        return super().scale(*args, **kwargs)'), (1243, '    @dont_refresh_joint_angles'), (1244, '    def rotate(self, *args, **kwargs) -> Self:'), (1245, '        return super().rotate(*args, **kwargs)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,55a798676ac2bc6737c425f3d018713c1b560985,5cf5e497e7a5855c8028fba324416f5f387051f6,Always stop skipping after checkpoint_paste,"[(796, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (818, '        self.stop_skipping()')]","[(796, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (803, '        prev_skipping = self.skip_animations'), (819, '        self.skip_animations = prev_skipping')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,22a6b47ec99e4e613f2a1ffacabcdcb29e53c19b,55a798676ac2bc6737c425f3d018713c1b560985,Always recompute unit normals on rotate,"[(1242, '        for mob in self.get_family():'), (1243, '            mob.get_unit_normal(refresh=True)')]","[(1242, '        self.data[""base_normal""][1::2] = np.dot(self.data[""base_normal""][1::2], rot_matrix_T)')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,e85a1ce1b792333b535b8d457037605d8a952d3a,22a6b47ec99e4e613f2a1ffacabcdcb29e53c19b,Add Arrow.set_perpendicular_to_camera,"[(32, 'from manimlib.utils.space_ops import rotation_between_vectors'), (886, '    def set_perpendicular_to_camera(self, camera_frame):'), (887, '        to_cam = camera_frame.get_implied_camera_location() - self.get_center()'), (888, '        normal = self.get_unit_normal()'), (889, '        axis = normalize(self.get_vector())'), (890, '        # Project to be perpendicular to axis'), (891, '        trg_normal = to_cam - np.dot(to_cam, axis) * axis'), (892, '        mat = rotation_between_vectors(normal, trg_normal)'), (893, '        self.apply_matrix(mat)'), (894, '        return self'), (895, '')]",[],No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,1e996dcd27455a2649801e292b560675cc80ad45,e85a1ce1b792333b535b8d457037605d8a952d3a,Fix Arrow.set_perpendicular_to_camera,"[(893, '        self.apply_matrix(mat, about_point=self.get_start())')]","[(893, '        self.apply_matrix(mat)')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,04d77f2bec15e3fe4a3f97cf8dc7c3e8e1a7fa66,1e996dcd27455a2649801e292b560675cc80ad45,Fix joint angle for lines,"[(1147, '            if start == end:')]","[(1147, '            if start >= end - 2:')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,054261d86f792dbac164d42675cc65ae125be31f,04d77f2bec15e3fe4a3f97cf8dc7c3e8e1a7fa66,Add zero point edge case for point_from_proportion,"[(808, '        if self.get_num_points() == 0:'), (809, '            return self.get_center()')]",[],No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f378d33d0171807545af33bd10891471d224dad6,054261d86f792dbac164d42675cc65ae125be31f,Use doubled fill canvas so antialiasing doesn't depend on border width,"[(398, '        double_size = (2 * size[0], 2 * size[1])'), (402, ""        fill_texture = ctx.texture(size=double_size, components=4, dtype='f2')"")]","[(401, ""        fill_texture = ctx.texture(size=size, components=4, dtype='f2')"")]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,2836acc3c7a990765ecdc1753f2cae7a989a62be,f378d33d0171807545af33bd10891471d224dad6,Have Write default stroke color match that of the mobject,"[(152, '        stroke_color: ManimColor = None,'), (155, '        if stroke_color is None:'), (156, '            stroke_color = vmobject.get_color()')]","[(152, '        stroke_color: ManimColor = WHITE,')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,a713868f3d5e94740915e25b5995a5cb1099fe73,2836acc3c7a990765ecdc1753f2cae7a989a62be,Add Mobject.get_opacities,"[(1407, '    def get_opacities(self) -> float:'), (1408, '        return self.data[""rgba""][:, 3]'), (1409, '')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,76fdd02db05a6cdd6236c3b0a7a8ebace9586a7d,a713868f3d5e94740915e25b5995a5cb1099fe73,"Go back to default fill border width of 0, except for String","[(100, '        fill_border_width: float = 0.0,')]","[(100, '        fill_border_width: float = 0.5,')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,e7c540f4159e1dc0ba25e3f4273907942aa50c61,76fdd02db05a6cdd6236c3b0a7a8ebace9586a7d,"Move texture id tracking to ShaderWrapper

Rather than having a globally unique id for each texture, dynamically allocate new texure ids within each ShaderWrapper, so that there is no upper bound on how many textures can be used.","[(51, '        self.texture_paths = texture_paths or dict()'), (60, '        self.init_textures()'), (92, '    def init_textures(self):'), (93, '        self.texture_names_to_ids = dict()'), (94, '        self.textures = []'), (95, '        for name, path in self.texture_paths.items():'), (96, '            self.add_texture(name, image_path_to_texture(path, self.ctx))'), (102, '    def add_texture(self, name: str, texture: moderngl.Texture):'), (103, ""        max_units = self.ctx.info['GL_MAX_TEXTURE_IMAGE_UNITS']""), (104, '        if len(self.textures) >= max_units:'), (105, '            raise ValueError(f""Unable to use more than {max_units} textures for a program"")'), (106, '        # The position in the list determines its id'), (107, '        self.texture_names_to_ids[name] = len(self.textures)'), (108, '        self.textures.append(texture)'), (109, ''), (122, '            self.texture_paths,'), (190, '        for tid, texture in enumerate(self.textures):'), (191, '            texture.use(tid)'), (211, '    def release_textures(self):'), (212, '        for texture in self.textures:'), (213, '            texture.release()'), (214, '            del texture'), (215, '        self.textures = []'), (216, '        self.texture_names_to_ids = dict()'), (217, ''), (244, ""        self.add_texture('Texture', self.fill_canvas[0].color_attachments[0])""), (245, ""        self.add_texture('DepthTexture', self.fill_canvas[2].color_attachments[0])"")]","[(18, 'from manimlib.utils.shaders import get_texture_id'), (19, 'from manimlib.utils.shaders import release_texture'), (53, '        self.texture_names_to_ids = dict()'), (62, '        if texture_paths is not None:'), (63, '            self.init_textures(texture_paths)'), (95, '    def init_textures(self, texture_paths: dict[str, str]):'), (96, '        self.texture_names_to_ids = {'), (97, '            name: get_texture_id(image_path_to_texture(path, self.ctx))'), (98, '            for name, path in texture_paths.items()'), (99, '        }'), (117, '            self.texture_names_to_ids,'), (444, ""        fill_program['Texture'].value = get_texture_id(fill_texture)""), (445, ""        fill_program['DepthTexture'].value = get_texture_id(depth_texture)""), (446, '')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,e7c540f4159e1dc0ba25e3f4273907942aa50c61,76fdd02db05a6cdd6236c3b0a7a8ebace9586a7d,"Move texture id tracking to ShaderWrapper

Rather than having a globally unique id for each texture, dynamically allocate new texure ids within each ShaderWrapper, so that there is no upper bound on how many textures can be used.","[(22, '# Global maps to reflect uniform status')]","[(22, '# Global maps updated as textures are allocated'), (23, 'ID_TO_TEXTURE: dict[int, moderngl.Texture] = dict()'), (37, 'def get_texture_id(texture: moderngl.Texture) -> int:'), (38, '    tid = 0'), (39, '    while tid in ID_TO_TEXTURE:'), (40, '        tid += 1'), (41, '    ID_TO_TEXTURE[tid] = texture'), (42, '    texture.use(location=tid)'), (43, '    return tid'), (44, ''), (45, ''), (46, 'def release_texture(texture_id: int):'), (47, '    texture = ID_TO_TEXTURE.pop(texture_id, None)'), (48, '    if texture is not None:'), (49, '        texture.release()'), (50, ''), (51, '')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,8f1299929fd97543711169e3e61cf25fe77fa1fe,e7c540f4159e1dc0ba25e3f4273907942aa50c61,Swap window buffer after blit from another fbo,"[(237, '                self.window.swap_buffers()')]",[],No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,133cec97259dbeceb4b91165d59ee0fc01af06eb,0b5e9d4a8bda88a9ccd69477e3d80b5512c61160,zorder -> z_index,"[(86, '        z_index: int = 0,')]","[(86, '        zorder: int = 0,')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,c8326d1ccefe8fc32377040d3af33aecda91bf50,133cec97259dbeceb4b91165d59ee0fc01af06eb,zorder -> z_index,"[(94, '        self.z_index = z_index')]","[(94, '        self.zorder = zorder')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,08f7cb8d3e82e553ba481077391cea0d003be789,c8326d1ccefe8fc32377040d3af33aecda91bf50,zorder -> z_index,"[(423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.z_index, m._scene_order))')]","[(423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.zorder,m._scene_order))')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,1f55832a6afe166b054a8497daf85e264582de66,aebf2220a6c5b840bbebea1501b8806a38a083b7,Clean up around z_index,"[(32, '        # This keeps it ordered first in a scene'), (33, '        z_index=-1,'), (36, '        super().__init__(z_index=z_index, **kwargs)')]","[(34, '        super().__init__(**kwargs)')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,1f55832a6afe166b054a8497daf85e264582de66,aebf2220a6c5b840bbebea1501b8806a38a083b7,Clean up around z_index,"[(1248, '    def set_z_index(self, z_index: int) -> Self:'), (1249, '        self.z_index = z_index'), (1250, '        return self'), (1251, '')]","[(97, '        self._scene_order = 0')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,1f55832a6afe166b054a8497daf85e264582de66,aebf2220a6c5b840bbebea1501b8806a38a083b7,Clean up around z_index,"[(418, ''), (419, '        # Reorder based on z_index'), (420, '        id_to_scene_order = {id(m): idx for idx, m in enumerate(self.mobjects)}'), (421, '        self.mobjects.sort(key=lambda m: (m.z_index, id_to_scene_order[id(m)]))'), (422, '')]","[(417, '        idx = 0'), (418, '        scene_order = len(self.mobjects)'), (419, '        for m in new_mobjects:'), (420, '            m._scene_order = scene_order+idx'), (421, '            idx += 1'), (423, '        self.mobjects = [self.mobjects[0]]+sorted(self.mobjects[1:], key=lambda m:(m.z_index, m._scene_order))')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"[(9, 'from manimlib.constants import ASPECT_RATIO'), (13, 'from manimlib.constants import FRAME_HEIGHT'), (250, '            frame_rescale_factors=('), (251, '                2.0 / FRAME_WIDTH,'), (252, '                2.0 / FRAME_HEIGHT,'), (253, '                frame.get_scale() / frame.get_focal_distance(),'), (254, '            ),')]","[(247, '            focal_distance=frame.get_focal_distance() / frame.get_scale(),')]",No
manimlib/config.py,manimlib/config.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"[(526, ''), (530, ''), (535, ''), (540, ''), (543, ""    return cam_config['pixel_height']"")]","[(539, ""    return cam_config['pixel_height']"")]",No
manimlib/constants.py,manimlib/constants.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"[(4, 'from manimlib.config import get_aspect_ratio'), (5, 'from manimlib.config import get_default_pixel_width'), (6, 'from manimlib.config import get_default_pixel_height'), (7, 'from manimlib.config import get_frame_height')]","[(4, 'from manimlib.config import get_aspect_ratio,get_default_pixel_width,get_default_pixel_height,get_frame_height')]",No
manimlib/shaders/inserts/emit_gl_Position.glsl,manimlib/shaders/inserts/emit_gl_Position.glsl,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,"[(4, 'uniform vec3 frame_rescale_factors;'), (11, '    result.xyz *= frame_rescale_factors;')]","[(4, ''), (5, 'const float DEFAULT_FRAME_HEIGHT = 8.0;'), (6, 'const float ASPECT_RATIO = 16.0 / 9.0;'), (7, 'const float X_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT / ASPECT_RATIO;'), (8, 'const float Y_SCALE = 2.0 / DEFAULT_FRAME_HEIGHT;'), (15, '    result.x *= X_SCALE;'), (16, '    result.y *= Y_SCALE;'), (17, '    result.z /= focal_distance;')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,6d23df0497f16d442fcc5044d5664697c4c07b3e,05a89d754e1a3c060ac3845a4493f06eb39b73c6,Clean up changes associated with fixing aspect ratio issue,[],"[(10, 'from manimlib.config import parse_cli'), (11, 'from manimlib.config import get_configuration'), (12, 'from manimlib.constants import ASPECT_RATIO'), (101, ''), (102, '        result = re.sub(r""\\s+ASPECT_RATIO\\s+=\\s+[\\s0-9/.]+"", f"" ASPECT_RATIO = {ASPECT_RATIO}"", result)')]",No
manimlib/mobject/types/image_mobject.py,manimlib/mobject/types/image_mobject.py,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,9eda000a9778c733ba37497f032931a4a3e21b1d,Tweak moderngl import in ImageMobject,"[(4, 'import moderngl'), (28, '    render_primitive: int = moderngl.TRIANGLES')]","[(5, 'from moderngl import TRIANGLES'), (28, '    render_primitive: int = TRIANGLES')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,"[(145, '            ""clip_plane"": np.zeros(4),'), (1950, '    def set_clip_plane('), (1951, '        self,'), (1952, '        vect: Vect3 | None = None,'), (1953, '        threshold: float | None = None'), (1954, '    ) -> Self:'), (1955, '        if vect is not None:'), (1956, '            self.uniforms[""clip_plane""][:3] = vect'), (1957, '        if threshold is not None:'), (1958, '            self.uniforms[""clip_plane""][3] = threshold'), (1959, '        return self'), (1960, ''), (1961, '    def deactivate_clip_plane(self) -> Self:'), (1962, '        self.uniforms[""clip_plane""][:] = 0'), (1963, '        return self'), (1964, '')]",[],No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,[],"[(68, '    def init_uniforms(self):'), (69, '        super().init_uniforms()'), (70, '        self.uniforms[""clip_plane""] = np.zeros(4)'), (71, ''), (219, '    def set_clip_plane('), (220, '        self,'), (221, '        vect: Vect3 | None = None,'), (222, '        threshold: float | None = None'), (223, '    ) -> Self:'), (224, '        if vect is not None:'), (225, '            self.uniforms[""clip_plane""][:3] = vect'), (226, '        if threshold is not None:'), (227, '            self.uniforms[""clip_plane""][3] = threshold'), (228, '        return self'), (229, ''), (230, '    def deactivate_clip_plane(self) -> Self:'), (231, '        self.uniforms[""clip_plane""][:] = 0'), (232, '        return self'), (233, '')]",No
manimlib/shaders/inserts/emit_gl_Position.glsl,manimlib/shaders/inserts/emit_gl_Position.glsl,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,"[(5, 'uniform vec4 clip_plane;'), (17, ''), (18, '    if(clip_plane.xyz != vec3(0.0, 0.0, 0.0)){'), (19, '        gl_ClipDistance[0] = dot(vec4(point, 1.0), clip_plane);'), (20, '    }')]",[],No
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,95fca885c920e469ca718e72d383f8790e3a6dca,8eac976c8dfe72d7f47bf9b1143b9d209c0793aa,Push clip plane functionality up to all Mobjects,[],"[(3, 'uniform vec4 clip_plane;'), (4, ''), (20, ''), (21, '    if(clip_plane.xyz != vec3(0.0, 0.0, 0.0)){'), (22, '        gl_ClipDistance[0] = dot(vec4(point, 1.0), clip_plane);'), (23, '    }')]",No
manimlib/utils/debug.py,manimlib/utils/debug.py,3e7244b90bd0d8ecee51d457f41678d8c40544f8,95fca885c920e469ca718e72d383f8790e3a6dca,Fix bad argument,"[(30, '        label.set_backstroke(BLACK, 5)')]","[(30, '        label.set_stroke(BLACK, 5, background=True)')]",No
manimlib/utils/iterables.py,manimlib/utils/iterables.py,62a4ea5165617bf8f0472b1d5f1cbaf504d0a943,3e7244b90bd0d8ecee51d457f41678d8c40544f8,Update description of remove_list_redundancies,"[(19, '    Remove duplicate elements while preserving order.')]","[(19, '    Used instead of list(set(l)) to maintain order')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,080410930158588e380a8d8b3f462d9001afad89,62a4ea5165617bf8f0472b1d5f1cbaf504d0a943,Flatten uniform arrays,"[(70, '        value = tuple(value.flatten())')]","[(70, '        value = tuple(value)')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,217eb6b486cf0d1c8f6e0d9d6fb06593165bab3c,080410930158588e380a8d8b3f462d9001afad89,Move new VectorField from optics projects into main repo,"[(8, 'from manimlib.constants import BLUE, WHITE'), (9, 'from manimlib.constants import ORIGIN'), (19, 'from manimlib.utils.iterables import cartesian_product'), (123, ''), (124, 'class VectorField(VMobject):'), (125, '    def __init__('), (126, '        self,'), (127, '        func,'), (128, '        stroke_color: ManimColor = BLUE,'), (129, '        stroke_opacity: float = 1.0,'), (130, '        center: Vect3 = ORIGIN,'), (131, '        sample_points: Optional[Vect3Array] = None,'), (132, '        x_density: float = 2.0,'), (133, '        y_density: float = 2.0,'), (134, '        z_density: float = 2.0,'), (135, '        width: float = 14.0,'), (136, '        height: float = 8.0,'), (137, '        depth: float = 0.0,'), (138, '        stroke_width: float = 2,'), (139, '        tip_width_ratio: float = 4,'), (140, '        tip_len_to_width: float = 0.01,'), (141, '        max_vect_len: float | None = None,'), (142, '        min_drawn_norm: float = 1e-2,'), (143, '        flat_stroke: bool = False,'), (144, '        norm_to_opacity_func=None,'), (145, '        norm_to_rgb_func=None,'), (146, '        **kwargs'), (147, '    ):'), (148, '        self.func = func'), (149, '        self.stroke_width = stroke_width'), (150, '        self.tip_width_ratio = tip_width_ratio'), (151, '        self.tip_len_to_width = tip_len_to_width'), (152, '        self.min_drawn_norm = min_drawn_norm'), (153, '        self.norm_to_opacity_func = norm_to_opacity_func'), (154, '        self.norm_to_rgb_func = norm_to_rgb_func'), (155, ''), (156, '        if max_vect_len is not None:'), (157, '            self.max_vect_len = max_vect_len'), (158, '        else:'), (159, '            densities = np.array([x_density, y_density, z_density])'), (160, '            dims = np.array([width, height, depth])'), (161, '            self.max_vect_len = 1.0 / densities[dims > 0].mean()'), (162, ''), (163, '        if sample_points is None:'), (164, '            self.sample_points = self.get_sample_points('), (165, '                center, width, height, depth,'), (166, '                x_density, y_density, z_density'), (167, '            )'), (168, '        else:'), (169, '            self.sample_points = sample_points'), (170, ''), (171, '        self.init_base_stroke_width_array(len(self.sample_points))'), (172, ''), (173, '        super().__init__('), (174, '            stroke_color=stroke_color,'), (175, '            stroke_opacity=stroke_opacity,'), (176, '            flat_stroke=flat_stroke,'), (177, '            **kwargs'), (178, '        )'), (179, ''), (180, '        n_samples = len(self.sample_points)'), (181, '        self.set_points(np.zeros((8 * n_samples - 1, 3)))'), (182, '        self.set_stroke(width=stroke_width)'), (183, ""        self.set_joint_type('no_joint')""), (184, '        self.update_vectors()'), (185, ''), (186, '    def get_sample_points('), (187, '        self,'), (188, '        center: np.ndarray,'), (189, '        width: float,'), (190, '        height: float,'), (191, '        depth: float,'), (192, '        x_density: float,'), (193, '        y_density: float,'), (194, '        z_density: float'), (195, '    ) -> np.ndarray:'), (196, '        to_corner = np.array([width / 2, height / 2, depth / 2])'), (197, '        spacings = 1.0 / np.array([x_density, y_density, z_density])'), (198, '        to_corner = spacings * (to_corner / spacings).astype(int)'), (199, '        lower_corner = center - to_corner'), (200, '        upper_corner = center + to_corner + spacings'), (201, '        return cartesian_product(*('), (202, '            np.arange(low, high, space)'), (203, '            for low, high, space in zip(lower_corner, upper_corner, spacings)'), (204, '        ))'), (205, ''), (206, '    def init_base_stroke_width_array(self, n_sample_points):'), (207, '        arr = np.ones(8 * n_sample_points - 1)'), (208, '        arr[4::8] = self.tip_width_ratio'), (209, '        arr[5::8] = self.tip_width_ratio * 0.5'), (210, '        arr[6::8] = 0'), (211, '        arr[7::8] = 0'), (212, '        self.base_stroke_width_array = arr'), (213, ''), (214, '    def set_sample_points(self, sample_points: Vect3Array):'), (215, '        self.sample_points = sample_points'), (216, '        return self'), (217, ''), (218, '    def set_stroke(self, color=None, width=None, opacity=None, behind=None, flat=None, recurse=True):'), (219, '        super().set_stroke(color, None, opacity, behind, flat, recurse)'), (220, '        if width is not None:'), (221, '            self.set_stroke_width(float(width))'), (222, '        return self'), (223, ''), (224, '    def set_stroke_width(self, width: float):'), (225, '        if self.get_num_points() > 0:'), (226, '            self.get_stroke_widths()[:] = width * self.base_stroke_width_array'), (227, '            self.stroke_width = width'), (228, '        return self'), (229, ''), (230, '    def update_vectors(self):'), (231, '        tip_width = self.tip_width_ratio * self.stroke_width'), (232, '        tip_len = self.tip_len_to_width * tip_width'), (233, '        samples = self.sample_points'), (234, ''), (235, '        # Get raw outputs and lengths'), (236, '        outputs = self.func(samples)'), (237, '        norms = np.linalg.norm(outputs, axis=1)[:, np.newaxis]'), (238, ''), (239, '        # How long should the arrows be drawn?'), (240, '        max_len = self.max_vect_len'), (241, '        if max_len < np.inf:'), (242, '            drawn_norms = max_len * np.tanh(norms / max_len)'), (243, '        else:'), (244, '            drawn_norms = norms'), (245, ''), (246, ""        # What's the distance from the base of an arrow to""), (247, '        # the base of its head?'), (248, '        dist_to_head_base = np.clip(drawn_norms - tip_len, 0, np.inf)'), (249, ''), (250, '        # Set all points'), (251, '        unit_outputs = np.zeros_like(outputs)'), (252, '        np.true_divide(outputs, norms, out=unit_outputs, where=(norms > self.min_drawn_norm))'), (253, ''), (254, '        points = self.get_points()'), (255, '        points[0::8] = samples'), (256, '        points[2::8] = samples + dist_to_head_base * unit_outputs'), (257, '        points[4::8] = points[2::8]'), (258, '        points[6::8] = samples + drawn_norms * unit_outputs'), (259, '        for i in (1, 3, 5):'), (260, '            points[i::8] = 0.5 * (points[i - 1::8] + points[i + 1::8])'), (261, '        points[7::8] = points[6:-1:8]'), (262, ''), (263, '        # Adjust stroke widths'), (264, '        width_arr = self.stroke_width * self.base_stroke_width_array'), (265, '        width_scalars = np.clip(drawn_norms / tip_len, 0, 1)'), (266, '        width_scalars = np.repeat(width_scalars, 8)[:-1]'), (267, '        self.get_stroke_widths()[:] = width_scalars * width_arr'), (268, ''), (269, '        # Potentially adjust opacity and color'), (270, '        if self.norm_to_opacity_func is not None:'), (271, '            self.get_stroke_opacities()[:] = self.norm_to_opacity_func('), (272, '                np.repeat(norms, 8)[:-1]'), (273, '            )'), (274, '        if self.norm_to_rgb_func is not None:'), (275, '            self.get_stroke_colors()'), (276, ""            self.data['stroke_rgba'][:, :3] = self.norm_to_rgb_func(""), (277, '                np.repeat(norms, 8)[:-1]'), (278, '            )'), (279, ''), (280, '        self.note_changed_data()'), (281, '        return self'), (282, ''), (283, ''), (284, 'class TimeVaryingVectorField(VectorField):'), (285, '    def __init__('), (286, '        self,'), (287, '        # Takes in an array of points and a float for time'), (288, '        time_func,'), (289, '        **kwargs'), (290, '    ):'), (291, '        self.time = 0'), (292, '        super().__init__(func=lambda p: time_func(p, self.time), **kwargs)'), (293, '        self.add_updater(lambda m, dt: m.increment_time(dt))'), (294, '        always(self.update_vectors)'), (295, ''), (296, '    def increment_time(self, dt):'), (297, '        self.time += dt'), (298, ''), (299, ''), (300, 'class OldVectorField(VGroup):')]","[(8, 'from manimlib.constants import WHITE'), (121, 'class VectorField(VGroup):')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,1f8ad5be167081293b394bd89b0e71442a2a6eda,217eb6b486cf0d1c8f6e0d9d6fb06593165bab3c,Fix pfp for null curves,"[(769, '        if num_curves == 0:'), (770, '            return self.get_center()')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,ccb9977a67f65b6a957cdc83be726655fcf7fa50,9eda000a9778c733ba37497f032931a4a3e21b1d,"Update scene.py to make scene.time more accurate

When the time intervals are (0, dt, 2dt, ...), during the first frame processing, only the video is inserted, but the update parameter is 0, which causes scene.time to be inaccurate. The correct time intervals should be (dt, 2dt, ...)","[(555, '        times = np.arange(0, run_time, 1 / self.camera.fps) + 1 / self.camera.fps')]","[(555, '        times = np.arange(0, run_time, 1 / self.camera.fps)')]",No
manimlib/animation/animation.py,manimlib/animation/animation.py,fea7096cbe5eb1fb77d96ed1a1bc6a429366fe11,1f8ad5be167081293b394bd89b0e71442a2a6eda,Change default animation behavior to suspend_mobject_updating=False,"[(7, 'from manimlib.utils.iterables import remove_list_redundancies'), (41, '        # If set to True, the mobject itself will have its internal updaters called,'), (42, '        # but the start or target mobjects would not be suspended. To completely suspend'), (43, '        # updating, call mobject.suspend_updating() before the animation'), (44, '        suspend_mobject_updating: bool = False,'), (106, '        Transforms) target_mobject.'), (113, '        # updating of self.mobject.'), (118, '        items = remove_list_redundancies(items)')]","[(40, '        suspend_mobject_updating: bool = True,'), (68, ""            # All calls to self.mobject's internal updaters""), (69, '            # during the animation, either from this Animation'), (70, '            # or from the surrounding scene, should do nothing.'), (71, '            # It is, however, okay and desirable to call'), (72, '            # the internal updaters of self.starting_mobject,'), (73, '            # or any others among self.get_all_mobjects()'), (108, '        Transforms) target_mobject.  Note, since typically'), (109, '        (always?) self.mobject will have its updating'), (110, '        suspended during the animation, this will do'), (111, '        nothing to self.mobject.'), (118, '        # updating of self.mobject.  Besides, in'), (119, '        # most cases its updating is suspended anyway'), (124, '        items = list(set(items))')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"[(1277, '        return [self.data[self.get_outer_vert_indices()]]')]","[(1277, '        return [self.data, self.data[-1:]]')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,"[(228, '        render_primitive: int = moderngl.TRIANGLES,')]","[(228, '        render_primitive: int = moderngl.TRIANGLE_STRIP,')]",No
manimlib/shaders/quadratic_bezier/depth/geom.glsl,manimlib/shaders/quadratic_bezier/depth/geom.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,[],"[(8, 'in int v_vert_index[3];'), (25, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (26, '    // every other one needs to be rendered'), (27, '    if (v_vert_index[0] % 2 != 0) return;'), (28, '')]",No
manimlib/shaders/quadratic_bezier/depth/vert.glsl,manimlib/shaders/quadratic_bezier/depth/vert.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,[],"[(8, 'out int v_vert_index;'), (13, '    v_vert_index = gl_VertexID;')]",No
manimlib/shaders/quadratic_bezier/fill/geom.glsl,manimlib/shaders/quadratic_bezier/fill/geom.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,[],"[(9, 'in int v_vert_index[3];'), (47, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (48, '    // every other one needs to be rendered'), (49, '    if (v_vert_index[0] % 2 != 0) return;'), (50, '')]",No
manimlib/shaders/quadratic_bezier/fill/vert.glsl,manimlib/shaders/quadratic_bezier/fill/vert.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,[],"[(10, 'out int v_vert_index;'), (16, '    v_vert_index = gl_VertexID;')]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,[],"[(18, 'in int v_vert_index[3];'), (159, '    // Vector graphic shaders use TRIANGLE_STRIP, but only'), (160, '    // every other one needs to be rendered'), (161, '    if (v_vert_index[0] % 2 != 0) return;'), (162, '')]",No
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,f0bf50eb7f5f71136564f1c489d013a805a9992c,9eda000a9778c733ba37497f032931a4a3e21b1d,Remove use of gl_VertexID,[],"[(19, 'out int v_vert_index;'), (29, '    v_vert_index = gl_VertexID;')]",No
manimlib/mobject/svg/special_tex.py,manimlib/mobject/svg/special_tex.py,bddd9c35eaf27e70d5c9d4770df6dd1aa9eeab73,fea7096cbe5eb1fb77d96ed1a1bc6a429366fe11,Tiny formatting,[],"[(18, '')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,cf37f34e1fdca0f39af8dd9de4e3b7de4453a978,bddd9c35eaf27e70d5c9d4770df6dd1aa9eeab73,Add copy cursor position option,"[(510, '        elif char == ""c"" and modifiers == SHIFT_MODIFIER:'), (511, '            self.copy_cursor_position()'), (636, ''), (637, '    def copy_cursor_position(self):'), (638, '        pyperclip.copy(str(tuple(self.mouse_point.get_center().round(2))))')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,512fb897264ea094073120ebb3b4b8297dbac2cc,f0bf50eb7f5f71136564f1c489d013a805a9992c,Save VMobject. outer_vert_indices,"[(1051, '        if self.outer_vert_indices is None:'), (1052, '            # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1053, '            self.outer_vert_indices = (np.arange(1, 3 * n_curves + 1) * 2) // 3'), (1054, '        return self.outer_vert_indices'), (1212, '    def resize_points('), (1213, '        self,'), (1214, '        new_length: int,'), (1215, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1216, '    ) -> Self:'), (1217, '        self.outer_vert_indices = None'), (1218, '        return super().resize_points(new_length, resize_func)'), (1219, '')]","[(1051, '        # Creates the pattern (0, 1, 2, 2, 3, 4, 4, 5, 6, ...)'), (1052, '        return (np.arange(1, 3 * n_curves + 1) * 2) // 3')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,95bb67c47fb799bd6283bd88cd937938b1909a45,512fb897264ea094073120ebb3b4b8297dbac2cc,Change return type for Mobject.get_shader_data,"[(2032, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2037, '    def get_shader_data(self) -> np.ndarray:'), (2040, '            return self.data[indices]'), (2042, '            return self.data')]","[(2032, '            data_list = list(it.chain(*(sm.get_shader_data() for sm in submobs)))'), (2037, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (2040, '            return [self.data[indices]]'), (2042, '            return [self.data]')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,95bb67c47fb799bd6283bd88cd937938b1909a45,512fb897264ea094073120ebb3b4b8297dbac2cc,Change return type for Mobject.get_shader_data,"[(1283, '    def get_shader_data(self) -> np.ndarray:'), (1287, '        return self.data[self.get_outer_vert_indices()]')]","[(1283, '    def get_shader_data(self) -> Iterable[np.ndarray]:'), (1287, '        return [self.data[self.get_outer_vert_indices()]]')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,f737823bacfa83785adc32645eb97919d4039857,95bb67c47fb799bd6283bd88cd937938b1909a45,Add VMobject. get_shader_vert_indices,"[(1287, '        return super().get_shader_data()'), (1288, ''), (1289, '    def get_shader_vert_indices(self) -> Optional[np.ndarray]:'), (1290, '        return self.get_outer_vert_indices()')]","[(1287, '        return self.data[self.get_outer_vert_indices()]')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,641c03a95b2349c6f91c091e3ad3769fad49cb5c,f737823bacfa83785adc32645eb97919d4039857,Change condition for updating VMobject. outer_vert_indices,"[(120, '        self.outer_vert_indices = np.zeros(0, dtype=int)'), (1052, '        if len(self.outer_vert_indices) != 3 * n_curves:')]","[(1051, '        if self.outer_vert_indices is None:'), (1212, '    def resize_points('), (1213, '        self,'), (1214, '        new_length: int,'), (1215, '        resize_func: Callable[[np.ndarray, int], np.ndarray] = resize_array'), (1216, '    ) -> Self:'), (1217, '        self.outer_vert_indices = None'), (1218, '        return super().resize_points(new_length, resize_func)'), (1219, '')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,29cb6f76fe89be8ede82b3c82ebf0e93c025b3ef,09e9e65ba48dab9844df74f47648e109ee95dbc0,Write scene insertions into a subdirectory,"[(12, 'from pathlib import Path'), (303, '    def get_insert_file_path(self, index: int) -> Path:'), (304, '        movie_path = Path(self.get_movie_file_path())'), (305, '        scene_name = movie_path.stem'), (306, '        insert_dir = Path(movie_path.parent, ""inserts"")'), (307, '        guarantee_existence(str(insert_dir))'), (308, '        return Path(insert_dir, f""{scene_name}_{index}{movie_path.suffix}"")'), (309, ''), (314, '        index = 0'), (315, '        while (insert_path := self.get_insert_file_path(index)).exists():'), (316, '            index += 1'), (317, '        self.inserted_file_path = str(insert_path)')]","[(306, '        movie_path = self.get_movie_file_path()'), (307, '        count = 0'), (308, '        while os.path.exists(name := movie_path.replace(""."", f""_insert_{count}."")):'), (309, '            count += 1'), (310, '        self.inserted_file_path = name')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,154a473a128b001c641649c3f9f0cd769d53cbf2,29cb6f76fe89be8ede82b3c82ebf0e93c025b3ef,"Get rid of globals update locals hack

It seems this issues is no longer there in the case of list constructors(?). Although it still exists for functions defined within a cell, that can be circumvented with more explicit function arguments.",[],"[(258, ""        # This is hacky, but there's an issue with ipython which is that""), (259, ""        # when you define lambda's or list comprehensions during a shell session,""), (260, '        # they are not aware of local variables in the surrounding scope. Because'), (261, '        # That comes up a fair bit during scene construction, to get around this,'), (262, '        # we (admittedly sketchily) update the global namespace to match the local'), (263, '        # namespace, since this is just a shell session anyway.'), (264, '        shell.events.register('), (265, '            ""pre_run_cell"",'), (266, '            lambda *args, **kwargs: shell.user_global_ns.update(shell.user_ns)'), (267, '        )'), (268, '')]",No
manimlib/mobject/boolean_ops.py,manimlib/mobject/boolean_ops.py,99493fc4f783d41988af38ad9d5f0215cfbe174a,154a473a128b001c641649c3f9f0cd769d53cbf2,"Fix issue with Difference

https://github.com/3b1b/manim/issues/2174","[(14, '    for submob in vmobject.family_members_with_points():'), (15, '        for subpath in submob.get_subpaths():'), (16, '            quads = vmobject.get_bezier_tuples_from_points(subpath)'), (17, '            start = subpath[0]'), (18, '            path.moveTo(*start[:2])'), (19, '            for p0, p1, p2 in quads:'), (20, '                path.quadTo(*p1[:2], *p2[:2])'), (21, '            if vmobject.consider_points_equal(subpath[0], subpath[-1]):'), (22, '                path.close()')]","[(14, '    subpaths = vmobject.get_subpaths_from_points(vmobject.get_all_points())'), (15, '    for subpath in subpaths:'), (16, '        quads = vmobject.get_bezier_tuples_from_points(subpath)'), (17, '        start = subpath[0]'), (18, '        path.moveTo(*start[:2])'), (19, '        for p0, p1, p2 in quads:'), (20, '            path.quadTo(*p1[:2], *p2[:2])'), (21, '        if vmobject.consider_points_equal(subpath[0], subpath[-1]):'), (22, '            path.close()')]",No
README.md,README.md,23c9e67fa41ce0b7e43405e4952b3a5bdb08b3a8,cce4ffbb60c2722e99fb32a2fb79497ad8f9b149,Reference workflow documentation,"[(94, ""Look through the [example scenes](https://3b1b.github.io/manim/getting_started/example_scenes.html) to see examples of the library's syntax, animation types and object types. In the [3b1b/videos](https://github.com/3b1b/videos) repo, you can see all the code for 3blue1brown videos, though code from older videos may not be compatible with the most recent version of manim. The readme of that repo also outlines some details for how to set up a more interactive workflow, as shown in [this manim demo video](https://www.youtube.com/watch?v=rbu7Zu5X1zI) for example.""), (95, ''), (96, 'When running in the CLI, some useful flags include:')]","[(94, 'Some useful flags include:'), (104, 'Look through the [example scenes](https://3b1b.github.io/manim/getting_started/example_scenes.html) to get a sense of how it is used, and feel free to look through the code behind [3blue1brown videos](https://github.com/3b1b/videos) for a much larger set of example. Note, however, that developments are often made to the library without considering backwards compatibility with those old videos. To run an old project with a guarantee that it will work, you will have to go back to the commit which completed that project.'), (105, '')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,2dd0256af623cbe00bb59a5e6f2ff634193e9582,d4080b8978e94477b590c5e8f82d223b1d2395f0,Instantiate the IPython shell without a local ns,"[(223, '        # Create embedded IPython terminal configured to have access to'), (224, '        # the local namespace of the caller'), (226, '        module = get_module(caller_frame.f_globals[""__file__""])'), (227, '        shell = InteractiveShellEmbed(user_module=module)'), (229, '        # Add a few custom shortcuts to that local namespace'), (230, '        local_ns = dict(caller_frame.f_locals)'), (247, ""        # Update the shell module with the caller's locals + shortcuts""), (248, '        module.__dict__.update(local_ns)'), (249, ''), (284, '        shell()')]","[(223, '        # Create embedded IPython terminal to be configured'), (224, '        shell = InteractiveShellEmbed.instance()'), (225, ''), (226, '        # Use the locals namespace of the caller'), (228, '        local_ns = dict(caller_frame.f_locals)'), (230, '        # Add a few custom shortcuts'), (281, '        shell('), (282, '            local_ns=local_ns,'), (283, ""            # Pretend like we're embeding in the caller function, not here""), (284, '            stack_depth=2,'), (285, ""            # Specify that the present module is the caller's, not here""), (286, '            module=get_module(caller_frame.f_globals[""__file__""])'), (287, '        )')]",No
requirements.txt,requirements.txt,aa18373eb7487895b0d91e21067d70d373d2be84,d499544366570b67a070dcfcb303f31ce4483712,Update ManimPango requirement,"[(5, 'manimpango>=0.6.0')]","[(5, 'manimpango>=0.4.0.post0,<0.5.0')]",No
manimlib/shaders/textured_surface/frag.glsl,manimlib/shaders/textured_surface/frag.glsl,aaa28a2712d00288b668ad0344dbe4cf8dab3b87,d499544366570b67a070dcfcb303f31ce4483712,Discard transparent parts of textured surfaces,"[(29, '    if (color.a == 0) discard;')]",[],No
requirements.txt,requirements.txt,e3e87f611096c10c7b019df65fa116ffdea2dd99,aaa28a2712d00288b668ad0344dbe4cf8dab3b87,Update Pango requirement,"[(5, 'manimpango>=0.6.0')]","[(5, 'manimpango>=0.4.0.post0,<0.5.0')]",No
setup.cfg,setup.cfg,a34c4482f6a7896be33b4384f9f783049e94aa63,d499544366570b67a070dcfcb303f31ce4483712,Update setup.cfg,"[(3, 'version = 1.7.0'), (33, '    ipython>=8.18.0'), (35, '    fontTools'), (36, '    manimpango>=0.6.0'), (54, '    typing-extensions; python_version < ""3.11""')]","[(3, 'version = 1.6.1'), (33, '    ipython'), (35, '    manimpango>=0.4.0.post0,<0.5.0'), (36, '    mapbox-earcut')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,04295ec177ed13ce6bdcea20f02f79fc4ce65c24,1a65498f977aab7ed505fa7bb660399fa64c19af,Minor Bug fixed: window's bg color now changing.,"[(129, '            self.window.clear(*self.background_rgba)'), (223, '        self.frame.set_height(frame_height, stretch=True)'), (224, '        self.frame.set_width(frame_width, stretch=True)')]","[(9, 'from manimlib.constants import ASPECT_RATIO'), (130, '            self.window.clear()'), (224, '        self.frame.set_height(frame_height, stretch=true)'), (225, '        self.frame.set_width(frame_width, stretch=true)')]",No
setup.cfg,setup.cfg,5505fc1d547b910fe62e7b8966edae7ce64fed58,1a65498f977aab7ed505fa7bb660399fa64c19af,Add mapbox-earcut dependency,"[(36, '    mapbox-earcut')]",[],No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,199395b6e35ca0a0c80c07abd31e0a1461c845de,837bb14c03cd30b58ed65c0ae33eb20e1987f8d8,"Fix negative winding issue

https://github.com/3b1b/manim/issues/2146","[(449, '                if(color.a < 0){'), (450, '                    color.a = -color.a / (1.0 - color.a);'), (451, '                    color.rgb *= (color.a - 1);'), (452, '                }'), (453, '')]",[],No
setup.cfg,setup.cfg,371fca147be663a8f950de2893a25e608efd6a67,e1816c2ac53ea99047d47ac889c4d176d025c032,Update version in setup.cfg,"[(3, 'version = 1.7.1')]","[(3, 'version = 1.7.0')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,e5cf0558d87943103541c12d792fbaa0114030d1,1139b545f9e766e7282f8cf64e68e225a4f25eb1,fix 3D bad overlapping,"[(17, 'from manimlib.utils.family_ops import extract_mobject_family_members'), (232, '        for mobject in extract_mobject_family_members(mobjects, True):')]","[(231, '        for mobject in mobjects:')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,e5cf0558d87943103541c12d792fbaa0114030d1,1139b545f9e766e7282f8cf64e68e225a4f25eb1,fix 3D bad overlapping,"[(2042, '        if len(self.get_points()) == 0:'), (2043, '            return []'), (2044, '        shader_wrapper = self.get_shader_wrapper(ctx)'), (2045, '        shader_wrapper.read_in([self.get_shader_data()])'), (2046, '        return [shader_wrapper]')]","[(2042, '        family = self.family_members_with_points()'), (2043, '        batches = batch_by_property(family, lambda sm: sm.get_shader_wrapper(ctx).get_id())'), (2044, ''), (2045, '        result = []'), (2046, '        for submobs, sid in batches:'), (2047, '            shader_wrapper = submobs[0].shader_wrapper'), (2048, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2049, '            shader_wrapper.read_in(data_list)'), (2050, '            result.append(shader_wrapper)'), (2051, '        return result')]",No
manimlib/constants.py,manimlib/constants.py,dc731f8bf28894ba2a327a19077b0622dabfe468,1139b545f9e766e7282f8cf64e68e225a4f25eb1,Properly check modifier keys.,[],"[(95, 'SHIFT_MODIFIER: int = 1'), (96, 'CTRL_MODIFIER: int = 2'), (97, 'COMMAND_MODIFIER: int = 64'), (98, '')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,dc731f8bf28894ba2a327a19077b0622dabfe468,1139b545f9e766e7282f8cf64e68e225a4f25eb1,Properly check modifier keys.,"[(7, 'from pyglet.window import key as PygletWindowKeys'), (53, 'ALL_MODIFIERS = PygletWindowKeys.MOD_CTRL | PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_SHIFT'), (474, '        if char == SELECT_KEY and (modifiers & ALL_MODIFIERS) == 0:'), (478, '        elif char in GRAB_KEYS and (modifiers & ALL_MODIFIERS) == 0:'), (480, '        elif char == RESIZE_KEY and (modifiers & PygletWindowKeys.MOD_SHIFT):'), (481, '            self.prepare_resizing(about_corner=((modifiers & PygletWindowKeys.MOD_SHIFT) > 0))'), (485, '        elif char == COLOR_KEY and (modifiers & ALL_MODIFIERS) == 0:'), (487, '        elif char == INFORMATION_KEY and (modifiers & ALL_MODIFIERS) == 0:'), (489, '        elif char == ""c"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (491, '        elif char == ""v"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (493, '        elif char == ""x"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (498, '        elif char == ""a"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (501, '        elif char == ""g"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (503, '        elif char == ""g"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL | PygletWindowKeys.MOD_SHIFT)):'), (505, '        elif char == ""t"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (507, '        elif char == ""s"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (509, '        elif char == ""d"" and (modifiers & PygletWindowKeys.MOD_SHIFT):'), (511, '        elif char == ""c"" and (modifiers & PygletWindowKeys.MOD_SHIFT):'), (516, '                large=(modifiers & PygletWindowKeys.MOD_SHIFT),')]","[(10, 'from manimlib.constants import COMMAND_MODIFIER, SHIFT_MODIFIER'), (473, '        if char == SELECT_KEY and modifiers == 0:'), (477, '        elif char in GRAB_KEYS and modifiers == 0:'), (479, '        elif char == RESIZE_KEY and modifiers in [0, SHIFT_MODIFIER]:'), (480, '            self.prepare_resizing(about_corner=(modifiers == SHIFT_MODIFIER))'), (484, '        elif char == COLOR_KEY and modifiers == 0:'), (486, '        elif char == INFORMATION_KEY and modifiers == 0:'), (488, '        elif char == ""c"" and modifiers == COMMAND_MODIFIER:'), (490, '        elif char == ""v"" and modifiers == COMMAND_MODIFIER:'), (492, '        elif char == ""x"" and modifiers == COMMAND_MODIFIER:'), (497, '        elif char == ""a"" and modifiers == COMMAND_MODIFIER:'), (500, '        elif char == ""g"" and modifiers == COMMAND_MODIFIER:'), (502, '        elif char == ""g"" and modifiers == COMMAND_MODIFIER | SHIFT_MODIFIER:'), (504, '        elif char == ""t"" and modifiers == COMMAND_MODIFIER:'), (506, '        elif char == ""s"" and modifiers == COMMAND_MODIFIER:'), (508, '        elif char == ""d"" and modifiers == SHIFT_MODIFIER:'), (510, '        elif char == ""c"" and modifiers == SHIFT_MODIFIER:'), (515, '                large=(modifiers & SHIFT_MODIFIER),')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,dc731f8bf28894ba2a327a19077b0622dabfe468,1139b545f9e766e7282f8cf64e68e225a4f25eb1,Properly check modifier keys.,"[(16, 'from pyglet.window import key as PygletWindowKeys'), (964, '        elif char == ""z"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (966, '        elif char == ""z"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL | PygletWindowKeys.MOD_SHIFT)):'), (969, '        elif char == QUIT_KEY and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):')]","[(27, 'from manimlib.constants import COMMAND_MODIFIER'), (28, 'from manimlib.constants import SHIFT_MODIFIER'), (965, '        elif char == ""z"" and modifiers == COMMAND_MODIFIER:'), (967, '        elif char == ""z"" and modifiers == COMMAND_MODIFIER | SHIFT_MODIFIER:'), (970, '        elif char == QUIT_KEY and modifiers == COMMAND_MODIFIER:')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,1738876f4395e735908b11ef464fee703e207301,1139b545f9e766e7282f8cf64e68e225a4f25eb1,fix bad 3D overlapping using z_index,"[(376, '            sorted(self.mobjects, key=lambda m: m.z_index),'), (377, '            lambda m: str(type(m)) + str(m.get_shader_wrapper(self.camera.ctx).get_id()) + str(m.z_index)')]","[(376, '            self.mobjects,'), (377, '            lambda m: str(type(m)) + str(m.get_shader_wrapper(self.camera.ctx).get_id())')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,693a859cafa8e752c4e9efed5fab330cc572610c,52948f846ea6d7d0ea8db7946dc810340924d4b4,revert changes in mobject.py and camera.py,"[(231, '        for mobject in mobjects:')]","[(17, 'from manimlib.utils.family_ops import extract_mobject_family_members'), (232, '        for mobject in extract_mobject_family_members(mobjects, True):')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,693a859cafa8e752c4e9efed5fab330cc572610c,52948f846ea6d7d0ea8db7946dc810340924d4b4,revert changes in mobject.py and camera.py,"[(2042, '        family = self.family_members_with_points()'), (2043, '        batches = batch_by_property(family, lambda sm: sm.get_shader_wrapper(ctx).get_id())'), (2044, ''), (2045, '        result = []'), (2046, '        for submobs, sid in batches:'), (2047, '            shader_wrapper = submobs[0].shader_wrapper'), (2048, '            data_list = [sm.get_shader_data() for sm in submobs]'), (2049, '            shader_wrapper.read_in(data_list)'), (2050, '            result.append(shader_wrapper)'), (2051, '        return result')]","[(2042, '        if len(self.get_points()) == 0:'), (2043, '            return []'), (2044, '        shader_wrapper = self.get_shader_wrapper(ctx)'), (2045, '        shader_wrapper.read_in([self.get_shader_data()])'), (2046, '        return [shader_wrapper]')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,693a859cafa8e752c4e9efed5fab330cc572610c,52948f846ea6d7d0ea8db7946dc810340924d4b4,revert changes in mobject.py and camera.py,"[(376, '            self.mobjects,')]","[(376, '            sorted(self.mobjects, key=lambda m: m.z_index),')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,9475fcd19eaaf2eff564368cd4468f8b93b275ef,003c4d86262565bb21001f74f67e6788cae62df4,Have clip plane recurse through family,"[(1953, '        threshold: float | None = None,'), (1954, '        recurse=True'), (1956, '        for submob in self.get_family(recurse):'), (1957, '            if vect is not None:'), (1958, '                submob.uniforms[""clip_plane""][:3] = vect'), (1959, '            if threshold is not None:'), (1960, '                submob.uniforms[""clip_plane""][3] = threshold')]","[(1953, '        threshold: float | None = None'), (1955, '        if vect is not None:'), (1956, '            self.uniforms[""clip_plane""][:3] = vect'), (1957, '        if threshold is not None:'), (1958, '            self.uniforms[""clip_plane""][3] = threshold')]",No
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,b84376d6fd08435f5ab7b55c0592e3232f822c4f,9475fcd19eaaf2eff564368cd4468f8b93b275ef,Add Cone,"[(172, 'class Cone(Cylinder):'), (173, '    def __init__('), (174, '        self,'), (175, '        u_range: Tuple[float, float] = (0, TAU),'), (176, '        v_range: Tuple[float, float] = (0, 1),'), (177, '        *args,'), (178, '        **kwargs,'), (179, '    ):'), (180, '        super().__init__(u_range=u_range, v_range=v_range, *args, **kwargs)'), (181, ''), (182, '    def uv_func(self, u: float, v: float) -> np.ndarray:'), (183, '        return np.array([(1 - v) * np.cos(u), (1 - v) * np.sin(u), v])'), (184, ''), (185, '')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,97b6e39abb2a055a38e7034d2078535f0e1a8ec4,003c4d86262565bb21001f74f67e6788cae62df4,Init new focus() command,"[(237, '            focus=self.focus,'), (989, '    def focus(self) -> None:'), (990, '        if not self.window:'), (991, '            return'), (992, '        self.window.focus()'), (993, '')]",[],No
manimlib/window.py,manimlib/window.py,97b6e39abb2a055a38e7034d2078535f0e1a8ec4,003c4d86262565bb21001f74f67e6788cae62df4,Init new focus() command,"[(52, '    def focus(self):'), (53, '        """"""'), (54, '        Puts focus on this window by hiding and showing it again.'), (55, ''), (56, ""        Note that the pyglet `activate()` method didn't work as expected here,""), (57, ""        so that's why we have to use this workaround. This will produce a small""), (58, '        flicker on the window but at least reliably focuses it. It may also'), (59, '        offset the window position slightly.'), (60, '        """"""'), (61, '        self._window.set_visible(False)'), (62, '        self._window.set_visible(True)'), (63, '')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,af923a2327f4b6c9a306f2e626eddb6ce59f906b,97b6e39abb2a055a38e7034d2078535f0e1a8ec4,Add docstring to user-facing focus() method,"[(990, '        """"""'), (991, '        Puts focus on the ManimGL window.'), (992, '        """"""')]",[],No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,64ae1364ca25550873c5cc37e2ef30756de9469d,b84376d6fd08435f5ab7b55c0592e3232f822c4f,Update the Vector Field interface,"[(48, 'def full_range_specifier(range_args):'), (49, '    if len(range_args) == 2:'), (50, '        return (*range_args, 1)'), (51, '    return range_args'), (52, ''), (53, ''), (66, '        self.x_range = full_range_specifier(x_range)'), (67, '        self.y_range = full_range_specifier(y_range)'), (545, '        self.z_range = full_range_specifier(z_range)')]","[(60, '        self.x_range = x_range'), (61, '        self.y_range = y_range'), (539, '        self.z_range = z_range')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,64ae1364ca25550873c5cc37e2ef30756de9469d,b84376d6fd08435f5ab7b55c0592e3232f822c4f,Update the Vector Field interface,"[(18, 'from manimlib.utils.color import get_color_map'), (29, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect3Array, Vect4Array'), (37, '#### Delete these two ###'), (57, ''), (68, '####'), (113, 'def get_sample_coords('), (115, '    step_multiple: float = 1.0'), (122, '    return np.array(list(it.product(*ranges)))'), (131, '        func: Callable[Sequence[float], Sequence[float]],'), (132, '        coordinate_system: CoordinateSystem,'), (133, '        step_multiple: float = 0.5,'), (134, '        magnitude_range: Optional[Tuple[float, float]] = None,'), (135, '        color_map_name: Optional[str] = ""3b1b_colormap"",'), (136, '        color_map: Optional[Callable[Sequence[float]], Vect4Array] = None,'), (144, '        norm_to_opacity_func=None,  # TODO, check on this'), (148, '        self.coordinate_system = coordinate_system'), (154, '        # Search for sample_points'), (155, '        self.sample_coords = get_sample_coords(coordinate_system, step_multiple)'), (156, '        self.update_sample_points()'), (157, ''), (158, '        if max_vect_len is None:'), (159, '            self.max_displayed_vect_len = get_norm(self.sample_points[1] - self.sample_points[0])'), (161, '            self.max_displayed_vect_len = max_vect_len * coordinate_system.get_x_unit_size()'), (162, ''), (163, '        # Prepare the color map'), (164, '        if magnitude_range is None:'), (165, '            max_value = max(map(get_norm, func(self.sample_coords)))'), (166, '            magnitude_range = (0, max_value)'), (167, ''), (168, '        self.magnitude_range = magnitude_range'), (169, ''), (170, '        if color_map is not None:'), (171, '            self.color_map = color_map'), (172, '        elif color_map_name is not None:'), (173, '            self.color_map = get_color_map(color_map_name)'), (175, '            self.color_map = None'), (177, '        self.init_base_stroke_width_array(len(self.sample_coords))'), (186, '        n_samples = len(self.sample_coords)'), (220, '    def set_sample_coords(self, sample_points: VectArray):'), (221, '        self.sample_coords = sample_coords'), (236, '    def update_sample_points(self):'), (237, '        self.sample_points = self.coordinate_system.c2p(*self.sample_coords.T)'), (238, ''), (243, '        # Outputs in the coordinate system'), (244, '        outputs = self.func(self.sample_coords)'), (245, '        output_norms = np.linalg.norm(outputs, axis=1)[:, np.newaxis]'), (246, ''), (247, '        # Corresponding vector values in global coordinates'), (248, '        out_vects = self.coordinate_system.c2p(*outputs.T) - self.coordinate_system.get_origin()'), (249, '        out_vect_norms = np.linalg.norm(out_vects, axis=1)[:, np.newaxis]'), (250, '        unit_outputs = np.zeros_like(out_vects)'), (251, '        np.true_divide(out_vects, out_vect_norms, out=unit_outputs, where=(out_vect_norms > 0))'), (253, '        # How long should the arrows be drawn, in global coordinates'), (254, '        max_len = self.max_displayed_vect_len'), (256, '            drawn_norms = max_len * np.tanh(out_vect_norms / max_len)'), (258, '            drawn_norms = out_vect_norms'), (262, '        dist_to_head_base = np.clip(drawn_norms - tip_len, 0, np.inf)  # Mixing units!'), (266, '        points[0::8] = self.sample_points'), (267, '        points[2::8] = self.sample_points + dist_to_head_base * unit_outputs'), (269, '        points[6::8] = self.sample_points + drawn_norms * unit_outputs'), (281, '        if self.color_map is not None:'), (282, '            self.get_stroke_colors()  # Ensures the array is updated to appropriate length'), (283, '            low, high = self.magnitude_range'), (284, ""            self.data['stroke_rgba'][:] = self.color_map(""), (285, '                inverse_interpolate(low, high, np.repeat(output_norms, 8)[:-1])'), (286, '            )'), (287, ''), (290, '                np.repeat(output_norms, 8)[:-1]'), (337, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (341, '        samples = get_sample_coords('), (454, '        sample_coords = get_sample_coords(')]","[(28, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect3Array'), (109, 'def get_sample_points_from_coordinate_system('), (111, '    step_multiple: float'), (118, '    return it.product(*ranges)'), (127, '        func,'), (130, '        center: Vect3 = ORIGIN,'), (131, '        sample_points: Optional[Vect3Array] = None,'), (132, '        x_density: float = 2.0,'), (133, '        y_density: float = 2.0,'), (134, '        z_density: float = 2.0,'), (135, '        width: float = 14.0,'), (136, '        height: float = 8.0,'), (137, '        depth: float = 0.0,'), (142, '        min_drawn_norm: float = 1e-2,'), (144, '        norm_to_opacity_func=None,'), (145, '        norm_to_rgb_func=None,'), (152, '        self.min_drawn_norm = min_drawn_norm'), (154, '        self.norm_to_rgb_func = norm_to_rgb_func'), (156, '        if max_vect_len is not None:'), (157, '            self.max_vect_len = max_vect_len'), (159, '            densities = np.array([x_density, y_density, z_density])'), (160, '            dims = np.array([width, height, depth])'), (161, '            self.max_vect_len = 1.0 / densities[dims > 0].mean()'), (162, ''), (163, '        if sample_points is None:'), (164, '            self.sample_points = self.get_sample_points('), (165, '                center, width, height, depth,'), (166, '                x_density, y_density, z_density'), (167, '            )'), (169, '            self.sample_points = sample_points'), (171, '        self.init_base_stroke_width_array(len(self.sample_points))'), (180, '        n_samples = len(self.sample_points)'), (214, '    def set_sample_points(self, sample_points: Vect3Array):'), (215, '        self.sample_points = sample_points'), (233, '        samples = self.sample_points'), (235, '        # Get raw outputs and lengths'), (236, '        outputs = self.func(samples)'), (237, '        norms = np.linalg.norm(outputs, axis=1)[:, np.newaxis]'), (239, '        # How long should the arrows be drawn?'), (240, '        max_len = self.max_vect_len'), (242, '            drawn_norms = max_len * np.tanh(norms / max_len)'), (244, '            drawn_norms = norms'), (248, '        dist_to_head_base = np.clip(drawn_norms - tip_len, 0, np.inf)'), (251, '        unit_outputs = np.zeros_like(outputs)'), (252, '        np.true_divide(outputs, norms, out=unit_outputs, where=(norms > self.min_drawn_norm))'), (253, ''), (255, '        points[0::8] = samples'), (256, '        points[2::8] = samples + dist_to_head_base * unit_outputs'), (258, '        points[6::8] = samples + drawn_norms * unit_outputs'), (272, '                np.repeat(norms, 8)[:-1]'), (273, '            )'), (274, '        if self.norm_to_rgb_func is not None:'), (275, '            self.get_stroke_colors()'), (276, ""            self.data['stroke_rgba'][:, :3] = self.norm_to_rgb_func(""), (277, '                np.repeat(norms, 8)[:-1]'), (324, '        self.value_to_rgb = get_rgb_gradient_function('), (328, '        samples = get_sample_points_from_coordinate_system('), (441, '        sample_coords = get_sample_points_from_coordinate_system(')]",No
manimlib/utils/color.py,manimlib/utils/color.py,64ae1364ca25550873c5cc37e2ef30756de9469d,b84376d6fd08435f5ab7b55c0592e3232f822c4f,Update the Vector Field interface,"[(17, '    from typing import Iterable, Sequence, Callable'), (18, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Vect4Array, NDArray'), (137, 'def get_colormap_from_colors(colors: Iterable[ManimColor]) -> Callable[[Sequence[float]], Vect4Array]:'), (138, '    """"""'), (139, '    Returns a funciton which takes in values between 0 and 1, and returns'), (140, '    a corresponding list of rgba values'), (141, '    """"""'), (142, '    rgbas = np.array([color_to_rgba(color) for color in colors])'), (143, ''), (144, '    def func(values):'), (145, '        alphas = np.clip(values, 0, 1)'), (146, '        scaled_alphas = alphas * (len(rgbas) - 1)'), (147, '        indices = scaled_alphas.astype(int)'), (148, '        next_indices = np.clip(indices + 1, 0, len(rgbas) - 1)'), (149, '        inter_alphas = scaled_alphas % 1'), (150, '        inter_alphas = inter_alphas.repeat(4).reshape((len(indices), 4))'), (151, '        result = interpolate(rgbas[indices], rgbas[next_indices], inter_alphas)'), (152, '        return result'), (153, ''), (154, '    return func'), (155, ''), (156, ''), (157, 'def get_color_map(map_name: str) -> Callable[[Sequence[float]], Vect4Array]:'), (158, '    if map_name == ""3b1b_colormap"":'), (159, '        return get_colormap_from_colors(COLORMAP_3B1B)'), (160, '    return plt.get_cmap(map_name)'), (161, ''), (162, ''), (163, '# Delete this?')]","[(17, '    from typing import Iterable, Sequence'), (18, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,0ad5a0e76e8c075380b94be753efd6f1eb47bf65,64ae1364ca25550873c5cc37e2ef30756de9469d,Further development on VectorField,"[(6, 'from scipy.integrate import solve_ivp'), (30, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect2Array, Vect3Array, Vect4Array'), (72, 'def ode_solution_points(function, state0, time, dt=0.01):'), (73, '    solution = solve_ivp('), (74, '        lambda t, state: function(state),'), (75, '        t_span=(0, time),'), (76, '        y0=state0,'), (77, '        t_eval=np.arange(0, time, dt)'), (78, '    )'), (79, '    return solution.y.T'), (80, ''), (81, ''), (142, '        func: Callable[[VectArray], VectArray],'), (147, '        color_map: Optional[Callable[[Sequence[float]], Vect4Array]] = None,'), (295, ""            self.data['stroke_rgba'][:, :3] = self.color_map(""), (297, '            )[:, :3]'), (327, '        func: Callable[[VectArray], VectArray],'), (333, '        solution_time: float = 3,'), (355, '        self.solution_time = solution_time'), (372, '    def point_func(self, points: Vect3Array) -> Vect3:'), (373, '        in_coords = np.array(self.coordinate_system.p2c(points)).T'), (374, '        out_coords = self.func(in_coords)'), (375, '        origin = self.coordinate_system.get_origin()'), (376, '        return self.coordinate_system.c2p(*out_coords.T) - origin'), (381, ''), (382, '        # Todo, it feels like coordinate system should just have'), (383, '        # the ODE solver built into it, no?'), (384, '        lines = []'), (385, '        for coords in self.get_sample_coords():'), (386, '            solution_coords = ode_solution_points(self.func, coords, self.solution_time, self.dt)'), (388, '            line.set_points_smoothly(self.coordinate_system.c2p(*solution_coords.T))'), (389, '            # TODO, account for arc length somehow?'), (390, '            line.virtual_time = self.solution_time'), (394, '    def get_sample_coords(self):'), (395, '        cs = self.coordinate_system'), (396, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (397, ''), (398, '        noise_factor = self.noise_factor'), (399, '        if noise_factor is None:'), (400, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5'), (401, ''), (402, '        return np.array(['), (403, '            coords + noise_factor * np.random.random(coords.shape)'), (404, '            for n in range(self.n_repeats)'), (405, '            for coords in sample_coords'), (406, '        ])'), (407, ''), (410, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (414, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5'), (453, '        rate_multiple: float = 1.0,'), (466, '                run_time=line.virtual_time / rate_multiple,'), (481, ''), (482, ''), (483, 'class OldVectorField(VGroup):'), (484, '    def __init__('), (485, '        self,'), (486, '        func: Callable[[float, float], Sequence[float]],'), (487, '        coordinate_system: CoordinateSystem,'), (488, '        step_multiple: float = 0.5,'), (489, '        magnitude_range: Tuple[float, float] = (0, 2),'), (490, '        color_map: str = ""3b1b_colormap"",'), (491, '        # Takes in actual norm, spits out displayed norm'), (492, '        length_func: Callable[[float], float] = lambda norm: 0.45 * sigmoid(norm),'), (493, '        opacity: float = 1.0,'), (494, '        vector_config: dict = dict(),'), (495, '        **kwargs'), (496, '    ):'), (497, '        super().__init__(**kwargs)'), (498, '        self.func = func'), (499, '        self.coordinate_system = coordinate_system'), (500, '        self.step_multiple = step_multiple'), (501, '        self.magnitude_range = magnitude_range'), (502, '        self.color_map = color_map'), (503, '        self.length_func = length_func'), (504, '        self.opacity = opacity'), (505, '        self.vector_config = dict(vector_config)'), (506, ''), (507, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (508, '            *self.magnitude_range, self.color_map,'), (509, '        )'), (510, ''), (511, '        samples = get_sample_coords('), (512, '            coordinate_system, self.step_multiple'), (513, '        )'), (514, '        self.add(*('), (515, '            self.get_vector(coords)'), (516, '            for coords in samples'), (517, '        ))'), (518, ''), (519, '    def get_vector(self, coords: Iterable[float], **kwargs) -> Arrow:'), (520, '        vector_config = merge_dicts_recursively('), (521, '            self.vector_config,'), (522, '            kwargs'), (523, '        )'), (524, ''), (525, '        output = np.array(self.func(*coords))'), (526, '        norm = get_norm(output)'), (527, '        if norm > 0:'), (528, '            output *= self.length_func(norm) / norm'), (529, ''), (530, '        origin = self.coordinate_system.get_origin()'), (531, '        _input = self.coordinate_system.c2p(*coords)'), (532, '        _output = self.coordinate_system.c2p(*output)'), (533, ''), (534, '        vect = Arrow('), (535, '            origin, _output, buff=0,'), (536, '            **vector_config'), (537, '        )'), (538, '        vect.shift(_input - origin)'), (539, '        vect.set_color('), (540, '            rgb_to_color(self.value_to_rgb(norm)),'), (541, '            opacity=self.opacity,'), (542, '        )'), (543, '        return vect')]","[(29, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect3Array, Vect4Array'), (131, '        func: Callable[Sequence[float], Sequence[float]],'), (136, '        color_map: Optional[Callable[Sequence[float]], Vect4Array] = None,'), (284, ""            self.data['stroke_rgba'][:] = self.color_map(""), (286, '            )'), (313, 'class OldVectorField(VGroup):'), (314, '    def __init__('), (315, '        self,'), (316, '        func: Callable[[float, float], Sequence[float]],'), (317, '        coordinate_system: CoordinateSystem,'), (318, '        step_multiple: float = 0.5,'), (319, '        magnitude_range: Tuple[float, float] = (0, 2),'), (320, '        color_map: str = ""3b1b_colormap"",'), (321, '        # Takes in actual norm, spits out displayed norm'), (322, '        length_func: Callable[[float], float] = lambda norm: 0.45 * sigmoid(norm),'), (323, '        opacity: float = 1.0,'), (324, '        vector_config: dict = dict(),'), (325, '        **kwargs'), (326, '    ):'), (327, '        super().__init__(**kwargs)'), (328, '        self.func = func'), (329, '        self.coordinate_system = coordinate_system'), (330, '        self.step_multiple = step_multiple'), (331, '        self.magnitude_range = magnitude_range'), (332, '        self.color_map = color_map'), (333, '        self.length_func = length_func'), (334, '        self.opacity = opacity'), (335, '        self.vector_config = dict(vector_config)'), (336, ''), (337, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (338, '            *self.magnitude_range, self.color_map,'), (339, '        )'), (340, ''), (341, '        samples = get_sample_coords('), (342, '            coordinate_system, self.step_multiple'), (343, '        )'), (344, '        self.add(*('), (345, '            self.get_vector(coords)'), (346, '            for coords in samples'), (347, '        ))'), (348, ''), (349, '    def get_vector(self, coords: Iterable[float], **kwargs) -> Arrow:'), (350, '        vector_config = merge_dicts_recursively('), (351, '            self.vector_config,'), (352, '            kwargs'), (353, '        )'), (354, ''), (355, '        output = np.array(self.func(*coords))'), (356, '        norm = get_norm(output)'), (357, '        if norm > 0:'), (358, '            output *= self.length_func(norm) / norm'), (359, ''), (360, '        origin = self.coordinate_system.get_origin()'), (361, '        _input = self.coordinate_system.c2p(*coords)'), (362, '        _output = self.coordinate_system.c2p(*output)'), (363, ''), (364, '        vect = Arrow('), (365, '            origin, _output, buff=0,'), (366, '            **vector_config'), (367, '        )'), (368, '        vect.shift(_input - origin)'), (369, '        vect.set_color('), (370, '            rgb_to_color(self.value_to_rgb(norm)),'), (371, '            opacity=self.opacity,'), (372, '        )'), (373, '        return vect'), (374, ''), (375, ''), (379, '        func: Callable[[float, float], Sequence[float]],'), (422, '    def point_func(self, point: Vect3) -> Vect3:'), (423, '        in_coords = self.coordinate_system.p2c(point)'), (424, '        out_coords = self.func(*in_coords)'), (425, '        return self.coordinate_system.c2p(*out_coords)'), (430, '        for point in self.get_start_points():'), (431, '            points = [point]'), (432, '            total_arc_len = 0'), (433, '            time = 0'), (434, '            for x in range(self.max_time_steps):'), (435, '                time += self.dt'), (436, '                last_point = points[-1]'), (437, '                new_point = last_point + self.dt * (self.point_func(last_point) - origin)'), (438, '                points.append(new_point)'), (439, '                total_arc_len += get_norm(new_point - last_point)'), (440, '                if get_norm(last_point) > self.cutoff_norm:'), (441, '                    break'), (442, '                if total_arc_len > self.arc_len:'), (443, '                    break'), (445, '            line.virtual_time = time'), (446, '            step = max(1, int(len(points) / self.n_samples_per_line))'), (447, '            line.set_points_as_corners(points[::step])'), (448, '            line.make_smooth(approx=True)'), (454, '        sample_coords = get_sample_coords('), (455, '            cs, self.step_multiple,'), (456, '        )'), (460, '            noise_factor = cs.x_range[2] * self.step_multiple * 0.5'), (511, '                run_time=line.virtual_time,')]",No
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,e80b9d0e47fd2078630a6a77836ecc29988ab6e7,0ad5a0e76e8c075380b94be753efd6f1eb47bf65,Less collision-prone file names for downloads,"[(4, 'from pathlib import Path'), (5, 'import hashlib'), (40, '        suffix = Path(file_name).suffix'), (41, ""        file_hash = hashlib.sha256(file_name.encode('utf-8')).hexdigest()[:32]""), (43, ''), (44, '        path = Path(folder, file_hash).with_suffix(suffix)')]","[(38, '        stem, name = os.path.split(file_name)'), (40, '        path = os.path.join(folder, name)')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,55b12c902ca8560ce6fcb6708501b87d1e6167a9,e80b9d0e47fd2078630a6a77836ecc29988ab6e7,Use density as a parameter instead of step_multiple,"[(126, '    density: float = 1.0'), (131, '        step /= density'), (136, 'def vectorize(pointwise_function: Callable[Tuple, Tuple]):'), (137, '    def v_func(coords_array: VectArray) -> VectArray:'), (138, '        return np.array([pointwise_function(*coords) for coords in coords_array])'), (139, ''), (140, '    return v_func'), (141, ''), (142, ''), (149, '        # Vectorized function: Takes in an array of coordinates, returns an array of outputs.'), (151, '        # Typically a set of Axes or NumberPlane'), (153, '        density: float = 2.0,  # Describe as a density instead?'), (175, '        self.sample_coords = get_sample_coords(coordinate_system, density)'), (338, '        density: float = 1.0,'), (361, '        self.density = density'), (405, '        sample_coords = get_sample_coords(cs, self.density)'), (409, '            noise_factor = (cs.get_x_unit_size() / self.density) * 0.5')]","[(126, '    step_multiple: float = 1.0'), (131, '        step *= step_multiple'), (144, '        step_multiple: float = 0.5,'), (166, '        self.sample_coords = get_sample_coords(coordinate_system, step_multiple)'), (329, '        step_multiple: float = 0.5,'), (352, '        self.step_multiple = step_multiple'), (396, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (400, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,753a042dbe5d6987c6036216c69eee9bb7b90fe4,55b12c902ca8560ce6fcb6708501b87d1e6167a9,Remove unused method,[],"[(417, '    def get_start_points(self) -> Vect3Array:'), (418, '        cs = self.coordinate_system'), (419, '        sample_coords = get_sample_coords(cs, self.step_multiple)'), (420, ''), (421, '        noise_factor = self.noise_factor'), (422, '        if noise_factor is None:'), (423, '            noise_factor = cs.get_x_unit_size() * self.step_multiple * 0.5'), (424, ''), (425, '        return np.array(['), (426, '            cs.c2p(*coords) + noise_factor * np.random.random(3)'), (427, '            for n in range(self.n_repeats)'), (428, '            for coords in sample_coords'), (429, '        ])'), (430, '')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,1d0deb8a335490697ed013093aaee21296851319,753a042dbe5d6987c6036216c69eee9bb7b90fe4,Remove OldVectorfield,[],"[(476, ''), (477, ''), (478, 'class OldVectorField(VGroup):'), (479, '    def __init__('), (480, '        self,'), (481, '        func: Callable[[float, float], Sequence[float]],'), (482, '        coordinate_system: CoordinateSystem,'), (483, '        step_multiple: float = 0.5,'), (484, '        magnitude_range: Tuple[float, float] = (0, 2),'), (485, '        color_map: str = ""3b1b_colormap"",'), (486, '        # Takes in actual norm, spits out displayed norm'), (487, '        length_func: Callable[[float], float] = lambda norm: 0.45 * sigmoid(norm),'), (488, '        opacity: float = 1.0,'), (489, '        vector_config: dict = dict(),'), (490, '        **kwargs'), (491, '    ):'), (492, '        super().__init__(**kwargs)'), (493, '        self.func = func'), (494, '        self.coordinate_system = coordinate_system'), (495, '        self.step_multiple = step_multiple'), (496, '        self.magnitude_range = magnitude_range'), (497, '        self.color_map = color_map'), (498, '        self.length_func = length_func'), (499, '        self.opacity = opacity'), (500, '        self.vector_config = dict(vector_config)'), (501, ''), (502, '        self.value_to_rgb = get_vectorized_rgb_gradient_function('), (503, '            *self.magnitude_range, self.color_map,'), (504, '        )'), (505, ''), (506, '        samples = get_sample_coords('), (507, '            coordinate_system, self.step_multiple'), (508, '        )'), (509, '        self.add(*('), (510, '            self.get_vector(coords)'), (511, '            for coords in samples'), (512, '        ))'), (513, ''), (514, '    def get_vector(self, coords: Iterable[float], **kwargs) -> Arrow:'), (515, '        vector_config = merge_dicts_recursively('), (516, '            self.vector_config,'), (517, '            kwargs'), (518, '        )'), (519, ''), (520, '        output = np.array(self.func(*coords))'), (521, '        norm = get_norm(output)'), (522, '        if norm > 0:'), (523, '            output *= self.length_func(norm) / norm'), (524, ''), (525, '        origin = self.coordinate_system.get_origin()'), (526, '        _input = self.coordinate_system.c2p(*coords)'), (527, '        _output = self.coordinate_system.c2p(*output)'), (528, ''), (529, '        vect = Arrow('), (530, '            origin, _output, buff=0,'), (531, '            **vector_config'), (532, '        )'), (533, '        vect.shift(_input - origin)'), (534, '        vect.set_color('), (535, '            rgb_to_color(self.value_to_rgb(norm)),'), (536, '            opacity=self.opacity,'), (537, '        )'), (538, '        return vect')]",No
manimlib/utils/color.py,manimlib/utils/color.py,ed2f9f3305fd73dd5eb8bf7a4691fc735e2342b4,1d0deb8a335490697ed013093aaee21296851319,Fix import of pyplot,"[(8, 'from matplotlib import pyplot'), (161, '    return pyplot.get_cmap(map_name)')]","[(160, '    return plt.get_cmap(map_name)')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,90ab2f64bb781c31641b5d73ecff498cd36cc858,ed2f9f3305fd73dd5eb8bf7a4691fc735e2342b4,Clean up style arguments on VectorField,"[(153, '        density: float = 2.0,'), (155, '        color: Optional[ManimColor] = None,'), (159, '        stroke_width: float = 3,'), (163, '        max_vect_len_to_step_size: float = 0.8,'), (180, '            step_size = get_norm(self.sample_points[1] - self.sample_points[0])'), (181, '            self.max_displayed_vect_len = max_vect_len_to_step_size * step_size'), (192, '        if color is not None:'), (194, '        else:'), (195, '            self.color_map = color_map or get_color_map(color_map_name)'), (204, '        self.set_stroke(color, stroke_width)'), (205, '        self.update_vectors()'), (207, '    def init_points(self):')]","[(153, '        density: float = 2.0,  # Describe as a density instead?'), (157, '        stroke_color: ManimColor = BLUE,'), (159, '        stroke_width: float = 2,'), (179, '            self.max_displayed_vect_len = get_norm(self.sample_points[1] - self.sample_points[0])'), (190, '        if color_map is not None:'), (191, '            self.color_map = color_map'), (192, '        elif color_map_name is not None:'), (193, '            self.color_map = get_color_map(color_map_name)'), (194, '        else:'), (200, '            stroke_color=stroke_color,'), (208, '        self.set_stroke(width=stroke_width)'), (210, '        self.update_vectors()')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,c6b9826f847eafbde96539f828d060d916cae34d,90ab2f64bb781c31641b5d73ecff498cd36cc858,Update TimeVaryingVectorField to match new VectorField configuration,"[(321, '        time_func: Callable[[VectArray, float], VectArray],'), (322, '        coordinate_system: CoordinateSystem,'), (326, ''), (327, '        def func(coords):'), (328, '            return time_func(coords, self.time)'), (329, ''), (330, '        super().__init__(func, coordinate_system, **kwargs)'), (332, '        self.always.update_vectors()')]","[(321, '        time_func,'), (325, '        super().__init__(func=lambda p: time_func(p, self.time), **kwargs)'), (327, '        always(self.update_vectors)')]",No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,5b88d2347cdf3ba1d1670c64a96568aa4602847f,c6b9826f847eafbde96539f828d060d916cae34d,"Allow for LaTeX in DecimalNumber, e.g. for units","[(25, '    if ""\\\\"" in char:'), (26, '        # This is for when the ""character"" is a LaTeX command'), (27, '        # like ^\\circ or \\dots'), (28, '        return Tex(char, **text_config)'), (29, '    else:'), (30, '        return Text(char, **text_config)')]","[(25, '    return Text(char, **text_config)')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,e19ceaaff020b94825e928d2709e26aa4d863395,5b88d2347cdf3ba1d1670c64a96568aa4602847f,Have TexMobject keep track of font_size,"[(51, '        self.font_size = font_size'), (90, '    def _handle_scale_side_effects(self, scale_factor: float) -> Self:'), (91, '        self.font_size *= scale_factor'), (92, '        return self'), (93, '')]",[],No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,54c8a9014b1b5bca7a3020335f79179e870b0d5b,e19ceaaff020b94825e928d2709e26aa4d863395,Add scale_stroke_with_zoom option to VMobject,"[(97, '        scale_stroke_with_zoom: bool = False,'), (114, '        self.scale_stroke_with_zoom = scale_stroke_with_zoom'), (131, '        self.uniforms.update('), (132, '            anti_alias_width=self.anti_alias_width,'), (133, '            joint_type=JOINT_TYPE_MAP[self.joint_type],'), (134, '            flat_stroke=float(self.flat_stroke),'), (135, '            scale_stroke_with_zoom=float(self.scale_stroke_with_zoom)'), (136, '        )'), (407, '    def set_scale_stroke_with_zoom(self, scale_stroke_with_zoom: bool = True, recurse: bool = True) -> Self:'), (408, '        self.set_uniform(recurse, scale_stroke_with_zoom=float(scale_stroke_with_zoom))'), (409, '        pass'), (410, ''), (411, '    def get_scale_stroke_with_zoom(self) -> bool:'), (412, '        return self.uniforms[""flat_stroke""] == 1.0'), (413, '')]","[(129, '        self.uniforms[""anti_alias_width""] = self.anti_alias_width'), (130, '        self.uniforms[""joint_type""] = JOINT_TYPE_MAP[self.joint_type]'), (131, '        self.uniforms[""flat_stroke""] = float(self.flat_stroke)')]",No
manimlib/shaders/quadratic_bezier/stroke/vert.glsl,manimlib/shaders/quadratic_bezier/stroke/vert.glsl,54c8a9014b1b5bca7a3020335f79179e870b0d5b,e19ceaaff020b94825e928d2709e26aa4d863395,Add scale_stroke_with_zoom option to VMobject,"[(5, 'uniform float scale_stroke_with_zoom;'), (26, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, scale_stroke_with_zoom);')]","[(25, '    v_stroke_width = STROKE_WIDTH_CONVERSION * stroke_width * mix(frame_scale, 1, is_fixed_in_frame);')]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,9cd6a87ff88dd7f1805e0394661d79f63b67013c,54c8a9014b1b5bca7a3020335f79179e870b0d5b,Make sure VMobject uniform flat_stroke matches the use inside the quadratic_bezier/stroke/geom.glsl code,"[(7, 'uniform float flat_stroke;'), (65, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve, bool draw_flat){'), (71, '    vec3 unit_tan = normalize(draw_flat ? tangent : project(tangent, unit_normal));'), (96, '    if (!draw_flat){'), (131, '    bool draw_flat'), (134, '    vec3 unit_normal = draw_flat ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve, draw_flat);'), (166, '    bool draw_flat = bool(flat_stroke) || bool(is_fixed_in_frame);'), (210, '            inside_curve, draw_flat')]","[(7, 'uniform float flat_stroke_float;'), (65, 'vec3 step_to_corner(vec3 point, vec3 tangent, vec3 unit_normal, float joint_angle, bool inside_curve, bool flat_stroke){'), (71, '    vec3 unit_tan = normalize(flat_stroke ? tangent : project(tangent, unit_normal));'), (96, '    if (!flat_stroke){'), (131, '    bool flat_stroke'), (134, '    vec3 unit_normal = flat_stroke ? v_unit_normal[1] : normalize(camera_position - point);'), (141, '    vec3 step = step_to_corner(point, tangent, unit_normal, joint_angle, inside_curve, flat_stroke);'), (166, '    bool flat_stroke = bool(flat_stroke_float) || bool(is_fixed_in_frame);'), (210, '            inside_curve, flat_stroke')]",No
manimlib/shaders/quadratic_bezier/stroke/geom.glsl,manimlib/shaders/quadratic_bezier/stroke/geom.glsl,dd51b696e5c473c55dc20ed51ed7ad0cefee29b9,9cd6a87ff88dd7f1805e0394661d79f63b67013c,Only apply non-flat-stroke correction in non-zero joint angle vertices,"[(81, '    if(joint_angle != 0){'), (82, '        float alignment = abs(dot(normalize(tangent), unit_normal));'), (83, '        float alignment_threshold = 0.97;  // This could maybe be chosen in a more principled way based on stroke width'), (84, '        if (alignment > alignment_threshold) {'), (85, '            vec3 perp = normalize(cross(v_unit_normal[1], tangent));'), (86, '            step = mix(step, project(step, perp), smoothstep(alignment_threshold, 1.0, alignment));'), (87, '        }')]","[(81, '    float alignment = abs(dot(normalize(tangent), unit_normal));'), (82, '    float alignment_threshold = 0.97;  // This could maybe be chosen in a more principled way based on stroke width'), (83, '    if (alignment > alignment_threshold) {'), (84, '        vec3 perp = normalize(cross(v_unit_normal[1], tangent));'), (85, '        step = mix(step, project(step, perp), smoothstep(alignment_threshold, 1.0, alignment));')]",No
manimlib/shaders/surface/vert.glsl,manimlib/shaders/surface/vert.glsl,fbce0b132ccbdd05da903d7147b6583f10ef6cc4,dd51b696e5c473c55dc20ed51ed7ad0cefee29b9,"Temporary band-aide for degenerate normal vector calculations

This solution is a bit too specific to the case of spheres.","[(14, 'const float EPSILON = 1e-10;'), (15, ''), (18, '    vec3 du = (du_point - point);'), (19, '    vec3 dv = (dv_point - point);'), (20, '    vec3 normal = cross(du, dv);'), (21, '    float mag = length(normal);'), (22, '    vec3 unit_normal = (mag < EPSILON) ? vec3(0, 0, sign(point.z)) : normal / mag;'), (23, '    v_color = finalize_color(rgba, point, unit_normal);')]","[(16, '    vec3 normal = cross(normalize(du_point - point), normalize(dv_point - point));'), (17, '    v_color = finalize_color(rgba, point, normalize(normal));')]",No
manimlib/mobject/three_dimensions.py,manimlib/mobject/three_dimensions.py,85638d88dc7f26d0e5de8074465c754821c295b9,fbce0b132ccbdd05da903d7147b6583f10ef6cc4,Update parameter range for sphere,"[(97, '        v_range: Tuple[float, float] = (0, PI),')]","[(97, '        v_range: Tuple[float, float] = (1e-5, PI - 1e-5),'), (161, '')]",No
manimlib/__main__.py,manimlib/__main__.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug 🎉)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","[(6, 'from manimlib.reload_manager import reload_manager'), (10, '    """"""'), (11, '    Main entry point for ManimGL.'), (12, '    """"""'), (23, '        return'), (25, '    reload_manager.args = args'), (26, '    reload_manager.run()')]","[(4, 'import manimlib.extract_scene'), (20, '    else:'), (21, '        config = manimlib.config.get_configuration(args)'), (22, '        scenes = manimlib.extract_scene.main(config)'), (24, '        for scene in scenes:'), (25, '            scene.run()')]",No
N/A,manimlib/reload_manager.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug 🎉)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","[(1, 'from typing import Any'), (2, 'from IPython.terminal.embed import KillEmbedded'), (3, ''), (4, ''), (5, 'class ReloadManager:'), (6, '    """"""'), (7, '    Manages the loading and running of scenes and is called directly from the'), (8, '    main entry point of ManimGL.'), (9, ''), (10, '    The name ""reload"" comes from the fact that this class handles the'), (11, '    reinitialization of scenes when requested by the user via the `reload()`'), (12, '    command in the IPython shell.'), (13, '    """"""'), (14, ''), (15, '    args: Any = None'), (16, '    scenes: list[Any] = []'), (17, '    window = None'), (18, ''), (19, '    # The line number to load the scene from when reloading'), (20, '    start_at_line = None'), (21, ''), (22, '    def set_new_start_at_line(self, start_at_line):'), (23, '        """"""'), (24, '        Sets/Updates the line number to load the scene from when reloading.'), (25, '        """"""'), (26, '        self.start_at_line = start_at_line'), (27, ''), (28, '    def run(self):'), (29, '        """"""'), (30, '        Runs the scenes in a loop and detects when a scene reload is requested.'), (31, '        """"""'), (32, '        while True:'), (33, '            try:'), (34, '                # blocking call since a scene will init an IPython shell()'), (35, '                self.retrieve_scenes_and_run(self.start_at_line)'), (36, '                return'), (37, '            except KillEmbedded:'), (38, '                # Requested via the `exit_raise` IPython runline magic'), (39, '                # by means of our scene.reload() command'), (40, '                print(""Reloading..."")'), (41, ''), (42, '                for scene in self.scenes:'), (43, '                    scene.tear_down()'), (44, ''), (45, '                self.scenes = []'), (46, ''), (47, '            except KeyboardInterrupt:'), (48, '                break'), (49, ''), (50, '    def retrieve_scenes_and_run(self, overwrite_start_at_line: int | None = None):'), (51, '        """"""'), (52, '        Creates a new configuration based on the CLI args and runs the scenes.'), (53, '        """"""'), (54, '        import manimlib.config'), (55, '        import manimlib.extract_scene'), (56, ''), (57, '        # Args'), (58, '        if self.args is None:'), (59, '            raise RuntimeError(""Fatal error: No args were passed to the ReloadManager"")'), (60, '        if overwrite_start_at_line is not None:'), (61, '            self.args.embed = str(overwrite_start_at_line)'), (62, ''), (63, '        # Args to Config'), (64, '        config = manimlib.config.get_configuration(self.args)'), (65, '        if self.window:'), (66, '            config[""existing_window""] = self.window  # see scene initialization'), (67, ''), (68, '        # Scenes'), (69, '        self.scenes = manimlib.extract_scene.main(config)'), (70, '        if len(self.scenes) == 0:'), (71, '            print(""No scenes found to run"")'), (72, '            return'), (73, ''), (74, '        # Find first available window'), (75, '        for scene in self.scenes:'), (76, '            if scene.window is not None:'), (77, '                self.window = scene.window'), (78, '                break'), (79, ''), (80, '        for scene in self.scenes:'), (81, '            scene.run()'), (82, ''), (83, ''), (84, 'reload_manager = ReloadManager()')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug 🎉)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","[(31, 'from manimlib.reload_manager import reload_manager'), (43, 'from manimlib.window import Window'), (92, '        existing_window: Window | None = None,'), (111, '        # Initialize window, if applicable (and reuse window if provided during'), (112, '        # reload by means of the ReloadManager)'), (114, '            if existing_window:'), (115, '                self.window = existing_window'), (116, '                self.window.update_scene(self)'), (117, '            else:'), (118, '                self.window = Window(scene=self, **self.window_config)'), (119, '                self.camera_config[""fps""] = 30  # Where\'s that 30 from?'), (161, '    def get_window(self) -> Window | None:'), (162, '        return self.window'), (163, ''), (236, '        self.shell = shell'), (248, '            reload=self.reload,'), (772, '        if self.shell is None or self.window is None:'), (813, '        self.shell.run_cell(pasted)'), (998, '    def reload(self, start_at_line: int | None = None) -> None:'), (999, '        """"""'), (1000, '        Reloads the scene just like the `manimgl` command would do with the'), (1001, '        same arguments that were provided for the initial startup. This allows'), (1002, ""        for quick iteration during scene development since we don't have to exit""), (1003, '        the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (1004, '        open during the reload.'), (1005, ''), (1006, '        If `start_at_line` is provided, the scene will be reloaded at that line'), (1007, '        number. This corresponds to the `linemarker` param of the'), (1008, '        `config.get_module_with_inserted_embed_line()` method.'), (1009, ''), (1010, '        Before reload, the scene is cleared and the entire state is reset, such'), (1011, '        that we can start from a clean slate. This is taken care of by the'), (1012, '        ReloadManager, which will catch the error raised by the `exit_raise`'), (1013, '        magic command that we invoke here.'), (1014, '        Note that we cannot define a custom exception class for this error,'), (1015, '        since the IPython kernel will swallow any exception. While we can catch'), (1016, '        such an exception in our custom exception handler registered with the'), (1017, '        `set_custom_exc` method, we cannot break out of the IPython shell by'), (1018, '        this means.'), (1019, '        """"""'), (1020, '        reload_manager.set_new_start_at_line(start_at_line)'), (1021, '        self.shell.run_line_magic(""exit_raise"", """")'), (1022, '')]","[(15, 'from IPython.core.getipython import get_ipython'), (109, '        # Initialize window, if applicable'), (111, '            from manimlib.window import Window'), (112, '            self.window = Window(scene=self, **self.window_config)'), (114, '            self.camera_config[""fps""] = 30  # Where\'s that 30 from?'), (761, '        shell = get_ipython()'), (762, '        if shell is None or self.window is None:'), (803, '        shell.run_cell(pasted)')]",No
manimlib/window.py,manimlib/window.py,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,530cb4f10465aa1b872f1ec2ba59f40195c419b7,"Add `reload()` command for interactive scene reloading (#2240)

* Init reload command (lots of things not working yet)

* Add back in class line (accidentally deleted)

* Add back in key modifiers (accidentally deleted)

* Unpack tuple from changed `get_module`

* Init MainRunManager & respawn IPython shell

* Init cleanup of scenes from manager

* Restore string quotes

* Still take `self.preview` into account

* Remove left-over code from module experimentation

* Remove double window activation

* Reset scenes array in RunManager

* Move self.args None check up

* Use first available window

* Don't use constructor for RunManager

* Use self. syntax

* Init moderngl context manually

* Add some comments for failed attempts to reset scene

* Reuse existing shell (this fixed the bug 🎉)

* Remove unused code

* Remove unnecessary intermediate ReloadSceneException

* Allow users to finally exit

* Rename main_run_manager to reload_manager

* Add docstrings to `ReloadManager`

* Improve reset management in window

* Clarify why we use magic exit_raise command

* Add comment about window reuse

* Improve docstrings in ReloadManager & handle case of 0 scenes

* Set scene and title earlier

* Run linter suggestions","[(41, '        self.update_scene(scene)'), (42, ''), (43, '    def update_scene(self, scene: Scene):'), (44, '        """"""'), (45, '        Resets the state and updates the scene associated to this window.'), (46, ''), (47, '        This is necessary when we want to reuse an *existing* window after a'), (48, '        `scene.reload()` was requested, which will create new scene instances.'), (49, '        """"""'), (50, '        self.pressed_keys.clear()'), (53, '        self.scene = scene'), (54, '        self.title = str(scene)'), (55, ''), (56, '        self.init_mgl_context()'), (57, ''), (60, '        mglw.activate_context(window=self, ctx=self.ctx)')]","[(38, '        self.scene = scene'), (40, '        self.title = str(scene)'), (45, '        mglw.activate_context(window=self)')]",No
README.md,README.md,8239f1bf3510cd327c58d470b3808b5f4ce33720,1fa17030a2d668fd2a6ad0fc1b3901ff447c7cb1,Update README.md for better readability (#2246),"[(18, '> [!Warning]'), (19, '> **WARNING:** These instructions are for ManimGL _only_. Trying to use these instructions to install [Manim Community/manim](https://github.com/ManimCommunity/manim) or instructions there to install this version will cause problems. You should first decide which version you wish to install, then only follow the instructions for your desired version.'), (20, ''), (21, '> [!Note]')]","[(18, '> **WARNING:** These instructions are for ManimGL _only_. Trying to use these instructions to install [ManimCommunity/manim](https://github.com/ManimCommunity/manim) or instructions there to install this version will cause problems. You should first decide which version you wish to install, then only follow the instructions for your desired version.'), (19, '>')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,d78fe9374397ba73f16c7ba21b1b1b879a73400b,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Remove print(""Reloading..."")",[],"[(40, '                print(""Reloading..."")'), (41, '')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,f8280a12be5c80faffbcf2979cb2eef9c3a31fdc,d78fe9374397ba73f16c7ba21b1b1b879a73400b,"Change where exception mode is set, to be quieter","[(235, '        shell = InteractiveShellEmbed('), (236, '            user_module=module,'), (237, '            display_banner=False,'), (238, '            xmode=self.embed_exception_mode'), (239, '        )')]","[(235, '        shell = InteractiveShellEmbed(user_module=module)'), (291, '        # Set desired exception mode'), (292, '        shell.magic(f""xmode {self.embed_exception_mode}"")'), (293, '')]",No
manimlib/config.py,manimlib/config.py,671a31b298ede5e51bf91f8b143813e1079873e0,f8280a12be5c80faffbcf2979cb2eef9c3a31fdc,Add default fallback monitor for when no monitors are detected,"[(438, '        # Default fallback'), (439, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]')]","[(438, '        pass')]",No
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","[(69, '        svg_string = self.get_svg_string()'), (70, '        super().__init__(svg_string=svg_string, **kwargs)'), (75, '    def get_svg_string(self, is_labelled: bool = False) -> str:'), (76, '        content = self.get_content(is_labelled or self.use_labelled_svg)'), (77, '        return self.get_svg_string_by_content(content)'), (80, '    def get_svg_string_by_content(self, content: str) -> str:'), (113, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (114, '        submobs = super().mobjects_from_svg_string(svg_string)')]","[(69, '        super().__init__(**kwargs)'), (74, '    def get_file_path(self, is_labelled: bool = False) -> str:'), (75, '        is_labelled = is_labelled or self.use_labelled_svg'), (76, '        return self.get_file_path_by_content(self.get_content(is_labelled))'), (79, '    def get_file_path_by_content(self, content: str) -> str:'), (112, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (113, '        submobs = super().mobjects_from_file(file_path)')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","[(9, 'from pathlib import Path'), (47, '        svg_string: str = """",'), (72, '        if svg_string != """":'), (73, '            self.svg_string = svg_string'), (74, '        elif file_name != """":'), (75, '            self.svg_string = self.file_name_to_svg_string(file_name)'), (76, '        elif self.file_name != """":'), (77, '            self.file_name_to_svg_string(self.file_name)'), (78, '        else:'), (79, '            raise Exception(""Must specify either a file_name or svg_string SVGMobject"")'), (80, ''), (84, '        super().__init__(**kwargs)'), (114, '            submobs = self.mobjects_from_svg_string(self.svg_string)'), (128, '            self.svg_string'), (131, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (132, '        element_tree = ET.ElementTree(ET.fromstring(svg_string))'), (144, '    def file_name_to_svg_string(self, file_name: str) -> str:'), (145, '        return Path(get_full_vector_image_path(file_name)).read_text()')]","[(70, '        self.file_name = file_name or self.file_name'), (74, '        super().__init__(**kwargs )'), (104, '            submobs = self.mobjects_from_file(self.get_file_path())'), (118, '            self.file_name'), (121, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (122, '        element_tree = ET.parse(file_path)'), (134, '    def get_file_path(self) -> str:'), (135, '        if self.file_name is None:'), (136, '            raise Exception(""Must specify file for SVGMobject"")'), (137, '        return get_full_vector_image_path(self.file_name)')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","[(4, 'from pathlib import Path'), (86, '    def get_svg_string_by_content(self, content: str) -> str:'), (87, '        # TODO, implement this without writing to a file'), (88, '        file_path = tex_content_to_svg_file('), (91, '        return Path(file_path).read_text()')]","[(85, '    def get_file_path_by_content(self, content: str) -> str:'), (86, '        return tex_content_to_svg_file(')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,88370d4d5da329d4866b5edd68cf7e267d0d822e,671a31b298ede5e51bf91f8b143813e1079873e0,"Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input","[(7, 'import tempfile'), (8, 'import hashlib'), (174, '    def get_svg_string_by_content(self, content: str) -> str:'), (175, '        # TODO, check the cache'), (183, '        # hash_string(hash_content)'), (184, '        key = hashlib.sha256(hash_content.encode()).hexdigest()'), (185, '        return self.markup_to_svg_string(content)'), (187, '    def markup_to_svg_string(self, markup_str: str) -> str:'), (198, ""        with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (199, '            manimpango.MarkupUtils.text2svg('), (200, '                text=markup_str,'), (201, '                font="""",                     # Already handled'), (202, '                slant=""NORMAL"",              # Already handled'), (203, '                weight=""NORMAL"",             # Already handled'), (204, '                size=1,                      # Already handled'), (205, '                _=0,                         # Empty parameter'), (206, '                disable_liga=False,'), (207, '                file_name=tmp.name,'), (208, '                START_X=0,'), (209, '                START_Y=0,'), (210, '                width=DEFAULT_CANVAS_WIDTH,'), (211, '                height=DEFAULT_CANVAS_HEIGHT,'), (212, '                justify=self.justify,'), (213, '                indent=self.indent,'), (214, '                line_spacing=None,           # Already handled'), (215, '                alignment=alignment,'), (216, '                pango_width=pango_width'), (217, '            )'), (218, ''), (219, '            # Read the contents'), (220, '            tmp.seek(0)'), (221, '            return tmp.read()')]","[(172, '    def get_file_path_by_content(self, content: str) -> str:'), (180, '        svg_file = os.path.join('), (181, '            get_text_dir(), hash_string(hash_content) + "".svg""'), (182, '        )'), (183, '        if not os.path.exists(svg_file):'), (184, '            self.markup_to_svg(content, svg_file)'), (185, '        return svg_file'), (187, '    def markup_to_svg(self, markup_str: str, file_name: str) -> str:'), (198, '        return manimpango.MarkupUtils.text2svg('), (199, '            text=markup_str,'), (200, '            font="""",                     # Already handled'), (201, '            slant=""NORMAL"",              # Already handled'), (202, '            weight=""NORMAL"",             # Already handled'), (203, '            size=1,                      # Already handled'), (204, '            _=0,                         # Empty parameter'), (205, '            disable_liga=False,'), (206, '            file_name=file_name,'), (207, '            START_X=0,'), (208, '            START_Y=0,'), (209, '            width=DEFAULT_CANVAS_WIDTH,'), (210, '            height=DEFAULT_CANVAS_HEIGHT,'), (211, '            justify=self.justify,'), (212, '            indent=self.indent,'), (213, '            line_spacing=None,           # Already handled'), (214, '            alignment=alignment,'), (215, '            pango_width=pango_width'), (216, '        )')]",No
manimlib/__init__.py,manimlib/__init__.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","[(64, 'from manimlib.utils.cache import *')]",[],No
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","[(10, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (79, '    def get_svg_string_by_content(self, content: str) -> str:'), (80, '        return get_cached_value('), (81, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (82, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),'), (83, '            message=f""Writing {self.tex_string}...""')]","[(10, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (79, '    def get_file_path(self) -> str:'), (80, '        content = self.get_tex_file_body(self.tex_string)'), (81, '        file_path = tex_content_to_svg_file('), (82, '            content, self.template, self.additional_preamble, self.tex_string'), (84, '        return file_path')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings",[],"[(23, 'from manimlib.utils.simple_functions import hash_string')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","[(9, 'from manimlib.utils.cache import get_cached_value'), (12, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (14, 'from manimlib.utils.simple_functions import hash_string'), (89, '        return get_cached_value('), (90, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (91, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),'), (92, '            message=f""Writing {self.tex_string}...""')]","[(11, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (87, '        # TODO, implement this without writing to a file'), (88, '        file_path = tex_content_to_svg_file('), (89, '            content, self.template, self.additional_preamble, self.tex_string'), (91, '        return Path(file_path).read_text()')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","[(19, 'from manimlib.utils.cache import get_cached_value'), (22, 'from manimlib.utils.customization import get_customization'), (176, '        key = hash_string(str(('), (182, '        )))'), (183, '        return get_cached_value(key, lambda: self.markup_to_svg_string(content))')]","[(19, 'from manimlib.utils.customization import get_customization'), (175, '        # TODO, check the cache'), (176, '        hash_content = str(('), (182, '        ))'), (183, '        # hash_string(hash_content)'), (184, '        key = hashlib.sha256(hash_content.encode()).hexdigest()'), (185, '        return self.markup_to_svg_string(content)')]",No
N/A,manimlib/utils/cache.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","[(1, 'import appdirs'), (2, 'import os'), (3, 'from diskcache import Cache'), (4, 'from contextlib import contextmanager'), (5, ''), (6, ''), (7, 'CACHE_SIZE = 1e9  # 1 Gig'), (8, ''), (9, ''), (10, 'def get_cached_value(key, value_func, message=""""):'), (11, '    cache_dir = appdirs.user_cache_dir(""manim"")'), (12, '    cache = Cache(cache_dir, size_limit=CACHE_SIZE)'), (13, ''), (14, '    value = cache.get(key)'), (15, '    if value is None:'), (16, '        with display_during_execution(message):'), (17, '            value = value_func()'), (18, '        cache.set(key, value)'), (19, '    return value'), (20, ''), (21, ''), (22, '@contextmanager'), (23, 'def display_during_execution(message: str):'), (24, '    # Merge into a single line'), (25, '    to_print = message.replace(""\\n"", "" "")'), (26, '    max_characters = os.get_terminal_size().columns - 1'), (27, '    if len(to_print) > max_characters:'), (28, '        to_print = to_print[:max_characters - 3] + ""...""'), (29, '    try:'), (30, '        print(to_print, end=""\\r"")'), (31, '        yield'), (32, '    finally:'), (33, '        print("" "" * len(to_print), end=""\\r"")')]",[],No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,129e512b0c1258de621eba14e01594dfa1c5847b,88370d4d5da329d4866b5edd68cf7e267d0d822e,"Add caching functionality, and have Tex and Text both use it for saved svg strings","[(7, 'from pathlib import Path'), (8, 'import tempfile'), (9, ''), (56, 'def tex_to_svg('), (57, '    content: str,'), (58, '    template: str,'), (59, '    additional_preamble: str,'), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (81, '        create_tex_svg(full_tex, tmp.name, compiler)'), (82, '        # Read the contents'), (83, '        tmp.seek(0)'), (84, '        return tmp.read()')]","[(3, 'from contextlib import contextmanager'), (54, 'def tex_content_to_svg_file('), (55, '    content: str, template: str, additional_preamble: str,'), (56, '    short_tex: str'), (77, '    svg_file = os.path.join('), (78, '        get_tex_dir(), hash_string(full_tex) + "".svg""'), (79, '    )'), (80, '    if not os.path.exists(svg_file):'), (81, ""        # If svg doesn't exist, create it""), (82, '        with display_during_execution(""Writing "" + short_tex):'), (83, '            create_tex_svg(full_tex, svg_file, compiler)'), (84, '    return svg_file'), (148, '# TODO, perhaps this should live elsewhere'), (149, '@contextmanager'), (150, 'def display_during_execution(message: str):'), (151, '    # Merge into a single line'), (152, '    to_print = message.replace(""\\n"", "" "")'), (153, '    max_characters = os.get_terminal_size().columns - 1'), (154, '    if len(to_print) > max_characters:'), (155, '        to_print = to_print[:max_characters - 3] + ""...""'), (156, '    try:'), (157, '        print(to_print, end=""\\r"")'), (158, '        yield'), (159, '    finally:'), (160, '        print("" "" * len(to_print), end=""\\r"")'), (161, ''), (162, '')]",No
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,ac01b144e8d1916645122f40885f816aa8f7e64c,129e512b0c1258de621eba14e01594dfa1c5847b,Clean up tex_file_writing,"[(10, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (82, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),')]","[(10, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (82, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,ac01b144e8d1916645122f40885f816aa8f7e64c,129e512b0c1258de621eba14e01594dfa1c5847b,Clean up tex_file_writing,"[(12, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (91, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),')]","[(12, 'from manimlib.utils.tex_file_writing import tex_to_svg'), (91, '            value_func=lambda: tex_to_svg(content, self.template, self.additional_preamble),')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,ac01b144e8d1916645122f40885f816aa8f7e64c,129e512b0c1258de621eba14e01594dfa1c5847b,Clean up tex_file_writing,"[(6, 'import subprocess'), (23, '    template_path = os.path.join(get_manim_dir(), ""manimlib"", ""tex_templates.yml"")'), (24, '    with open(template_path, encoding=""utf-8"") as tex_templates_file:'), (56, 'def get_full_tex(content: str, preamble: str = """"):'), (57, '    return ""\\n\\n"".join(('), (66, 'def latex_to_svg('), (67, '    latex: str,'), (68, '    template: str = """",'), (69, '    additional_preamble: str = """"'), (70, ') -> str:'), (71, '    """"""Convert LaTeX string to SVG string.'), (72, ''), (73, '    Args:'), (74, '        latex: LaTeX source code'), (75, '        template: Path to a template LaTeX file'), (76, '        additional_preamble: String including any added ""\\\\usepackage{...}"" style imports'), (77, ''), (78, '    Returns:'), (79, '        str: SVG source code'), (80, ''), (81, '    Raises:'), (82, '        LatexError: If LaTeX compilation fails'), (83, '        NotImplementedError: If compiler is not supported'), (84, '    """"""'), (85, '    tex_config = get_tex_config()'), (86, '    if template and template != tex_config[""template""]:'), (87, '        tex_config = get_tex_template_config(template)'), (88, ''), (89, '    compiler = tex_config[""compiler""]'), (98, '        raise NotImplementedError(f""Compiler \'{compiler}\' is not implemented"")'), (99, ''), (100, '    preamble = tex_config[""preamble""] + ""\\n"" + additional_preamble'), (101, '    full_tex = get_full_tex(latex, preamble)'), (102, ''), (103, '    # Write intermediate files to a temporary directory'), (104, '    with tempfile.TemporaryDirectory() as temp_dir:'), (105, '        base_path = os.path.join(temp_dir, ""working"")'), (106, '        tex_path = base_path + "".tex""'), (107, '        dvi_path = base_path + dvi_ext'), (108, ''), (109, '        # Write tex file'), (110, '        with open(tex_path, ""w"", encoding=""utf-8"") as tex_file:'), (111, '            tex_file.write(full_tex)'), (112, ''), (113, '        # Run latex compiler'), (114, '        process = subprocess.run('), (115, '            ['), (116, '                program.split()[0],  # Split for xelatex case'), (117, '                ""-interaction=batchmode"",'), (118, '                ""-halt-on-error"",'), (119, '                ""-output-directory="" + temp_dir,'), (120, '                tex_path'), (121, '            ] + ([""--no-pdf""] if compiler == ""xelatex"" else []),'), (122, '            capture_output=True,'), (123, '            text=True'), (126, '        if process.returncode != 0:'), (127, '            # Handle error'), (128, '            error_str = """"'), (129, '            log_path = base_path + "".log""'), (130, '            if os.path.exists(log_path):'), (131, '                with open(log_path, ""r"", encoding=""utf-8"") as log_file:'), (132, '                    content = log_file.read()'), (133, '                    error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (134, '                    if error_match:'), (135, '                        error_str = error_match.group()'), (136, '            raise LatexError(error_str or ""LaTeX compilation failed"")'), (137, ''), (138, '        # Run dvisvgm and capture output directly'), (139, '        process = subprocess.run('), (140, '            ['), (141, '                ""dvisvgm"",'), (142, '                dvi_path,'), (143, '                ""-n"",  # no fonts'), (144, '                ""-v"", ""0"",  # quiet'), (145, '                ""--stdout"",  # output to stdout instead of file'), (146, '            ],'), (147, '            capture_output=True'), (149, ''), (150, '        # Return SVG string'), (151, ""        return process.stdout.decode('utf-8')"")]","[(22, '    with open(os.path.join('), (23, '        get_manim_dir(), ""manimlib"", ""tex_templates.yml""'), (24, '    ), encoding=""utf-8"") as tex_templates_file:'), (56, 'def tex_to_svg('), (57, '    content: str,'), (58, '    template: str,'), (59, '    additional_preamble: str,'), (60, ') -> str:'), (61, '    tex_config = get_tex_config()'), (62, '    if not template or template == tex_config[""template""]:'), (63, '        compiler = tex_config[""compiler""]'), (64, '        preamble = tex_config[""preamble""]'), (65, '    else:'), (66, '        config = get_tex_template_config(template)'), (67, '        compiler = config[""compiler""]'), (68, '        preamble = config[""preamble""]'), (69, ''), (70, '    if additional_preamble:'), (71, '        preamble += ""\\n"" + additional_preamble'), (72, '    full_tex = ""\\n\\n"".join(('), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (81, '        create_tex_svg(full_tex, tmp.name, compiler)'), (82, '        # Read the contents'), (83, '        tmp.seek(0)'), (84, '        return tmp.read()'), (87, 'def create_tex_svg(full_tex: str, svg_file: str, compiler: str) -> None:'), (95, '        raise NotImplementedError('), (96, '            f""Compiler \'{compiler}\' is not implemented""'), (99, '    # Write tex file'), (100, '    root, _ = os.path.splitext(svg_file)'), (101, '    with open(root + "".tex"", ""w"", encoding=""utf-8"") as tex_file:'), (102, '        tex_file.write(full_tex)'), (103, ''), (104, '    # tex to dvi'), (105, '    if os.system("" "".join(('), (106, '        program,'), (107, '        ""-interaction=batchmode"",'), (108, '        ""-halt-on-error"",'), (109, '        f""-output-directory=\\""{os.path.dirname(svg_file)}\\"""",'), (110, '        f""\\""{root}.tex\\"""",'), (111, '        "">"",'), (112, '        os.devnull'), (113, '    ))):'), (114, '        log.error('), (115, '            ""LaTeX Error!  Not a worry, it happens to the best of us.""'), (117, '        error_str = """"'), (118, '        with open(root + "".log"", ""r"", encoding=""utf-8"") as log_file:'), (119, '            error_match_obj = re.search(r""(?<=\\n! ).*\\n.*\\n"", log_file.read())'), (120, '            if error_match_obj:'), (121, '                error_str = error_match_obj.group()'), (122, '                log.debug('), (123, '                    f""The error could be:\\n`{error_str}`"",'), (124, '                )'), (125, '        raise LatexError(error_str)'), (126, ''), (127, '    # dvi to svg'), (128, '    os.system("" "".join(('), (129, '        ""dvisvgm"",'), (130, '        f""\\""{root}{dvi_ext}\\"""",'), (131, '        ""-n"",'), (132, '        ""-v"",'), (133, '        ""0"",'), (134, '        ""-o"",'), (135, '        f""\\""{svg_file}\\"""",'), (136, '        "">"",'), (137, '        os.devnull'), (138, '    )))'), (139, ''), (140, '    # Cleanup superfluous documents'), (141, '    for ext in ("".tex"", dvi_ext, "".log"", "".aux""):'), (142, '        try:'), (143, '            os.remove(root + ext)'), (144, '        except FileNotFoundError:'), (145, '            pass')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,0c385e820fe6fedec627626cf4a735fd5d03599a,ac01b144e8d1916645122f40885f816aa8f7e64c,Get rid of get_tex_dir and get_text_dir,[],"[(24, 'from manimlib.utils.directories import get_text_dir')]",No
manimlib/utils/directories.py,manimlib/utils/directories.py,0c385e820fe6fedec627626cf4a735fd5d03599a,ac01b144e8d1916645122f40885f816aa8f7e64c,Get rid of get_tex_dir and get_text_dir,[],"[(17, 'def get_tex_dir() -> str:'), (18, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Tex""))'), (19, ''), (20, ''), (21, 'def get_text_dir() -> str:'), (22, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Text""))'), (23, ''), (24, '')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,0c385e820fe6fedec627626cf4a735fd5d03599a,ac01b144e8d1916645122f40885f816aa8f7e64c,Get rid of get_tex_dir and get_text_dir,[],"[(14, 'from manimlib.utils.directories import get_tex_dir')]",No
manimlib/default_config.yml,manimlib/default_config.yml,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"[(14, '  # For certain object types, especially Tex and Text, manim will save information'), (15, '  # to file to prevent the need to re-compute, e.g. recompiling the latex. By default,'), (16, '  # it stores this saved data to whatever directory appdirs.user_cache_dir(""manim"") returns,'), (17, '  # but here a user can specify a different cache location'), (18, '  cache: """"')]","[(13, '  # Manim often generates tex_files or other kinds of serialized data'), (14, '  # to keep from having to generate the same thing too many times.  By'), (15, '  # default, these will be stored at tempfile.gettempdir(), e.g. this might'), (16, '  # return whatever is at to the TMPDIR environment variable.  If you want to'), (17, '  # specify them elsewhere,')]",No
manimlib/utils/cache.py,manimlib/utils/cache.py,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"[(5, 'from manimlib.utils.directories import get_cache_dir'), (6, ''), (12, '    cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)')]","[(1, 'import appdirs'), (11, '    cache_dir = appdirs.user_cache_dir(""manim"")'), (12, '    cache = Cache(cache_dir, size_limit=CACHE_SIZE)')]",No
manimlib/utils/customization.py,manimlib/utils/customization.py,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"[(3, 'import appdirs'), (21, '        if not directories[""cache""]:'), (22, '            directories[""cache""] = appdirs.user_cache_dir(""manim"")'), (23, '')]",[],No
manimlib/utils/directories.py,manimlib/utils/directories.py,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,0c385e820fe6fedec627626cf4a735fd5d03599a,Allow for a configurable cache location,"[(13, 'def get_cache_dir() -> str:'), (14, '    return get_directories()[""cache""]'), (15, ''), (16, '')]",[],No
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","[(80, '        return latex_to_svg(content, self.template, self.additional_preamble)')]","[(80, '        return get_cached_value('), (81, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (82, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),'), (83, '            message=f""Writing {self.tex_string}...""'), (84, '        )')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","[(88, '        return latex_to_svg(content, self.template, self.additional_preamble, short_tex=self.tex_string)')]","[(9, 'from manimlib.utils.cache import get_cached_value'), (89, '        return get_cached_value('), (90, '            key=hash_string(str((content, self.template, self.additional_preamble))),'), (91, '            value_func=lambda: latex_to_svg(content, self.template, self.additional_preamble),'), (92, '            message=f""Writing {self.tex_string}...""'), (93, '        )')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","[(19, 'from manimlib.utils.cache import cache_on_disk'), (54, '@cache_on_disk'), (55, 'def markup_to_svg_string('), (56, '    markup_str: str,'), (57, '    justify: bool = False,'), (58, '    indent: float = 0,'), (59, '    alignment: str = """",'), (60, '    line_width: float | None = None,'), (61, ') -> str:'), (62, '    validate_error = manimpango.MarkupUtils.validate(markup_str)'), (63, '    if validate_error:'), (64, '        raise ValueError('), (65, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (66, '            f""{validate_error}""'), (67, '        )'), (68, ''), (69, '    # `manimpango` is under construction,'), (70, '    # so the following code is intended to suit its interface'), (71, '    alignment = _Alignment(alignment)'), (72, '    if line_width is None:'), (73, '        pango_width = -1'), (74, '    else:'), (75, '        pango_width = line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (76, ''), (77, ""    # Write the result to a temporary svg file, and return it's contents.""), (78, '    # TODO, better would be to have this not write to file at all'), (79, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (80, '        manimpango.MarkupUtils.text2svg('), (81, '            text=markup_str,'), (82, '            font="""",                     # Already handled'), (83, '            slant=""NORMAL"",              # Already handled'), (84, '            weight=""NORMAL"",             # Already handled'), (85, '            size=1,                      # Already handled'), (86, '            _=0,                         # Empty parameter'), (87, '            disable_liga=False,'), (88, '            file_name=tmp.name,'), (89, '            START_X=0,'), (90, '            START_Y=0,'), (91, '            width=DEFAULT_CANVAS_WIDTH,'), (92, '            height=DEFAULT_CANVAS_HEIGHT,'), (93, '            justify=justify,'), (94, '            indent=indent,'), (95, '            line_spacing=None,           # Already handled'), (96, '            alignment=alignment,'), (97, '            pango_width=pango_width'), (98, '        )'), (99, ''), (100, '        # Read the contents'), (101, '        tmp.seek(0)'), (102, '        return tmp.read()'), (103, ''), (104, ''), (226, '        self.content = content'), (227, '        return markup_to_svg_string('), (229, '            justify=self.justify,'), (230, '            indent=self.indent,'), (231, '            alignment=self.alignment,'), (232, '            line_width=self.line_width')]","[(19, 'from manimlib.utils.cache import get_cached_value'), (175, '        key = hash_string(str(('), (177, '            self.justify,'), (178, '            self.indent,'), (179, '            self.alignment,'), (180, '            self.line_width'), (181, '        )))'), (182, '        return get_cached_value(key, lambda: self.markup_to_svg_string(content))'), (183, ''), (184, '    def markup_to_svg_string(self, markup_str: str) -> str:'), (185, '        self.validate_markup_string(markup_str)'), (186, ''), (187, '        # `manimpango` is under construction,'), (188, '        # so the following code is intended to suit its interface'), (189, '        alignment = _Alignment(self.alignment)'), (190, '        if self.line_width is None:'), (191, '            pango_width = -1'), (192, '        else:'), (193, '            pango_width = self.line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (194, ''), (195, ""        with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (196, '            manimpango.MarkupUtils.text2svg('), (197, '                text=markup_str,'), (198, '                font="""",                     # Already handled'), (199, '                slant=""NORMAL"",              # Already handled'), (200, '                weight=""NORMAL"",             # Already handled'), (201, '                size=1,                      # Already handled'), (202, '                _=0,                         # Empty parameter'), (203, '                disable_liga=False,'), (204, '                file_name=tmp.name,'), (205, '                START_X=0,'), (206, '                START_Y=0,'), (207, '                width=DEFAULT_CANVAS_WIDTH,'), (208, '                height=DEFAULT_CANVAS_HEIGHT,'), (209, '                justify=self.justify,'), (210, '                indent=self.indent,'), (211, '                line_spacing=None,           # Already handled'), (212, '                alignment=alignment,'), (213, '                pango_width=pango_width'), (214, '            )'), (215, ''), (216, '            # Read the contents'), (217, '            tmp.seek(0)'), (218, '            return tmp.read()'), (219, ''), (220, '    @staticmethod'), (221, '    def validate_markup_string(markup_str: str) -> None:'), (222, '        validate_error = manimpango.MarkupUtils.validate(markup_str)'), (223, '        if not validate_error:'), (224, '            return'), (225, '        raise ValueError('), (226, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (227, '            f""{validate_error}""')]",No
manimlib/utils/cache.py,manimlib/utils/cache.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","[(1, 'from __future__ import annotations'), (2, ''), (6, 'from functools import wraps'), (9, 'from manimlib.utils.simple_functions import hash_string'), (10, ''), (11, 'from typing import TYPE_CHECKING'), (12, ''), (13, 'if TYPE_CHECKING:'), (14, ""    T = TypeVar('T')""), (18, '_cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)'), (19, ''), (21, 'def cache_on_disk(func: Callable[..., T]) -> Callable[..., T]:'), (22, '    @wraps(func)'), (23, '    def wrapper(*args, **kwargs):'), (24, '        key = hash_string("""".join(map(str, [func.__name__, args, kwargs])))'), (25, '        value = _cache.get(key)'), (26, '        if value is None:'), (27, '            # print(f""Executing {func.__name__}({args[0]}, ...)"")'), (28, '            value = func(*args, **kwargs)'), (29, '            _cache.set(key, value)'), (30, '        return value'), (31, '    return wrapper'), (34, 'def clear_cache():'), (35, '    _cache.clear()')]","[(11, 'def get_cached_value(key, value_func, message=""""):'), (12, '    cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)'), (14, '    value = cache.get(key)'), (15, '    if value is None:'), (16, '        with display_during_execution(message):'), (17, '            value = value_func()'), (18, '        cache.set(key, value)'), (19, '    return value')]",No
manimlib/utils/customization.py,manimlib/utils/customization.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","[(14, '        print(CUSTOMIZATION)'), (16, '        print(CUSTOMIZATION)')]",[],No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,89ddfadf6b2d21cc76b334c9fecebdc9fb190353,"Make caching on disk a decorator, and update implementations for Tex and Text mobjects","[(11, 'from manimlib.utils.cache import cache_on_disk'), (66, '@cache_on_disk'), (70, '    additional_preamble: str = """",'), (71, '    short_tex: str = """",'), (72, '    show_message_during_execution: bool = True,'), (88, '    if show_message_during_execution:'), (89, '        max_message_len = 80'), (90, '        message = f""Writing {short_tex or latex}""'), (91, '        if len(message) > max_message_len:'), (92, '            message = message[:max_message_len - 3] + ""...""'), (93, '        print(message, end=""\\r"")'), (94, ''), (161, ""        result = process.stdout.decode('utf-8')""), (162, ''), (163, '    if show_message_during_execution:'), (164, '        print("" "" * len(message), end=""\\r"")'), (165, ''), (166, '    return result')]","[(68, '    additional_preamble: str = """"'), (150, ""        return process.stdout.decode('utf-8')"")]",No
manimlib/utils/customization.py,manimlib/utils/customization.py,cfb7d2fa47f13799a19088d880fb6ac06b95f970,43821ab2baafe44e5b0de99ed8e4d97cc44e2d20,Remove stray prints,[],"[(14, '        print(CUSTOMIZATION)'), (16, '        print(CUSTOMIZATION)')]",No
manimlib/config.py,manimlib/config.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","[(13, 'from functools import lru_cache'), (14, ''), (302, 'def load_yaml(file_path: str):'), (303, '    try:'), (304, '        with open(file_path, ""r"") as file:'), (305, '            return yaml.safe_load(file) or {}'), (306, '    except FileNotFoundError:'), (307, '        return {}'), (310, '@lru_cache'), (311, 'def get_global_config():'), (312, '    args = parse_cli()'), (315, '    print(f""global_defaults_file = {global_defaults_file}"")'), (316, '    print(f""args.config_file = {args.config_file}"")'), (318, '    return merge_dicts_recursively('), (319, '        load_yaml(global_defaults_file),'), (320, '        load_yaml(""custom_config.yml""),  # From current working directory'), (321, '        load_yaml(args.config_file) if args.config_file else {},'), (322, '    )'), (458, '    global_config = get_global_config()'), (459, '    camera_config = get_camera_config(args, global_config)'), (460, '    window_config = get_window_config(args, global_config, camera_config)'), (466, '        ""file_writer_config"": get_file_writer_config(args, global_config),'), (479, '        ""embed_exception_mode"": global_config[""embed_exception_mode""],'), (480, '        ""embed_error_sound"": global_config[""embed_error_sound""],'), (489, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (494, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (499, '    cam_config = get_camera_config(parse_cli(), get_global_config())')]","[(22, '__config_file__ = ""custom_config.yml""'), (23, ''), (24, ''), (303, 'def get_custom_config():'), (304, '    global __config_file__'), (305, ''), (306, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (308, '    if os.path.exists(global_defaults_file):'), (309, '        with open(global_defaults_file, ""r"") as file:'), (310, '            custom_config = yaml.safe_load(file)'), (311, ''), (312, '        if os.path.exists(__config_file__):'), (313, '            with open(__config_file__, ""r"") as file:'), (314, '                local_defaults = yaml.safe_load(file)'), (315, '            if local_defaults:'), (316, '                custom_config = merge_dicts_recursively('), (317, '                    custom_config,'), (318, '                    local_defaults,'), (319, '                )'), (320, '    else:'), (321, '        with open(__config_file__, ""r"") as file:'), (322, '            custom_config = yaml.safe_load(file)'), (323, ''), (324, '    # Check temporary storage(custom_config)'), (325, '    if custom_config[""directories""][""temporary_storage""] == """" and sys.platform == ""win32"":'), (326, '        log.warning('), (327, '            ""You may be using Windows platform and have not specified the path of"" + \\'), (328, '            "" `temporary_storage`, which may cause OSError. So it is recommended"" + \\'), (329, '            "" to specify the `temporary_storage` in the config file (.yml)""'), (330, '        )'), (331, ''), (332, '    return custom_config'), (333, ''), (334, ''), (335, 'def init_global_config(config_file):'), (336, '    global __config_file__'), (337, ''), (338, '    # ensure __config_file__ always exists'), (339, '    if config_file is not None:'), (340, '        if not os.path.exists(config_file):'), (341, '            log.error(f""Can\'t find {config_file}."")'), (342, ""            if sys.platform == 'win32':""), (343, '                log.info(f""Copying default configuration file to {config_file}..."")'), (344, '                os.system(f""copy default_config.yml {config_file}"")'), (345, '            elif sys.platform in [""linux2"", ""darwin""]:'), (346, '                log.info(f""Copying default configuration file to {config_file}..."")'), (347, '                os.system(f""cp default_config.yml {config_file}"")'), (348, '            else:'), (349, '                log.info(""Please create the configuration file manually."")'), (350, '            log.info(""Read configuration from default_config.yml."")'), (351, '        else:'), (352, '            __config_file__ = config_file'), (356, '    if not (os.path.exists(global_defaults_file) or os.path.exists(__config_file__)):'), (357, '        log.info(""There is no configuration file detected. Switch to the config file initializer:"")'), (358, '        init_customization()'), (360, '    elif not os.path.exists(__config_file__):'), (361, '        log.info(f""Using the default configuration file, which you can modify in `{global_defaults_file}`"")'), (362, '        log.info('), (363, '            ""If you want to create a local configuration file, you can create a file named"" + \\'), (364, '            f"" `{__config_file__}`, or run `manimgl --config`""'), (365, '        )'), (501, '    init_global_config(args.config_file)'), (502, '    custom_config = get_custom_config()'), (503, '    camera_config = get_camera_config(args, custom_config)'), (504, '    window_config = get_window_config(args, custom_config, camera_config)'), (510, '        ""file_writer_config"": get_file_writer_config(args, custom_config),'), (523, '        ""embed_exception_mode"": custom_config[""embed_exception_mode""],'), (524, '        ""embed_error_sound"": custom_config[""embed_error_sound""],'), (533, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (538, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (543, '    cam_config = get_camera_config(parse_cli(), get_custom_config())')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","[(5, 'from manimlib.config import get_global_config'), (13, '        exec(get_global_config()[""universal_import_line""])')]","[(5, 'from manimlib.config import get_custom_config'), (13, '        exec(get_custom_config()[""universal_import_line""])')]",No
manimlib/utils/customization.py,manimlib/utils/customization.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","[(1, 'from manimlib.config import get_global_config'), (5, '    return get_global_config()')]","[(1, 'import os'), (2, 'import tempfile'), (3, 'import appdirs'), (4, ''), (5, 'from manimlib.config import get_custom_config'), (6, 'from manimlib.config import get_manim_dir'), (7, ''), (8, ''), (9, 'CUSTOMIZATION = {}'), (13, '    if not CUSTOMIZATION:'), (14, '        CUSTOMIZATION.update(get_custom_config())'), (15, '        directories = CUSTOMIZATION[""directories""]'), (16, '        # Unless user has specified otherwise, use the system default temp'), (17, '        # directory for storing tex files, mobject_data, etc.'), (18, '        if not directories[""temporary_storage""]:'), (19, '            directories[""temporary_storage""] = tempfile.gettempdir()'), (20, ''), (21, '        if not directories[""cache""]:'), (22, '            directories[""cache""] = appdirs.user_cache_dir(""manim"")'), (23, ''), (24, '        # Assumes all shaders are written into manimlib/shaders'), (25, '        directories[""shaders""] = os.path.join('), (26, '            get_manim_dir(), ""manimlib"", ""shaders""'), (27, '        )'), (28, '    return CUSTOMIZATION')]",No
manimlib/utils/directories.py,manimlib/utils/directories.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","[(4, 'import tempfile'), (5, 'import appdirs'), (7, ''), (8, 'from manimlib.config import get_manim_dir'), (18, '    return get_directories()[""cache""] or appdirs.user_cache_dir(""manim"")'), (22, '    return get_directories()[""temporary_storage""] or tempfile.gettempdir()'), (50, '    return os.path.join(get_manim_dir(), ""manimlib"", ""shaders"")')]","[(14, '    return get_directories()[""cache""]'), (18, '    return get_directories()[""temporary_storage""]'), (46, '    return get_directories()[""shaders""]')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,34ad61d01397415924ef2790a32f29d420695d21,cfb7d2fa47f13799a19088d880fb6ac06b95f970,"Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.","[(12, 'from manimlib.config import get_global_config'), (46, '        template_name = get_global_config()[""style""][""tex_template""]')]","[(12, 'from manimlib.config import get_custom_config'), (46, '        template_name = get_custom_config()[""style""][""tex_template""]')]",No
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,b593cde3177cf5aedb7c50a6c87111d51626b8f6,34ad61d01397415924ef2790a32f29d420695d21,Make the default size for hash_string an option,"[(99, 'def hash_string(string: str, n_bytes=16) -> str:'), (101, '    return hasher.hexdigest()[:n_bytes]')]","[(99, 'def hash_string(string: str) -> str:'), (100, '    # Truncating at 16 bytes for cleanliness'), (102, '    return hasher.hexdigest()[:16]')]",No
manimlib/__init__.py,manimlib/__init__.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,[],"[(67, 'from manimlib.utils.customization import *')]",No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"[(5, 'from manimlib.config import get_global_config'), (60, ""            color = get_global_config()['style']['background_color']"")]","[(12, 'from manimlib.utils.customization import get_customization'), (60, ""            color = get_customization()['style']['background_color']"")]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"[(15, 'from manimlib.config import get_global_config'), (158, '        default_style = get_global_config()[""style""]'), (163, '        self.alignment = alignment or default_style[""text_alignment""]'), (165, '        self.font = font or default_style[""font""]')]","[(22, 'from manimlib.utils.customization import get_customization'), (162, '        self.alignment = alignment or get_customization()[""style""][""text_alignment""]'), (164, '        self.font = font or get_customization()[""style""][""font""]')]",No
manimlib/utils/customization.py,N/A,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,[],"[(1, 'from manimlib.config import get_global_config'), (2, ''), (3, ''), (4, 'def get_customization():'), (5, '    return get_global_config()')]",No
manimlib/utils/directories.py,manimlib/utils/directories.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"[(8, 'from manimlib.config import get_global_config'), (14, '    return get_global_config()[""directories""]')]","[(9, 'from manimlib.utils.customization import get_customization'), (14, '    return get_customization()[""directories""]')]",No
manimlib/window.py,manimlib/window.py,3b9ef57b220a324ba5fcb872f0f680e86c282b10,b593cde3177cf5aedb7c50a6c87111d51626b8f6,Remove utils/customization.py,"[(11, 'from manimlib.config import get_global_config'), (86, '        global_config = get_global_config()'), (87, '        custom_position = global_config[""window_position""]'), (88, '        mon_index = global_config[""window_monitor""]')]","[(12, 'from manimlib.utils.customization import get_customization'), (86, '        custom_position = get_customization()[""window_position""]'), (88, '        mon_index = get_customization()[""window_monitor""]')]",No
manimlib/config.py,manimlib/config.py,fc32f162a0c2d185754c8610f03a28e2e2d6733c,3b9ef57b220a324ba5fcb872f0f680e86c282b10,Remove stray prints,[],"[(314, ''), (315, '    print(f""global_defaults_file = {global_defaults_file}"")'), (316, '    print(f""args.config_file = {args.config_file}"")'), (317, '')]",No
manimlib/config.py,manimlib/config.py,0496402c55b38d5d1080ade94fe9506f05094408,fc32f162a0c2d185754c8610f03a28e2e2d6733c,"Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.","[(22, '    from typing import Optional'), (23, ''), (24, ''), (25, '# This has to be here instead of in constants.py'), (26, '# due to its use in creating the camera configuration'), (27, 'FRAME_HEIGHT: float = 8.0'), (409, 'def get_camera_config(args: Optional[Namespace] = None, custom_config: Optional[dict] = None) -> dict:'), (410, '    if args is None:'), (411, '        args = parse_cli()'), (412, '    if custom_config is None:'), (413, '        custom_config = get_global_config()'), (414, ''), (415, '    camera_config = dict()'), (443, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),')]","[(403, 'def get_camera_config(args: Namespace, custom_config: dict) -> dict:'), (404, '    camera_config = {}'), (432, '            ""frame_shape"": ((width / height) * get_frame_height(), get_frame_height()),'), (478, ''), (479, ''), (480, 'def get_frame_height():'), (481, '    return 8.0'), (482, ''), (483, ''), (484, 'def get_aspect_ratio():'), (485, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (486, ""    return cam_config['pixel_width'] / cam_config['pixel_height']""), (487, ''), (488, ''), (489, 'def get_default_pixel_width():'), (490, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (491, ""    return cam_config['pixel_width']""), (492, ''), (493, ''), (494, 'def get_default_pixel_height():'), (495, '    cam_config = get_camera_config(parse_cli(), get_global_config())'), (496, ""    return cam_config['pixel_height']"")]",No
manimlib/constants.py,manimlib/constants.py,0496402c55b38d5d1080ade94fe9506f05094408,fc32f162a0c2d185754c8610f03a28e2e2d6733c,"Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.","[(4, 'from manimlib.config import get_camera_config'), (5, 'from manimlib.config import FRAME_HEIGHT'), (13, '# TODO, it feels a bit unprincipled to have some global constants'), (14, '# depend on the output of this function, all for all that configuration'), (15, '# code to be run merely upon importing from this file'), (16, 'CAMERA_CONFIG = get_camera_config()'), (17, ''), (19, ""ASPECT_RATIO: float = CAMERA_CONFIG['pixel_width'] / CAMERA_CONFIG['pixel_height']""), (20, '# FRAME_HEIGHT: float = 8.0'), (26, ""DEFAULT_PIXEL_HEIGHT: int = CAMERA_CONFIG['pixel_height']""), (27, ""DEFAULT_PIXEL_WIDTH: int = CAMERA_CONFIG['pixel_width']"")]","[(4, 'from manimlib.config import get_aspect_ratio'), (5, 'from manimlib.config import get_default_pixel_width'), (6, 'from manimlib.config import get_default_pixel_height'), (7, 'from manimlib.config import get_frame_height'), (16, 'ASPECT_RATIO: float = get_aspect_ratio()'), (17, 'FRAME_HEIGHT: float = get_frame_height()'), (23, 'DEFAULT_PIXEL_HEIGHT: int = get_default_pixel_height()'), (24, 'DEFAULT_PIXEL_WIDTH: int = get_default_pixel_width()')]",No
manimlib/config.py,manimlib/config.py,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,0496402c55b38d5d1080ade94fe9506f05094408,Factor out configuration to be passed into a scene vs. that used to run a scene,"[(464, 'def get_scene_config(args: Namespace) -> dict:'), (465, '    """"""'), (466, '    Returns a dictionary to be used as key word arguments for Scene'), (467, '    """"""'), (487, ''), (488, ''), (489, 'def get_run_config(args: Namespace):'), (490, '    return {'), (491, '        ""module"": get_scene_module(args),'), (492, '        ""prerun"": args.prerun,'), (493, '        ""scene_names"": args.scene_names,'), (494, '        ""quiet"": args.quiet or args.write_all,'), (495, '        ""write_all"": args.write_all,'), (496, '    }')]","[(464, 'def get_configuration(args: Namespace) -> dict:'), (471, '        ""module"": get_scene_module(args),'), (472, '        ""scene_names"": args.scene_names,'), (476, '        ""quiet"": args.quiet or args.write_all,'), (477, '        ""write_all"": args.write_all,'), (485, '        ""prerun"": args.prerun,')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,0496402c55b38d5d1080ade94fe9506f05094408,Factor out configuration to be passed into a scene vs. that used to run a scene,"[(74, 'def scene_from_class(scene_class, scene_config, run_config):'), (76, '    if fw_config[""write_to_movie""] and run_config[""prerun""]:'), (81, 'def get_scenes_to_render(all_scene_classes, scene_config, run_config):'), (82, '    if run_config[""write_all""]:'), (86, '    scene_names = run_config[""scene_names""]'), (100, '        scene_from_class(scene_class, scene_config, run_config)'), (118, 'def main(scene_config, run_config):'), (119, '    module = run_config[""module""]'), (125, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, run_config)')]","[(56, 'def get_scene_config(config):'), (57, '    scene_parameters = inspect.signature(Scene).parameters.keys()'), (58, '    return {'), (59, '        key: config[key]'), (60, '        for key in set(scene_parameters).intersection(config.keys())'), (61, '    }'), (62, ''), (63, ''), (82, 'def scene_from_class(scene_class, scene_config, config):'), (84, '    if fw_config[""write_to_movie""] and config[""prerun""]:'), (89, 'def get_scenes_to_render(all_scene_classes, scene_config, config):'), (90, '    if config[""write_all""]:'), (94, '    scene_names = config[""scene_names""]'), (108, '        scene_from_class(scene_class, scene_config, config)'), (126, 'def main(config):'), (127, '    module = config[""module""]'), (128, '    scene_config = get_scene_config(config)'), (134, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, config)')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,0496402c55b38d5d1080ade94fe9506f05094408,Factor out configuration to be passed into a scene vs. that used to run a scene,"[(13, 'from manimlib.config import get_camera_config'), (412, '        cam_config = get_camera_config()')]","[(13, 'from manimlib.config import get_configuration'), (412, ""        cam_config = get_configuration(parse_cli())['camera_config']"")]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,8dfd4c1c4e7fa70a936caca24fdd5656ec1f39e6,96a4a4b76f6aa9512924fd0e2f17d64d347eecf8,Use newer extract_scene.main interface,"[(62, '        scene_config = manimlib.config.get_scene_config(self.args)'), (64, '            scene_config[""existing_window""] = self.window  # see scene initialization'), (65, ''), (66, '        run_config = manimlib.config.get_run_config(self.args)'), (69, '        self.scenes = manimlib.extract_scene.main(scene_config, run_config)')]","[(62, '        config = manimlib.config.get_configuration(self.args)'), (64, '            config[""existing_window""] = self.window  # see scene initialization'), (67, '        self.scenes = manimlib.extract_scene.main(config)')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,1d14bae092a52cf73612b33d46a4ffcf2d96abb5,8dfd4c1c4e7fa70a936caca24fdd5656ec1f39e6,Add clarifying message to note what exactly is being reloaded,"[(81, '            if self.args.embed:'), (82, '                print("" "".join(['), (83, '                    ""Loading interactive session for"",'), (84, '                    f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (85, '                    f""in \\033[96m{self.args.file}\\033[0m"",'), (86, '                    f""at line \\033[96m{self.args.embed}\\033[0m""'), (87, '                ]))')]","[(83, '')]",No
manimlib/constants.py,manimlib/constants.py,361d9d0652c734d231cf4eef498ca1d1a7d37639,1d14bae092a52cf73612b33d46a4ffcf2d96abb5,Minor clean up,"[(14, '# depend on the output of this function, and for all that configuration'), (15, '# code to be run merely upon importing from this file.')]","[(14, '# depend on the output of this function, all for all that configuration'), (15, '# code to be run merely upon importing from this file'), (20, '# FRAME_HEIGHT: float = 8.0')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,361d9d0652c734d231cf4eef498ca1d1a7d37639,1d14bae092a52cf73612b33d46a4ffcf2d96abb5,Minor clean up,"[(85, '    names_to_classes = {sc.__name__: sc for sc in all_scene_classes}'), (119, '    if run_config[""module""] is None:'), (123, '    all_scene_classes = get_scene_classes_from_module(run_config[""module""])'), (124, '    return get_scenes_to_render(all_scene_classes, scene_config, run_config)')]","[(85, '    names_to_classes = {sc.__name__ : sc for sc in all_scene_classes}'), (119, '    module = run_config[""module""]'), (120, '    if module is None:'), (124, '    all_scene_classes = get_scene_classes_from_module(module)'), (125, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, run_config)'), (126, '    return scenes')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,e0031c63bcca5c0d7707998cefb9854bef9e8b3c,361d9d0652c734d231cf4eef498ca1d1a7d37639,Minor clean up,"[(55, 'def markup_to_svg('), (59, '    alignment: str = ""CENTER"",'), (228, '        return markup_to_svg(')]","[(55, 'def markup_to_svg_string('), (59, '    alignment: str = """",'), (228, '        return markup_to_svg_string(')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,85f84562289429ad0131329637232b20f18d75e5,e0031c63bcca5c0d7707998cefb9854bef9e8b3c,"If it's worth caching to disk, then might as well do so in memory too during development","[(9, 'from functools import lru_cache'), (55, '@lru_cache(maxsize=128)')]",[],No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,85f84562289429ad0131329637232b20f18d75e5,e0031c63bcca5c0d7707998cefb9854bef9e8b3c,"If it's worth caching to disk, then might as well do so in memory too during development","[(7, 'from functools import lru_cache'), (67, '@lru_cache(maxsize=128)')]",[],No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,4251ff436a39e69d3bed1590c84b03c3796f7c85,85f84562289429ad0131329637232b20f18d75e5,No longer any need for custom hash_seeds in Tex and Text,[],"[(70, '    @property'), (71, '    def hash_seed(self) -> tuple:'), (72, '        return ('), (73, '            self.__class__.__name__,'), (74, '            self.svg_default,'), (75, '            self.path_string_config,'), (76, '            self.base_color,'), (77, '            self.isolate,'), (78, '            self.protect,'), (79, '            self.tex_string,'), (80, '            self.alignment,'), (81, '            self.tex_environment,'), (82, '            self.tex_to_color_map,'), (83, '            self.template,'), (84, '            self.additional_preamble'), (85, '        )'), (86, '')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,4251ff436a39e69d3bed1590c84b03c3796f7c85,85f84562289429ad0131329637232b20f18d75e5,No longer any need for custom hash_seeds in Tex and Text,[],"[(200, '    @property'), (201, '    def hash_seed(self) -> tuple:'), (202, '        return ('), (203, '            self.__class__.__name__,'), (204, '            self.svg_default,'), (205, '            self.path_string_config,'), (206, '            self.base_color,'), (207, '            self.isolate,'), (208, '            self.protect,'), (209, '            self.text,'), (210, '            self.font_size,'), (211, '            self.lsh,'), (212, '            self.justify,'), (213, '            self.indent,'), (214, '            self.alignment,'), (215, '            self.line_width,'), (216, '            self.font,'), (217, '            self.slant,'), (218, '            self.weight,'), (219, '            self.t2c,'), (220, '            self.t2f,'), (221, '            self.t2s,'), (222, '            self.t2w,'), (223, '            self.global_config,'), (224, '            self.local_configs,'), (225, '            self.disable_ligatures'), (226, '        )'), (227, '')]",No
manimlib/utils/cache.py,manimlib/utils/cache.py,809814900671df9f3a8a7c0f31e737ead8c66dbb,4251ff436a39e69d3bed1590c84b03c3796f7c85,Remove display_during_execution,"[(24, '        key = hash_string(f""{func.__name__}{args}{kwargs}"")')]","[(24, '        key = hash_string("""".join(map(str, [func.__name__, args, kwargs])))'), (27, '            # print(f""Executing {func.__name__}({args[0]}, ...)"")'), (36, ''), (37, ''), (38, '@contextmanager'), (39, 'def display_during_execution(message: str):'), (40, '    # Merge into a single line'), (41, '    to_print = message.replace(""\\n"", "" "")'), (42, '    max_characters = os.get_terminal_size().columns - 1'), (43, '    if len(to_print) > max_characters:'), (44, '        to_print = to_print[:max_characters - 3] + ""...""'), (45, '    try:'), (46, '        print(to_print, end=""\\r"")'), (47, '        yield'), (48, '    finally:'), (49, '        print("" "" * len(to_print), end=""\\r"")')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,71e440be93f02894540fa306edfbc6753423b849,809814900671df9f3a8a7c0f31e737ead8c66dbb,Get rid of (no longer used) mobject_data directory reference,[],"[(20, 'from manimlib.utils.directories import get_mobject_data_dir')]",No
manimlib/utils/directories.py,manimlib/utils/directories.py,71e440be93f02894540fa306edfbc6753423b849,809814900671df9f3a8a7c0f31e737ead8c66dbb,Get rid of (no longer used) mobject_data directory reference,[],"[(25, 'def get_mobject_data_dir() -> str:'), (26, '    return guarantee_existence(os.path.join(get_temp_dir(), ""mobject_data""))'), (27, ''), (28, '')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,71e440be93f02894540fa306edfbc6753423b849,Remove get_downloads_dir reference from register_font,"[(495, '    file_path = Path(font_file).resolve()'), (496, '    if not file_path.exists():'), (497, '        error = f""Can\'t find {font_file}.""')]","[(24, 'from manimlib.utils.directories import get_downloads_dir'), (496, '    input_folder = Path(get_downloads_dir()).parent.resolve()'), (497, '    possible_paths = ['), (498, '        Path(font_file),'), (499, '        input_folder / font_file,'), (500, '    ]'), (501, '    for path in possible_paths:'), (502, '        path = path.resolve()'), (503, '        if path.exists():'), (504, '            file_path = path'), (505, '            break'), (506, '    else:'), (507, '        error = f""Can\'t find {font_file}."" f""Tried these : {possible_paths}""'), (509, '')]",No
manimlib/default_config.yml,manimlib/default_config.yml,75527563de5cf4badb8e30abd826e355e06bce01,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,Update where downloads go,"[(13, '  downloads: """"')]","[(13, '  temporary_storage: """"')]",No
manimlib/utils/directories.py,manimlib/utils/directories.py,75527563de5cf4badb8e30abd826e355e06bce01,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,Update where downloads go,"[(26, '    return get_directories()[""downloads""] or appdirs.user_cache_dir(""manim_downloads"")')]","[(26, '    return guarantee_existence(os.path.join(get_temp_dir(), ""manim_downloads""))')]",No
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,75527563de5cf4badb8e30abd826e355e06bce01,c96734ace0e64b9b1fc71f25d38ae6d8d855cca6,Update where downloads go,"[(9, 'import urllib.request'), (10, ''), (11, 'import manimlib.utils.directories'), (12, 'from manimlib.utils.simple_functions import hash_string'), (43, '        file_hash = hash_string(file_name)'), (44, '        folder = manimlib.utils.directories.get_downloads_dir()')]","[(38, '        import urllib.request'), (39, '        from manimlib.utils.directories import get_downloads_dir'), (41, ""        file_hash = hashlib.sha256(file_name.encode('utf-8')).hexdigest()[:32]""), (42, '        folder = get_downloads_dir()')]",No
manimlib/config.py,manimlib/config.py,08acfa6f1f1478d48bdbaeed401242a472c18463,75527563de5cf4badb8e30abd826e355e06bce01,Easier use of subdirectories in configuration,"[(320, '    config = merge_dicts_recursively('), (326, '    # Set the subdirectories'), (327, ""    base = config['directories']['base']""), (328, ""    for key, subdir in config['directories']['subdirs'].items():""), (329, ""        config['directories'][key] = os.path.join(base, subdir)""), (330, ''), (331, '    return config'), (332, '')]","[(320, '    return merge_dicts_recursively(')]",No
manimlib/default_config.yml,manimlib/default_config.yml,08acfa6f1f1478d48bdbaeed401242a472c18463,75527563de5cf4badb8e30abd826e355e06bce01,Easier use of subdirectories in configuration,"[(6, '  # Manim may write to and read from teh file system, e.g.'), (7, '  # to render videos and to look for svg/png assets. This'), (8, '  # will specify where those assets live, with a base directory,'), (9, '  # and various subdirectory names within it'), (10, '  base: """"'), (11, '  subdirs:'), (12, '    # Where should manim output video and image files?'), (13, '    output: ""videos""'), (14, '    # If you want to use images, manim will look to these folders to find them'), (15, '    raster_images: ""raster_images""'), (16, '    vector_images: ""vector_images""'), (17, '    # If you want to use sounds, manim will look here to find it.'), (18, '    sounds: ""sounds""'), (19, ""    # Place for other forms of data relevant to any projects, like csv's""), (20, '    data: ""data""'), (21, '    # When downloading, say an image, where will it go?'), (22, '    downloads: ""downloads""')]","[(6, '  # Where should manim output video and image files?'), (7, '  output: """"'), (8, '  # If you want to use images, manim will look to these folders to find them'), (9, '  raster_images: """"'), (10, '  vector_images: """"'), (11, '  # If you want to use sounds, manim will look here to find it.'), (12, '  sounds: """"'), (13, '  downloads: """"')]",No
manimlib/utils/init_config.py,manimlib/utils/init_config.py,08acfa6f1f1478d48bdbaeed401242a472c18463,75527563de5cf4badb8e30abd826e355e06bce01,Easier use of subdirectories in configuration,"[(39, '            ""base"": """",'), (40, '            ""subdirs"": {'), (41, '                ""output"": ""videos"",'), (42, '                ""raster_images"": ""raster_images"",'), (43, '                ""vector_images"": ""vector_images"",'), (44, '                ""sounds"": ""sounds"",'), (45, '                ""data"": ""data"",'), (46, '                ""downloads"": ""downloads"",'), (47, '            }'), (81, '        dir_config[""base""] = Prompt.ask('), (82, '            ""  What base directory should manim use for reading/writing video and images? [prompt.default](optional, default is none)"",'), (86, '        dir_config[""subdirs""][""output""] = Prompt.ask('), (87, '            ""  Within that base directory, which subdirectory should manim [bold]output[/bold] video and image files to?"" + \\'), (88, '            "" [prompt.default](optional, default is \\""videos\\"")"",'), (89, '            default=""videos"",'), (92, '        dir_config[""subdirs""][""raster_images""] = Prompt.ask('), (93, '            ""  Within that base directory, which subdirectory should manim look for raster images (.png, .jpg)"" + \\'), (94, '            "" [prompt.default](optional, default is \\""raster_images\\"")"",'), (95, '            default=""raster_images"",'), (98, '        dir_config[""subdirs""][""vector_images""] = Prompt.ask('), (99, '            ""  Within that base directory, which subdirectory should manim look for raster images (.svg, .xdv)"" + \\'), (100, '            "" [prompt.default](optional, default is \\""vector_images\\"")"",'), (101, '            default=""vector_images"",'), (104, '        dir_config[""subdirs""][""sounds""] = Prompt.ask('), (105, '            ""  Within that base directory, which subdirectory should manim look for sound files (.mp3, .wav)"" + \\'), (106, '            "" [prompt.default](optional, default is \\""sounds\\"")"",'), (107, '            default=""sounds"",'), (108, '            show_default=False'), (109, '        )'), (110, '        dir_config[""subdirs""][""downloads""] = Prompt.ask('), (111, '            ""  Within that base directory, which subdirectory should manim output downloaded files"" + \\'), (112, '            "" [prompt.default](optional, default is \\""downloads\\"")"",'), (113, '            default=""downloads"",')]","[(39, '            ""output"": """",'), (40, '            ""raster_images"": """",'), (41, '            ""vector_images"": """",'), (42, '            ""sounds"": """",'), (43, '            ""temporary_storage"": """",'), (77, '        dir_config[""output""] = Prompt.ask('), (78, '            ""  Where should manim [bold]output[/bold] video and image files place [prompt.default](optional, default is none)"",'), (82, '        dir_config[""raster_images""] = Prompt.ask('), (83, '            ""  Which folder should manim find [bold]raster images[/bold] (.jpg .png .gif) in "" + \\'), (84, '            ""[prompt.default](optional, default is none)"",'), (85, '            default="""",'), (88, '        dir_config[""vector_images""] = Prompt.ask('), (89, '            ""  Which folder should manim find [bold]vector images[/bold] (.svg .xdv) in "" + \\'), (90, '            ""[prompt.default](optional, default is none)"",'), (91, '            default="""",'), (94, '        dir_config[""sounds""] = Prompt.ask('), (95, '            ""  Which folder should manim find [bold]sound files[/bold] (.mp3 .wav) in "" + \\'), (96, '            ""[prompt.default](optional, default is none)"",'), (97, '            default="""",'), (100, '        dir_config[""temporary_storage""] = Prompt.ask('), (101, '            ""  Which folder should manim storage [bold]temporary files[/bold] "" + \\'), (102, '            ""[prompt.default](recommended, use system temporary folder by default)"",'), (103, '            default="""",')]",No
requirements.txt,requirements.txt,3cd3e8cedcc36d472ed751f064d3b51c08d96e9d,08acfa6f1f1478d48bdbaeed401242a472c18463,Add new pip requirements,"[(1, 'appdirs'), (3, 'diskcache'), (26, 'tempfile')]",[],No
manimlib/animation/animation.py,manimlib/animation/animation.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(9, 'from manimlib.utils.rate_functions import squish_rate_func')]",No
manimlib/animation/composition.py,manimlib/animation/composition.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(3, 'import numpy as np'), (4, '')]",No
manimlib/animation/creation.py,manimlib/animation/creation.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(8, 'from manimlib.constants import WHITE')]",No
manimlib/animation/fading.py,manimlib/animation/fading.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(8, 'from manimlib.mobject.mobject import Group'), (10, 'from manimlib.mobject.types.vectorized_mobject import VGroup')]",No
manimlib/animation/growing.py,manimlib/animation/growing.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(4, 'from manimlib.constants import PI')]",No
manimlib/animation/indication.py,manimlib/animation/indication.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(3, 'import math'), (4, 'from os import remove')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(8, 'from pyrr import Matrix44')]",No
manimlib/mobject/frame.py,manimlib/mobject/frame.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(40, '            **kwargs')]",[],No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(4, 'import numbers'), (16, 'from manimlib.utils.bezier import bezier'), (18, 'from manimlib.utils.bezier import partial_quadratic_bezier_points'), (33, 'from manimlib.utils.space_ops import rotation_about_z')]",No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(15, '    from typing import Sequence, Union, Optional')]","[(3, 'import itertools as it'), (4, ''), (17, '    from typing import Sequence, Union, Tuple, Optional')]",No
manimlib/mobject/numbers.py,manimlib/mobject/numbers.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(17, '    from typing import TypeVar, Callable'), (18, '    from manimlib.mobject.mobject import Mobject')]","[(17, '    from typing import TypeVar')]",No
manimlib/mobject/svg/brace.py,manimlib/mobject/svg/brace.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(9, 'from manimlib.constants import DOWN, LEFT, ORIGIN, RIGHT, DL, DR, UL')]","[(9, 'from manimlib.constants import DOWN, LEFT, ORIGIN, RIGHT, UP, DL, DR, UL')]",No
manimlib/mobject/svg/drawings.py,manimlib/mobject/svg/drawings.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(420, '            self.content.flip(axis=axis)')]","[(28, 'from manimlib.constants import LARGE_BUFF'), (55, 'from manimlib.mobject.mobject import Mobject'), (59, 'from manimlib.mobject.svg.tex_mobject import Tex'), (60, 'from manimlib.mobject.svg.tex_mobject import TexText'), (424, '            self.content.flip(axis=axis)')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(3, 'import os'), (19, 'from manimlib.utils.directories import get_mobject_data_dir'), (22, 'from manimlib.utils.simple_functions import hash_string'), (26, '    from typing import Tuple')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(17, '    from manimlib.typing import ManimColor, Span, Selector, Self')]","[(17, '    from manimlib.typing import ManimColor, Span, Selector')]",No
manimlib/mobject/vector_field.py,manimlib/mobject/vector_field.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(9, 'from manimlib.constants import WHITE'), (24, '    from typing import Callable, Iterable, Sequence, TypeVar, Tuple, Optional'), (25, '    from manimlib.typing import ManimColor, Vect3, VectN, VectArray, Vect3Array, Vect4Array'), (111, '    def apply_nudge(mob, dt):'), (112, '        mob.apply_function('), (131, 'def vectorize(pointwise_function: Callable[[Tuple], Tuple]):'), (235, '    def set_sample_coords(self, sample_coords: VectArray):')]","[(9, 'from manimlib.constants import BLUE, WHITE'), (10, 'from manimlib.constants import ORIGIN'), (12, 'from manimlib.mobject.geometry import Arrow'), (18, 'from manimlib.utils.color import rgb_to_color'), (20, 'from manimlib.utils.dict_ops import merge_dicts_recursively'), (23, 'from manimlib.utils.simple_functions import sigmoid'), (29, '    from typing import Callable, Iterable, Sequence, TypeVar, Tuple'), (30, '    from manimlib.typing import ManimColor, Vect3, VectN, Vect2Array, Vect3Array, Vect4Array'), (116, '    def apply_nudge(self, dt):'), (117, '        mobject.apply_function('), (136, 'def vectorize(pointwise_function: Callable[Tuple, Tuple]):'), (240, '    def set_sample_coords(self, sample_points: VectArray):')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords",[],"[(30, 'from manimlib.scene.scene import PAN_3D_KEY')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(22, '    from typing import Optional, Tuple, Iterable'), (24, '    from moderngl.vertex_array import VertexArray'), (25, '    from moderngl.framebuffer import Framebuffer')]","[(14, 'from manimlib.utils.iterables import resize_array'), (23, '    from typing import List, Optional, Dict')]",No
manimlib/typing.py,manimlib/typing.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(4, '    from typing import Union, Tuple, Annotated, Literal, Iterable, Dict'), (8, ''), (31, '    #'), (43, '    VectArray = Annotated[FloatArray, Literal[""N"", 1]]')]","[(4, '    from typing import Union, Tuple, Annotated, Literal, Iterable'), (8, ''), (31, '    #')]",No
manimlib/utils/shaders.py,manimlib/utils/shaders.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(16, '    from typing import Sequence, Optional')]","[(16, '    from typing import Sequence, Optional, Tuple'), (17, '    from manimlib.typing import UniformDict'), (18, '    from moderngl.vertex_array import VertexArray'), (19, '    from moderngl.framebuffer import Framebuffer')]",No
manimlib/window.py,manimlib/window.py,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,8239f1bf3510cd327c58d470b3808b5f4ce33720,"Cleaning up some imports + Minor Bug fixed in VectorField (#2253)

* cleaning up imports

* sample_points -> sample_coords","[(17, '    from typing import Callable, TypeVar'), (20, '    T = TypeVar(""T"")'), (21, '')]",[],No
requirements.txt,requirements.txt,66862db9b26b1cfe9543267293d231aae10ace23,5d3f7308240042c28ac9e7ee9f99cd1a02d792ec,Drop pyrr (#2256),[],"[(16, 'pyrr')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,5a70d67b98e9b2d353d0721d95b034ffaab29a89,66862db9b26b1cfe9543267293d231aae10ace23,Update coordinate_systems.py (#2258),"[(408, '            stroke_behind=stroke_background')]","[(408, '            stroke_background=stroke_background')]",No
manimlib/__init__.py,manimlib/__init__.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(64, 'from manimlib.utils.cache import *')]","[(66, 'from manimlib.utils.customization import *')]",No
manimlib/config.py,manimlib/config.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(13, 'from functools import lru_cache'), (14, ''), (22, '    from typing import Optional'), (25, '# This has to be here instead of in constants.py'), (26, '# due to its use in creating the camera configuration'), (27, 'FRAME_HEIGHT: float = 8.0'), (308, 'def load_yaml(file_path: str):'), (309, '    try:'), (310, '        with open(file_path, ""r"") as file:'), (311, '            return yaml.safe_load(file) or {}'), (312, '    except FileNotFoundError:'), (313, '        return {}'), (316, '@lru_cache'), (317, 'def get_global_config():'), (318, '    args = parse_cli()'), (320, '    config = merge_dicts_recursively('), (321, '        load_yaml(global_defaults_file),'), (322, '        load_yaml(""custom_config.yml""),  # From current working directory'), (323, '        load_yaml(args.config_file) if args.config_file else {},'), (324, '    )'), (326, '    # Set the subdirectories'), (327, ""    base = config['directories']['base']""), (328, ""    for key, subdir in config['directories']['subdirs'].items():""), (329, ""        config['directories'][key] = os.path.join(base, subdir)""), (331, '    return config'), (404, '        # Default fallback'), (405, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (416, 'def get_camera_config(args: Optional[Namespace] = None, custom_config: Optional[dict] = None) -> dict:'), (417, '    if args is None:'), (418, '        args = parse_cli()'), (419, '    if custom_config is None:'), (420, '        custom_config = get_global_config()'), (421, ''), (422, '    camera_config = dict()'), (450, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),'), (471, 'def get_scene_config(args: Namespace) -> dict:'), (472, '    """"""'), (473, '    Returns a dictionary to be used as key word arguments for Scene'), (474, '    """"""'), (475, '    global_config = get_global_config()'), (476, '    camera_config = get_camera_config(args, global_config)'), (477, '    window_config = get_window_config(args, global_config, camera_config)'), (481, '        ""file_writer_config"": get_file_writer_config(args, global_config),'), (491, '        ""embed_exception_mode"": global_config[""embed_exception_mode""],'), (492, '        ""embed_error_sound"": global_config[""embed_error_sound""],'), (496, 'def get_run_config(args: Namespace):'), (497, '    return {'), (498, '        ""module"": get_scene_module(args),'), (499, '        ""prerun"": args.prerun,'), (500, '        ""scene_names"": args.scene_names,'), (501, '        ""quiet"": args.quiet or args.write_all,'), (502, '        ""write_all"": args.write_all,'), (503, '    }')]","[(22, '__config_file__ = ""custom_config.yml""'), (303, 'def get_custom_config():'), (304, '    global __config_file__'), (306, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (307, ''), (308, '    if os.path.exists(global_defaults_file):'), (309, '        with open(global_defaults_file, ""r"") as file:'), (310, '            custom_config = yaml.safe_load(file)'), (311, ''), (312, '        if os.path.exists(__config_file__):'), (313, '            with open(__config_file__, ""r"") as file:'), (314, '                local_defaults = yaml.safe_load(file)'), (315, '            if local_defaults:'), (316, '                custom_config = merge_dicts_recursively('), (317, '                    custom_config,'), (318, '                    local_defaults,'), (319, '                )'), (320, '    else:'), (321, '        with open(__config_file__, ""r"") as file:'), (322, '            custom_config = yaml.safe_load(file)'), (323, ''), (324, '    # Check temporary storage(custom_config)'), (325, '    if custom_config[""directories""][""temporary_storage""] == """" and sys.platform == ""win32"":'), (326, '        log.warning('), (327, '            ""You may be using Windows platform and have not specified the path of"" + \\'), (328, '            "" `temporary_storage`, which may cause OSError. So it is recommended"" + \\'), (329, '            "" to specify the `temporary_storage` in the config file (.yml)""'), (330, '        )'), (331, ''), (332, '    return custom_config'), (333, ''), (334, ''), (335, 'def init_global_config(config_file):'), (336, '    global __config_file__'), (337, ''), (338, '    # ensure __config_file__ always exists'), (339, '    if config_file is not None:'), (340, '        if not os.path.exists(config_file):'), (341, '            log.error(f""Can\'t find {config_file}."")'), (342, ""            if sys.platform == 'win32':""), (343, '                log.info(f""Copying default configuration file to {config_file}..."")'), (344, '                os.system(f""copy default_config.yml {config_file}"")'), (345, '            elif sys.platform in [""linux2"", ""darwin""]:'), (346, '                log.info(f""Copying default configuration file to {config_file}..."")'), (347, '                os.system(f""cp default_config.yml {config_file}"")'), (348, '            else:'), (349, '                log.info(""Please create the configuration file manually."")'), (350, '            log.info(""Read configuration from default_config.yml."")'), (351, '        else:'), (352, '            __config_file__ = config_file'), (356, '    if not (os.path.exists(global_defaults_file) or os.path.exists(__config_file__)):'), (357, '        log.info(""There is no configuration file detected. Switch to the config file initializer:"")'), (358, '        init_customization()'), (360, '    elif not os.path.exists(__config_file__):'), (361, '        log.info(f""Using the default configuration file, which you can modify in `{global_defaults_file}`"")'), (362, '        log.info('), (363, '            ""If you want to create a local configuration file, you can create a file named"" + \\'), (364, '            f"" `{__config_file__}`, or run `manimgl --config`""'), (365, '        )'), (438, '        pass'), (449, 'def get_camera_config(args: Namespace, custom_config: dict) -> dict:'), (450, '    camera_config = {}'), (478, '            ""frame_shape"": ((width / height) * get_frame_height(), get_frame_height()),'), (499, 'def get_configuration(args: Namespace) -> dict:'), (500, '    init_global_config(args.config_file)'), (501, '    custom_config = get_custom_config()'), (502, '    camera_config = get_camera_config(args, custom_config)'), (503, '    window_config = get_window_config(args, custom_config, camera_config)'), (507, '        ""module"": get_scene_module(args),'), (508, '        ""scene_names"": args.scene_names,'), (509, '        ""file_writer_config"": get_file_writer_config(args, custom_config),'), (512, '        ""quiet"": args.quiet or args.write_all,'), (513, '        ""write_all"": args.write_all,'), (521, '        ""prerun"": args.prerun,'), (522, '        ""embed_exception_mode"": custom_config[""embed_exception_mode""],'), (523, '        ""embed_error_sound"": custom_config[""embed_error_sound""],'), (527, 'def get_frame_height():'), (528, '    return 8.0'), (529, ''), (530, ''), (531, 'def get_aspect_ratio():'), (532, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (533, ""    return cam_config['pixel_width'] / cam_config['pixel_height']""), (534, ''), (535, ''), (536, 'def get_default_pixel_width():'), (537, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (538, ""    return cam_config['pixel_width']""), (539, ''), (540, ''), (541, 'def get_default_pixel_height():'), (542, '    cam_config = get_camera_config(parse_cli(), get_custom_config())'), (543, ""    return cam_config['pixel_height']"")]",No
manimlib/constants.py,manimlib/constants.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(4, 'from manimlib.config import get_camera_config'), (5, 'from manimlib.config import FRAME_HEIGHT'), (13, '# TODO, it feels a bit unprincipled to have some global constants'), (14, '# depend on the output of this function, and for all that configuration'), (15, '# code to be run merely upon importing from this file.'), (16, 'CAMERA_CONFIG = get_camera_config()'), (17, ''), (19, ""ASPECT_RATIO: float = CAMERA_CONFIG['pixel_width'] / CAMERA_CONFIG['pixel_height']""), (25, ""DEFAULT_PIXEL_HEIGHT: int = CAMERA_CONFIG['pixel_height']""), (26, ""DEFAULT_PIXEL_WIDTH: int = CAMERA_CONFIG['pixel_width']"")]","[(4, 'from manimlib.config import get_aspect_ratio'), (5, 'from manimlib.config import get_default_pixel_width'), (6, 'from manimlib.config import get_default_pixel_height'), (7, 'from manimlib.config import get_frame_height'), (16, 'ASPECT_RATIO: float = get_aspect_ratio()'), (17, 'FRAME_HEIGHT: float = get_frame_height()'), (23, 'DEFAULT_PIXEL_HEIGHT: int = get_default_pixel_height()'), (24, 'DEFAULT_PIXEL_WIDTH: int = get_default_pixel_width()')]",No
manimlib/default_config.yml,manimlib/default_config.yml,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(6, '  # Manim may write to and read from teh file system, e.g.'), (7, '  # to render videos and to look for svg/png assets. This'), (8, '  # will specify where those assets live, with a base directory,'), (9, '  # and various subdirectory names within it'), (10, '  base: """"'), (11, '  subdirs:'), (12, '    # Where should manim output video and image files?'), (13, '    output: ""videos""'), (14, '    # If you want to use images, manim will look to these folders to find them'), (15, '    raster_images: ""raster_images""'), (16, '    vector_images: ""vector_images""'), (17, '    # If you want to use sounds, manim will look here to find it.'), (18, '    sounds: ""sounds""'), (19, ""    # Place for other forms of data relevant to any projects, like csv's""), (20, '    data: ""data""'), (21, '    # When downloading, say an image, where will it go?'), (22, '    downloads: ""downloads""'), (23, '  # For certain object types, especially Tex and Text, manim will save information'), (24, '  # to file to prevent the need to re-compute, e.g. recompiling the latex. By default,'), (25, '  # it stores this saved data to whatever directory appdirs.user_cache_dir(""manim"") returns,'), (26, '  # but here a user can specify a different cache location'), (27, '  cache: """"')]","[(6, '  # Where should manim output video and image files?'), (7, '  output: """"'), (8, '  # If you want to use images, manim will look to these folders to find them'), (9, '  raster_images: """"'), (10, '  vector_images: """"'), (11, '  # If you want to use sounds, manim will look here to find it.'), (12, '  sounds: """"'), (13, '  # Manim often generates tex_files or other kinds of serialized data'), (14, '  # to keep from having to generate the same thing too many times.  By'), (15, '  # default, these will be stored at tempfile.gettempdir(), e.g. this might'), (16, '  # return whatever is at to the TMPDIR environment variable.  If you want to'), (17, '  # specify them elsewhere,'), (18, '  temporary_storage: """"')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(5, 'from manimlib.config import get_global_config'), (13, '        exec(get_global_config()[""universal_import_line""])'), (74, 'def scene_from_class(scene_class, scene_config, run_config):'), (76, '    if fw_config[""write_to_movie""] and run_config[""prerun""]:'), (81, 'def get_scenes_to_render(all_scene_classes, scene_config, run_config):'), (82, '    if run_config[""write_all""]:'), (85, '    names_to_classes = {sc.__name__: sc for sc in all_scene_classes}'), (86, '    scene_names = run_config[""scene_names""]'), (100, '        scene_from_class(scene_class, scene_config, run_config)'), (118, 'def main(scene_config, run_config):'), (119, '    if run_config[""module""] is None:'), (123, '    all_scene_classes = get_scene_classes_from_module(run_config[""module""])'), (124, '    return get_scenes_to_render(all_scene_classes, scene_config, run_config)')]","[(5, 'from manimlib.config import get_custom_config'), (13, '        exec(get_custom_config()[""universal_import_line""])'), (56, 'def get_scene_config(config):'), (57, '    scene_parameters = inspect.signature(Scene).parameters.keys()'), (58, '    return {'), (59, '        key: config[key]'), (60, '        for key in set(scene_parameters).intersection(config.keys())'), (61, '    }'), (62, ''), (63, ''), (82, 'def scene_from_class(scene_class, scene_config, config):'), (84, '    if fw_config[""write_to_movie""] and config[""prerun""]:'), (89, 'def get_scenes_to_render(all_scene_classes, scene_config, config):'), (90, '    if config[""write_all""]:'), (93, '    names_to_classes = {sc.__name__ : sc for sc in all_scene_classes}'), (94, '    scene_names = config[""scene_names""]'), (108, '        scene_from_class(scene_class, scene_config, config)'), (126, 'def main(config):'), (127, '    module = config[""module""]'), (128, '    scene_config = get_scene_config(config)'), (129, '    if module is None:'), (133, '    all_scene_classes = get_scene_classes_from_module(module)'), (134, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, config)'), (135, '    return scenes')]",No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(5, 'from manimlib.config import get_global_config'), (60, ""            color = get_global_config()['style']['background_color']"")]","[(12, 'from manimlib.utils.customization import get_customization'), (60, ""            color = get_customization()['style']['background_color']"")]",No
manimlib/mobject/svg/old_tex_mobject.py,manimlib/mobject/svg/old_tex_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(10, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (79, '    def get_svg_string_by_content(self, content: str) -> str:'), (80, '        return latex_to_svg(content, self.template, self.additional_preamble)')]","[(10, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (79, '    def get_file_path(self) -> str:'), (80, '        content = self.get_tex_file_body(self.tex_string)'), (81, '        file_path = tex_content_to_svg_file('), (82, '            content, self.template, self.additional_preamble, self.tex_string'), (83, '        )'), (84, '        return file_path')]",No
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(69, '        svg_string = self.get_svg_string()'), (70, '        super().__init__(svg_string=svg_string, **kwargs)'), (75, '    def get_svg_string(self, is_labelled: bool = False) -> str:'), (76, '        content = self.get_content(is_labelled or self.use_labelled_svg)'), (77, '        return self.get_svg_string_by_content(content)'), (80, '    def get_svg_string_by_content(self, content: str) -> str:'), (113, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (114, '        submobs = super().mobjects_from_svg_string(svg_string)')]","[(69, '        super().__init__(**kwargs)'), (74, '    def get_file_path(self, is_labelled: bool = False) -> str:'), (75, '        is_labelled = is_labelled or self.use_labelled_svg'), (76, '        return self.get_file_path_by_content(self.get_content(is_labelled))'), (79, '    def get_file_path_by_content(self, content: str) -> str:'), (112, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (113, '        submobs = super().mobjects_from_file(file_path)')]",No
manimlib/mobject/svg/svg_mobject.py,manimlib/mobject/svg/svg_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(8, 'from pathlib import Path'), (43, '        svg_string: str = """",'), (68, '        if svg_string != """":'), (69, '            self.svg_string = svg_string'), (70, '        elif file_name != """":'), (71, '            self.svg_string = self.file_name_to_svg_string(file_name)'), (72, '        elif self.file_name != """":'), (73, '            self.file_name_to_svg_string(self.file_name)'), (74, '        else:'), (75, '            raise Exception(""Must specify either a file_name or svg_string SVGMobject"")'), (76, ''), (80, '        super().__init__(**kwargs)'), (110, '            submobs = self.mobjects_from_svg_string(self.svg_string)'), (124, '            self.svg_string'), (127, '    def mobjects_from_svg_string(self, svg_string: str) -> list[VMobject]:'), (128, '        element_tree = ET.ElementTree(ET.fromstring(svg_string))'), (140, '    def file_name_to_svg_string(self, file_name: str) -> str:'), (141, '        return Path(get_full_vector_image_path(file_name)).read_text()')]","[(66, '        self.file_name = file_name or self.file_name'), (70, '        super().__init__(**kwargs )'), (100, '            submobs = self.mobjects_from_file(self.get_file_path())'), (114, '            self.file_name'), (117, '    def mobjects_from_file(self, file_path: str) -> list[VMobject]:'), (118, '        element_tree = ET.parse(file_path)'), (130, '    def get_file_path(self) -> str:'), (131, '        if self.file_name is None:'), (132, '            raise Exception(""Must specify file for SVGMobject"")'), (133, '        return get_full_vector_image_path(self.file_name)')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(4, 'from pathlib import Path'), (11, 'from manimlib.utils.tex_file_writing import latex_to_svg'), (13, 'from manimlib.utils.simple_functions import hash_string'), (70, '    def get_svg_string_by_content(self, content: str) -> str:'), (71, '        return latex_to_svg(content, self.template, self.additional_preamble, short_tex=self.tex_string)')]","[(10, 'from manimlib.utils.tex_file_writing import tex_content_to_svg_file'), (68, '    @property'), (69, '    def hash_seed(self) -> tuple:'), (70, '        return ('), (71, '            self.__class__.__name__,'), (72, '            self.svg_default,'), (73, '            self.path_string_config,'), (74, '            self.base_color,'), (75, '            self.isolate,'), (76, '            self.protect,'), (77, '            self.tex_string,'), (78, '            self.alignment,'), (79, '            self.tex_environment,'), (80, '            self.tex_to_color_map,'), (81, '            self.template,'), (82, '            self.additional_preamble'), (83, '        )'), (84, ''), (85, '    def get_file_path_by_content(self, content: str) -> str:'), (86, '        return tex_content_to_svg_file('), (87, '            content, self.template, self.additional_preamble, self.tex_string'), (88, '        )')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(7, 'import tempfile'), (8, 'import hashlib'), (9, 'from functools import lru_cache'), (16, 'from manimlib.config import get_global_config'), (21, 'from manimlib.utils.cache import cache_on_disk'), (54, '@lru_cache(maxsize=128)'), (55, '@cache_on_disk'), (56, 'def markup_to_svg('), (57, '    markup_str: str,'), (58, '    justify: bool = False,'), (59, '    indent: float = 0,'), (60, '    alignment: str = ""CENTER"",'), (61, '    line_width: float | None = None,'), (62, ') -> str:'), (63, '    validate_error = manimpango.MarkupUtils.validate(markup_str)'), (64, '    if validate_error:'), (65, '        raise ValueError('), (66, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (67, '            f""{validate_error}""'), (68, '        )'), (69, ''), (70, '    # `manimpango` is under construction,'), (71, '    # so the following code is intended to suit its interface'), (72, '    alignment = _Alignment(alignment)'), (73, '    if line_width is None:'), (74, '        pango_width = -1'), (75, '    else:'), (76, '        pango_width = line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (77, ''), (78, ""    # Write the result to a temporary svg file, and return it's contents.""), (79, '    # TODO, better would be to have this not write to file at all'), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:""), (81, '        manimpango.MarkupUtils.text2svg('), (82, '            text=markup_str,'), (83, '            font="""",                     # Already handled'), (84, '            slant=""NORMAL"",              # Already handled'), (85, '            weight=""NORMAL"",             # Already handled'), (86, '            size=1,                      # Already handled'), (87, '            _=0,                         # Empty parameter'), (88, '            disable_liga=False,'), (89, '            file_name=tmp.name,'), (90, '            START_X=0,'), (91, '            START_Y=0,'), (92, '            width=DEFAULT_CANVAS_WIDTH,'), (93, '            height=DEFAULT_CANVAS_HEIGHT,'), (94, '            justify=justify,'), (95, '            indent=indent,'), (96, '            line_spacing=None,           # Already handled'), (97, '            alignment=alignment,'), (98, '            pango_width=pango_width'), (99, '        )'), (100, ''), (101, '        # Read the contents'), (102, '        tmp.seek(0)'), (103, '        return tmp.read()'), (104, ''), (105, ''), (159, '        default_style = get_global_config()[""style""]'), (164, '        self.alignment = alignment or default_style[""text_alignment""]'), (166, '        self.font = font or default_style[""font""]'), (199, '    def get_svg_string_by_content(self, content: str) -> str:'), (200, '        self.content = content'), (201, '        return markup_to_svg('), (205, '            alignment=self.alignment,'), (206, '            line_width=self.line_width'), (495, '    file_path = Path(font_file).resolve()'), (496, '    if not file_path.exists():'), (497, '        error = f""Can\'t find {font_file}.""')]","[(17, 'from manimlib.utils.customization import get_customization'), (20, 'from manimlib.utils.directories import get_downloads_dir'), (21, 'from manimlib.utils.directories import get_text_dir'), (109, '        self.alignment = alignment or get_customization()[""style""][""text_alignment""]'), (111, '        self.font = font or get_customization()[""style""][""font""]'), (144, '    @property'), (145, '    def hash_seed(self) -> tuple:'), (146, '        return ('), (147, '            self.__class__.__name__,'), (148, '            self.svg_default,'), (149, '            self.path_string_config,'), (150, '            self.base_color,'), (151, '            self.isolate,'), (152, '            self.protect,'), (153, '            self.text,'), (154, '            self.font_size,'), (155, '            self.lsh,'), (156, '            self.justify,'), (157, '            self.indent,'), (158, '            self.alignment,'), (159, '            self.line_width,'), (160, '            self.font,'), (161, '            self.slant,'), (162, '            self.weight,'), (163, '            self.t2c,'), (164, '            self.t2f,'), (165, '            self.t2s,'), (166, '            self.t2w,'), (167, '            self.global_config,'), (168, '            self.local_configs,'), (169, '            self.disable_ligatures'), (170, '        )'), (171, ''), (172, '    def get_file_path_by_content(self, content: str) -> str:'), (173, '        hash_content = str(('), (175, '            self.justify,'), (176, '            self.indent,'), (177, '            self.alignment,'), (178, '            self.line_width'), (179, '        ))'), (180, '        svg_file = os.path.join('), (181, '            get_text_dir(), hash_string(hash_content) + "".svg""'), (182, '        )'), (183, '        if not os.path.exists(svg_file):'), (184, '            self.markup_to_svg(content, svg_file)'), (185, '        return svg_file'), (186, ''), (187, '    def markup_to_svg(self, markup_str: str, file_name: str) -> str:'), (188, '        self.validate_markup_string(markup_str)'), (189, ''), (190, '        # `manimpango` is under construction,'), (191, '        # so the following code is intended to suit its interface'), (192, '        alignment = _Alignment(self.alignment)'), (193, '        if self.line_width is None:'), (194, '            pango_width = -1'), (195, '        else:'), (196, '            pango_width = self.line_width / FRAME_WIDTH * DEFAULT_PIXEL_WIDTH'), (197, ''), (198, '        return manimpango.MarkupUtils.text2svg('), (199, '            text=markup_str,'), (200, '            font="""",                     # Already handled'), (201, '            slant=""NORMAL"",              # Already handled'), (202, '            weight=""NORMAL"",             # Already handled'), (203, '            size=1,                      # Already handled'), (204, '            _=0,                         # Empty parameter'), (205, '            disable_liga=False,'), (206, '            file_name=file_name,'), (207, '            START_X=0,'), (208, '            START_Y=0,'), (209, '            width=DEFAULT_CANVAS_WIDTH,'), (210, '            height=DEFAULT_CANVAS_HEIGHT,'), (213, '            line_spacing=None,           # Already handled'), (214, '            alignment=alignment,'), (215, '            pango_width=pango_width'), (216, '        )'), (217, ''), (218, '    @staticmethod'), (219, '    def validate_markup_string(markup_str: str) -> None:'), (220, '        validate_error = manimpango.MarkupUtils.validate(markup_str)'), (221, '        if not validate_error:'), (222, '            return'), (223, '        raise ValueError('), (224, '            f""Invalid markup string \\""{markup_str}\\""\\n"" + \\'), (225, '            f""{validate_error}""'), (514, '    input_folder = Path(get_downloads_dir()).parent.resolve()'), (515, '    possible_paths = ['), (516, '        Path(font_file),'), (517, '        input_folder / font_file,'), (518, '    ]'), (519, '    for path in possible_paths:'), (520, '        path = path.resolve()'), (521, '        if path.exists():'), (522, '            file_path = path'), (523, '            break'), (524, '    else:'), (525, '        error = f""Can\'t find {font_file}."" f""Tried these : {possible_paths}""'), (527, '')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(62, '        scene_config = manimlib.config.get_scene_config(self.args)'), (64, '            scene_config[""existing_window""] = self.window  # see scene initialization'), (65, ''), (66, '        run_config = manimlib.config.get_run_config(self.args)'), (69, '        self.scenes = manimlib.extract_scene.main(scene_config, run_config)'), (81, '            if self.args.embed:'), (82, '                print("" "".join(['), (83, '                    ""Loading interactive session for"",'), (84, '                    f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (85, '                    f""in \\033[96m{self.args.file}\\033[0m"",'), (86, '                    f""at line \\033[96m{self.args.embed}\\033[0m""'), (87, '                ]))')]","[(40, '                print(""Reloading..."")'), (41, ''), (64, '        config = manimlib.config.get_configuration(self.args)'), (66, '            config[""existing_window""] = self.window  # see scene initialization'), (69, '        self.scenes = manimlib.extract_scene.main(config)'), (83, '')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(235, '        shell = InteractiveShellEmbed('), (236, '            user_module=module,'), (237, '            display_banner=False,'), (238, '            xmode=self.embed_exception_mode'), (239, '        )')]","[(235, '        shell = InteractiveShellEmbed(user_module=module)'), (291, '        # Set desired exception mode'), (292, '        shell.magic(f""xmode {self.embed_exception_mode}"")'), (293, '')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(13, 'from manimlib.config import get_camera_config'), (413, '        cam_config = get_camera_config()')]","[(13, 'from manimlib.config import get_configuration'), (413, ""        cam_config = get_configuration(parse_cli())['camera_config']"")]",No
N/A,manimlib/utils/cache.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(1, 'from __future__ import annotations'), (2, ''), (3, 'import os'), (4, 'from diskcache import Cache'), (5, 'from contextlib import contextmanager'), (6, 'from functools import wraps'), (7, ''), (8, 'from manimlib.utils.directories import get_cache_dir'), (9, 'from manimlib.utils.simple_functions import hash_string'), (10, ''), (11, 'from typing import TYPE_CHECKING'), (12, ''), (13, 'if TYPE_CHECKING:'), (14, ""    T = TypeVar('T')""), (15, ''), (16, ''), (17, 'CACHE_SIZE = 1e9  # 1 Gig'), (18, '_cache = Cache(get_cache_dir(), size_limit=CACHE_SIZE)'), (19, ''), (20, ''), (21, 'def cache_on_disk(func: Callable[..., T]) -> Callable[..., T]:'), (22, '    @wraps(func)'), (23, '    def wrapper(*args, **kwargs):'), (24, '        key = hash_string(f""{func.__name__}{args}{kwargs}"")'), (25, '        value = _cache.get(key)'), (26, '        if value is None:'), (27, '            value = func(*args, **kwargs)'), (28, '            _cache.set(key, value)'), (29, '        return value'), (30, '    return wrapper'), (31, ''), (32, ''), (33, 'def clear_cache():'), (34, '    _cache.clear()')]",[],No
manimlib/utils/customization.py,N/A,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements",[],"[(1, 'import os'), (2, 'import tempfile'), (3, ''), (4, 'from manimlib.config import get_custom_config'), (5, 'from manimlib.config import get_manim_dir'), (6, ''), (7, ''), (8, 'CUSTOMIZATION = {}'), (9, ''), (10, ''), (11, 'def get_customization():'), (12, '    if not CUSTOMIZATION:'), (13, '        CUSTOMIZATION.update(get_custom_config())'), (14, '        directories = CUSTOMIZATION[""directories""]'), (15, '        # Unless user has specified otherwise, use the system default temp'), (16, '        # directory for storing tex files, mobject_data, etc.'), (17, '        if not directories[""temporary_storage""]:'), (18, '            directories[""temporary_storage""] = tempfile.gettempdir()'), (19, ''), (20, '        # Assumes all shaders are written into manimlib/shaders'), (21, '        directories[""shaders""] = os.path.join('), (22, '            get_manim_dir(), ""manimlib"", ""shaders""'), (23, '        )'), (24, '    return CUSTOMIZATION')]",No
manimlib/utils/directories.py,manimlib/utils/directories.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(4, 'import tempfile'), (5, 'import appdirs'), (7, ''), (8, 'from manimlib.config import get_global_config'), (9, 'from manimlib.config import get_manim_dir'), (14, '    return get_global_config()[""directories""]'), (17, 'def get_cache_dir() -> str:'), (18, '    return get_directories()[""cache""] or appdirs.user_cache_dir(""manim"")'), (21, 'def get_temp_dir() -> str:'), (22, '    return get_directories()[""temporary_storage""] or tempfile.gettempdir()'), (26, '    return get_directories()[""downloads""] or appdirs.user_cache_dir(""manim_downloads"")'), (46, '    return os.path.join(get_manim_dir(), ""manimlib"", ""shaders"")')]","[(5, 'from manimlib.utils.customization import get_customization'), (10, '    return get_customization()[""directories""]'), (11, ''), (12, ''), (13, 'def get_temp_dir() -> str:'), (14, '    return get_directories()[""temporary_storage""]'), (17, 'def get_tex_dir() -> str:'), (18, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Tex""))'), (21, 'def get_text_dir() -> str:'), (22, '    return guarantee_existence(os.path.join(get_temp_dir(), ""Text""))'), (23, ''), (24, ''), (25, 'def get_mobject_data_dir() -> str:'), (26, '    return guarantee_existence(os.path.join(get_temp_dir(), ""mobject_data""))'), (30, '    return guarantee_existence(os.path.join(get_temp_dir(), ""manim_downloads""))'), (50, '    return get_directories()[""shaders""]')]",No
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(9, 'import urllib.request'), (10, ''), (11, 'import manimlib.utils.directories'), (12, 'from manimlib.utils.simple_functions import hash_string'), (43, '        file_hash = hash_string(file_name)'), (44, '        folder = manimlib.utils.directories.get_downloads_dir()')]","[(38, '        import urllib.request'), (39, '        from manimlib.utils.directories import get_downloads_dir'), (41, ""        file_hash = hashlib.sha256(file_name.encode('utf-8')).hexdigest()[:32]""), (42, '        folder = get_downloads_dir()')]",No
manimlib/utils/init_config.py,manimlib/utils/init_config.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(39, '            ""base"": """",'), (40, '            ""subdirs"": {'), (41, '                ""output"": ""videos"",'), (42, '                ""raster_images"": ""raster_images"",'), (43, '                ""vector_images"": ""vector_images"",'), (44, '                ""sounds"": ""sounds"",'), (45, '                ""data"": ""data"",'), (46, '                ""downloads"": ""downloads"",'), (47, '            }'), (81, '        dir_config[""base""] = Prompt.ask('), (82, '            ""  What base directory should manim use for reading/writing video and images? [prompt.default](optional, default is none)"",'), (86, '        dir_config[""subdirs""][""output""] = Prompt.ask('), (87, '            ""  Within that base directory, which subdirectory should manim [bold]output[/bold] video and image files to?"" + \\'), (88, '            "" [prompt.default](optional, default is \\""videos\\"")"",'), (89, '            default=""videos"",'), (92, '        dir_config[""subdirs""][""raster_images""] = Prompt.ask('), (93, '            ""  Within that base directory, which subdirectory should manim look for raster images (.png, .jpg)"" + \\'), (94, '            "" [prompt.default](optional, default is \\""raster_images\\"")"",'), (95, '            default=""raster_images"",'), (98, '        dir_config[""subdirs""][""vector_images""] = Prompt.ask('), (99, '            ""  Within that base directory, which subdirectory should manim look for raster images (.svg, .xdv)"" + \\'), (100, '            "" [prompt.default](optional, default is \\""vector_images\\"")"",'), (101, '            default=""vector_images"",'), (104, '        dir_config[""subdirs""][""sounds""] = Prompt.ask('), (105, '            ""  Within that base directory, which subdirectory should manim look for sound files (.mp3, .wav)"" + \\'), (106, '            "" [prompt.default](optional, default is \\""sounds\\"")"",'), (107, '            default=""sounds"",'), (108, '            show_default=False'), (109, '        )'), (110, '        dir_config[""subdirs""][""downloads""] = Prompt.ask('), (111, '            ""  Within that base directory, which subdirectory should manim output downloaded files"" + \\'), (112, '            "" [prompt.default](optional, default is \\""downloads\\"")"",'), (113, '            default=""downloads"",')]","[(39, '            ""output"": """",'), (40, '            ""raster_images"": """",'), (41, '            ""vector_images"": """",'), (42, '            ""sounds"": """",'), (43, '            ""temporary_storage"": """",'), (77, '        dir_config[""output""] = Prompt.ask('), (78, '            ""  Where should manim [bold]output[/bold] video and image files place [prompt.default](optional, default is none)"",'), (82, '        dir_config[""raster_images""] = Prompt.ask('), (83, '            ""  Which folder should manim find [bold]raster images[/bold] (.jpg .png .gif) in "" + \\'), (84, '            ""[prompt.default](optional, default is none)"",'), (85, '            default="""",'), (88, '        dir_config[""vector_images""] = Prompt.ask('), (89, '            ""  Which folder should manim find [bold]vector images[/bold] (.svg .xdv) in "" + \\'), (90, '            ""[prompt.default](optional, default is none)"",'), (91, '            default="""",'), (94, '        dir_config[""sounds""] = Prompt.ask('), (95, '            ""  Which folder should manim find [bold]sound files[/bold] (.mp3 .wav) in "" + \\'), (96, '            ""[prompt.default](optional, default is none)"",'), (97, '            default="""",'), (100, '        dir_config[""temporary_storage""] = Prompt.ask('), (101, '            ""  Which folder should manim storage [bold]temporary files[/bold] "" + \\'), (102, '            ""[prompt.default](recommended, use system temporary folder by default)"",'), (103, '            default="""",')]",No
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(99, 'def hash_string(string: str, n_bytes=16) -> str:'), (101, '    return hasher.hexdigest()[:n_bytes]')]","[(99, 'def hash_string(string: str) -> str:'), (100, '    # Truncating at 16 bytes for cleanliness'), (102, '    return hasher.hexdigest()[:16]')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(6, 'import subprocess'), (7, 'from functools import lru_cache'), (9, 'from pathlib import Path'), (10, 'import tempfile'), (11, ''), (12, 'from manimlib.utils.cache import cache_on_disk'), (13, 'from manimlib.config import get_global_config'), (24, '    template_path = os.path.join(get_manim_dir(), ""manimlib"", ""tex_templates.yml"")'), (25, '    with open(template_path, encoding=""utf-8"") as tex_templates_file:'), (47, '        template_name = get_global_config()[""style""][""tex_template""]'), (57, 'def get_full_tex(content: str, preamble: str = """"):'), (58, '    return ""\\n\\n"".join(('), (67, '@lru_cache(maxsize=128)'), (68, '@cache_on_disk'), (69, 'def latex_to_svg('), (70, '    latex: str,'), (71, '    template: str = """",'), (72, '    additional_preamble: str = """",'), (73, '    short_tex: str = """",'), (74, '    show_message_during_execution: bool = True,'), (75, ') -> str:'), (76, '    """"""Convert LaTeX string to SVG string.'), (77, ''), (78, '    Args:'), (79, '        latex: LaTeX source code'), (80, '        template: Path to a template LaTeX file'), (81, '        additional_preamble: String including any added ""\\\\usepackage{...}"" style imports'), (82, ''), (83, '    Returns:'), (84, '        str: SVG source code'), (85, ''), (86, '    Raises:'), (87, '        LatexError: If LaTeX compilation fails'), (88, '        NotImplementedError: If compiler is not supported'), (89, '    """"""'), (90, '    if show_message_during_execution:'), (91, '        max_message_len = 80'), (92, '        message = f""Writing {short_tex or latex}""'), (93, '        if len(message) > max_message_len:'), (94, '            message = message[:max_message_len - 3] + ""...""'), (95, '        print(message, end=""\\r"")'), (96, ''), (97, '    tex_config = get_tex_config()'), (98, '    if template and template != tex_config[""template""]:'), (99, '        tex_config = get_tex_template_config(template)'), (100, ''), (101, '    compiler = tex_config[""compiler""]'), (110, '        raise NotImplementedError(f""Compiler \'{compiler}\' is not implemented"")'), (111, ''), (112, '    preamble = tex_config[""preamble""] + ""\\n"" + additional_preamble'), (113, '    full_tex = get_full_tex(latex, preamble)'), (114, ''), (115, '    # Write intermediate files to a temporary directory'), (116, '    with tempfile.TemporaryDirectory() as temp_dir:'), (117, '        base_path = os.path.join(temp_dir, ""working"")'), (118, '        tex_path = base_path + "".tex""'), (119, '        dvi_path = base_path + dvi_ext'), (120, ''), (121, '        # Write tex file'), (122, '        with open(tex_path, ""w"", encoding=""utf-8"") as tex_file:'), (123, '            tex_file.write(full_tex)'), (124, ''), (125, '        # Run latex compiler'), (126, '        process = subprocess.run('), (127, '            ['), (128, '                program.split()[0],  # Split for xelatex case'), (129, '                ""-interaction=batchmode"",'), (130, '                ""-halt-on-error"",'), (131, '                ""-output-directory="" + temp_dir,'), (132, '                tex_path'), (133, '            ] + ([""--no-pdf""] if compiler == ""xelatex"" else []),'), (134, '            capture_output=True,'), (135, '            text=True'), (138, '        if process.returncode != 0:'), (139, '            # Handle error'), (140, '            error_str = """"'), (141, '            log_path = base_path + "".log""'), (142, '            if os.path.exists(log_path):'), (143, '                with open(log_path, ""r"", encoding=""utf-8"") as log_file:'), (144, '                    content = log_file.read()'), (145, '                    error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (146, '                    if error_match:'), (147, '                        error_str = error_match.group()'), (148, '            raise LatexError(error_str or ""LaTeX compilation failed"")'), (149, ''), (150, '        # Run dvisvgm and capture output directly'), (151, '        process = subprocess.run('), (152, '            ['), (153, '                ""dvisvgm"",'), (154, '                dvi_path,'), (155, '                ""-n"",  # no fonts'), (156, '                ""-v"", ""0"",  # quiet'), (157, '                ""--stdout"",  # output to stdout instead of file'), (158, '            ],'), (159, '            capture_output=True'), (161, ''), (162, '        # Return SVG string'), (163, ""        result = process.stdout.decode('utf-8')""), (164, ''), (165, '    if show_message_during_execution:'), (166, '        print("" "" * len(message), end=""\\r"")'), (167, ''), (168, '    return result')]","[(3, 'from contextlib import contextmanager'), (8, 'from manimlib.config import get_custom_config'), (11, 'from manimlib.utils.directories import get_tex_dir'), (20, '    with open(os.path.join('), (21, '        get_manim_dir(), ""manimlib"", ""tex_templates.yml""'), (22, '    ), encoding=""utf-8"") as tex_templates_file:'), (44, '        template_name = get_custom_config()[""style""][""tex_template""]'), (54, 'def tex_content_to_svg_file('), (55, '    content: str, template: str, additional_preamble: str,'), (56, '    short_tex: str'), (57, ') -> str:'), (58, '    tex_config = get_tex_config()'), (59, '    if not template or template == tex_config[""template""]:'), (60, '        compiler = tex_config[""compiler""]'), (61, '        preamble = tex_config[""preamble""]'), (62, '    else:'), (63, '        config = get_tex_template_config(template)'), (64, '        compiler = config[""compiler""]'), (65, '        preamble = config[""preamble""]'), (66, ''), (67, '    if additional_preamble:'), (68, '        preamble += ""\\n"" + additional_preamble'), (69, '    full_tex = ""\\n\\n"".join(('), (77, '    svg_file = os.path.join('), (78, '        get_tex_dir(), hash_string(full_tex) + "".svg""'), (79, '    )'), (80, '    if not os.path.exists(svg_file):'), (81, ""        # If svg doesn't exist, create it""), (82, '        with display_during_execution(""Writing "" + short_tex):'), (83, '            create_tex_svg(full_tex, svg_file, compiler)'), (84, '    return svg_file'), (87, 'def create_tex_svg(full_tex: str, svg_file: str, compiler: str) -> None:'), (95, '        raise NotImplementedError('), (96, '            f""Compiler \'{compiler}\' is not implemented""'), (99, '    # Write tex file'), (100, '    root, _ = os.path.splitext(svg_file)'), (101, '    with open(root + "".tex"", ""w"", encoding=""utf-8"") as tex_file:'), (102, '        tex_file.write(full_tex)'), (103, ''), (104, '    # tex to dvi'), (105, '    if os.system("" "".join(('), (106, '        program,'), (107, '        ""-interaction=batchmode"",'), (108, '        ""-halt-on-error"",'), (109, '        f""-output-directory=\\""{os.path.dirname(svg_file)}\\"""",'), (110, '        f""\\""{root}.tex\\"""",'), (111, '        "">"",'), (112, '        os.devnull'), (113, '    ))):'), (114, '        log.error('), (115, '            ""LaTeX Error!  Not a worry, it happens to the best of us.""'), (117, '        error_str = """"'), (118, '        with open(root + "".log"", ""r"", encoding=""utf-8"") as log_file:'), (119, '            error_match_obj = re.search(r""(?<=\\n! ).*\\n.*\\n"", log_file.read())'), (120, '            if error_match_obj:'), (121, '                error_str = error_match_obj.group()'), (122, '                log.debug('), (123, '                    f""The error could be:\\n`{error_str}`"",'), (124, '                )'), (125, '        raise LatexError(error_str)'), (126, ''), (127, '    # dvi to svg'), (128, '    os.system("" "".join(('), (129, '        ""dvisvgm"",'), (130, '        f""\\""{root}{dvi_ext}\\"""",'), (131, '        ""-n"",'), (132, '        ""-v"",'), (133, '        ""0"",'), (134, '        ""-o"",'), (135, '        f""\\""{svg_file}\\"""",'), (136, '        "">"",'), (137, '        os.devnull'), (138, '    )))'), (139, ''), (140, '    # Cleanup superfluous documents'), (141, '    for ext in ("".tex"", dvi_ext, "".log"", "".aux""):'), (142, '        try:'), (143, '            os.remove(root + ext)'), (144, '        except FileNotFoundError:'), (145, '            pass'), (146, ''), (147, ''), (148, '# TODO, perhaps this should live elsewhere'), (149, '@contextmanager'), (150, 'def display_during_execution(message: str):'), (151, '    # Merge into a single line'), (152, '    to_print = message.replace(""\\n"", "" "")'), (153, '    max_characters = os.get_terminal_size().columns - 1'), (154, '    if len(to_print) > max_characters:'), (155, '        to_print = to_print[:max_characters - 3] + ""...""'), (156, '    try:'), (157, '        print(to_print, end=""\\r"")'), (158, '        yield'), (159, '    finally:'), (160, '        print("" "" * len(to_print), end=""\\r"")')]",No
manimlib/window.py,manimlib/window.py,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(11, 'from manimlib.config import get_global_config'), (89, '        global_config = get_global_config()'), (90, '        custom_position = global_config[""window_position""]'), (91, '        mon_index = global_config[""window_monitor""]')]","[(12, 'from manimlib.utils.customization import get_customization'), (89, '        custom_position = get_customization()[""window_position""]'), (91, '        mon_index = get_customization()[""window_monitor""]')]",No
requirements.txt,requirements.txt,94f6f0aa963a9aa61126789101f4e15321fd3097,5a70d67b98e9b2d353d0721d95b034ffaab29a89,"Cleaner local caching of Tex/Text data, and partially cleaned up configuration (#2259)

* Remove print(""Reloading..."")

* Change where exception mode is set, to be quieter

* Add default fallback monitor for when no monitors are detected

* Have StringMobject work with svg strings rather than necessarily writing to file

Change SVGMobject to allow taking in a string of svg code as an input

* Add caching functionality, and have Tex and Text both use it for saved svg strings

* Clean up tex_file_writing

* Get rid of get_tex_dir and get_text_dir

* Allow for a configurable cache location

* Make caching on disk a decorator, and update implementations for Tex and Text mobjects

* Remove stray prints

* Clean up how configuration is handled

In principle, all we need here is that manim looks to the default_config.yaml file, and updates it based on any local configuration files, whether in the current working directory or as specified by a CLI argument.

* Make the default size for hash_string an option

* Remove utils/customization.py

* Remove stray prints

* Consolidate camera configuration

This is still not optimal, but at least makes clearer the way that importing from constants.py kicks off some of the configuration code.

* Factor out configuration to be passed into a scene vs. that used to run a scene

* Use newer extract_scene.main interface

* Add clarifying message to note what exactly is being reloaded

* Minor clean up

* Minor clean up

* If it's worth caching to disk, then might as well do so in memory too during development

* No longer any need for custom hash_seeds in Tex and Text

* Remove display_during_execution

* Get rid of (no longer used) mobject_data directory reference

* Remove get_downloads_dir reference from register_font

* Update where downloads go

* Easier use of subdirectories in configuration

* Add new pip requirements","[(1, 'appdirs'), (3, 'diskcache'), (25, 'tempfile')]",[],No
manimlib/config.py,manimlib/config.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","[(16, 'from manimlib.module_loader import ModuleLoader'), (218, '    file_name: str, scene_name: str, line_marker: str, is_during_reload'), (280, '    module = ModuleLoader.get_module(new_file, is_during_reload)'), (292, '        return ModuleLoader.get_module(args.file)'), (294, '        is_reload = args.is_reload if hasattr(args, ""is_reload"") else False'), (296, '            args.file, args.scene_names[0], args.embed, is_reload')]","[(212, 'def get_module(file_name: str | None) -> Module:'), (213, '    if file_name is None:'), (214, '        return None'), (215, '    module_name = file_name.replace(os.sep, ""."").replace("".py"", """")'), (216, '    spec = importlib.util.spec_from_file_location(module_name, file_name)'), (217, '    module = importlib.util.module_from_spec(spec)'), (218, '    spec.loader.exec_module(module)'), (219, '    return module'), (220, ''), (221, ''), (227, '    file_name: str, scene_name: str, line_marker: str'), (289, '    module = get_module(new_file)'), (301, '        return get_module(args.file)'), (304, '            args.file, args.scene_names[0], args.embed')]",No
N/A,manimlib/module_loader.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","[(1, 'from __future__ import annotations'), (2, ''), (3, 'import builtins'), (4, 'import importlib'), (5, 'import os'), (6, 'import sys'), (7, 'import sysconfig'), (8, ''), (9, 'from manimlib.logger import log'), (10, ''), (11, 'Module = importlib.util.types.ModuleType'), (12, ''), (13, 'IGNORE_MANIMLIB_MODULES = True'), (14, ''), (15, ''), (16, 'class ModuleLoader:'), (17, '    """"""'), (18, '    Utility class to load a module from a file and handle its imports.'), (19, ''), (20, '    Most parts of this class are only needed for the reload functionality,'), (21, '    while the `get_module` method is the main entry point to import a module.'), (22, '    """"""'), (23, ''), (24, '    @staticmethod'), (25, '    def get_module(file_name: str | None, is_during_reload=False) -> Module | None:'), (26, '        """"""'), (27, '        Imports a module from a file and returns it.'), (28, ''), (29, '        During reload (when the user calls `reload()` in the IPython shell), we'), (30, '        also track the imported modules and reload them as well (they would be'), (31, '        cached otherwise). See the reload_manager where the reload parameter is set.'), (32, ''), (33, '        Note that `exec_module()` is called twice when reloading a module:'), (34, '        1. In exec_module_and_track_imports to track the imports'), (35, '        2. Here to actually execute the module again with the respective'), (36, '           imported modules reloaded.'), (37, '        """"""'), (38, '        if file_name is None:'), (39, '            return None'), (40, ''), (41, '        module_name = file_name.replace(os.sep, ""."").replace("".py"", """")'), (42, '        spec = importlib.util.spec_from_file_location(module_name, file_name)'), (43, '        module = importlib.util.module_from_spec(spec)'), (44, ''), (45, '        if is_during_reload:'), (46, '            imported_modules = ModuleLoader._exec_module_and_track_imports(spec, module)'), (47, '            reloaded_modules_tracker = set()'), (48, '            ModuleLoader._reload_modules(imported_modules, reloaded_modules_tracker)'), (49, ''), (50, '        spec.loader.exec_module(module)'), (51, '        return module'), (52, ''), (53, '    @staticmethod'), (54, '    def _exec_module_and_track_imports(spec, module: Module) -> set[str]:'), (55, '        """"""'), (56, '        Executes the given module (imports it) and returns all the modules that'), (57, '        are imported during its execution.'), (58, ''), (59, '        This is achieved by replacing the __import__ function with a custom one'), (60, '        that tracks the imported modules. At the end, the original __import__'), (61, '        built-in function is restored.'), (62, '        """"""'), (63, '        imported_modules: set[str] = set()'), (64, '        original_import = builtins.__import__'), (65, ''), (66, '        def tracked_import(name, globals=None, locals=None, fromlist=(), level=0):'), (67, '            """"""'), (68, '            Custom __import__ function that does exactly the same as the original'), (69, '            one, but also tracks the imported modules by means of adding their'), (70, '            names to a set.'), (71, '            """"""'), (72, '            result = original_import(name, globals, locals, fromlist, level)'), (73, '            imported_modules.add(name)'), (74, '            return result'), (75, ''), (76, '        builtins.__import__ = tracked_import'), (77, ''), (78, '        try:'), (79, '            # Remove the ""_insert_embed"" suffix from the module name'), (80, '            module_name = module.__name__'), (81, '            if module.__name__.endswith(""_insert_embed""):'), (82, '                module_name = module_name[:-13]'), (83, '            log.debug(\'Reloading module ""%s""\', module_name)'), (84, ''), (85, '            spec.loader.exec_module(module)'), (86, '        finally:'), (87, '            builtins.__import__ = original_import'), (88, ''), (89, '        return imported_modules'), (90, ''), (91, '    @staticmethod'), (92, '    def _reload_modules(modules: set[str], reloaded_modules_tracker: set[str]):'), (93, '        """"""'), (94, '        Out of the given modules, reloads the ones that were not already imported.'), (95, ''), (96, '        We skip modules that are not user-defined (see `is_user_defined_module()`).'), (97, '        """"""'), (98, '        for mod in modules:'), (99, '            if mod in reloaded_modules_tracker:'), (100, '                continue'), (101, ''), (102, '            if not ModuleLoader._is_user_defined_module(mod):'), (103, '                continue'), (104, ''), (105, '            module = sys.modules[mod]'), (106, '            ModuleLoader._deep_reload(module, reloaded_modules_tracker)'), (107, ''), (108, '            reloaded_modules_tracker.add(mod)'), (109, ''), (110, '    @staticmethod'), (111, '    def _is_user_defined_module(mod: str) -> bool:'), (112, '        """"""'), (113, '        Returns whether the given module is user-defined or not.'), (114, ''), (115, '        A module is considered user-defined if'), (116, '        - it is not part of the standard library'), (117, '        - AND it is not an external library (site-packages or dist-packages)'), (118, '        """"""'), (119, '        if mod not in sys.modules:'), (120, '            return False'), (121, ''), (122, '        if mod in sys.builtin_module_names:'), (123, '            return False'), (124, ''), (125, '        module = sys.modules[mod]'), (126, '        module_path = getattr(module, ""__file__"", None)'), (127, '        if module_path is None:'), (128, '            return False'), (129, '        module_path = os.path.abspath(module_path)'), (130, ''), (131, '        # External libraries (site-packages or dist-packages), e.g. numpy'), (132, '        if ""site-packages"" in module_path or ""dist-packages"" in module_path:'), (133, '            return False'), (134, ''), (135, '        # Standard lib'), (136, '        standard_lib_path = sysconfig.get_path(""stdlib"")'), (137, '        if module_path.startswith(standard_lib_path):'), (138, '            return False'), (139, ''), (140, '        return True'), (141, ''), (142, '    @staticmethod'), (143, '    def _deep_reload(module: Module, reloaded_modules_tracker: set[str]):'), (144, '        """"""'), (145, '        Recursively reloads modules imported by the given module.'), (146, ''), (147, '        Only user-defined modules are reloaded, see `is_user_defined_module()`.'), (148, '        """"""'), (149, '        if IGNORE_MANIMLIB_MODULES and module.__name__.startswith(""manimlib""):'), (150, '            return'), (151, ''), (152, '        if not hasattr(module, ""__dict__""):'), (153, '            return'), (154, ''), (155, '        # Prevent reloading the same module multiple times'), (156, '        if module.__name__ in reloaded_modules_tracker:'), (157, '            return'), (158, '        reloaded_modules_tracker.add(module.__name__)'), (159, ''), (160, '        # Recurse for all imported modules'), (161, '        for _attr_name, attr_value in module.__dict__.items():'), (162, '            if isinstance(attr_value, Module):'), (163, '                if ModuleLoader._is_user_defined_module(attr_value.__name__):'), (164, '                    ModuleLoader._deep_reload(attr_value, reloaded_modules_tracker)'), (165, ''), (166, '            # Also reload modules that are part of a class or function'), (167, '            # e.g. when importing `from custom_module import CustomClass`'), (168, '            elif hasattr(attr_value, ""__module__""):'), (169, '                attr_module_name = attr_value.__module__'), (170, '                if ModuleLoader._is_user_defined_module(attr_module_name):'), (171, '                    attr_module = sys.modules[attr_module_name]'), (172, '                    ModuleLoader._deep_reload(attr_module, reloaded_modules_tracker)'), (173, ''), (174, '        # Reload'), (175, '        log.debug(\'Reloading module ""%s""\', module.__name__)'), (176, '        importlib.reload(module)')]",[],No
manimlib/reload_manager.py,manimlib/reload_manager.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","[(22, '    is_reload = False'), (23, ''), (46, '                self.is_reload = True'), (65, '        self.args.is_reload = self.is_reload')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,6196daa5ec49546a8d973b6866991586f98d0d56,94f6f0aa963a9aa61126789101f4e15321fd3097,"Reload user-defined modules during `reload()` (#2257)

* Experiment a lot with module loading

* Extract methods out of experimental mess

* Fix get module return type

* Only reload() modules during reload() command

* Remove unnecessary default parameter

* Add docstrings and logging statements

* Delete unwanted printout

* Improve logging messages

* Extract methods to a new class ModuleLoader

* Remove unused builtins import

* exec_module in any case at the end

* Clarify docstrings & move get_module method up in file

* Add more additionally excluded modules as array

* Distinguish between user-defined modules and external libraries like numpy

* Improved tracked_import docstring

* Remove _insert_embed suffix before logging

* Fix args.is_reload not defined error

* Refine logic to determine whether module is user-defined or not

* Fix list vs. set type annotations

* Improve docstrings & change order of early return

* Fix spelling mistake of ""Reloading""

* Try out custom deep reload

* Make deep reload more robust

* Also reload modules imported as classes

* Move early return up to greatly improve performance

* Clean up comments

* Make methods of Module Loader ""private""

* Add backticks around function in docstring

---------

Co-authored-by: Grant Sanderson <grant@3blue1brown.com>","[(24, 'from manimlib.module_loader import ModuleLoader'), (234, '        module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])')]","[(24, 'from manimlib.config import get_module'), (234, '        module = get_module(caller_frame.f_globals[""__file__""])')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,49c2b5cfe03aacf1bcee7797710e94f825cf8662,09fb8d324e0bd5e08658db3e906c370c1845ace7,Check if animation.mobject is in the full family of scene mobjects before adding,"[(626, '            if animation.mobject not in self.get_mobject_family_members():')]","[(626, '            if animation.mobject not in self.mobjects:')]",No
manimlib/config.py,manimlib/config.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","[(487, '    global_config = get_global_config()'), (488, '    camera_config = get_camera_config(args, global_config)'), (489, '    window_config = get_window_config(args, global_config, camera_config)'), (496, '        ""window_config"": window_config,')]","[(469, '    window_config = get_window_config(args, global_config, camera_config)'), (475, '        ""window_config"": window_config,')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","[(4, 'from manimlib.window import Window'), (5, ''), (67, '        self.args.is_reload = self.is_reload  # Where is this used?'), (71, '        # Create or reuse window'), (72, '        if scene_config[""preview""] and not self.window:  # TODO, this should be in run_config not scene_config'), (73, '            self.window = Window(**run_config[""window_config""])'), (74, '        scene_config[""window""] = self.window'), (75, ''), (83, '            if self.args.embed and self.is_reload:'), (85, '                    ""Reloading interactive session for"",')]","[(65, '        self.args.is_reload = self.is_reload'), (67, '        if self.window:'), (68, '            scene_config[""existing_window""] = self.window  # see scene initialization'), (69, ''), (78, '        # Find first available window'), (79, '        for scene in self.scenes:'), (80, '            if scene.window is not None:'), (81, '                self.window = scene.window'), (82, '                break'), (83, ''), (85, '            if self.args.embed:'), (87, '                    ""Loading interactive session for"",')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","[(48, '    from typing import Callable, Iterable, TypeVar, Optional'), (85, '        preview: bool = True,  # TODO, remove'), (86, '        window: Optional[Window] = None,'), (106, '        self.window = window'), (107, '        if self.window:'), (108, '            self.window.init_for_scene(self)'), (109, '            # Make sure camera and Pyglet window sync'), (110, '            self.camera_config[""fps""] = 30'), (113, '        self.camera: Camera = Camera('), (114, '            window=self.window,'), (115, '            samples=self.samples,'), (116, '            **self.camera_config'), (117, '        )')]","[(48, '    from typing import Callable, Iterable, TypeVar'), (71, '    default_window_config: dict = dict()'), (79, '        window_config: dict = dict(),'), (87, '        preview: bool = True,'), (92, '        existing_window: Window | None = None,'), (106, '        self.window_config = {**self.default_window_config, **window_config}'), (107, '        for config in self.camera_config, self.window_config:'), (108, '            config[""samples""] = self.samples'), (111, '        # Initialize window, if applicable (and reuse window if provided during'), (112, '        # reload by means of the ReloadManager)'), (113, '        if self.preview:'), (114, '            if existing_window:'), (115, '                self.window = existing_window'), (116, '                self.window.update_scene(self)'), (117, '            else:'), (118, '                self.window = Window(scene=self, **self.window_config)'), (119, '                self.camera_config[""fps""] = 30  # Where\'s that 30 from?'), (120, '            self.camera_config[""window""] = self.window'), (121, '        else:'), (122, '            self.window = None'), (125, '        self.camera: Camera = Camera(**self.camera_config)')]",No
manimlib/window.py,manimlib/window.py,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,49c2b5cfe03aacf1bcee7797710e94f825cf8662,"Create Window outside of Scene, and pass it in as an argument","[(17, '    from typing import Callable, TypeVar, Optional'), (32, '        scene: Optional[Scene] = None,'), (38, '        self.scene = scene'), (44, '        if self.scene:'), (45, '            self.init_for_scene(scene)'), (47, '    def init_for_scene(self, scene: Scene):'), (118, '        if self.scene is None or not hasattr(self.scene, ""frame""):'), (149, '        if not self.scene:'), (150, '            return'), (158, '        if not self.scene:'), (159, '            return'), (167, '        if not self.scene:'), (168, '            return'), (175, '        if not self.scene:'), (176, '            return'), (183, '        if not self.scene:'), (184, '            return'), (193, '        if not self.scene:'), (194, '            return'), (201, '        if not self.scene:'), (202, '            return'), (208, '        if not self.scene:'), (209, '            return'), (215, '        if not self.scene:'), (216, '            return'), (222, '        if not self.scene:'), (223, '            return'), (229, '        if not self.scene:'), (230, '            return')]","[(17, '    from typing import Callable, TypeVar'), (32, '        scene: Scene,'), (36, '        scene.window = self'), (44, '        self.update_scene(scene)'), (46, '    def update_scene(self, scene: Scene):'), (117, '        if not hasattr(self.scene, ""frame""):')]",No
manimlib/config.py,manimlib/config.py,33c7f6d063e20eedad2cafbf9df6233b1c6f6370,53b6c34ebec5a9c5478548ceb72adb5eec96b1da,Factor out resolution from get_camera_config,"[(346, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (347, '    dir_config = global_config[""directories""]'), (359, 'def get_file_writer_config(args: Namespace, global_config: dict) -> dict:'), (367, '        ""output_directory"": get_output_directory(args, global_config),'), (373, '        **global_config[""file_writer_config""],'), (390, 'def get_resolution(args: Optional[Namespace] = None, global_config: Optional[dict] = None):'), (391, '    args = args or parse_cli()'), (392, '    global_config = global_config or get_global_config()'), (394, '    camera_resolutions = global_config[""camera_resolutions""]'), (409, '    return int(width_str), int(height_str)'), (410, ''), (411, ''), (412, 'def get_window_config(args: Namespace, global_config: dict) -> dict:'), (413, '    # Default to making window half the screen size'), (414, '    # but make it full screen if -f is passed in'), (415, '    try:'), (416, '        monitors = screeninfo.get_monitors()'), (417, '    except screeninfo.ScreenInfoError:'), (418, '        # Default fallback'), (419, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (420, '    mon_index = global_config[""window_monitor""]'), (421, '    monitor = monitors[min(mon_index, len(monitors) - 1)]'), (422, ''), (423, '    width, height = get_resolution(args, global_config)'), (425, '    aspect_ratio = width / height'), (426, '    window_width = monitor.width'), (427, '    if not (args.full_screen or global_config[""full_screen""]):'), (428, '        window_width //= 2'), (429, '    window_height = int(window_width / aspect_ratio)'), (430, '    return dict(size=(window_width, window_height))'), (431, ''), (432, ''), (433, 'def get_camera_config(args: Optional[Namespace] = None, global_config: Optional[dict] = None) -> dict:'), (434, '    args = args or parse_cli()'), (435, '    global_config = global_config or get_global_config()'), (436, ''), (437, '    width, height = get_resolution(args, global_config)'), (438, '    fps = int(args.fps or global_config[""fps""])'), (439, ''), (440, '    camera_config = {'), (447, '    }'), (450, '        bg_color = args.color or global_config[""style""][""background_color""]'), (457, '    # If rendering a transparent image/movie, make sure the'), (471, '    file_writer_config = get_file_writer_config(args, global_config)'), (475, '        ""file_writer_config"": file_writer_config,'), (490, '    window_config = get_window_config(args, get_global_config())')]","[(346, 'def get_output_directory(args: Namespace, custom_config: dict) -> str:'), (347, '    dir_config = custom_config[""directories""]'), (359, 'def get_file_writer_config(args: Namespace, custom_config: dict) -> dict:'), (367, '        ""output_directory"": get_output_directory(args, custom_config),'), (373, '        **custom_config[""file_writer_config""],'), (390, 'def get_window_config(args: Namespace, custom_config: dict, camera_config: dict) -> dict:'), (391, '    # Default to making window half the screen size'), (392, '    # but make it full screen if -f is passed in'), (393, '    try:'), (394, '        monitors = screeninfo.get_monitors()'), (395, '    except screeninfo.ScreenInfoError:'), (396, '        # Default fallback'), (397, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (398, '    mon_index = custom_config[""window_monitor""]'), (399, '    monitor = monitors[min(mon_index, len(monitors) - 1)]'), (400, '    aspect_ratio = camera_config[""pixel_width""] / camera_config[""pixel_height""]'), (401, '    window_width = monitor.width'), (402, '    if not (args.full_screen or custom_config[""full_screen""]):'), (403, '        window_width //= 2'), (404, '    window_height = int(window_width / aspect_ratio)'), (405, '    return dict(size=(window_width, window_height))'), (406, ''), (408, 'def get_camera_config(args: Optional[Namespace] = None, custom_config: Optional[dict] = None) -> dict:'), (409, '    if args is None:'), (410, '        args = parse_cli()'), (411, '    if custom_config is None:'), (412, '        custom_config = get_global_config()'), (413, ''), (414, '    camera_config = dict()'), (415, '    camera_resolutions = custom_config[""camera_resolutions""]'), (429, '    if args.fps:'), (430, '        fps = int(args.fps)'), (431, '    else:'), (432, '        fps = custom_config[""fps""]'), (433, ''), (435, '    width = int(width_str)'), (436, '    height = int(height_str)'), (438, '    camera_config.update({'), (445, '    })'), (448, '        bg_color = args.color or custom_config[""style""][""background_color""]'), (455, '    # If rendering a transparent image/move, make sure the'), (472, '        ""file_writer_config"": get_file_writer_config(args, global_config),'), (487, '    global_config = get_global_config()'), (488, '    camera_config = get_camera_config(args, global_config)'), (489, '    window_config = get_window_config(args, global_config, camera_config)')]",No
manimlib/constants.py,manimlib/constants.py,2e49c60148b492c1d7a0f5ef1562bef03de25e28,33c7f6d063e20eedad2cafbf9df6233b1c6f6370,Use config.get_resolution for constants,"[(4, 'from manimlib.config import get_resolution'), (16, 'DEFAULT_RESOLUTION: tuple[int, int] = get_resolution()'), (17, 'DEFAULT_PIXEL_WIDTH = DEFAULT_RESOLUTION[0]'), (18, 'DEFAULT_PIXEL_HEIGHT = DEFAULT_RESOLUTION[1]'), (19, 'DEFAULT_FPS: int = 30'), (22, 'ASPECT_RATIO: float = DEFAULT_PIXEL_WIDTH / DEFAULT_PIXEL_HEIGHT')]","[(4, 'from manimlib.config import get_camera_config'), (16, 'CAMERA_CONFIG = get_camera_config()'), (19, ""ASPECT_RATIO: float = CAMERA_CONFIG['pixel_width'] / CAMERA_CONFIG['pixel_height']""), (25, ""DEFAULT_PIXEL_HEIGHT: int = CAMERA_CONFIG['pixel_height']""), (26, ""DEFAULT_PIXEL_WIDTH: int = CAMERA_CONFIG['pixel_width']""), (27, 'DEFAULT_FPS: int = 30')]",No
manimlib/config.py,manimlib/config.py,dd251ab8c2fa3e387064402261b00dbc588216bc,2e49c60148b492c1d7a0f5ef1562bef03de25e28,"Remove ""preview"" as a scene parameter, just look for whether window is None","[(497, '        ""show_in_window"": not args.write_file')]","[(480, '        ""preview"": not args.write_file,')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,dd251ab8c2fa3e387064402261b00dbc588216bc,2e49c60148b492c1d7a0f5ef1562bef03de25e28,"Remove ""preview"" as a scene parameter, just look for whether window is None","[(72, '        if run_config[""show_in_window""] and not self.window:')]","[(72, '        if scene_config[""preview""] and not self.window:  # TODO, this should be in run_config not scene_config')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,dd251ab8c2fa3e387064402261b00dbc588216bc,2e49c60148b492c1d7a0f5ef1562bef03de25e28,"Remove ""preview"" as a scene parameter, just look for whether window is None","[(213, '        if not self.window:'), (214, '            # Embed is only relevant for interactive development with a Window')]","[(85, '        preview: bool = True,  # TODO, remove'), (97, '        self.preview = preview'), (215, '        if not self.preview:'), (216, '            # Embed is only relevant with a preview'), (731, '        if not self.preview:'), (732, '            return')]",No
manimlib/config.py,manimlib/config.py,d357e21c1d7fb4c8fb97f8bc885790dc0da254f5,dd251ab8c2fa3e387064402261b00dbc588216bc,"Change how ModuleLoader receives is_reload information

Use on the fly import of reload_manager rather than altering the args","[(218, '    file_name: str, scene_name: str, line_marker: str'), (280, '    from manimlib.reload_manager import reload_manager'), (281, '    module = ModuleLoader.get_module(new_file, is_during_reload=reload_manager.is_reload)'), (296, '            args.file, args.scene_names[0], args.embed')]","[(218, '    file_name: str, scene_name: str, line_marker: str, is_during_reload'), (280, '    module = ModuleLoader.get_module(new_file, is_during_reload)'), (294, '        is_reload = args.is_reload if hasattr(args, ""is_reload"") else False'), (296, '            args.file, args.scene_names[0], args.embed, is_reload')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,d357e21c1d7fb4c8fb97f8bc885790dc0da254f5,dd251ab8c2fa3e387064402261b00dbc588216bc,"Change how ModuleLoader receives is_reload information

Use on the fly import of reload_manager rather than altering the args",[],"[(67, '        self.args.is_reload = self.is_reload  # Where is this used?')]",No
manimlib/config.py,manimlib/config.py,dd0aa14442517fab904deaedde5ec14ba4a7551a,d357e21c1d7fb4c8fb97f8bc885790dc0da254f5,"Clean up get_module_with_inserted_embed_line, only accept line number as embed arg","[(12, 'from pathlib import Path'), (149, '                 ""at the corresponding line number""'), (210, 'def get_indent(code_lines: list[str], line_number: int):'), (211, '    for line in code_lines[line_number:0:-1]:'), (212, '        if len(line.strip()) == 0:'), (213, '            continue'), (214, '        n_spaces = len(line) - len(line.lstrip())'), (215, '        if line.endswith("":""):'), (216, '            n_spaces += 4'), (217, '        return n_spaces'), (218, '    return 0'), (222, '    file_name: str, scene_name: str, line_number: int'), (230, '    lines = Path(file_name).read_text().splitlines()'), (232, '    scene_line_numbers = ['), (233, '        n for n, line in enumerate(lines)'), (234, '        if line.startswith(""class SurfaceTest"")'), (235, '    ]'), (236, '    if len(scene_line_numbers) == 0:'), (239, '    scene_line_number = scene_line_numbers[0]'), (241, '    n_spaces = get_indent(lines, line_number - 1)'), (242, '    inserted_line = "" "" * n_spaces + ""self.embed()""'), (244, '    new_lines.insert(line_number, inserted_line)'), (247, '    Path(new_file).write_text(""\\n"".join(new_lines))'), (265, '            args.file, args.scene_names[0], int(args.embed)')]","[(147, '            nargs=""?"",'), (148, '            const="""",'), (150, '                 ""into the Scenes construct method. "" + \\'), (151, '                 ""If a string is passed in, the line will be inserted below the "" + \\'), (152, '                 ""last line of code including that string.""'), (213, 'def get_indent(line: str):'), (214, '    return len(line) - len(line.lstrip())'), (218, '    file_name: str, scene_name: str, line_marker: str'), (226, ""    with open(file_name, 'r') as fp:""), (227, '        lines = fp.readlines()'), (229, '    try:'), (230, '        scene_line_number = next('), (231, '            i for i, line in enumerate(lines)'), (232, '            if line.startswith(f""class {scene_name}"")'), (233, '        )'), (234, '    except StopIteration:'), (238, '    prev_line_num = -1'), (239, '    n_spaces = None'), (240, '    if len(line_marker) == 0:'), (241, '        # Find the end of the construct method'), (242, '        in_construct = False'), (243, '        for index in range(scene_line_number, len(lines) - 1):'), (244, '            line = lines[index]'), (245, '            if line.lstrip().startswith(""def construct""):'), (246, '                in_construct = True'), (247, '                n_spaces = get_indent(line) + 4'), (248, '            elif in_construct:'), (249, '                if len(line.strip()) > 0 and get_indent(line) < (n_spaces or 0):'), (250, '                    prev_line_num = index - 1'), (251, '                    break'), (252, '        if prev_line_num < 0:'), (253, '            prev_line_num = len(lines) - 1'), (254, '    elif line_marker.isdigit():'), (255, '        # Treat the argument as a line number'), (256, '        prev_line_num = int(line_marker) - 1'), (257, '    elif len(line_marker) > 0:'), (258, '        # Treat the argument as a string'), (259, '        try:'), (260, '            prev_line_num = next('), (261, '                i'), (262, '                for i in range(scene_line_number, len(lines) - 1)'), (263, '                if line_marker in lines[i]'), (264, '            )'), (265, '        except StopIteration:'), (266, '            log.error(f""No lines matching {line_marker}"")'), (267, '            sys.exit(2)'), (268, ''), (269, '    # Insert the embed line, rewrite file, then write it back when done'), (270, '    if n_spaces is None:'), (271, '        n_spaces = get_indent(lines[prev_line_num])'), (272, '    inserted_line = "" "" * n_spaces + ""self.embed()\\n""'), (274, '    new_lines.insert(prev_line_num + 1, inserted_line)'), (277, ""    with open(new_file, 'w') as fp:""), (278, '        fp.writelines(new_lines)'), (296, '            args.file, args.scene_names[0], args.embed')]",No
manimlib/config.py,manimlib/config.py,fadd045fc1e3d41f0be8b8501f8f5fb44ec8ae3c,dd0aa14442517fab904deaedde5ec14ba4a7551a,"Don't write new file when inserting embed line

Instead, load the relevant module of the true file, and execute the modified code within that.

This also cleans up some of the previous now-unnecessary code around get_module_with_inserted_embed_line","[(210, 'def get_indent(code_lines: list[str], line_number: int) -> str:'), (211, '    for line in code_lines[line_number - 1::-1]:'), (217, '        return n_spaces * "" ""'), (218, '    return """"'), (221, 'def get_module_with_inserted_embed_line(file_name: str, line_number: int):'), (230, '    # Add the relevant embed line to the code'), (231, '    indent = get_indent(lines, line_number)'), (232, '    lines.insert(line_number, indent + ""self.embed()"")'), (233, '    new_code = ""\\n"".join(lines)'), (235, '    # Load the module for the original file, then exectue the new code within'), (236, '    # it, which should redefined the scene to have the inserted embed line'), (238, '    module = ModuleLoader.get_module(file_name, is_during_reload=reload_manager.is_reload)'), (240, ""    code_object = compile(new_code, module.__name__, 'exec')""), (241, '    exec(code_object, module.__dict__)'), (249, '        return get_module_with_inserted_embed_line(args.file, int(args.embed))')]","[(210, 'def get_indent(code_lines: list[str], line_number: int):'), (211, '    for line in code_lines[line_number:0:-1]:'), (217, '        return n_spaces'), (218, '    return 0'), (221, 'def get_module_with_inserted_embed_line('), (222, '    file_name: str, scene_name: str, line_number: int'), (223, '):'), (232, '    scene_line_numbers = ['), (233, '        n for n, line in enumerate(lines)'), (234, '        if line.startswith(""class SurfaceTest"")'), (235, '    ]'), (236, '    if len(scene_line_numbers) == 0:'), (237, '        log.error(f""No scene {scene_name}"")'), (238, '        return'), (239, '    scene_line_number = scene_line_numbers[0]'), (240, ''), (241, '    n_spaces = get_indent(lines, line_number - 1)'), (242, '    inserted_line = "" "" * n_spaces + ""self.embed()""'), (243, '    new_lines = list(lines)'), (244, '    new_lines.insert(line_number, inserted_line)'), (245, '    new_file = file_name.replace("".py"", ""_insert_embed.py"")'), (246, ''), (247, '    Path(new_file).write_text(""\\n"".join(new_lines))'), (250, '    module = ModuleLoader.get_module(new_file, is_during_reload=reload_manager.is_reload)'), (251, '    # This is to pretend the module imported from the edited lines'), (252, '    # of code actually comes from the original file.'), (253, '    module.__file__ = file_name'), (254, ''), (255, '    os.remove(new_file)'), (264, '        return get_module_with_inserted_embed_line('), (265, '            args.file, args.scene_names[0], int(args.embed)'), (266, '        )')]",No
manimlib/module_loader.py,manimlib/module_loader.py,fadd045fc1e3d41f0be8b8501f8f5fb44ec8ae3c,dd0aa14442517fab904deaedde5ec14ba4a7551a,"Don't write new file when inserting embed line

Instead, load the relevant module of the true file, and execute the modified code within that.

This also cleans up some of the previous now-unnecessary code around get_module_with_inserted_embed_line",[],"[(79, '            # Remove the ""_insert_embed"" suffix from the module name'), (81, '            if module.__name__.endswith(""_insert_embed""):'), (82, '                module_name = module_name[:-13]')]",No
manimlib/config.py,manimlib/config.py,e270f5c3d3cb545f1721533241ae1859d418f663,fadd045fc1e3d41f0be8b8501f8f5fb44ec8ae3c,"Change from get_module_with_inserted_embed_line to insert_embed_line_to_module

Rather than taking in a file_name and reading it in, directly take the module and edit its code.","[(221, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (228, '    lines = inspect.getsource(module).splitlines()'), (241, '    from manimlib.reload_manager import reload_manager'), (242, '    module = ModuleLoader.get_module(args.file, is_during_reload=reload_manager.is_reload)'), (243, '    if args.embed:'), (244, '        insert_embed_line_to_module(module, int(args.embed))'), (245, '    return module')]","[(221, 'def get_module_with_inserted_embed_line(file_name: str, line_number: int):'), (228, '    lines = Path(file_name).read_text().splitlines()'), (235, '    # Load the module for the original file, then exectue the new code within'), (236, '    # it, which should redefined the scene to have the inserted embed line'), (237, '    from manimlib.reload_manager import reload_manager'), (238, '    module = ModuleLoader.get_module(file_name, is_during_reload=reload_manager.is_reload)'), (239, ''), (246, '    if args.embed is None:'), (247, '        return ModuleLoader.get_module(args.file)'), (248, '    else:'), (249, '        return get_module_with_inserted_embed_line(args.file, int(args.embed))'), (250, '')]",No
manimlib/config.py,manimlib/config.py,90dfb02cc668e3ad3df6ca7f975e83be75007520,e270f5c3d3cb545f1721533241ae1859d418f663,Move get_scene_module logic to extract_scene.py,"[(399, '        ""file_name"": args.file,'), (400, '        ""embed_line"": int(args.embed) if args.embed is not None else None,'), (401, '        ""is_reload"": False,')]","[(17, 'from manimlib.module_loader import ModuleLoader'), (23, '    Module = importlib.util.types.ModuleType'), (210, 'def get_indent(code_lines: list[str], line_number: int) -> str:'), (211, '    for line in code_lines[line_number - 1::-1]:'), (212, '        if len(line.strip()) == 0:'), (213, '            continue'), (214, '        n_spaces = len(line) - len(line.lstrip())'), (215, '        if line.endswith("":""):'), (216, '            n_spaces += 4'), (217, '        return n_spaces * "" ""'), (218, '    return """"'), (219, ''), (220, ''), (221, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (222, '    """"""'), (223, '    This is hacky, but convenient. When user includes the argument ""-e"", it will try'), (224, ""    to recreate a file that inserts the line `self.embed()` into the end of the scene's""), (225, '    construct method. If there is an argument passed in, it will insert the line after'), (226, '    the last line in the sourcefile which includes that string.'), (227, '    """"""'), (228, '    lines = inspect.getsource(module).splitlines()'), (229, ''), (230, '    # Add the relevant embed line to the code'), (231, '    indent = get_indent(lines, line_number)'), (232, '    lines.insert(line_number, indent + ""self.embed()"")'), (233, '    new_code = ""\\n"".join(lines)'), (234, ''), (235, ""    code_object = compile(new_code, module.__name__, 'exec')""), (236, '    exec(code_object, module.__dict__)'), (237, '    return module'), (238, ''), (239, ''), (240, 'def get_scene_module(args: Namespace) -> Module:'), (241, '    from manimlib.reload_manager import reload_manager'), (242, '    module = ModuleLoader.get_module(args.file, is_during_reload=reload_manager.is_reload)'), (243, '    if args.embed:'), (244, '        insert_embed_line_to_module(module, int(args.embed))'), (245, '    return module'), (246, ''), (438, '        ""module"": get_scene_module(args),')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,90dfb02cc668e3ad3df6ca7f975e83be75007520,e270f5c3d3cb545f1721533241ae1859d418f663,Move get_scene_module logic to extract_scene.py,"[(1, 'from __future__ import annotations'), (2, ''), (7, 'from manimlib.module_loader import ModuleLoader'), (8, ''), (14, 'from typing import TYPE_CHECKING'), (15, 'if TYPE_CHECKING:'), (16, '    Module = importlib.util.types.ModuleType'), (17, '    from typing import Optional'), (18, ''), (127, 'def get_indent(code_lines: list[str], line_number: int) -> str:'), (128, '    for line in code_lines[line_number - 1::-1]:'), (129, '        if len(line.strip()) == 0:'), (130, '            continue'), (131, '        n_spaces = len(line) - len(line.lstrip())'), (132, '        if line.endswith("":""):'), (133, '            n_spaces += 4'), (134, '        return n_spaces * "" ""'), (135, '    return """"'), (136, ''), (137, ''), (138, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (139, '    """"""'), (140, '    This is hacky, but convenient. When user includes the argument ""-e"", it will try'), (141, ""    to recreate a file that inserts the line `self.embed()` into the end of the scene's""), (142, '    construct method. If there is an argument passed in, it will insert the line after'), (143, '    the last line in the sourcefile which includes that string.'), (144, '    """"""'), (145, '    lines = inspect.getsource(module).splitlines()'), (146, ''), (147, '    # Add the relevant embed line to the code'), (148, '    indent = get_indent(lines, line_number)'), (149, '    lines.insert(line_number, indent + ""self.embed()"")'), (150, '    new_code = ""\\n"".join(lines)'), (151, ''), (152, ""    code_object = compile(new_code, module.__name__, 'exec')""), (153, '    exec(code_object, module.__dict__)'), (154, '    return module'), (155, ''), (156, ''), (157, 'def get_scene_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (158, '    module = ModuleLoader.get_module(file_name, is_reload)'), (159, '    if embed_line:'), (160, '        insert_embed_line_to_module(module, embed_line)'), (161, '    return module'), (162, ''), (163, ''), (165, '    module = get_scene_module('), (166, '        run_config[""file_name""],'), (167, '        run_config[""embed_line""],'), (168, '        run_config[""is_reload""]'), (169, '    )'), (170, '    if module is None:'), (174, '    all_scene_classes = get_scene_classes_from_module(module)')]","[(119, '    if run_config[""module""] is None:'), (123, '    all_scene_classes = get_scene_classes_from_module(run_config[""module""])')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,90dfb02cc668e3ad3df6ca7f975e83be75007520,e270f5c3d3cb545f1721533241ae1859d418f663,Move get_scene_module logic to extract_scene.py,"[(69, '        run_config.update(is_reload=self.is_reload)'), (74, '        scene_config.update(window=self.window)')]","[(73, '        scene_config[""window""] = self.window')]",No
manimlib/config.py,manimlib/config.py,09c27a654f6382be70bc152de7d9435d3c6db989,90dfb02cc668e3ad3df6ca7f975e83be75007520,Minor cleaning of imports,"[(20, '    from argparse import Namespace')]","[(4, 'from argparse import Namespace'), (12, 'from pathlib import Path')]",No
manimlib/config.py,manimlib/config.py,0ef12ad7e469b085e59e476bdd1deced07db4fb5,09c27a654f6382be70bc152de7d9435d3c6db989,"Move FRAME_HEIGHT back to constants

Where it belongs",[],"[(24, '# This has to be here instead of in constants.py'), (25, '# due to its use in creating the camera configuration'), (26, 'FRAME_HEIGHT: float = 8.0'), (27, ''), (28, ''), (350, '        ""frame_config"": {'), (351, '            ""frame_shape"": ((width / height) * FRAME_HEIGHT, FRAME_HEIGHT),'), (352, '        },')]",No
manimlib/constants.py,manimlib/constants.py,0ef12ad7e469b085e59e476bdd1deced07db4fb5,09c27a654f6382be70bc152de7d9435d3c6db989,"Move FRAME_HEIGHT back to constants

Where it belongs","[(22, 'FRAME_HEIGHT: float = 8.0')]","[(5, 'from manimlib.config import FRAME_HEIGHT')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,df1e067480df9c4302ed0602fe36948ee563a785,6196daa5ec49546a8d973b6866991586f98d0d56,"Fix 3D overlap when animating by checking Mobject family members recursively instead of `self.mobjects` (#2254)

* Add Animation.setup_scene method to make Animation more customizable

* Remove Animation.setup_scene method and let scene check all mobject family members","[(626, '            if animation.mobject not in self.get_mobject_family_members():')]","[(626, '            if animation.mobject not in self.mobjects:')]",No
manimlib/logger.py,manimlib/logger.py,5fa99b772398aaad527ba11c4418f9ffcada4871,0ef12ad7e469b085e59e476bdd1deced07db4fb5,"Set default log level to ""WARNING""","[(14, 'log.setLevel(""WARNING"")')]","[(14, 'log.setLevel(""DEBUG"")')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,89bf0b129732726e7eea433f96b0b1a272e2c794,2e8a282cc7f43134b135f06f8c5f9723c36425d7,Track all mobjects as a set in Scene. begin_animations,"[(609, '        all_mobjects = set(self.get_mobject_family_members())'), (617, '            if animation.mobject not in all_mobjects:'), (619, '                all_mobjects = all_mobjects.union(animation.mobject.get_family())')]","[(616, '            if animation.mobject not in self.get_mobject_family_members():')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,14c6fdc1d9941044d7bc100f1b4fd1d581e2011a,89bf0b129732726e7eea433f96b0b1a272e2c794,Slight refactor of get_indent,"[(128, '    """"""'), (129, '    Find the indent associated with a given line of python code,'), (130, '    as a string of spaces'), (131, '    """"""'), (132, '    # Find most recent non-empty line'), (133, '    try:'), (134, '        next(filter(lambda line: line.strip(), code_lines[line_number - 1::-1]))'), (135, '    except StopIteration:'), (136, '        return """"'), (137, ''), (138, '    # Either return its leading spaces, or add for if it ends with colon'), (139, '    n_spaces = len(line) - len(line.lstrip())'), (140, '    if line.endswith("":""):'), (141, '        n_spaces += 4'), (142, '    return n_spaces * "" ""'), (159, ""    # Execute the code, which presumably redefines the user's""), (160, '    # scene to include this embed line, within the relevant module.')]","[(128, '    for line in code_lines[line_number - 1::-1]:'), (129, '        if len(line.strip()) == 0:'), (130, '            continue'), (131, '        n_spaces = len(line) - len(line.lstrip())'), (132, '        if line.endswith("":""):'), (133, '            n_spaces += 4'), (134, '        return n_spaces * "" ""'), (135, '    return """"'), (154, '    return module')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,0692afdfec648ee6889bdadc6beeb4cff10d7fa3,14c6fdc1d9941044d7bc100f1b4fd1d581e2011a,Bug fix,"[(134, '        line = next(filter(lambda line: line.strip(), code_lines[line_number - 1::-1]))')]","[(134, '        next(filter(lambda line: line.strip(), code_lines[line_number - 1::-1]))')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,ea3f77e3f1a14456fa2e182411449bdf75e035ab,0692afdfec648ee6889bdadc6beeb4cff10d7fa3,Add blank line,"[(92, '')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,636fb3a45b4726ca308043a665b60f4e9efc5e2d,ea3f77e3f1a14456fa2e182411449bdf75e035ab,Factor interactive embed logic out of Scene class,"[(30, 'from manimlib.scene.scene_embed import interactive_scene_embed'), (31, 'from manimlib.scene.scene_embed import CheckpointManager'), (122, '        self.checkpoint_manager: CheckpointManager = CheckpointManager()'), (209, '        interactive_scene_embed(self)'), (696, '        self.checkpoint_manager.checkpoint_paste(self)'), (706, '        self.checkpoint_manager.clear_checkpoints()')]","[(4, 'import inspect'), (7, 'import pyperclip'), (10, 'import re'), (13, 'from IPython.terminal import pt_inputhooks'), (14, 'from IPython.terminal.embed import InteractiveShellEmbed'), (21, 'from manimlib.animation.fading import VFadeInThenOut'), (24, 'from manimlib.module_loader import ModuleLoader'), (27, 'from manimlib.constants import RED'), (32, 'from manimlib.mobject.frame import FullScreenRectangle'), (213, '        if not self.window:'), (214, '            # Embed is only relevant for interactive development with a Window'), (215, '            return'), (216, '        self.stop_skipping()'), (217, '        self.update_frame(force_draw=True)'), (218, '        self.save_state()'), (221, '        # Create embedded IPython terminal configured to have access to'), (222, '        # the local namespace of the caller'), (223, '        caller_frame = inspect.currentframe().f_back'), (224, '        module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (225, '        shell = InteractiveShellEmbed('), (226, '            user_module=module,'), (227, '            display_banner=False,'), (228, '            xmode=self.embed_exception_mode'), (229, '        )'), (230, '        self.shell = shell'), (231, ''), (232, '        # Add a few custom shortcuts to that local namespace'), (233, '        local_ns = dict(caller_frame.f_locals)'), (234, '        local_ns.update('), (235, '            play=self.play,'), (236, '            wait=self.wait,'), (237, '            add=self.add,'), (238, '            remove=self.remove,'), (239, '            clear=self.clear,'), (240, '            focus=self.focus,'), (241, '            save_state=self.save_state,'), (242, '            reload=self.reload,'), (243, '            undo=self.undo,'), (244, '            redo=self.redo,'), (245, '            i2g=self.i2g,'), (246, '            i2m=self.i2m,'), (247, '            checkpoint_paste=self.checkpoint_paste,'), (248, '            touch=lambda: shell.enable_gui(""manim""),'), (249, '            notouch=lambda: shell.enable_gui(None),'), (250, '        )'), (251, ''), (252, ""        # Update the shell module with the caller's locals + shortcuts""), (253, '        module.__dict__.update(local_ns)'), (254, ''), (255, '        # Enables gui interactions during the embed'), (256, '        def inputhook(context):'), (257, '            while not context.input_is_ready():'), (258, '                if not self.is_window_closing():'), (259, '                    self.update_frame(dt=0)'), (260, '            if self.is_window_closing():'), (261, '                shell.ask_exit()'), (262, ''), (263, '        pt_inputhooks.register(""manim"", inputhook)'), (264, '        shell.enable_gui(""manim"")'), (265, ''), (266, '        # Operation to run after each ipython command'), (267, '        def post_cell_func(*args, **kwargs):'), (268, '            if not self.is_window_closing():'), (269, '                self.update_frame(dt=0, force_draw=True)'), (270, ''), (271, '        shell.events.register(""post_run_cell"", post_cell_func)'), (272, ''), (273, '        # Flash border, and potentially play sound, on exceptions'), (274, '        def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (275, ""            # Show the error don't just swallow it""), (276, '            shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)'), (277, '            if self.embed_error_sound:'), (278, '                os.system(""printf \'\\a\'"")'), (279, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (280, '            rect.fix_in_frame()'), (281, '            self.play(VFadeInThenOut(rect, run_time=0.5))'), (282, ''), (283, '        shell.set_custom_exc((Exception,), custom_exc)'), (284, ''), (285, '        # Launch shell'), (286, '        shell()'), (763, '        if self.shell is None or self.window is None:'), (764, '            raise Exception('), (765, '                ""Scene.checkpoint_paste cannot be called outside of "" +'), (766, '                ""an ipython shell""'), (767, '            )'), (768, ''), (769, '        pasted = pyperclip.paste()'), (770, '        lines = pasted.split(""\\n"")'), (771, ''), (772, '        # Commented lines trigger saved checkpoints'), (773, '        if lines[0].lstrip().startswith(""#""):'), (774, '            if lines[0] not in self.checkpoint_states:'), (775, '                self.checkpoint(lines[0])'), (776, '            else:'), (777, '                self.revert_to_checkpoint(lines[0])'), (778, ''), (779, '        # Copied methods of a scene are handled specially'), (780, '        # A bit hacky, yes, but convenient'), (781, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (782, '        method_names = re.findall(method_pattern ,lines[0].strip())'), (783, '        if method_names:'), (784, '            method_name = method_names[0]'), (785, '            indent = "" "" * lines[0].index(lines[0].strip())'), (786, '            pasted = ""\\n"".join(['), (787, '                # Remove self from function signature'), (788, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (789, '                *lines[1:],'), (790, '                # Attach to scene via self.func_name = func_name'), (791, '                f""{indent}self.{method_name} = {method_name}""'), (792, '            ])'), (793, ''), (804, '        self.shell.run_cell(pasted)'), (813, '    def checkpoint(self, key: str):'), (814, '        self.checkpoint_states[key] = self.get_state()'), (815, ''), (816, '    def revert_to_checkpoint(self, key: str):'), (817, '        if key not in self.checkpoint_states:'), (818, '            log.error(f""No checkpoint at {key}"")'), (819, '            return'), (820, '        all_keys = list(self.checkpoint_states.keys())'), (821, '        index = all_keys.index(key)'), (822, '        for later_key in all_keys[index + 1:]:'), (823, '            self.checkpoint_states.pop(later_key)'), (824, ''), (825, '        self.restore_state(self.checkpoint_states[key])'), (826, ''), (828, '        self.checkpoint_states = dict()')]",No
N/A,manimlib/scene/scene_embed.py,636fb3a45b4726ca308043a665b60f4e9efc5e2d,ea3f77e3f1a14456fa2e182411449bdf75e035ab,Factor interactive embed logic out of Scene class,"[(1, 'import inspect'), (2, 'import pyperclip'), (3, 'import re'), (4, ''), (5, 'from IPython.terminal import pt_inputhooks'), (6, 'from IPython.terminal.embed import InteractiveShellEmbed'), (7, ''), (8, 'from manimlib.animation.fading import VFadeInThenOut'), (9, 'from manimlib.constants import RED'), (10, 'from manimlib.mobject.mobject import Mobject'), (11, 'from manimlib.mobject.frame import FullScreenRectangle'), (12, 'from manimlib.module_loader import ModuleLoader'), (13, ''), (14, ''), (15, 'def interactive_scene_embed(scene):'), (16, '    if not scene.window:'), (17, '        # Embed is only relevant for interactive development with a Window'), (18, '        return'), (19, '    scene.stop_skipping()'), (20, '    scene.update_frame(force_draw=True)'), (21, '    scene.save_state()'), (22, ''), (23, '    shell = get_ipython_shell_for_embedded_scene(scene)'), (24, '    scene.shell = shell  # It would be better not to add attributes to scene here'), (25, '    enable_gui(shell, scene)'), (26, '    ensure_frame_update_post_cell(shell, scene)'), (27, '    ensure_flash_on_error(shell, scene)'), (28, ''), (29, '    # Launch shell'), (30, '    shell()'), (31, ''), (32, ''), (33, 'def get_ipython_shell_for_embedded_scene(scene):'), (34, '    """"""'), (35, '    Create embedded IPython terminal configured to have access to'), (36, '    the local namespace of the caller'), (37, '    """"""'), (38, ""    # Triple back should take us to the context in a user's scene definition""), (39, '    # which is calling ""self.embed""'), (40, '    caller_frame = inspect.currentframe().f_back.f_back.f_back'), (41, '    module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (42, '    shell = InteractiveShellEmbed('), (43, '        user_module=module,'), (44, '        display_banner=False,'), (45, '        xmode=scene.embed_exception_mode'), (46, '    )'), (47, ''), (48, ""    # Update the module's namespace to match include local variables""), (49, '    module.__dict__.update(caller_frame.f_locals)'), (50, '    module.__dict__.update(get_shortcuts(scene))'), (51, ''), (52, '    return shell'), (53, ''), (54, ''), (55, 'def get_shortcuts(scene):'), (56, '    """"""'), (57, '    A few custom shortcuts useful to have in the interactive shell namespace'), (58, '    """"""'), (59, '    return dict('), (60, '        play=scene.play,'), (61, '        wait=scene.wait,'), (62, '        add=scene.add,'), (63, '        remove=scene.remove,'), (64, '        clear=scene.clear,'), (65, '        focus=scene.focus,'), (66, '        save_state=scene.save_state,'), (67, '        reload=scene.reload,'), (68, '        undo=scene.undo,'), (69, '        redo=scene.redo,'), (70, '        i2g=scene.i2g,'), (71, '        i2m=scene.i2m,'), (72, '        checkpoint_paste=scene.checkpoint_paste,'), (73, '    )'), (74, ''), (75, ''), (76, 'def enable_gui(shell, scene):'), (77, '    """"""Enables gui interactions during the embed""""""'), (78, '    def inputhook(context):'), (79, '        while not context.input_is_ready():'), (80, '            if not scene.is_window_closing():'), (81, '                scene.update_frame(dt=0)'), (82, '        if scene.is_window_closing():'), (83, '            shell.ask_exit()'), (84, ''), (85, '    pt_inputhooks.register(""manim"", inputhook)'), (86, '    shell.enable_gui(""manim"")'), (87, ''), (88, ''), (89, 'def ensure_frame_update_post_cell(shell, scene):'), (90, '    """"""Ensure the scene updates its frame after each ipython cell""""""'), (91, '    def post_cell_func(*args, **kwargs):'), (92, '        if not scene.is_window_closing():'), (93, '            scene.update_frame(dt=0, force_draw=True)'), (94, ''), (95, '    shell.events.register(""post_run_cell"", post_cell_func)'), (96, ''), (97, ''), (98, 'def ensure_flash_on_error(shell, scene):'), (99, '    """"""Flash border, and potentially play sound, on exceptions""""""'), (100, '    def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (101, ""        # Show the error don't just swallow it""), (102, '        shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)'), (103, '        if scene.embed_error_sound:'), (104, '            os.system(""printf \'\\a\'"")'), (105, '        rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (106, '        rect.fix_in_frame()'), (107, '        scene.play(VFadeInThenOut(rect, run_time=0.5))'), (108, ''), (109, '    shell.set_custom_exc((Exception,), custom_exc)'), (110, ''), (111, ''), (112, 'class CheckpointManager:'), (113, '    checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()'), (114, ''), (115, '    def checkpoint_paste(self, scene):'), (116, '        """"""'), (117, '        Used during interactive development to run (or re-run)'), (118, '        a block of scene code.'), (119, ''), (120, '        If the copied selection starts with a comment, this will'), (121, '        revert to the state of the scene the first time this function'), (122, '        was called on a block of code starting with that comment.'), (123, '        """"""'), (124, '        shell = get_ipython()'), (125, '        if shell is None:'), (126, '            return'), (127, ''), (128, '        code_string = pyperclip.paste()'), (129, ''), (130, '        checkpoint_key = self.get_leading_comment(code_string)'), (131, '        self.handle_checkpoint_key(scene, checkpoint_key)'), (132, '        code_string = self.handle_method_definitions(code_string)'), (133, ''), (134, '        shell.run_cell(code_string)'), (135, ''), (136, '    @staticmethod'), (137, '    def handle_method_definitions(code_string: str):'), (138, '        lines = code_string.split(""\\n"")'), (139, '        # Copied methods of a scene are handled specially'), (140, '        # A bit hacky, yes, but convenient'), (141, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (142, '        method_names = re.findall(method_pattern, lines[0].strip())'), (143, '        if method_names:'), (144, '            method_name = method_names[0]'), (145, '            indent = "" "" * lines[0].index(lines[0].strip())'), (146, '            return ""\\n"".join(['), (147, '                # Remove self from function signature'), (148, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (149, '                *lines[1:],'), (150, '                # Attach to scene via self.func_name = func_name'), (151, '                f""{indent}self.{method_name} = {method_name}""'), (152, '            ])'), (153, '        return code_string'), (154, ''), (155, '    @staticmethod'), (156, '    def get_leading_comment(code_string: str):'), (157, '        leading_line = code_string.partition(""\\n"")[0].lstrip()'), (158, '        if leading_line.startswith(""#""):'), (159, '            return leading_line'), (160, '        return None'), (161, ''), (162, '    def handle_checkpoint_key(self, scene, key: str):'), (163, '        if key is None:'), (164, '            return'), (165, '        elif key in self.checkpoint_states:'), (166, '            # Revert to checkpoint'), (167, '            scene.restore_state(self.checkpoint_states[key])'), (168, ''), (169, '            # Clear out any saved states that show up later'), (170, '            all_keys = list(self.checkpoint_states.keys())'), (171, '            index = all_keys.index(key)'), (172, '            for later_key in all_keys[index + 1:]:'), (173, '                self.checkpoint_states.pop(later_key)'), (174, '        else:'), (175, '            self.checkpoint_states[key] = scene.get_state()'), (176, ''), (177, '    def clear_checkpoints(self):'), (178, '        self.checkpoint_states = dict()')]",[],No
manimlib/scene/scene.py,manimlib/scene/scene.py,40b5c7c1c126f33e346514fd6616b8b24cb05c10,636fb3a45b4726ca308043a665b60f4e9efc5e2d,Slightly clean up interactive_scene_embed,"[(207, '        if not self.window:'), (208, '            # Embed is only relevant for interactive development with a Window'), (209, '            return'), (893, '        shell = get_ipython()'), (894, '        if shell:'), (895, '            shell.run_line_magic(""exit_raise"", """")')]","[(890, '        self.shell.run_line_magic(""exit_raise"", """")')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,40b5c7c1c126f33e346514fd6616b8b24cb05c10,636fb3a45b4726ca308043a665b60f4e9efc5e2d,Slightly clean up interactive_scene_embed,[],"[(16, '    if not scene.window:'), (17, '        # Embed is only relevant for interactive development with a Window'), (18, '        return'), (21, '    scene.save_state()'), (24, '    scene.shell = shell  # It would be better not to add attributes to scene here')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,cb3e115a6c7780de1a0f4e559bc71a1ba9d1ca24,40b5c7c1c126f33e346514fd6616b8b24cb05c10,Minor cleaning,"[(36, ''), (37, ""    # Update the module's namespace to include local variables""), (39, '    module.__dict__.update(caller_frame.f_locals)'), (40, '    module.__dict__.update(get_shortcuts(scene))'), (41, ''), (42, '    return InteractiveShellEmbed('), (134, '        lines = code_string.split(""\\n"")')]","[(37, '    shell = InteractiveShellEmbed('), (43, ""    # Update the module's namespace to match include local variables""), (44, '    module.__dict__.update(caller_frame.f_locals)'), (45, '    module.__dict__.update(get_shortcuts(scene))'), (46, ''), (47, '    return shell'), (48, ''), (133, '        lines = code_string.split(""\\n"")')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,cb3e115a6c7780de1a0f4e559bc71a1ba9d1ca24,"Get rid of the (hacky) solution to redefining Scene methods, since reload handles it better",[],"[(126, '        code_string = self.handle_method_definitions(code_string)'), (127, ''), (130, '    @staticmethod'), (131, '    def handle_method_definitions(code_string: str):'), (132, '        # Copied methods of a scene are handled specially'), (133, '        # A bit hacky, yes, but convenient'), (134, '        lines = code_string.split(""\\n"")'), (135, '        method_pattern = r""^def\\s+([a-zA-Z_]\\w*)\\s*\\(self.*\\):""'), (136, '        method_names = re.findall(method_pattern, lines[0].strip())'), (137, '        if method_names:'), (138, '            method_name = method_names[0]'), (139, '            indent = "" "" * lines[0].index(lines[0].strip())'), (140, '            return ""\\n"".join(['), (141, '                # Remove self from function signature'), (142, '                re.sub(r""self(,\\s*)?"", """", lines[0]),'), (143, '                *lines[1:],'), (144, '                # Attach to scene via self.func_name = func_name'), (145, '                f""{indent}self.{method_name} = {method_name}""'), (146, '            ])'), (147, '        return code_string'), (148, '')]",No
manimlib/__main__.py,manimlib/__main__.py,bf81d94362691a37052107fd65a8de30026d668e,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,Don't make reload_manager a global variable,"[(6, 'from manimlib.reload_manager import ReloadManager'), (25, '    reload_manager = ReloadManager()')]","[(6, 'from manimlib.reload_manager import reload_manager')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,bf81d94362691a37052107fd65a8de30026d668e,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,Don't make reload_manager a global variable,"[(68, '        scene_config.update(reload_manager=self)'), (69, '')]","[(91, ''), (92, ''), (93, 'reload_manager = ReloadManager()')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,bf81d94362691a37052107fd65a8de30026d668e,5b315d5c7041d86bf01d4aeb151fc2f9fb97662c,Don't make reload_manager a global variable,"[(47, '    from manimlib.reload_manager import ReloadManager'), (79, '        reload_manager: Optional[ReloadManager] = None,'), (94, '        self.reload_manager = reload_manager'), (882, '        `extract_scene.insert_embed_line_to_module()` method.'), (888, ''), (895, '        self.reload_manager.set_new_start_at_line(start_at_line)')]","[(23, 'from manimlib.reload_manager import reload_manager'), (880, '        `config.get_module_with_inserted_embed_line()` method.'), (892, '        reload_manager.set_new_start_at_line(start_at_line)')]",No
manimlib/__main__.py,manimlib/__main__.py,6d0b23f914869851e734c89aec0969eff3bc2dd1,bf81d94362691a37052107fd65a8de30026d668e,Slightly simplify ReloadManager,"[(25, '    reload_manager = ReloadManager(args)')]","[(25, '    reload_manager = ReloadManager()'), (26, '    reload_manager.args = args')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,6d0b23f914869851e734c89aec0969eff3bc2dd1,bf81d94362691a37052107fd65a8de30026d668e,Slightly simplify ReloadManager,"[(1, 'from __future__ import annotations'), (2, ''), (6, ''), (7, 'import manimlib.config'), (8, 'import manimlib.extract_scene'), (9, ''), (13, 'from typing import TYPE_CHECKING'), (14, 'if TYPE_CHECKING:'), (15, '    from argparse import Namespace'), (16, ''), (17, ''), (36, '    def __init__(self, cli_args: Namespace):'), (37, '        self.args = cli_args'), (38, ''), (52, '                self.retrieve_scenes_and_run()'), (66, '    def retrieve_scenes_and_run(self):'), (70, '        if self.start_at_line is not None:'), (71, '            self.args.embed = str(self.start_at_line)')]","[(17, '    args: Any = None'), (39, '                self.retrieve_scenes_and_run(self.start_at_line)'), (53, '    def retrieve_scenes_and_run(self, overwrite_start_at_line: int | None = None):'), (57, '        import manimlib.config'), (58, '        import manimlib.extract_scene'), (59, ''), (60, '        # Args'), (61, '        if self.args is None:'), (62, '            raise RuntimeError(""Fatal error: No args were passed to the ReloadManager"")'), (63, '        if overwrite_start_at_line is not None:'), (64, '            self.args.embed = str(overwrite_start_at_line)')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.",[],"[(718, '    def save_to_file(self, file_path: str) -> Self:'), (719, '        with open(file_path, ""wb"") as fp:'), (720, '            fp.write(self.serialize())'), (721, '        log.info(f""Saved mobject to {file_path}"")'), (722, '        return self'), (723, ''), (724, '    @staticmethod'), (725, '    def load(file_path) -> Mobject:'), (726, '        if not os.path.exists(file_path):'), (727, '            log.error(f""No file found at {file_path}"")'), (728, '            sys.exit(2)'), (729, '        with open(file_path, ""rb"") as fp:'), (730, '            mobject = pickle.load(fp)'), (731, '        return mobject'), (732, '')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.",[],"[(463, '    def save_selection_to_file(self):'), (464, '        if len(self.selection) == 1:'), (465, '            self.save_mobject_to_file(self.selection[0])'), (466, '        else:'), (467, '            self.save_mobject_to_file(self.selection)'), (468, ''), (506, '        elif char == ""s"" and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):'), (507, '            self.save_selection_to_file()')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.",[],"[(713, '    def save_mobject_to_file(self, mobject: Mobject, file_path: str | None = None) -> None:'), (714, '        if file_path is None:'), (715, '            file_path = self.file_writer.get_saved_mobject_path(mobject)'), (716, '            if file_path is None:'), (717, '                return'), (718, '        mobject.save_to_file(file_path)'), (719, ''), (720, '    def load_mobject(self, file_name):'), (721, '        if os.path.exists(file_name):'), (722, '            path = file_name'), (723, '        else:'), (724, '            directory = self.file_writer.get_saved_mobject_directory()'), (725, '            path = os.path.join(directory, file_name)'), (726, '        return Mobject.load(path)'), (727, '')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,7a69807ce63cca75e3deb8bb19ed385f759a7de9,6d0b23f914869851e734c89aec0969eff3bc2dd1,"Remove mobject.save_to_file

This simply didn't work, and had no resilience to changes to the library. For cases where this might be useful, it's likely much better deliberately save specific data which is time-consuming to generate on the fly.",[],"[(149, '    def get_saved_mobject_directory(self) -> str:'), (150, '        return guarantee_existence(self.saved_mobject_directory)'), (151, ''), (152, '    def get_saved_mobject_path(self, mobject: Mobject) -> str | None:'), (153, '        directory = self.get_saved_mobject_directory()'), (154, '        files = os.listdir(directory)'), (155, '        default_name = str(mobject) + ""_0.mob""'), (156, '        index = 0'), (157, '        while default_name in files:'), (158, '            default_name = default_name.replace(str(index), str(index + 1))'), (159, '            index += 1'), (160, ""        if platform.system() == 'Darwin':""), (161, '            cmds = ['), (162, '                ""osascript"", ""-e"",'), (163, '                f""""""'), (164, '                set chosenfile to (choose file name default name ""{default_name}"" default location ""{directory}"")'), (165, '                POSIX path of chosenfile'), (166, '                """""",'), (167, '            ]'), (168, '            process = sp.Popen(cmds, stdout=sp.PIPE)'), (169, '            file_path = process.stdout.read().decode(""utf-8"").split(""\\n"")[0]'), (170, '            if not file_path:'), (171, '                return'), (172, '        else:'), (173, '            user_name = input(f""Enter mobject file name (default is {default_name}): "")'), (174, '            file_path = os.path.join(directory, user_name or default_name)'), (175, '            if os.path.exists(file_path) or os.path.exists(file_path + "".mob""):'), (176, '                if input(f""{file_path} already exists. Overwrite (y/n)? "") != ""y"":'), (177, '                    return'), (178, '        if not file_path.endswith("".mob""):'), (179, '            file_path = file_path + "".mob""'), (180, '        return file_path'), (181, '')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,88bae476ce3dc9d4cb8ca4349ace922d7a873311,7a69807ce63cca75e3deb8bb19ed385f759a7de9,Don't print filename that is being reloaded,[],"[(96, '                    f""in \\033[96m{self.args.file}\\033[0m"",')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,dd508b8cfc5452245f117d18b483be770b423823,88bae476ce3dc9d4cb8ca4349ace922d7a873311,No need to track ReloadManager.start_at_line,"[(39, '        self.args.embed = str(start_at_line)'), (57, '                self.note_reload()'), (61, '    def note_reload(self):'), (62, '        self.is_reload = True'), (63, '        print("" "".join(['), (64, '            ""Reloading interactive session for"",'), (65, '            f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (66, '            f""at line \\033[96m{self.args.embed}\\033[0m""'), (67, '        ]))'), (68, '')]","[(30, ''), (31, '    # The line number to load the scene from when reloading'), (32, '    start_at_line = None'), (33, ''), (43, '        self.start_at_line = start_at_line'), (61, '                self.is_reload = True'), (62, ''), (70, '        if self.start_at_line is not None:'), (71, '            self.args.embed = str(self.start_at_line)'), (72, ''), (89, '            return'), (92, '            if self.args.embed and self.is_reload:'), (93, '                print("" "".join(['), (94, '                    ""Reloading interactive session for"",'), (95, '                    f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (96, '                    f""at line \\033[96m{self.args.embed}\\033[0m""'), (97, '                ]))')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,8706ba1589a7a42968d668ff6fedd6b10c8204cd,dd508b8cfc5452245f117d18b483be770b423823,"No real need to track ReloadManager.scenes

This was to be able to loop through an tear them down, but tear down is primarily about ending any file writing, and potentially cleaning up a window, which for the sake of reusing a window we don't want to do anyway.","[(81, '        scenes = manimlib.extract_scene.main(scene_config, run_config)'), (82, '        if len(scenes) == 0:'), (85, '        for scene in scenes:')]","[(28, '    scenes: list[Any] = []'), (53, '                for scene in self.scenes:'), (54, '                    scene.tear_down()'), (55, ''), (56, '                self.scenes = []'), (86, '        self.scenes = manimlib.extract_scene.main(scene_config, run_config)'), (87, '        if len(self.scenes) == 0:'), (90, '        for scene in self.scenes:')]",No
manimlib/default_config.yml,manimlib/default_config.yml,950ac31b9b2a340ab32c039c05d07e318598d485,8706ba1589a7a42968d668ff6fedd6b10c8204cd,Replace IGNORE_MANIMLIB_MODULES constant with a piece of global configuration,"[(61, 'ignore_manimlib_modules_on_reload: True')]",[],No
manimlib/module_loader.py,manimlib/module_loader.py,950ac31b9b2a340ab32c039c05d07e318598d485,8706ba1589a7a42968d668ff6fedd6b10c8204cd,Replace IGNORE_MANIMLIB_MODULES constant with a piece of global configuration,"[(9, 'from manimlib.config import get_global_config'), (145, '        ignore_manimlib_modules = get_global_config()[""ignore_manimlib_modules_on_reload""]'), (146, '        if ignore_manimlib_modules and module.__name__.startswith(""manimlib""):')]","[(13, 'IGNORE_MANIMLIB_MODULES = True'), (14, ''), (146, '        if IGNORE_MANIMLIB_MODULES and module.__name__.startswith(""manimlib""):')]",No
manimlib/config.py,manimlib/config.py,9e77b0dcdd89fbec7b8761640e6555d74db588a4,950ac31b9b2a340ab32c039c05d07e318598d485,Consolidate window configuration,"[(322, '    mon_index = global_config[""window""][""monitor""]'), (329, '    if not (args.full_screen or global_config[""window""][""full_screen""]):'), (332, ''), (333, '    # Find position (Perhaps factor this out)'), (334, '    pos_str = global_config[""window""][""position""]'), (335, '    # Position might be specified with a string of the form'), (336, '    # x,y for integers x and y'), (337, '    if "","" in pos_str:'), (338, '        default_position = tuple(map(int, pos_str.split("","")))'), (339, '    else:'), (340, '        # Alternatively, it might be specified with a string like'), (341, '        # UR, OO, DL, etc. specifying what corner it should go to'), (342, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (343, '        width_diff = monitor.width - window_width'), (344, '        height_diff = monitor.height - window_height'), (345, '        x_step = char_to_n[pos_str[1]] * width_diff // 2'), (346, '        y_step = char_to_n[pos_str[0]] * height_diff // 2'), (347, '        default_position = ('), (348, '            monitor.x + x_step,'), (349, '            -monitor.y + y_step,'), (350, '        )'), (351, ''), (352, '    return dict('), (353, '        size=(window_width, window_height),'), (354, '        default_position=default_position'), (355, '    )')]","[(322, '    mon_index = global_config[""window_monitor""]'), (329, '    if not (args.full_screen or global_config[""full_screen""]):'), (332, '    return dict(size=(window_width, window_height))')]",No
manimlib/default_config.yml,manimlib/default_config.yml,9e77b0dcdd89fbec7b8761640e6555d74db588a4,950ac31b9b2a340ab32c039c05d07e318598d485,Consolidate window configuration,"[(28, 'window:'), (29, '  # Set the position of window on screen, you can use directions, e.g. UL/DR/OL/OO/...'), (30, '  # also, you can also specify the position(pixel) of the upper left corner of'), (31, '  # the window on the monitor, e.g. ""960,540""'), (32, '  position: UR'), (33, '  # If using multiple monitors, which one should show the window?'), (34, '  monitor: 0'), (35, '  # If not full screen, the default to give it half the screen width'), (36, '  full_screen: False'), (49, 'style:'), (50, '  tex_template: ""default""'), (51, '  font: ""Consolas""'), (52, '  text_alignment: ""LEFT""'), (53, '  background_color: ""#333333""'), (61, 'universal_import_line: ""from manimlib import *""')]","[(28, 'universal_import_line: ""from manimlib import *""'), (29, 'style:'), (30, '  tex_template: ""default""'), (31, '  font: ""Consolas""'), (32, '  text_alignment: ""LEFT""'), (33, '  background_color: ""#333333""'), (34, '# Set the position of preview window, you can use directions, e.g. UL/DR/OL/OO/...'), (35, '# also, you can also specify the position(pixel) of the upper left corner of'), (36, '# the window on the monitor, e.g. ""960,540""'), (37, 'window_position: UR'), (38, 'window_monitor: 0'), (39, 'full_screen: False')]",No
manimlib/window.py,manimlib/window.py,9e77b0dcdd89fbec7b8761640e6555d74db588a4,950ac31b9b2a340ab32c039c05d07e318598d485,Consolidate window configuration,"[(34, '        default_position: tuple[int, int] = (0, 0),'), (41, '        self.default_position = default_position')]","[(40, '        self.default_position = self.find_initial_position(size)'), (89, '    def find_initial_position(self, size: tuple[int, int]) -> tuple[int, int]:'), (90, '        global_config = get_global_config()'), (91, '        custom_position = global_config[""window_position""]'), (92, '        mon_index = global_config[""window_monitor""]'), (93, '        monitors = get_monitors()'), (94, '        monitor = monitors[min(mon_index, len(monitors) - 1)]'), (95, '        window_width, window_height = size'), (96, '        # Position might be specified with a string of the form'), (97, '        # x,y for integers x and y'), (98, '        if "","" in custom_position:'), (99, '            return tuple(map(int, custom_position.split("","")))'), (100, ''), (101, '        # Alternatively, it might be specified with a string like'), (102, '        # UR, OO, DL, etc. specifying what corner it should go to'), (103, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (104, '        width_diff = monitor.width - window_width'), (105, '        height_diff = monitor.height - window_height'), (106, '        return ('), (107, '            monitor.x + char_to_n[custom_position[1]] * width_diff // 2,'), (108, '            -monitor.y + char_to_n[custom_position[0]] * height_diff // 2,'), (109, '        )'), (110, '')]",No
manimlib/window.py,manimlib/window.py,1276724891853df17d10c52431fa8591433df25d,9e77b0dcdd89fbec7b8761640e6555d74db588a4,Pull out the initial Window.to_default_position from init_for_scene,"[(45, '        self.to_default_position()'), (46, '')]","[(68, '        self.to_default_position()'), (69, '')]",No
manimlib/window.py,manimlib/window.py,c02259a39e62e1e0fd6d50ea00a1e9de31afc54d,1276724891853df17d10c52431fa8591433df25d,Remove import,[],"[(8, 'from screeninfo import get_monitors')]",No
manimlib/config.py,manimlib/config.py,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,c02259a39e62e1e0fd6d50ea00a1e9de31afc54d,Factor out get_window_position,"[(314, 'def get_window_position(monitor: screeninfo.Monitor, position_string: str, size: tuple[int, int]):'), (315, '    # Find position (Perhaps factor this out)'), (316, '    # Position might be specified with a string of the form'), (317, '    # x,y for integers x and y'), (318, '    if "","" in position_string:'), (319, '        return tuple(map(int, position_string.split("","")))'), (320, '    elif len(position_string) == 2:'), (321, '        # Alternatively, it might be specified with a string like'), (322, '        # UR, OO, DL, etc. specifying what corner it should go to'), (323, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (324, '        width_diff = monitor.width - size[0]'), (325, '        height_diff = monitor.height - size[1]'), (326, '        x_step = char_to_n[position_string[1]] * width_diff // 2'), (327, '        y_step = char_to_n[position_string[0]] * height_diff // 2'), (328, '        return (monitor.x + x_step, -monitor.y + y_step)'), (329, '    else:'), (330, '        raise Exception(""Window position string must be either a tuple of integers, or a pair of from \\""ULORD\\"""")'), (331, ''), (332, ''), (346, ''), (351, '    size = (window_width, window_height)'), (353, '    default_position = get_window_position(monitor, global_config[""window""][""position""], size)'), (354, ''), (355, '    return dict(size=size, default_position=default_position)')]","[(326, ''), (333, '    # Find position (Perhaps factor this out)'), (334, '    pos_str = global_config[""window""][""position""]'), (335, '    # Position might be specified with a string of the form'), (336, '    # x,y for integers x and y'), (337, '    if "","" in pos_str:'), (338, '        default_position = tuple(map(int, pos_str.split("","")))'), (339, '    else:'), (340, '        # Alternatively, it might be specified with a string like'), (341, '        # UR, OO, DL, etc. specifying what corner it should go to'), (342, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (343, '        width_diff = monitor.width - window_width'), (344, '        height_diff = monitor.height - window_height'), (345, '        x_step = char_to_n[pos_str[1]] * width_diff // 2'), (346, '        y_step = char_to_n[pos_str[0]] * height_diff // 2'), (347, '        default_position = ('), (348, '            monitor.x + x_step,'), (349, '            -monitor.y + y_step,'), (350, '        )'), (351, ''), (352, '    return dict('), (353, '        size=(window_width, window_height),'), (354, '        default_position=default_position'), (355, '    )')]",No
manimlib/config.py,manimlib/config.py,d4c5c4736a84e82e15cf5c55468562716eba1624,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,Move logic for window size and position into Window class,"[(314, '    window_config = global_config[""window""]'), (315, '    # Todo, this correction of configuration should maybe happen elsewhere'), (316, '    for key in ""position"", ""size"":'), (317, '        if window_config.get(key):'), (318, '            window_config[key] = eval(window_config[key])'), (319, '    if args.full_screen:'), (320, '        window_config[""full_screen""] = True'), (321, '    return window_config')]","[(8, 'import screeninfo'), (314, 'def get_window_position(monitor: screeninfo.Monitor, position_string: str, size: tuple[int, int]):'), (315, '    # Find position (Perhaps factor this out)'), (316, '    # Position might be specified with a string of the form'), (317, '    # x,y for integers x and y'), (318, '    if "","" in position_string:'), (319, '        return tuple(map(int, position_string.split("","")))'), (320, '    elif len(position_string) == 2:'), (321, '        # Alternatively, it might be specified with a string like'), (322, '        # UR, OO, DL, etc. specifying what corner it should go to'), (323, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (324, '        width_diff = monitor.width - size[0]'), (325, '        height_diff = monitor.height - size[1]'), (326, '        x_step = char_to_n[position_string[1]] * width_diff // 2'), (327, '        y_step = char_to_n[position_string[0]] * height_diff // 2'), (328, '        return (monitor.x + x_step, -monitor.y + y_step)'), (329, '    else:'), (330, '        raise Exception(""Window position string must be either a tuple of integers, or a pair of from \\""ULORD\\"""")'), (331, ''), (332, ''), (334, '    # Default to making window half the screen size'), (335, '    # but make it full screen if -f is passed in'), (336, '    try:'), (337, '        monitors = screeninfo.get_monitors()'), (338, '    except screeninfo.ScreenInfoError:'), (339, '        # Default fallback'), (340, '        monitors = [screeninfo.Monitor(width=1920, height=1080)]'), (341, '    mon_index = global_config[""window""][""monitor""]'), (342, '    monitor = monitors[min(mon_index, len(monitors) - 1)]'), (343, ''), (344, '    width, height = get_resolution(args, global_config)'), (345, '    aspect_ratio = width / height'), (346, ''), (347, '    window_width = monitor.width'), (348, '    if not (args.full_screen or global_config[""window""][""full_screen""]):'), (349, '        window_width //= 2'), (350, '    window_height = int(window_width / aspect_ratio)'), (351, '    size = (window_width, window_height)'), (352, ''), (353, '    default_position = get_window_position(monitor, global_config[""window""][""position""], size)'), (354, ''), (355, '    return dict(size=size, default_position=default_position)')]",No
manimlib/default_config.yml,manimlib/default_config.yml,d4c5c4736a84e82e15cf5c55468562716eba1624,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,Move logic for window size and position into Window class,"[(29, '  # The position of window on screen. UR -> Upper Right, and likewise DL -> Down and Left,'), (30, '  # UO would be upper middle, etc.'), (31, '  position_string: UR'), (32, '  # If using multiple monitors, which one should show the window'), (33, '  monitor_index: 0'), (36, '  # Other optional specifications that override the above'), (37, '  # position: (500, 500)  # Specific position, in pixel coordiantes, for upper right corner'), (38, '  # size: (1920, 1080)  # Specific size, in pixels')]","[(29, '  # Set the position of window on screen, you can use directions, e.g. UL/DR/OL/OO/...'), (30, '  # also, you can also specify the position(pixel) of the upper left corner of'), (31, '  # the window on the monitor, e.g. ""960,540""'), (32, '  position: UR'), (33, '  # If using multiple monitors, which one should show the window?'), (34, '  monitor: 0')]",No
manimlib/window.py,manimlib/window.py,d4c5c4736a84e82e15cf5c55468562716eba1624,178cca0ca50d0ea9948f38fc7d45a5d744c6811d,Move logic for window size and position into Window class,"[(9, 'import screeninfo'), (12, 'from manimlib.constants import ASPECT_RATIO'), (34, '        position_string: str = ""UR"",'), (35, '        monitor_index: int = 1,'), (36, '        full_screen: bool = False,'), (37, '        size: Optional[tuple[int, int]] = None,'), (38, '        position: Optional[tuple[int, int]] = None,'), (42, '        self.monitor = self.get_monitor(monitor_index)'), (43, '        self.default_size = size or self.get_default_size(full_screen)'), (44, '        self.default_position = position or self.position_from_string(position_string)'), (46, '        super().__init__(samples=samples)'), (49, '        self.pressed_keys = set()'), (50, ''), (51, ''), (75, '    def get_monitor(self, index):'), (76, '        try:'), (77, '            monitors = screeninfo.get_monitors()'), (78, '            return monitors[min(index, len(monitors) - 1)]'), (79, '        except screeninfo.ScreenInfoError:'), (80, '            # Default fallback'), (81, '            return screeninfo.Monitor(width=1920, height=1080)'), (82, ''), (83, '    def get_default_size(self, full_screen=False):'), (84, '        width = self.monitor.width // (1 if full_screen else 2)'), (85, '        height = int(width // ASPECT_RATIO)'), (86, '        return (width, height)'), (87, ''), (88, '    def position_from_string(self, position_string):'), (89, '        # Alternatively, it might be specified with a string like'), (90, '        # UR, OO, DL, etc. specifying what corner it should go to'), (91, '        char_to_n = {""L"": 0, ""U"": 0, ""O"": 1, ""R"": 2, ""D"": 2}'), (92, '        size = self.default_size'), (93, '        width_diff = self.monitor.width - size[0]'), (94, '        height_diff = self.monitor.height - size[1]'), (95, '        x_step = char_to_n[position_string[1]] * width_diff // 2'), (96, '        y_step = char_to_n[position_string[0]] * height_diff // 2'), (97, '        return (self.monitor.x + x_step, -self.monitor.y + y_step)'), (98, '')]","[(32, '        size: tuple[int, int] = (1280, 720),'), (33, '        default_position: tuple[int, int] = (0, 0),'), (36, '        super().__init__(size=size, samples=samples)'), (37, ''), (39, '        self.default_size = size'), (40, '        self.default_position = default_position'), (41, '        self.pressed_keys = set()'), (42, '        self.size = size')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"[(11, 'from manimlib.constants import DEFAULT_RESOLUTION'), (32, '        # Note: frame height and width will be resized to match this resolution aspect ratio'), (33, '        resolution=DEFAULT_RESOLUTION,'), (50, '        self.background_image = background_image'), (51, '        self.default_pixel_shape = resolution  # Rename?')]","[(11, 'from manimlib.constants import DEFAULT_PIXEL_HEIGHT, DEFAULT_PIXEL_WIDTH'), (32, '        pixel_width: int = DEFAULT_PIXEL_WIDTH,'), (33, '        pixel_height: int = DEFAULT_PIXEL_HEIGHT,'), (35, '        # Note: frame height and width will be resized to match the pixel aspect ratio'), (50, '        self.background_image = background_image'), (52, '        self.default_pixel_shape = (pixel_width, pixel_height)')]",No
manimlib/config.py,manimlib/config.py,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"[(10, 'from ast import literal_eval'), (296, '    resolution_options = global_config[""resolution_options""]'), (298, '        resolution = tuple(map(int, args.resolution.split(""x"")))'), (300, '        resolution = resolution_options[""low""]'), (302, '        resolution = resolution_options[""med""]'), (304, '        resolution = resolution_options[""high""]'), (306, '        resolution = resolution_options[""4k""]'), (308, '        resolution = global_config[""camera""][""resolution""]'), (310, '    if isinstance(resolution, str):'), (311, '        resolution = literal_eval(resolution)'), (312, ''), (313, '    return resolution'), (321, '            window_config[key] = literal_eval(window_config[key])'), (331, '    camera_config = global_config[""camera""]'), (332, ''), (333, '    # All of this should be taken care of during some initialization of global_config'), (334, '    camera_config[""resolution""] = get_resolution(args, global_config)'), (335, '    if args.fps:'), (336, '        camera_config[""fps""] = args.fps'), (337, '    if args.color:'), (338, '        try:'), (339, '            camera_config[""background_color""] = colour.Color(args.color)'), (340, '        except Exception:'), (341, '            log.error(""Please use a valid color"")'), (342, '            log.error(err)'), (343, '            sys.exit(2)'), (345, '        camera_config[""background_opacity""] = 0.0')]","[(295, '    camera_resolutions = global_config[""camera_resolutions""]'), (297, '        resolution = args.resolution'), (299, '        resolution = camera_resolutions[""low""]'), (301, '        resolution = camera_resolutions[""med""]'), (303, '        resolution = camera_resolutions[""high""]'), (305, '        resolution = camera_resolutions[""4k""]'), (307, '        resolution = camera_resolutions[camera_resolutions[""default_resolution""]]'), (309, '    width_str, height_str = resolution.split(""x"")'), (310, '    return int(width_str), int(height_str)'), (318, '            window_config[key] = eval(window_config[key])'), (328, '    width, height = get_resolution(args, global_config)'), (329, '    fps = int(args.fps or global_config[""fps""])'), (330, ''), (331, '    camera_config = {'), (332, '        ""pixel_width"": width,'), (333, '        ""pixel_height"": height,'), (334, '        ""fps"": fps,'), (335, '    }'), (336, ''), (337, '    try:'), (338, '        bg_color = args.color or global_config[""style""][""background_color""]'), (339, '        camera_config[""background_color""] = colour.Color(bg_color)'), (340, '    except ValueError as err:'), (341, '        log.error(""Please use a valid color"")'), (342, '        log.error(err)'), (343, '        sys.exit(2)'), (344, ''), (345, '    # If rendering a transparent image/movie, make sure the'), (346, '    # scene has a background opacity of 0'), (348, '        camera_config[""background_opacity""] = 0')]",No
manimlib/default_config.yml,manimlib/default_config.yml,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"[(39, 'camera:'), (40, '  resolution: (1920, 1080)'), (41, '  background_color: ""#333333""'), (42, '  fps: 30'), (43, '  background_opacity: 1.0'), (60, 'resolution_options:'), (61, '  low: (854, 480)'), (62, '  med: (1280, 720)'), (63, '  high: (1920, 1080)'), (64, '  4k: (3840, 2160)')]","[(55, '  background_color: ""#333333""'), (56, 'camera_resolutions:'), (57, '  low: ""854x480""'), (58, '  med: ""1280x720""'), (59, '  high: ""1920x1080""'), (60, '  4k: ""3840x2160""'), (61, '  default_resolution: ""high""'), (62, 'fps: 30')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,4cc2e5ed177329a76add74df285ff2a1cac19ef0,d4c5c4736a84e82e15cf5c55468562716eba1624,Consolidate camera configuration,"[(414, '        size = cam_config[""resolution""]')]","[(414, ""        size = (cam_config['pixel_width'], cam_config['pixel_height'])"")]",No
manimlib/window.py,manimlib/window.py,4b483b75ce65f4d2ff8badc3c50d0349a80e375c,4cc2e5ed177329a76add74df285ff2a1cac19ef0,Minor tweak,"[(45, '        self.pressed_keys = set()')]","[(49, '        self.pressed_keys = set()'), (50, ''), (51, '')]",No
manimlib/config.py,manimlib/config.py,858d8c122b04d6936cf57ee156ac88987a0ae1dd,4b483b75ce65f4d2ff8badc3c50d0349a80e375c,"Rename ""file_writer_config"" in default_config to simply ""file_writer""","[(275, '        **global_config[""file_writer""],')]","[(275, '        **global_config[""file_writer_config""],')]",No
manimlib/default_config.yml,manimlib/default_config.yml,858d8c122b04d6936cf57ee156ac88987a0ae1dd,4b483b75ce65f4d2ff8badc3c50d0349a80e375c,"Rename ""file_writer_config"" in default_config to simply ""file_writer""","[(36, '  # Other optional specifications that override the above include:'), (44, 'file_writer:'), (61, '  # When the user passes in -l, -m, --hd or --uhd, these are the corresponding'), (62, '  # resolutions')]","[(36, '  # Other optional specifications that override the above'), (44, 'file_writer_config:')]",No
manimlib/config.py,manimlib/config.py,6b3801107842ceb5be2f51863baa5c1a131baf2f,858d8c122b04d6936cf57ee156ac88987a0ae1dd,Refactor config.py,"[(24, '@lru_cache'), (25, 'def get_global_config():'), (26, '    """"""'), (27, '    Return default configuration for various classes in manim, such as'), (28, '    Scene, Window, Camera, and SceneFileWriter, as well as configuration'), (29, '    determining how the scene is run (e.g. written to file or previewed in window).'), (30, ''), (31, '    The result is initially on the contents of default_config.yml in the manimlib directory,'), (32, '    which can be further updated by a custom configuration file custom_config.yml.'), (33, '    It is further updated based on command line argument.'), (34, ''), (35, ""    After the first time this function is called, it's result is cached""), (36, '    via lru cache, and subsequent calls return this result'), (37, '    """"""'), (38, '    args = parse_cli()'), (39, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (40, '    config = merge_dicts_recursively('), (41, '        load_yaml(global_defaults_file),'), (42, '        load_yaml(""custom_config.yml""),  # From current working directory'), (43, '        load_yaml(args.config_file) if args.config_file else dict(),'), (44, '    )'), (45, ''), (46, '    update_directory_config(config)'), (47, '    update_window_config(config, args)'), (48, '    update_camera_config(config, args)'), (49, '    update_file_writer_config(config, args)'), (50, ''), (51, '    return config'), (52, ''), (53, ''), (54, '# Functions used to initialized the configuration'), (55, ''), (56, ''), (229, 'def update_directory_config(config: dict):'), (230, '    dir_config = config[""directories""]'), (231, ""    base = dir_config['base']""), (232, ""    for key, subdir in dir_config['subdirs'].items():""), (233, '        dir_config[key] = os.path.join(base, subdir)'), (236, 'def update_window_config(config: dict, args: Namespace):'), (237, '    window_config = config[""window""]'), (245, 'def update_camera_config(config: dict, args: Namespace):'), (246, '    camera_config = config[""camera""]'), (247, '    arg_resolution = get_resolution_from_args(args, config[""resolution_options""])'), (248, '    camera_config[""resolution""] = arg_resolution or literal_eval(camera_config[""resolution""])'), (261, ''), (262, 'def update_file_writer_config(config: dict, args: Namespace):'), (263, '    file_writer_config = config[""file_writer""]'), (264, '    file_writer_config.update('), (265, '        write_to_movie=(not args.skip_animations and args.write_file),'), (266, '        save_last_frame=(args.skip_animations and args.write_file),'), (267, '        save_pngs=args.save_pngs,'), (268, '        png_mode=(""RGBA"" if args.transparent else ""RGB""),'), (269, '        movie_file_extension=(get_file_ext(args)),'), (270, '        output_directory=get_output_directory(args, config),'), (271, '        file_name=args.file_name,'), (272, '        input_file_path=args.file or """",'), (273, '        open_file_upon_completion=args.open,'), (274, '        show_file_location_upon_completion=args.finder,'), (275, '        quiet=args.quiet,'), (276, '    )'), (277, ''), (278, '    if args.vcodec:'), (279, '        file_writer_config[""video_codec""] = args.vcodec'), (280, '    elif args.transparent:'), (281, '        file_writer_config[""video_codec""] = \'prores_ks\''), (282, '        file_writer_config[""pixel_format""] = \'\''), (283, '    elif args.gif:'), (284, '        file_writer_config[""video_codec""] = \'\''), (285, ''), (286, '    if args.pix_fmt:'), (287, '        file_writer_config[""pixel_format""] = args.pix_fmt'), (288, ''), (289, ''), (290, '# Shortcuts for retrieving portions of global configuration'), (291, ''), (292, ''), (293, 'def get_window_config() -> dict:'), (294, '    return get_global_config()[""window""]'), (295, ''), (296, ''), (297, 'def get_camera_config() -> dict:'), (298, '    return get_global_config()[""camera""]'), (299, ''), (300, ''), (301, 'def get_file_writer_config() -> dict:'), (302, '    return get_global_config()[""file_writer""]'), (310, '    camera_config = get_camera_config()'), (311, '    file_writer_config = get_file_writer_config()'), (329, '    window_config = get_window_config()'), (341, ''), (342, ''), (343, '# Helpers for the functions above'), (344, ''), (345, ''), (346, 'def load_yaml(file_path: str):'), (347, '    try:'), (348, '        with open(file_path, ""r"") as file:'), (349, '            return yaml.safe_load(file) or {}'), (350, '    except FileNotFoundError:'), (351, '        return {}'), (352, ''), (353, ''), (354, 'def get_manim_dir():'), (355, '    manimlib_module = importlib.import_module(""manimlib"")'), (356, '    manimlib_dir = os.path.dirname(inspect.getabsfile(manimlib_module))'), (357, '    return os.path.abspath(os.path.join(manimlib_dir, ""..""))'), (358, ''), (359, ''), (360, 'def get_resolution_from_args(args: Optional[Namespace], resolution_options: dict) -> Optional[tuple[int, int]]:'), (361, '    if args.resolution:'), (362, '        return tuple(map(int, args.resolution.split(""x"")))'), (363, '    if args.low_quality:'), (364, '        return literal_eval(resolution_options[""low""])'), (365, '    if args.medium_quality:'), (366, '        return literal_eval(resolution_options[""med""])'), (367, '    if args.hd:'), (368, '        return literal_eval(resolution_options[""high""])'), (369, '    if args.uhd:'), (370, '        return literal_eval(resolution_options[""4k""])'), (371, '    return None'), (372, ''), (373, ''), (374, 'def get_file_ext(args: Namespace) -> str:'), (375, '    if args.transparent:'), (376, '        file_ext = "".mov""'), (377, '    elif args.gif:'), (378, '        file_ext = "".gif""'), (379, '    else:'), (380, '        file_ext = "".mp4""'), (381, '    return file_ext'), (382, ''), (383, ''), (384, 'def get_animations_numbers(args: Namespace) -> tuple[int | None, int | None]:'), (385, '    stan = args.start_at_animation_number'), (386, '    if stan is None:'), (387, '        return (None, None)'), (388, '    elif "","" in stan:'), (389, '        return tuple(map(int, stan.split("","")))'), (390, '    else:'), (391, '        return int(stan), None'), (392, ''), (393, ''), (394, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (395, '    dir_config = global_config[""directories""]'), (396, '    output_directory = args.video_dir or dir_config[""output""]'), (397, '    if dir_config[""mirror_module_path""] and args.file:'), (398, '        to_cut = dir_config[""removed_mirror_prefix""]'), (399, '        ext = os.path.abspath(args.file)'), (400, '        ext = ext.replace(to_cut, """").replace("".py"", """")'), (401, '        if ext.startswith(""_""):'), (402, '            ext = ext[1:]'), (403, '        output_directory = os.path.join(output_directory, ext)'), (404, '    return output_directory')]","[(196, 'def get_manim_dir():'), (197, '    manimlib_module = importlib.import_module(""manimlib"")'), (198, '    manimlib_dir = os.path.dirname(inspect.getabsfile(manimlib_module))'), (199, '    return os.path.abspath(os.path.join(manimlib_dir, ""..""))'), (200, ''), (201, ''), (202, 'def load_yaml(file_path: str):'), (203, '    try:'), (204, '        with open(file_path, ""r"") as file:'), (205, '            return yaml.safe_load(file) or {}'), (206, '    except FileNotFoundError:'), (207, '        return {}'), (208, ''), (209, ''), (210, '@lru_cache'), (211, 'def get_global_config():'), (212, '    args = parse_cli()'), (213, '    global_defaults_file = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (214, '    config = merge_dicts_recursively('), (215, '        load_yaml(global_defaults_file),'), (216, '        load_yaml(""custom_config.yml""),  # From current working directory'), (217, '        load_yaml(args.config_file) if args.config_file else {},'), (218, '    )'), (219, ''), (220, '    # Set the subdirectories'), (221, ""    base = config['directories']['base']""), (222, ""    for key, subdir in config['directories']['subdirs'].items():""), (223, ""        config['directories'][key] = os.path.join(base, subdir)""), (224, ''), (225, '    return config'), (226, ''), (227, ''), (228, 'def get_file_ext(args: Namespace) -> str:'), (229, '    if args.transparent:'), (230, '        file_ext = "".mov""'), (231, '    elif args.gif:'), (232, '        file_ext = "".gif""'), (233, '    else:'), (234, '        file_ext = "".mp4""'), (235, '    return file_ext'), (236, ''), (237, ''), (238, 'def get_animations_numbers(args: Namespace) -> tuple[int | None, int | None]:'), (239, '    stan = args.start_at_animation_number'), (240, '    if stan is None:'), (241, '        return (None, None)'), (242, '    elif "","" in stan:'), (243, '        return tuple(map(int, stan.split("","")))'), (244, '    else:'), (245, '        return int(stan), None'), (246, ''), (247, ''), (248, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (249, '    dir_config = global_config[""directories""]'), (250, '    output_directory = args.video_dir or dir_config[""output""]'), (251, '    if dir_config[""mirror_module_path""] and args.file:'), (252, '        to_cut = dir_config[""removed_mirror_prefix""]'), (253, '        ext = os.path.abspath(args.file)'), (254, '        ext = ext.replace(to_cut, """").replace("".py"", """")'), (255, '        if ext.startswith(""_""):'), (256, '            ext = ext[1:]'), (257, '        output_directory = os.path.join(output_directory, ext)'), (258, '    return output_directory'), (259, ''), (260, ''), (261, 'def get_file_writer_config(args: Namespace, global_config: dict) -> dict:'), (262, '    result = {'), (263, '        ""write_to_movie"": not args.skip_animations and args.write_file,'), (264, '        ""save_last_frame"": args.skip_animations and args.write_file,'), (265, '        ""save_pngs"": args.save_pngs,'), (266, '        # If -t is passed in (for transparent), this will be RGBA'), (267, '        ""png_mode"": ""RGBA"" if args.transparent else ""RGB"",'), (268, '        ""movie_file_extension"": get_file_ext(args),'), (269, '        ""output_directory"": get_output_directory(args, global_config),'), (270, '        ""file_name"": args.file_name,'), (271, '        ""input_file_path"": args.file or """",'), (272, '        ""open_file_upon_completion"": args.open,'), (273, '        ""show_file_location_upon_completion"": args.finder,'), (274, '        ""quiet"": args.quiet,'), (275, '        **global_config[""file_writer""],'), (276, '    }'), (277, ''), (278, '    if args.vcodec:'), (279, '        result[""video_codec""] = args.vcodec'), (280, '    elif args.transparent:'), (281, '        result[""video_codec""] = \'prores_ks\''), (282, '        result[""pixel_format""] = \'\''), (283, '    elif args.gif:'), (284, '        result[""video_codec""] = \'\''), (285, ''), (286, '    if args.pix_fmt:'), (287, '        result[""pixel_format""] = args.pix_fmt'), (288, ''), (289, '    return result'), (290, ''), (291, ''), (292, 'def get_resolution(args: Optional[Namespace] = None, global_config: Optional[dict] = None):'), (293, '    args = args or parse_cli()'), (294, '    global_config = global_config or get_global_config()'), (295, ''), (296, '    resolution_options = global_config[""resolution_options""]'), (297, '    if args.resolution:'), (298, '        resolution = tuple(map(int, args.resolution.split(""x"")))'), (299, '    elif args.low_quality:'), (300, '        resolution = resolution_options[""low""]'), (301, '    elif args.medium_quality:'), (302, '        resolution = resolution_options[""med""]'), (303, '    elif args.hd:'), (304, '        resolution = resolution_options[""high""]'), (305, '    elif args.uhd:'), (306, '        resolution = resolution_options[""4k""]'), (307, '    else:'), (308, '        resolution = global_config[""camera""][""resolution""]'), (309, ''), (310, '    if isinstance(resolution, str):'), (311, '        resolution = literal_eval(resolution)'), (313, '    return resolution'), (315, ''), (316, 'def get_window_config(args: Namespace, global_config: dict) -> dict:'), (317, '    window_config = global_config[""window""]'), (318, '    # Todo, this correction of configuration should maybe happen elsewhere'), (324, '    return window_config'), (325, ''), (326, ''), (327, 'def get_camera_config(args: Optional[Namespace] = None, global_config: Optional[dict] = None) -> dict:'), (328, '    args = args or parse_cli()'), (329, '    global_config = global_config or get_global_config()'), (331, '    camera_config = global_config[""camera""]'), (333, '    # All of this should be taken care of during some initialization of global_config'), (334, '    camera_config[""resolution""] = get_resolution(args, global_config)'), (347, '    return camera_config'), (355, '    camera_config = get_camera_config(args, global_config)'), (356, '    file_writer_config = get_file_writer_config(args, global_config)'), (374, '    window_config = get_window_config(args, get_global_config())')]",No
manimlib/constants.py,manimlib/constants.py,6b3801107842ceb5be2f51863baa5c1a131baf2f,858d8c122b04d6936cf57ee156ac88987a0ae1dd,Refactor config.py,"[(4, 'from manimlib.config import get_global_config'), (15, 'DEFAULT_RESOLUTION: tuple[int, int] = get_global_config()[""camera""][""resolution""]')]","[(4, 'from manimlib.config import get_resolution'), (15, 'DEFAULT_RESOLUTION: tuple[int, int] = get_resolution()')]",No
manimlib/mobject/boolean_ops.py,manimlib/mobject/boolean_ops.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),"[(10, '# Borrowed from https://github.com/ManimCommunity/manim/')]","[(10, '# Borrowed from from https://github.com/ManimCommunity/manim/')]",No
manimlib/mobject/svg/tex_mobject.py,manimlib/mobject/svg/tex_mobject.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),[],"[(13, 'from manimlib.utils.simple_functions import hash_string')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),"[(78, '    #'), (79, ""    # To avoid CAIRO_STATUS_WRITE_ERROR: b'error while writing to""), (80, ""    # output stream' on Windows, we need to pass 'delete=False'.""), (81, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+', delete=False) as tmp:"")]","[(8, 'import hashlib'), (24, 'from manimlib.utils.simple_functions import hash_string'), (80, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+') as tmp:"")]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,c51a84a6eedb296f0ba0462e280fb558729a70e3,1a14a6bd0d38ad236b056f9877af33ae407cd673,Fixing a Cairo Bug (Windows OS),"[(53, '    from typing import Callable, Tuple, Any, Optional'), (54, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Self')]","[(5, 'import moderngl'), (7, 'import operator as op'), (8, 'import itertools as it'), (38, 'from manimlib.utils.iterables import arrays_match'), (39, 'from manimlib.utils.simple_functions import fdiv'), (41, 'from manimlib.utils.space_ops import cross'), (52, 'from manimlib.shader_wrapper import ShaderWrapper'), (60, '    from typing import Callable, Tuple, Any'), (61, '    from manimlib.typing import ManimColor, Vect3, Vect4, Vect3Array, Vect4Array, Self')]",No
manimlib/config.py,manimlib/config.py,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option",[],"[(323, '        ""embed_exception_mode"": global_config[""embed_exception_mode""],'), (324, '        ""embed_error_sound"": global_config[""embed_error_sound""],')]",No
manimlib/default_config.yml,manimlib/default_config.yml,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option","[(60, 'embed:'), (61, '  exception_mode: ""Verbose""')]","[(68, 'embed_exception_mode: ""Verbose""'), (69, 'embed_error_sound: False')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option",[],"[(82, '        embed_exception_mode: str = """",'), (83, '        embed_error_sound: bool = False,'), (92, '        self.embed_exception_mode = embed_exception_mode'), (93, '        self.embed_error_sound = embed_error_sound')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,6b3801107842ceb5be2f51863baa5c1a131baf2f,"Move embed configuration out of Scene, and get rid of error sound option","[(4, 'import os'), (10, 'from manimlib.config import get_global_config'), (43, '    exception_mode = get_global_config()[""embed""][""exception_mode""]'), (48, '        xmode=exception_mode')]","[(45, '        xmode=scene.embed_exception_mode'), (97, '        if scene.embed_error_sound:'), (98, '            os.system(""printf \'\\a\'"")')]",No
manimlib/config.py,manimlib/config.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"[(50, '    update_scene_config(config, args)'), (291, 'def update_scene_config(config: dict, args: Namespace):'), (292, '    scene_config = config[""scene""]'), (293, '    start, end = get_animations_numbers(args)'), (294, '    scene_config.update('), (295, '        # Note, Scene.__init__ makes use of both get_camera_config() and'), (296, '        # get_file_writer_config() below, so the arguments here are just for'), (297, '        # any future specifications beyond what the global configuration holds'), (298, '        camera_config=dict(),'), (299, '        file_writer_config=dict(),'), (300, '        skip_animations=args.skip_animations,'), (301, '        start_at_animation_number=start,'), (302, '        end_at_animation_number=end,'), (303, '        presenter_mode=args.presenter_mode,'), (304, '    )'), (305, '    if args.leave_progress_bars:'), (306, '        scene_config[""leave_progress_bars""] = True'), (307, '    if args.show_animation_progress:'), (308, '        scene_config[""show_animation_progress""] = True'), (309, ''), (310, ''), (326, 'def get_scene_config() -> dict:'), (330, '    return get_global_config()[""scene""]')]","[(305, 'def get_scene_config(args: Namespace) -> dict:'), (309, '    global_config = get_global_config()'), (310, '    camera_config = get_camera_config()'), (311, '    file_writer_config = get_file_writer_config()'), (312, '    start, end = get_animations_numbers(args)'), (313, ''), (314, '    return {'), (315, '        ""file_writer_config"": file_writer_config,'), (316, '        ""camera_config"": camera_config,'), (317, '        ""skip_animations"": args.skip_animations,'), (318, '        ""start_at_animation_number"": start,'), (319, '        ""end_at_animation_number"": end,'), (320, '        ""presenter_mode"": args.presenter_mode,'), (321, '        ""leave_progress_bars"": args.leave_progress_bars,'), (322, '        ""show_animation_progress"": args.show_animation_progress,'), (323, '    }')]",No
manimlib/default_config.yml,manimlib/default_config.yml,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"[(56, 'scene:'), (57, '  # Most of the scene configuration will come from CLI arguments,'), (58, '  # but defaults can be set here'), (59, '  show_animation_progress: False'), (60, '  leave_progress_bars: False')]",[],No
manimlib/extract_scene.py,manimlib/extract_scene.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"[(80, '    return int(total_time * get_global_config()[""camera""][""fps""])'), (84, '    fw_config = get_global_config()[""file_writer""]'), (86, '        scene_config[""file_writer_config""][""total_frames""] = compute_total_frames(scene_class, scene_config)')]","[(80, '    return int(total_time * scene_config[""camera_config""][""fps""])'), (84, '    fw_config = scene_config[""file_writer_config""]'), (86, '        fw_config[""total_frames""] = compute_total_frames(scene_class, scene_config)')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"[(69, '        scene_config = manimlib.config.get_scene_config()')]","[(69, '        scene_config = manimlib.config.get_scene_config(self.args)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,bcc4235e2f6f329f872cc3df15c1956a75ba63bc,Make scene configuration part of the global configuration,"[(18, 'from manimlib.config import get_camera_config'), (19, 'from manimlib.config import get_file_writer_config'), (34, 'from manimlib.utils.dict_ops import merge_dicts_recursively'), (74, '        window: Optional[Window] = None,'), (75, '        reload_manager: Optional[ReloadManager] = None,'), (82, '        show_animation_progress: bool = False,'), (95, '        self.camera_config = merge_dicts_recursively('), (96, '            get_camera_config(),         # Global default'), (97, '            self.default_camera_config,  # Updated configuration that subclasses may specify'), (98, '            camera_config,               # Updated configuration from instantiation'), (99, '        )'), (100, '        self.file_writer_config = merge_dicts_recursively('), (101, '            get_file_writer_config(),'), (102, '            self.default_file_writer_config,'), (103, '            file_writer_config,'), (104, '        )')]","[(78, '        window: Optional[Window] = None,'), (79, '        reload_manager: Optional[ReloadManager] = None,'), (81, '        show_animation_progress: bool = False,'), (92, '        self.camera_config = {**self.default_camera_config, **camera_config}'), (93, '        self.file_writer_config = {**self.default_file_writer_config, **file_writer_config}')]",No
manimlib/config.py,manimlib/config.py,d1080aa6fdd0b135f3d772656b6a77da06086624,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,Add run configuration to global config,"[(51, '    update_run_config(config, args)'), (312, 'def update_run_config(config: dict, args: Namespace):'), (313, '    config[""run""] = dict('), (314, '        file_name=args.file,'), (315, '        embed_line=(int(args.embed) if args.embed is not None else None),'), (316, '        is_reload=False,'), (317, '        prerun=args.prerun,'), (318, '        scene_names=args.scene_names,'), (319, '        quiet=args.quiet or args.write_all,'), (320, '        write_all=args.write_all,'), (321, '        window_config=config[""window""],  # TODO'), (322, '        show_in_window=not args.write_file'), (323, '    )'), (324, ''), (325, ''), (348, 'def get_run_config():'), (349, '    return get_global_config()[""run""]')]","[(333, 'def get_run_config(args: Namespace):'), (334, '    window_config = get_window_config()'), (335, '    return {'), (336, '        ""file_name"": args.file,'), (337, '        ""embed_line"": int(args.embed) if args.embed is not None else None,'), (338, '        ""is_reload"": False,'), (339, '        ""prerun"": args.prerun,'), (340, '        ""scene_names"": args.scene_names,'), (341, '        ""quiet"": args.quiet or args.write_all,'), (342, '        ""write_all"": args.write_all,'), (343, '        ""window_config"": window_config,'), (344, '        ""show_in_window"": not args.write_file'), (345, '    }')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,d1080aa6fdd0b135f3d772656b6a77da06086624,f9fa8ac8461efd8000fbaaa0347c2a1ea9c9e989,Add run configuration to global config,"[(30, '    embed_line = None'), (39, '        self.embed_line = start_at_line'), (62, '            f""at line \\033[96m{self.embed_line}\\033[0m""'), (73, '        run_config = manimlib.config.get_run_config()'), (75, '        if self.embed_line:'), (76, '            run_config.update(embed_line=self.embed_line)')]","[(38, '        self.args.embed = str(start_at_line)'), (61, '            f""at line \\033[96m{self.args.embed}\\033[0m""'), (72, '        run_config = manimlib.config.get_run_config(self.args)')]",No
manimlib/config.py,manimlib/config.py,c61e0bcee523df8fd30512047a9c42d76b315712,d1080aa6fdd0b135f3d772656b6a77da06086624,Move window_config out of run_config,[],"[(321, '        window_config=config[""window""],  # TODO')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,c61e0bcee523df8fd30512047a9c42d76b315712,d1080aa6fdd0b135f3d772656b6a77da06086624,Move window_config out of run_config,"[(80, '            window_config = manimlib.config.get_window_config()'), (81, '            self.window = Window(**window_config)')]","[(80, '            self.window = Window(**run_config[""window_config""])')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,667cfaf160a56dc53eef3e0b391038c810759229,c61e0bcee523df8fd30512047a9c42d76b315712,Remove args from ReloadManager,"[(56, '        print(""Reloading..."")')]","[(32, '    def __init__(self, cli_args: Namespace):'), (33, '        self.args = cli_args'), (34, ''), (59, '        print("" "".join(['), (60, '            ""Reloading interactive session for"",'), (61, '            f""\\033[96m{self.args.scene_names[0]}\\033[0m"",'), (62, '            f""at line \\033[96m{self.embed_line}\\033[0m""'), (63, '        ]))')]",No
manimlib/__main__.py,manimlib/__main__.py,cd744024ea4390886fe8e36749a0cc2055d8217d,667cfaf160a56dc53eef3e0b391038c810759229,Minor reorganization of ReloadManager.retrieve_scenes_and_run,"[(25, '    ReloadManager().run()')]","[(25, '    reload_manager = ReloadManager(args)'), (26, '    reload_manager.run()')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,cd744024ea4390886fe8e36749a0cc2055d8217d,667cfaf160a56dc53eef3e0b391038c810759229,Minor reorganization of ReloadManager.retrieve_scenes_and_run,"[(7, 'from manimlib.config import get_global_config'), (60, '        Take the global configuration, which is based on CLI arguments,'), (61, '        modify it based on reloading status, then extract and run scenes'), (62, '        accordingly'), (64, '        global_config = get_global_config()'), (65, '        scene_config = global_config[""scene""]'), (66, '        run_config = global_config[""run""]'), (68, '        scene_config.update(reload_manager=self)'), (75, '            self.window = Window(**global_config[""window""])')]","[(7, 'import manimlib.config'), (60, '        Creates a new configuration based on the CLI args and runs the scenes.'), (62, '        # Args to Config'), (63, '        scene_config = manimlib.config.get_scene_config()'), (64, '        scene_config.update(reload_manager=self)'), (66, '        run_config = manimlib.config.get_run_config()'), (73, '            window_config = manimlib.config.get_window_config()'), (74, '            self.window = Window(**window_config)')]",No
manimlib/config.py,manimlib/config.py,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,cd744024ea4390886fe8e36749a0cc2055d8217d,Add simple function descriptions,"[(329, '    """""" Key word arguments for Window """"""'), (334, '    """""" Key word arguments for Camera """"""'), (339, '    """""" Key word arguments for SceneFileWriter """"""'), (344, '    """""" Key word arguments for Scene """"""')]","[(341, '    """"""'), (342, '    Returns a dictionary to be used as key word arguments for Scene'), (343, '    """"""')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,"Move reload out of Scene, instead have it directly update the global run configuration",[],"[(30, '    embed_line = None'), (31, ''), (32, '    def set_new_start_at_line(self, start_at_line):'), (33, '        """"""'), (34, '        Sets/Updates the line number to load the scene from when reloading.'), (35, '        """"""'), (36, '        self.embed_line = start_at_line'), (68, '        scene_config.update(reload_manager=self)'), (70, '        if self.embed_line:'), (71, '            run_config.update(embed_line=self.embed_line)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,"Move reload out of Scene, instead have it directly update the global run configuration",[],"[(50, '    from manimlib.reload_manager import ReloadManager'), (75, '        reload_manager: Optional[ReloadManager] = None,'), (93, '        self.reload_manager = reload_manager'), (864, '    def reload(self, start_at_line: int | None = None) -> None:'), (865, '        """"""'), (866, '        Reloads the scene just like the `manimgl` command would do with the'), (867, '        same arguments that were provided for the initial startup. This allows'), (868, ""        for quick iteration during scene development since we don't have to exit""), (869, '        the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (870, '        open during the reload.'), (871, ''), (872, '        If `start_at_line` is provided, the scene will be reloaded at that line'), (873, '        number. This corresponds to the `linemarker` param of the'), (874, '        `extract_scene.insert_embed_line_to_module()` method.'), (875, ''), (876, '        Before reload, the scene is cleared and the entire state is reset, such'), (877, '        that we can start from a clean slate. This is taken care of by the'), (878, '        ReloadManager, which will catch the error raised by the `exit_raise`'), (879, '        magic command that we invoke here.'), (880, ''), (881, '        Note that we cannot define a custom exception class for this error,'), (882, '        since the IPython kernel will swallow any exception. While we can catch'), (883, '        such an exception in our custom exception handler registered with the'), (884, '        `set_custom_exc` method, we cannot break out of the IPython shell by'), (885, '        this means.'), (886, '        """"""'), (887, '        self.reload_manager.set_new_start_at_line(start_at_line)'), (888, '        shell = get_ipython()'), (889, '        if shell:'), (890, '            shell.run_line_magic(""exit_raise"", """")'), (891, '')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,07bb34793eb04a94aae7f71a48e753d4eeaa2c7e,"Move reload out of Scene, instead have it directly update the global run configuration","[(69, '        reload=reload_scene  # Defined below'), (107, 'def reload_scene(embed_line: int | None = None) -> None:'), (108, '    """"""'), (109, '    Reloads the scene just like the `manimgl` command would do with the'), (110, '    same arguments that were provided for the initial startup. This allows'), (111, ""    for quick iteration during scene development since we don't have to exit""), (112, '    the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (113, '    open during the reload.'), (114, ''), (115, '    If `embed_line` is provided, the scene will be reloaded at that line'), (116, '    number. This corresponds to the `linemarker` param of the'), (117, '    `extract_scene.insert_embed_line_to_module()` method.'), (118, ''), (119, '    Before reload, the scene is cleared and the entire state is reset, such'), (120, '    that we can start from a clean slate. This is taken care of by the'), (121, '    ReloadManager, which will catch the error raised by the `exit_raise`'), (122, '    magic command that we invoke here.'), (123, ''), (124, '    Note that we cannot define a custom exception class for this error,'), (125, '    since the IPython kernel will swallow any exception. While we can catch'), (126, '    such an exception in our custom exception handler registered with the'), (127, '    `set_custom_exc` method, we cannot break out of the IPython shell by'), (128, '    this means.'), (129, '    """"""'), (130, '    if embed_line:'), (131, '        global_config = get_global_config()'), (132, '        global_config[""run""][""embed_line""] = embed_line'), (133, ''), (134, '    shell = get_ipython()'), (135, '    if shell:'), (136, '        shell.run_line_magic(""exit_raise"", """")'), (137, ''), (138, '')]","[(64, '        reload=scene.reload,')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,Move update to is_reload status of run_config out of ReloadManager,[],"[(29, '    is_reload = False'), (47, '    def note_reload(self):'), (48, '        self.is_reload = True'), (49, '        print(""Reloading..."")'), (50, ''), (61, '        run_config.update(is_reload=self.is_reload)'), (62, '')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,1d67768a13e17a89e780ed6ca4ccd961f7f190c4,Move update to is_reload status of run_config out of ReloadManager,"[(130, '    run_config = get_global_config()[""run""]'), (131, '    run_config[""is_reload""] = True'), (133, '        run_config[""embed_line""] = embed_line'), (137, '        print(""Reloading..."")')]","[(131, '        global_config = get_global_config()'), (132, '        global_config[""run""][""embed_line""] = embed_line')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,284c1d8f2c5da14520a5d41858ca97a03075e692,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,Move message for no scenes found to extract_scene,"[(183, '    scenes = get_scenes_to_render(all_scene_classes, scene_config, run_config)'), (184, '    if len(scenes) == 0:'), (185, '        print(""No scenes found to run"")'), (186, '    return scenes')]","[(183, '    return get_scenes_to_render(all_scene_classes, scene_config, run_config)')]",No
manimlib/reload_manager.py,manimlib/reload_manager.py,284c1d8f2c5da14520a5d41858ca97a03075e692,ae93d8fcc6e0aa0cc9ac4f93fdd06298dbb31859,Move message for no scenes found to extract_scene,[],"[(63, '        if len(scenes) == 0:'), (64, '            print(""No scenes found to run"")')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,d21fbd02bca39948f008d11e9693504f2064013b,284c1d8f2c5da14520a5d41858ca97a03075e692,Minor tweak to reload_scene,"[(130, '    shell = get_ipython()'), (131, '    if not shell:'), (132, '        return'), (133, ''), (134, '    # Update the global run configuration'), (140, '    print(""Reloading..."")'), (141, '    shell.run_line_magic(""exit_raise"", """")')]","[(135, '    shell = get_ipython()'), (136, '    if shell:'), (137, '        print(""Reloading..."")'), (138, '        shell.run_line_magic(""exit_raise"", """")')]",No
manimlib/config.py,manimlib/config.py,24697377dbf037f80fbab088af568bcf4ca0c735,d21fbd02bca39948f008d11e9693504f2064013b,"Make the fact that the global configuration is a mutable global dictionary a bit more explicit

Instead of implicit through the use of lru_cache","[(22, 'def initialize_global_config():'), (375, ''), (376, ''), (377, '# Create global configuration'), (378, ''), (379, ''), (380, 'GLOBAL_CONFIG = initialize_global_config()'), (381, ''), (382, ''), (383, 'def get_global_config():'), (384, '    global GLOBAL_CONFIG'), (385, '    return GLOBAL_CONFIG'), (386, ''), (387, ''), (388, '# Shortcuts for retrieving portions of global configuration'), (389, ''), (390, ''), (391, 'def get_window_config() -> dict:'), (392, '    """""" Key word arguments for Window """"""'), (393, '    return get_global_config()[""window""]'), (394, ''), (395, ''), (396, 'def get_camera_config() -> dict:'), (397, '    """""" Key word arguments for Camera """"""'), (398, '    return get_global_config()[""camera""]'), (399, ''), (400, ''), (401, 'def get_file_writer_config() -> dict:'), (402, '    """""" Key word arguments for SceneFileWriter """"""'), (403, '    return get_global_config()[""file_writer""]'), (404, ''), (405, ''), (406, 'def get_scene_config() -> dict:'), (407, '    """""" Key word arguments for Scene """"""'), (408, '    return get_global_config()[""scene""]'), (409, ''), (410, ''), (411, 'def get_run_config():'), (412, '    return get_global_config()[""run""]'), (413, ''), (414, ''), (415, '# Helpers for the functions above')]","[(12, 'from functools import lru_cache'), (13, ''), (24, '@lru_cache'), (25, 'def get_global_config():'), (34, ''), (35, ""    After the first time this function is called, it's result is cached""), (36, '    via lru cache, and subsequent calls return this result'), (56, '# Functions used to initialized the configuration'), (57, ''), (58, ''), (325, '# Shortcuts for retrieving portions of global configuration'), (326, ''), (327, ''), (328, 'def get_window_config() -> dict:'), (329, '    """""" Key word arguments for Window """"""'), (330, '    return get_global_config()[""window""]'), (331, ''), (332, ''), (333, 'def get_camera_config() -> dict:'), (334, '    """""" Key word arguments for Camera """"""'), (335, '    return get_global_config()[""camera""]'), (336, ''), (337, ''), (338, 'def get_file_writer_config() -> dict:'), (339, '    """""" Key word arguments for SceneFileWriter """"""'), (340, '    return get_global_config()[""file_writer""]'), (341, ''), (342, ''), (343, 'def get_scene_config() -> dict:'), (344, '    """""" Key word arguments for Scene """"""'), (345, '    return get_global_config()[""scene""]'), (346, ''), (347, ''), (348, 'def get_run_config():'), (349, '    return get_global_config()[""run""]'), (350, ''), (351, ''), (352, '# Helpers for the functions above'), (353, ''), (354, '')]",No
manimlib/__main__.py,manimlib/__main__.py,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,24697377dbf037f80fbab088af568bcf4ca0c735,"Move ReloadManager logic into __main__.py

Since the reload logic no longer relies on any state, the relevant loop is simple enough that it feels clearest to include it in the main entry point file.","[(3, 'from manimlib.config import get_global_config'), (4, 'from manimlib.config import parse_cli'), (7, 'import manimlib.extract_scene'), (8, 'from manimlib.window import Window'), (9, ''), (10, ''), (11, 'from IPython.terminal.embed import KillEmbedded'), (12, ''), (13, ''), (14, 'from typing import TYPE_CHECKING'), (15, 'if TYPE_CHECKING:'), (16, '    from argparse import Namespace'), (17, ''), (18, ''), (19, 'def run_scenes():'), (20, '    """"""'), (21, '    Runs the scenes in a loop and detects when a scene reload is requested.'), (22, '    """"""'), (23, '    global_config = get_global_config()'), (24, '    scene_config = global_config[""scene""]'), (25, '    run_config = global_config[""run""]'), (26, ''), (27, '    if run_config[""show_in_window""]:'), (28, '        # Create a reusable window'), (29, '        window = Window(**global_config[""window""])'), (30, '        scene_config.update(window=window)'), (31, ''), (32, '    while True:'), (33, '        try:'), (34, '            # Blocking call since a scene may init an IPython shell()'), (35, '            scenes = manimlib.extract_scene.main(scene_config, run_config)'), (36, '            for scene in scenes:'), (37, '                scene.run()'), (38, '            return'), (39, '        except KillEmbedded:'), (40, '            # Requested via the `exit_raise` IPython runline magic'), (41, '            # by means of the reload_scene() command'), (42, '            pass'), (43, '        except KeyboardInterrupt:'), (44, '            break'), (53, '    args = parse_cli()'), (63, '    run_scenes()')]","[(3, 'import manimlib.config'), (6, 'from manimlib.reload_manager import ReloadManager'), (15, '    args = manimlib.config.parse_cli()'), (25, '    ReloadManager().run()')]",No
manimlib/module_loader.py,manimlib/module_loader.py,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,24697377dbf037f80fbab088af568bcf4ca0c735,"Move ReloadManager logic into __main__.py

Since the reload logic no longer relies on any state, the relevant loop is simple enough that it feels clearest to include it in the main entry point file.","[(148, '        if module.__name__.startswith(""manimlib.config""):'), (149, ""            # We don't want to reload global config""), (150, '            return')]",[],No
manimlib/reload_manager.py,N/A,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,24697377dbf037f80fbab088af568bcf4ca0c735,"Move ReloadManager logic into __main__.py

Since the reload logic no longer relies on any state, the relevant loop is simple enough that it feels clearest to include it in the main entry point file.",[],"[(1, 'from __future__ import annotations'), (2, ''), (3, 'from typing import Any'), (4, 'from IPython.terminal.embed import KillEmbedded'), (5, ''), (6, ''), (7, 'from manimlib.config import get_global_config'), (8, 'import manimlib.extract_scene'), (9, ''), (10, 'from manimlib.window import Window'), (11, ''), (12, ''), (13, 'from typing import TYPE_CHECKING'), (14, 'if TYPE_CHECKING:'), (15, '    from argparse import Namespace'), (16, ''), (17, ''), (18, 'class ReloadManager:'), (19, '    """"""'), (20, '    Manages the loading and running of scenes and is called directly from the'), (21, '    main entry point of ManimGL.'), (22, ''), (23, '    The name ""reload"" comes from the fact that this class handles the'), (24, '    reinitialization of scenes when requested by the user via the `reload()`'), (25, '    command in the IPython shell.'), (26, '    """"""'), (27, ''), (28, '    window = None'), (29, ''), (30, '    def run(self):'), (31, '        """"""'), (32, '        Runs the scenes in a loop and detects when a scene reload is requested.'), (33, '        """"""'), (34, '        while True:'), (35, '            try:'), (36, '                # blocking call since a scene will init an IPython shell()'), (37, '                self.retrieve_scenes_and_run()'), (38, '                return'), (39, '            except KillEmbedded:'), (40, '                # Requested via the `exit_raise` IPython runline magic'), (41, '                # by means of our scene.reload() command'), (42, '                self.note_reload()'), (43, '            except KeyboardInterrupt:'), (44, '                break'), (45, ''), (46, '    def retrieve_scenes_and_run(self):'), (47, '        """"""'), (48, '        Take the global configuration, which is based on CLI arguments,'), (49, '        modify it based on reloading status, then extract and run scenes'), (50, '        accordingly'), (51, '        """"""'), (52, '        global_config = get_global_config()'), (53, '        scene_config = global_config[""scene""]'), (54, '        run_config = global_config[""run""]'), (55, ''), (56, '        # Create or reuse window'), (57, '        if run_config[""show_in_window""] and not self.window:'), (58, '            self.window = Window(**global_config[""window""])'), (59, '        scene_config.update(window=self.window)'), (60, ''), (61, '        # Scenes'), (62, '        scenes = manimlib.extract_scene.main(scene_config, run_config)'), (63, ''), (64, '        for scene in scenes:'), (65, '            scene.run()')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,32d36a09f6771b16241f382110d64fbc844e4785,8cf95ec9a49129bb5fbdb34879e895e8a7b4f487,Update commend on reload_scene,"[(121, '    run_scenes function in __main__.py, which will catch the error raised by the'), (122, '    `exit_raise` magic command that we invoke here.'), (134, '    # Update the global run configuration.')]","[(121, '    ReloadManager, which will catch the error raised by the `exit_raise`'), (122, '    magic command that we invoke here.'), (134, '    # Update the global run configuration')]",No
requirements.txt,requirements.txt,2359ed9aa4dda07ac63e7b03243f2dc5b27c7def,32d36a09f6771b16241f382110d64fbc844e4785,Remove tempfile from requirements.txt,[],"[(25, 'tempfile')]",No
manimlib/constants.py,manimlib/constants.py,2c43d293a586201b1d706d5a4e9695fa42f2bc98,3d3f8258f4b3169cf8fdeb0680f71e17e62743b4,"Move arbitrary constant definitions into default_config

This should make things like the color palette and frame size more easily customizable.","[(9, '# See manimlib/default_config.yml'), (10, 'from manimlib.config import GLOBAL_CONFIG'), (11, ''), (13, 'DEFAULT_RESOLUTION: tuple[int, int] = GLOBAL_CONFIG[""camera""][""resolution""]'), (14, 'DEFAULT_PIXEL_WIDTH: int = DEFAULT_RESOLUTION[0]'), (15, 'DEFAULT_PIXEL_HEIGHT: int = DEFAULT_RESOLUTION[1]'), (16, 'DEFAULT_FPS: int = GLOBAL_CONFIG[""camera""][""fps""]'), (20, 'FRAME_HEIGHT: float = GLOBAL_CONFIG[""sizes""][""frame_height""]'), (27, '# Helpful values for positioning mobjects'), (28, 'SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""small_buff""]'), (29, 'MED_SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_small_buff""]'), (30, 'MED_LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_large_buff""]'), (31, 'LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""large_buff""]'), (33, 'DEFAULT_MOBJECT_TO_EDGE_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (34, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]'), (38, 'DEFAULT_WAIT_TIME: float = GLOBAL_CONFIG[""default_wait_time""]'), (41, '# Standard vectors'), (73, 'FFMPEG_BIN: str = GLOBAL_CONFIG[""ffmpeg_bin""]'), (88, 'DEFAULT_STROKE_WIDTH: float = GLOBAL_CONFIG[""vmobject""][""default_stroke_width""]'), (98, 'colors = GLOBAL_CONFIG[""colors""]'), (99, ''), (100, 'BLUE_E: ManimColor = colors[""blue_e""]'), (101, 'BLUE_D: ManimColor = colors[""blue_d""]'), (102, 'BLUE_C: ManimColor = colors[""blue_c""]'), (103, 'BLUE_B: ManimColor = colors[""blue_b""]'), (104, 'BLUE_A: ManimColor = colors[""blue_a""]'), (105, 'TEAL_E: ManimColor = colors[""teal_e""]'), (106, 'TEAL_D: ManimColor = colors[""teal_d""]'), (107, 'TEAL_C: ManimColor = colors[""teal_c""]'), (108, 'TEAL_B: ManimColor = colors[""teal_b""]'), (109, 'TEAL_A: ManimColor = colors[""teal_a""]'), (110, 'GREEN_E: ManimColor = colors[""green_e""]'), (111, 'GREEN_D: ManimColor = colors[""green_d""]'), (112, 'GREEN_C: ManimColor = colors[""green_c""]'), (113, 'GREEN_B: ManimColor = colors[""green_b""]'), (114, 'GREEN_A: ManimColor = colors[""green_a""]'), (115, 'YELLOW_E: ManimColor = colors[""yellow_e""]'), (116, 'YELLOW_D: ManimColor = colors[""yellow_d""]'), (117, 'YELLOW_C: ManimColor = colors[""yellow_c""]'), (118, 'YELLOW_B: ManimColor = colors[""yellow_b""]'), (119, 'YELLOW_A: ManimColor = colors[""yellow_a""]'), (120, 'GOLD_E: ManimColor = colors[""gold_e""]'), (121, 'GOLD_D: ManimColor = colors[""gold_d""]'), (122, 'GOLD_C: ManimColor = colors[""gold_c""]'), (123, 'GOLD_B: ManimColor = colors[""gold_b""]'), (124, 'GOLD_A: ManimColor = colors[""gold_a""]'), (125, 'RED_E: ManimColor = colors[""red_e""]'), (126, 'RED_D: ManimColor = colors[""red_d""]'), (127, 'RED_C: ManimColor = colors[""red_c""]'), (128, 'RED_B: ManimColor = colors[""red_b""]'), (129, 'RED_A: ManimColor = colors[""red_a""]'), (130, 'MAROON_E: ManimColor = colors[""maroon_e""]'), (131, 'MAROON_D: ManimColor = colors[""maroon_d""]'), (132, 'MAROON_C: ManimColor = colors[""maroon_c""]'), (133, 'MAROON_B: ManimColor = colors[""maroon_b""]'), (134, 'MAROON_A: ManimColor = colors[""maroon_a""]'), (135, 'PURPLE_E: ManimColor = colors[""purple_e""]'), (136, 'PURPLE_D: ManimColor = colors[""purple_d""]'), (137, 'PURPLE_C: ManimColor = colors[""purple_c""]'), (138, 'PURPLE_B: ManimColor = colors[""purple_b""]'), (139, 'PURPLE_A: ManimColor = colors[""purple_a""]'), (140, 'GREY_E: ManimColor = colors[""grey_e""]'), (141, 'GREY_D: ManimColor = colors[""grey_d""]'), (142, 'GREY_C: ManimColor = colors[""grey_c""]'), (143, 'GREY_B: ManimColor = colors[""grey_b""]'), (144, 'GREY_A: ManimColor = colors[""grey_a""]'), (145, 'WHITE: ManimColor = colors[""white""]'), (146, 'BLACK: ManimColor = colors[""black""]'), (147, 'GREY_BROWN: ManimColor = colors[""grey_brown""]'), (148, 'DARK_BROWN: ManimColor = colors[""dark_brown""]'), (149, 'LIGHT_BROWN: ManimColor = colors[""light_brown""]'), (150, 'PINK: ManimColor = colors[""pink""]'), (151, 'LIGHT_PINK: ManimColor = colors[""light_pink""]'), (152, 'GREEN_SCREEN: ManimColor = colors[""green_screen""]'), (153, 'ORANGE: ManimColor = colors[""orange""]'), (154, ''), (155, 'MANIM_COLORS: List[ManimColor] = list(colors.values())')]","[(4, 'from manimlib.config import get_global_config'), (5, ''), (12, '# TODO, it feels a bit unprincipled to have some global constants'), (13, '# depend on the output of this function, and for all that configuration'), (14, '# code to be run merely upon importing from this file.'), (15, 'DEFAULT_RESOLUTION: tuple[int, int] = get_global_config()[""camera""][""resolution""]'), (16, 'DEFAULT_PIXEL_WIDTH = DEFAULT_RESOLUTION[0]'), (17, 'DEFAULT_PIXEL_HEIGHT = DEFAULT_RESOLUTION[1]'), (18, 'DEFAULT_FPS: int = 30'), (22, 'FRAME_HEIGHT: float = 8.0'), (29, 'SMALL_BUFF: float = 0.1'), (30, 'MED_SMALL_BUFF: float = 0.25'), (31, 'MED_LARGE_BUFF: float = 0.5'), (32, 'LARGE_BUFF: float = 1'), (34, 'DEFAULT_MOBJECT_TO_EDGE_BUFFER: float = MED_LARGE_BUFF'), (35, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFFER: float = MED_SMALL_BUFF'), (39, 'DEFAULT_WAIT_TIME: float = 1.0'), (73, 'FFMPEG_BIN: str = ""ffmpeg""'), (88, 'DEFAULT_STROKE_WIDTH: float = 4'), (98, ''), (99, 'BLUE_E: ManimColor = ""#1C758A""'), (100, 'BLUE_D: ManimColor = ""#29ABCA""'), (101, 'BLUE_C: ManimColor = ""#58C4DD""'), (102, 'BLUE_B: ManimColor = ""#9CDCEB""'), (103, 'BLUE_A: ManimColor = ""#C7E9F1""'), (104, 'TEAL_E: ManimColor = ""#49A88F""'), (105, 'TEAL_D: ManimColor = ""#55C1A7""'), (106, 'TEAL_C: ManimColor = ""#5CD0B3""'), (107, 'TEAL_B: ManimColor = ""#76DDC0""'), (108, 'TEAL_A: ManimColor = ""#ACEAD7""'), (109, 'GREEN_E: ManimColor = ""#699C52""'), (110, 'GREEN_D: ManimColor = ""#77B05D""'), (111, 'GREEN_C: ManimColor = ""#83C167""'), (112, 'GREEN_B: ManimColor = ""#A6CF8C""'), (113, 'GREEN_A: ManimColor = ""#C9E2AE""'), (114, 'YELLOW_E: ManimColor = ""#E8C11C""'), (115, 'YELLOW_D: ManimColor = ""#F4D345""'), (116, 'YELLOW_C: ManimColor = ""#FFFF00""'), (117, 'YELLOW_B: ManimColor = ""#FFEA94""'), (118, 'YELLOW_A: ManimColor = ""#FFF1B6""'), (119, 'GOLD_E: ManimColor = ""#C78D46""'), (120, 'GOLD_D: ManimColor = ""#E1A158""'), (121, 'GOLD_C: ManimColor = ""#F0AC5F""'), (122, 'GOLD_B: ManimColor = ""#F9B775""'), (123, 'GOLD_A: ManimColor = ""#F7C797""'), (124, 'RED_E: ManimColor = ""#CF5044""'), (125, 'RED_D: ManimColor = ""#E65A4C""'), (126, 'RED_C: ManimColor = ""#FC6255""'), (127, 'RED_B: ManimColor = ""#FF8080""'), (128, 'RED_A: ManimColor = ""#F7A1A3""'), (129, 'MAROON_E: ManimColor = ""#94424F""'), (130, 'MAROON_D: ManimColor = ""#A24D61""'), (131, 'MAROON_C: ManimColor = ""#C55F73""'), (132, 'MAROON_B: ManimColor = ""#EC92AB""'), (133, 'MAROON_A: ManimColor = ""#ECABC1""'), (134, 'PURPLE_E: ManimColor = ""#644172""'), (135, 'PURPLE_D: ManimColor = ""#715582""'), (136, 'PURPLE_C: ManimColor = ""#9A72AC""'), (137, 'PURPLE_B: ManimColor = ""#B189C6""'), (138, 'PURPLE_A: ManimColor = ""#CAA3E8""'), (139, 'GREY_E: ManimColor = ""#222222""'), (140, 'GREY_D: ManimColor = ""#444444""'), (141, 'GREY_C: ManimColor = ""#888888""'), (142, 'GREY_B: ManimColor = ""#BBBBBB""'), (143, 'GREY_A: ManimColor = ""#DDDDDD""'), (144, 'WHITE: ManimColor = ""#FFFFFF""'), (145, 'BLACK: ManimColor = ""#000000""'), (146, 'GREY_BROWN: ManimColor = ""#736357""'), (147, 'DARK_BROWN: ManimColor = ""#8B4513""'), (148, 'LIGHT_BROWN: ManimColor = ""#CD853F""'), (149, 'PINK: ManimColor = ""#D147BD""'), (150, 'LIGHT_PINK: ManimColor = ""#DC75CD""'), (151, 'GREEN_SCREEN: ManimColor = ""#00FF00""'), (152, 'ORANGE: ManimColor = ""#FF862F""'), (153, ''), (154, 'MANIM_COLORS: List[ManimColor] = ['), (155, '    BLACK, GREY_E, GREY_D, GREY_C, GREY_B, GREY_A, WHITE,'), (156, '    BLUE_E, BLUE_D, BLUE_C, BLUE_B, BLUE_A,'), (157, '    TEAL_E, TEAL_D, TEAL_C, TEAL_B, TEAL_A,'), (158, '    GREEN_E, GREEN_D, GREEN_C, GREEN_B, GREEN_A,'), (159, '    YELLOW_E, YELLOW_D, YELLOW_C, YELLOW_B, YELLOW_A,'), (160, '    GOLD_E, GOLD_D, GOLD_C, GOLD_B, GOLD_A,'), (161, '    RED_E, RED_D, RED_C, RED_B, RED_A,'), (162, '    MAROON_E, MAROON_D, MAROON_C, MAROON_B, MAROON_A,'), (163, '    PURPLE_E, PURPLE_D, PURPLE_C, PURPLE_B, PURPLE_A,'), (164, '    GREY_BROWN, DARK_BROWN, LIGHT_BROWN,'), (165, '    PINK, LIGHT_PINK,'), (166, ']')]",No
manimlib/default_config.yml,manimlib/default_config.yml,2c43d293a586201b1d706d5a4e9695fa42f2bc98,3d3f8258f4b3169cf8fdeb0680f71e17e62743b4,"Move arbitrary constant definitions into default_config

This should make things like the color palette and frame size more easily customizable.","[(74, 'sizes:'), (75, '  # This determines the scale of the manim coordinate system with respect to'), (76, '  # the viewing frame'), (77, '  frame_height: 8.0'), (78, '  # These determine the constants SMALL_BUFF, MED_SMALL_BUFF, etc., useful'), (79, '  # for nudging things around and having default spacing values'), (80, '  small_buff: 0.1'), (81, '  med_small_buff: 0.25'), (82, '  med_large_buff: 0.5'), (83, '  large_buff: 1.0'), (84, '  # Default buffers used in Mobject.next_to or Mobject.to_edge'), (85, '  default_mobject_to_edge_buff: 0.5'), (86, '  default_mobject_to_mobject_buff: 0.25'), (87, 'vmobject:'), (88, '  # Default stroke width for VMobject'), (89, '  default_stroke_width: 4.0'), (90, 'colors:'), (91, '  blue_e: ""#1C758A""'), (92, '  blue_d: ""#29ABCA""'), (93, '  blue_c: ""#58C4DD""'), (94, '  blue_b: ""#9CDCEB""'), (95, '  blue_a: ""#C7E9F1""'), (96, '  teal_e: ""#49A88F""'), (97, '  teal_d: ""#55C1A7""'), (98, '  teal_c: ""#5CD0B3""'), (99, '  teal_b: ""#76DDC0""'), (100, '  teal_a: ""#ACEAD7""'), (101, '  green_e: ""#699C52""'), (102, '  green_d: ""#77B05D""'), (103, '  green_c: ""#83C167""'), (104, '  green_b: ""#A6CF8C""'), (105, '  green_a: ""#C9E2AE""'), (106, '  yellow_e: ""#E8C11C""'), (107, '  yellow_d: ""#F4D345""'), (108, '  yellow_c: ""#FFFF00""'), (109, '  yellow_b: ""#FFEA94""'), (110, '  yellow_a: ""#FFF1B6""'), (111, '  gold_e: ""#C78D46""'), (112, '  gold_d: ""#E1A158""'), (113, '  gold_c: ""#F0AC5F""'), (114, '  gold_b: ""#F9B775""'), (115, '  gold_a: ""#F7C797""'), (116, '  red_e: ""#CF5044""'), (117, '  red_d: ""#E65A4C""'), (118, '  red_c: ""#FC6255""'), (119, '  red_b: ""#FF8080""'), (120, '  red_a: ""#F7A1A3""'), (121, '  maroon_e: ""#94424F""'), (122, '  maroon_d: ""#A24D61""'), (123, '  maroon_c: ""#C55F73""'), (124, '  maroon_b: ""#EC92AB""'), (125, '  maroon_a: ""#ECABC1""'), (126, '  purple_e: ""#644172""'), (127, '  purple_d: ""#715582""'), (128, '  purple_c: ""#9A72AC""'), (129, '  purple_b: ""#B189C6""'), (130, '  purple_a: ""#CAA3E8""'), (131, '  grey_e: ""#222222""'), (132, '  grey_d: ""#444444""'), (133, '  grey_c: ""#888888""'), (134, '  grey_b: ""#BBBBBB""'), (135, '  grey_a: ""#DDDDDD""'), (136, '  white: ""#FFFFFF""'), (137, '  black: ""#000000""'), (138, '  grey_brown: ""#736357""'), (139, '  dark_brown: ""#8B4513""'), (140, '  light_brown: ""#CD853F""'), (141, '  pink: ""#D147BD""'), (142, '  light_pink: ""#DC75CD""'), (143, '  green_screen: ""#00FF00""'), (144, '  orange: ""#FF862F""'), (145, '# How long does a scene pause on Scene.wait calls'), (146, 'default_wait_time: 1.0'), (147, '# What command to use for ffmpeg'), (148, 'ffmpeg_bin: ""ffmpeg""')]",[],No
manimlib/constants.py,manimlib/constants.py,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,2c43d293a586201b1d706d5a4e9695fa42f2bc98,Make default_wait_time a piece of scene configuration,[],"[(37, '# In seconds'), (38, 'DEFAULT_WAIT_TIME: float = GLOBAL_CONFIG[""default_wait_time""]'), (39, ''), (40, '')]",No
manimlib/default_config.yml,manimlib/default_config.yml,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,2c43d293a586201b1d706d5a4e9695fa42f2bc98,Make default_wait_time a piece of scene configuration,"[(61, '  # How long does a scene pause on Scene.wait calls'), (62, '  default_wait_time: 1.0')]","[(145, '# How long does a scene pause on Scene.wait calls'), (146, 'default_wait_time: 1.0')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,2c43d293a586201b1d706d5a4e9695fa42f2bc98,Make default_wait_time a piece of scene configuration,"[(82, '        default_wait_time: float = 1.0,'), (88, '        self.show_animation_progress = show_animation_progress'), (91, '        self.default_wait_time = default_wait_time'), (597, '        duration: Optional[float] = None,'), (602, '        if duration is None:'), (603, '            duration = self.default_wait_time')]","[(21, 'from manimlib.constants import DEFAULT_WAIT_TIME'), (90, '        self.show_animation_progress = show_animation_progress'), (596, '        duration: float = DEFAULT_WAIT_TIME,')]",No
docs/source/documentation/constants.rst,docs/source/documentation/constants.rst,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","[(33, '    DEFAULT_MOBJECT_TO_EDGE_BUFF = MED_LARGE_BUFF    # Distance between object and edge'), (34, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFF = MED_SMALL_BUFF # Distance between objects')]","[(33, '    DEFAULT_MOBJECT_TO_EDGE_BUFFER = MED_LARGE_BUFF    # Distance between object and edge'), (34, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFFER = MED_SMALL_BUFF # Distance between objects')]",No
manimlib/constants.py,manimlib/constants.py,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","[(33, 'DEFAULT_MOBJECT_TO_EDGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (34, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]')]","[(33, 'DEFAULT_MOBJECT_TO_EDGE_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (34, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFFER: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","[(15, 'from manimlib.constants import DEFAULT_MOBJECT_TO_EDGE_BUFF'), (16, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFF'), (1058, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFF'), (1074, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFF'), (1081, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFF'), (1089, '        buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFF,'), (1120, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_EDGE_BUFF)')]","[(15, 'from manimlib.constants import DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (16, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFFER'), (1058, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (1074, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (1081, '        buff: float = DEFAULT_MOBJECT_TO_EDGE_BUFFER'), (1089, '        buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFFER,'), (1120, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_EDGE_BUFFER)')]",No
manimlib/mobject/svg/brace.py,manimlib/mobject/svg/brace.py,d5c36de3c59d77fd446355bd402fab61352ff6cd,c9b6ee57a83bc0d67f14de35318ba08cac4cf133,"DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF

And likewise DEFAULT_MOBJECT_TO_MOBJECT_BUFFER -> DEFAULT_MOBJECT_TO_MOBJECT_BUFF","[(8, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFF, SMALL_BUFF'), (82, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_MOBJECT_BUFF)'), (119, '        label_buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFF,')]","[(8, 'from manimlib.constants import DEFAULT_MOBJECT_TO_MOBJECT_BUFFER, SMALL_BUFF'), (82, '            buff = kwargs.get(""buff"", DEFAULT_MOBJECT_TO_MOBJECT_BUFFER)'), (119, '        label_buff: float = DEFAULT_MOBJECT_TO_MOBJECT_BUFFER,')]",No
manimlib/constants.py,manimlib/constants.py,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,d5c36de3c59d77fd446355bd402fab61352ff6cd,Make ffmpeg_bin specification a piece of file_writer_config,[],"[(69, 'FFMPEG_BIN: str = GLOBAL_CONFIG[""ffmpeg_bin""]'), (70, '')]",No
manimlib/default_config.yml,manimlib/default_config.yml,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,d5c36de3c59d77fd446355bd402fab61352ff6cd,Make ffmpeg_bin specification a piece of file_writer_config,"[(52, '  # What command to use for ffmpeg'), (53, '  ffmpeg_bin: ""ffmpeg""'), (54, '  # Parameters to pass into ffmpeg')]","[(147, '# What command to use for ffmpeg'), (148, 'ffmpeg_bin: ""ffmpeg""')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,d5c36de3c59d77fd446355bd402fab61352ff6cd,Make ffmpeg_bin specification a piece of file_writer_config,"[(51, '        # Name of the binary used for ffmpeg'), (52, '        ffmpeg_bin: str = ""ffmpeg"",'), (74, '        self.ffmpeg_bin = ffmpeg_bin'), (241, '            self.ffmpeg_bin,'), (363, '            self.ffmpeg_bin,'), (390, '            self.ffmpeg_bin,')]","[(14, 'from manimlib.constants import FFMPEG_BIN'), (239, '            FFMPEG_BIN,'), (361, '            FFMPEG_BIN,'), (388, '            FFMPEG_BIN,')]",No
manimlib/constants.py,manimlib/constants.py,7d3758c44caf789d4d56072e4c2f8d212318ff15,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,Move joint_type_map out of constants to VMobject,"[(62, '# Angles')]","[(69, 'JOINT_TYPE_MAP: dict = {'), (70, '    ""no_joint"": 0,'), (71, '    ""auto"": 1,'), (72, '    ""bevel"": 2,'), (73, '    ""miter"": 3,'), (74, '}'), (75, '')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,7d3758c44caf789d4d56072e4c2f8d212318ff15,f9a44c9975c454814d2f5cbcd55f1fbcc9048840,Move joint_type_map out of constants to VMobject,"[(74, '    joint_type_map: dict = {'), (75, '        ""no_joint"": 0,'), (76, '        ""auto"": 1,'), (77, '        ""bevel"": 2,'), (78, '        ""miter"": 3,'), (79, '    }'), (131, '            joint_type=self.joint_type_map[self.joint_type],'), (414, '            mob.uniforms[""joint_type""] = self.joint_type_map[joint_type]')]","[(11, 'from manimlib.constants import JOINT_TYPE_MAP'), (126, '            joint_type=JOINT_TYPE_MAP[self.joint_type],'), (409, '            mob.uniforms[""joint_type""] = JOINT_TYPE_MAP[joint_type]')]",No
manimlib/constants.py,manimlib/constants.py,a03accff9c984a81fd4ba92335a121d76a766aae,7d3758c44caf789d4d56072e4c2f8d212318ff15,Rename local colors variable in constants.py,"[(86, 'named_colors = GLOBAL_CONFIG[""colors""]'), (87, ''), (88, 'BLUE_E: ManimColor = named_colors[""blue_e""]'), (89, 'BLUE_D: ManimColor = named_colors[""blue_d""]'), (90, 'BLUE_C: ManimColor = named_colors[""blue_c""]'), (91, 'BLUE_B: ManimColor = named_colors[""blue_b""]'), (92, 'BLUE_A: ManimColor = named_colors[""blue_a""]'), (93, 'TEAL_E: ManimColor = named_colors[""teal_e""]'), (94, 'TEAL_D: ManimColor = named_colors[""teal_d""]'), (95, 'TEAL_C: ManimColor = named_colors[""teal_c""]'), (96, 'TEAL_B: ManimColor = named_colors[""teal_b""]'), (97, 'TEAL_A: ManimColor = named_colors[""teal_a""]'), (98, 'GREEN_E: ManimColor = named_colors[""green_e""]'), (99, 'GREEN_D: ManimColor = named_colors[""green_d""]'), (100, 'GREEN_C: ManimColor = named_colors[""green_c""]'), (101, 'GREEN_B: ManimColor = named_colors[""green_b""]'), (102, 'GREEN_A: ManimColor = named_colors[""green_a""]'), (103, 'YELLOW_E: ManimColor = named_colors[""yellow_e""]'), (104, 'YELLOW_D: ManimColor = named_colors[""yellow_d""]'), (105, 'YELLOW_C: ManimColor = named_colors[""yellow_c""]'), (106, 'YELLOW_B: ManimColor = named_colors[""yellow_b""]'), (107, 'YELLOW_A: ManimColor = named_colors[""yellow_a""]'), (108, 'GOLD_E: ManimColor = named_colors[""gold_e""]'), (109, 'GOLD_D: ManimColor = named_colors[""gold_d""]'), (110, 'GOLD_C: ManimColor = named_colors[""gold_c""]'), (111, 'GOLD_B: ManimColor = named_colors[""gold_b""]'), (112, 'GOLD_A: ManimColor = named_colors[""gold_a""]'), (113, 'RED_E: ManimColor = named_colors[""red_e""]'), (114, 'RED_D: ManimColor = named_colors[""red_d""]'), (115, 'RED_C: ManimColor = named_colors[""red_c""]'), (116, 'RED_B: ManimColor = named_colors[""red_b""]'), (117, 'RED_A: ManimColor = named_colors[""red_a""]'), (118, 'MAROON_E: ManimColor = named_colors[""maroon_e""]'), (119, 'MAROON_D: ManimColor = named_colors[""maroon_d""]'), (120, 'MAROON_C: ManimColor = named_colors[""maroon_c""]'), (121, 'MAROON_B: ManimColor = named_colors[""maroon_b""]'), (122, 'MAROON_A: ManimColor = named_colors[""maroon_a""]'), (123, 'PURPLE_E: ManimColor = named_colors[""purple_e""]'), (124, 'PURPLE_D: ManimColor = named_colors[""purple_d""]'), (125, 'PURPLE_C: ManimColor = named_colors[""purple_c""]'), (126, 'PURPLE_B: ManimColor = named_colors[""purple_b""]'), (127, 'PURPLE_A: ManimColor = named_colors[""purple_a""]'), (128, 'GREY_E: ManimColor = named_colors[""grey_e""]'), (129, 'GREY_D: ManimColor = named_colors[""grey_d""]'), (130, 'GREY_C: ManimColor = named_colors[""grey_c""]'), (131, 'GREY_B: ManimColor = named_colors[""grey_b""]'), (132, 'GREY_A: ManimColor = named_colors[""grey_a""]'), (133, 'WHITE: ManimColor = named_colors[""white""]'), (134, 'BLACK: ManimColor = named_colors[""black""]'), (135, 'GREY_BROWN: ManimColor = named_colors[""grey_brown""]'), (136, 'DARK_BROWN: ManimColor = named_colors[""dark_brown""]'), (137, 'LIGHT_BROWN: ManimColor = named_colors[""light_brown""]'), (138, 'PINK: ManimColor = named_colors[""pink""]'), (139, 'LIGHT_PINK: ManimColor = named_colors[""light_pink""]'), (140, 'GREEN_SCREEN: ManimColor = named_colors[""green_screen""]'), (141, 'ORANGE: ManimColor = named_colors[""orange""]'), (142, ''), (143, 'MANIM_COLORS: List[ManimColor] = list(named_colors.values())')]","[(86, 'colors = GLOBAL_CONFIG[""colors""]'), (87, ''), (88, 'BLUE_E: ManimColor = colors[""blue_e""]'), (89, 'BLUE_D: ManimColor = colors[""blue_d""]'), (90, 'BLUE_C: ManimColor = colors[""blue_c""]'), (91, 'BLUE_B: ManimColor = colors[""blue_b""]'), (92, 'BLUE_A: ManimColor = colors[""blue_a""]'), (93, 'TEAL_E: ManimColor = colors[""teal_e""]'), (94, 'TEAL_D: ManimColor = colors[""teal_d""]'), (95, 'TEAL_C: ManimColor = colors[""teal_c""]'), (96, 'TEAL_B: ManimColor = colors[""teal_b""]'), (97, 'TEAL_A: ManimColor = colors[""teal_a""]'), (98, 'GREEN_E: ManimColor = colors[""green_e""]'), (99, 'GREEN_D: ManimColor = colors[""green_d""]'), (100, 'GREEN_C: ManimColor = colors[""green_c""]'), (101, 'GREEN_B: ManimColor = colors[""green_b""]'), (102, 'GREEN_A: ManimColor = colors[""green_a""]'), (103, 'YELLOW_E: ManimColor = colors[""yellow_e""]'), (104, 'YELLOW_D: ManimColor = colors[""yellow_d""]'), (105, 'YELLOW_C: ManimColor = colors[""yellow_c""]'), (106, 'YELLOW_B: ManimColor = colors[""yellow_b""]'), (107, 'YELLOW_A: ManimColor = colors[""yellow_a""]'), (108, 'GOLD_E: ManimColor = colors[""gold_e""]'), (109, 'GOLD_D: ManimColor = colors[""gold_d""]'), (110, 'GOLD_C: ManimColor = colors[""gold_c""]'), (111, 'GOLD_B: ManimColor = colors[""gold_b""]'), (112, 'GOLD_A: ManimColor = colors[""gold_a""]'), (113, 'RED_E: ManimColor = colors[""red_e""]'), (114, 'RED_D: ManimColor = colors[""red_d""]'), (115, 'RED_C: ManimColor = colors[""red_c""]'), (116, 'RED_B: ManimColor = colors[""red_b""]'), (117, 'RED_A: ManimColor = colors[""red_a""]'), (118, 'MAROON_E: ManimColor = colors[""maroon_e""]'), (119, 'MAROON_D: ManimColor = colors[""maroon_d""]'), (120, 'MAROON_C: ManimColor = colors[""maroon_c""]'), (121, 'MAROON_B: ManimColor = colors[""maroon_b""]'), (122, 'MAROON_A: ManimColor = colors[""maroon_a""]'), (123, 'PURPLE_E: ManimColor = colors[""purple_e""]'), (124, 'PURPLE_D: ManimColor = colors[""purple_d""]'), (125, 'PURPLE_C: ManimColor = colors[""purple_c""]'), (126, 'PURPLE_B: ManimColor = colors[""purple_b""]'), (127, 'PURPLE_A: ManimColor = colors[""purple_a""]'), (128, 'GREY_E: ManimColor = colors[""grey_e""]'), (129, 'GREY_D: ManimColor = colors[""grey_d""]'), (130, 'GREY_C: ManimColor = colors[""grey_c""]'), (131, 'GREY_B: ManimColor = colors[""grey_b""]'), (132, 'GREY_A: ManimColor = colors[""grey_a""]'), (133, 'WHITE: ManimColor = colors[""white""]'), (134, 'BLACK: ManimColor = colors[""black""]'), (135, 'GREY_BROWN: ManimColor = colors[""grey_brown""]'), (136, 'DARK_BROWN: ManimColor = colors[""dark_brown""]'), (137, 'LIGHT_BROWN: ManimColor = colors[""light_brown""]'), (138, 'PINK: ManimColor = colors[""pink""]'), (139, 'LIGHT_PINK: ManimColor = colors[""light_pink""]'), (140, 'GREEN_SCREEN: ManimColor = colors[""green_screen""]'), (141, 'ORANGE: ManimColor = colors[""orange""]'), (142, ''), (143, 'MANIM_COLORS: List[ManimColor] = list(colors.values())')]",No
manimlib/constants.py,manimlib/constants.py,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,a03accff9c984a81fd4ba92335a121d76a766aae,Move key to int constants to interactive_scene.py,[],"[(78, '# For keyboard interactions'), (79, 'CTRL_SYMBOL: int = 65508'), (80, 'SHIFT_SYMBOL: int = 65505'), (81, 'COMMAND_SYMBOL: int = 65517'), (82, 'DELETE_SYMBOL: int = 65288'), (83, 'ARROW_SYMBOLS: list[int] = list(range(65361, 65365))'), (84, '')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,a03accff9c984a81fd4ba92335a121d76a766aae,Move key to int constants to interactive_scene.py,"[(51, '# For keyboard interactions'), (52, 'CTRL_SYMBOL: int = 65508'), (53, 'SHIFT_SYMBOL: int = 65505'), (54, 'DELETE_SYMBOL: int = 65288'), (55, 'ARROW_SYMBOLS: list[int] = list(range(65361, 65365))'), (56, '')]","[(10, 'from manimlib.constants import ARROW_SYMBOLS, CTRL_SYMBOL, DELETE_SYMBOL, SHIFT_SYMBOL')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,Use pyglet.window.key for key constant values,"[(52, ''), (53, 'ARROW_SYMBOLS: list[int] = ['), (54, '    PygletWindowKeys.LEFT,'), (55, '    PygletWindowKeys.UP,'), (56, '    PygletWindowKeys.RIGHT,'), (57, '    PygletWindowKeys.DOWN,'), (58, ']'), (483, '        elif symbol == PygletWindowKeys.LSHIFT:'), (497, '        elif symbol == PygletWindowKeys.BACKSPACE:'), (538, '        elif symbol == PygletWindowKeys.LSHIFT and self.window.is_key_pressed(ord(RESIZE_KEY)):'), (555, '        if self.window.is_key_pressed(PygletWindowKeys.LCTRL):'), (600, '        elif self.window.is_key_pressed(ord(SELECT_KEY)) and self.window.is_key_pressed(PygletWindowKeys.LSHIFT):')]","[(52, 'CTRL_SYMBOL: int = 65508'), (53, 'SHIFT_SYMBOL: int = 65505'), (54, 'DELETE_SYMBOL: int = 65288'), (55, 'ARROW_SYMBOLS: list[int] = list(range(65361, 65365))'), (480, '        elif symbol == SHIFT_SYMBOL:'), (494, '        elif symbol == DELETE_SYMBOL:'), (535, '        elif symbol == SHIFT_SYMBOL and self.window.is_key_pressed(ord(RESIZE_KEY)):'), (552, '        if self.window.is_key_pressed(CTRL_SYMBOL):'), (597, '        elif self.window.is_key_pressed(ord(SELECT_KEY)) and self.window.is_key_pressed(SHIFT_SYMBOL):')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,9f785a5fbaa6f22d0f9c02d0050b7e2450ea9f39,Use pyglet.window.key for key constant values,"[(848, '        elif char == "" "" or symbol == PygletWindowKeys.RIGHT:')]","[(20, 'from manimlib.constants import ARROW_SYMBOLS'), (849, '        elif char == "" "" or symbol == ARROW_SYMBOLS[2]:')]",No
manimlib/__main__.py,manimlib/__main__.py,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,[],"[(5, 'import manimlib.logger'), (56, '    if args.log_level:'), (57, '        manimlib.logger.log.setLevel(args.log_level)'), (58, '')]",No
manimlib/config.py,manimlib/config.py,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,"[(40, '    log.setLevel(args.log_level or config[""log_level""])'), (41, '')]",[],No
manimlib/default_config.yml,manimlib/default_config.yml,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,"[(150, '# Can be DEBUG / INFO / WARNING / ERROR / CRITICAL'), (151, 'log_level: ""INFO""')]",[],No
manimlib/logger.py,manimlib/logger.py,8744c878f4c46fc141a4c4bea888341dfba004e9,9fcdd0de5f452eb9d8b98c146ef1e4b08cb27823,Make log_level configurable in default_config,[],"[(14, 'log.setLevel(""WARNING"")')]",No
manimlib/camera/camera.py,manimlib/camera/camera.py,9ac16ab72258c2a7abd26de75e4dd909ce87d43a,8744c878f4c46fc141a4c4bea888341dfba004e9,"Remove DEFAULT_FPS constant

It's a bit silly to have it's valued defined by camera_config, when it's only function is to be a default value for Camera's configuration","[(33, '        fps: int = 30,')]","[(10, 'from manimlib.constants import DEFAULT_FPS'), (34, '        fps: int = DEFAULT_FPS,')]",No
manimlib/constants.py,manimlib/constants.py,9ac16ab72258c2a7abd26de75e4dd909ce87d43a,8744c878f4c46fc141a4c4bea888341dfba004e9,"Remove DEFAULT_FPS constant

It's a bit silly to have it's valued defined by camera_config, when it's only function is to be a default value for Camera's configuration",[],"[(16, 'DEFAULT_FPS: int = GLOBAL_CONFIG[""camera""][""fps""]')]",No
manimlib/config.py,manimlib/config.py,2d7b9d579a72442ffdcf1afb93d3b489a9037111,9ac16ab72258c2a7abd26de75e4dd909ce87d43a,Move comment,"[(318, '# Helpers for the functions above'), (319, ''), (320, '')]","[(416, ''), (417, '# Helpers for the functions above')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,5fcb668f07fa8ddecf346bb1832da18cb4fbf7f2,17f37ff02a4b89c04adc2179ab46e0efdd48ba65,fixing `get_ipython` import error,"[(9, 'from IPython.core.getipython import get_ipython')]","[(4, 'import os')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,5fcb668f07fa8ddecf346bb1832da18cb4fbf7f2,17f37ff02a4b89c04adc2179ab46e0efdd48ba65,fixing `get_ipython` import error,"[(3, 'import os'), (5, 'from IPython.core.getipython import get_ipython')]","[(3, 'import re')]",No
setup.cfg,setup.cfg,76afc42e9a72fc25245fc54e7c3ba09b5f87f556,5fcb668f07fa8ddecf346bb1832da18cb4fbf7f2,adding required packages to setup.cfg file,"[(32, '    appdirs'), (34, '    diskcache'), (39, '    mapbox-earcut'), (56, '    tempfile')]","[(36, '    mapbox-earcut')]",No
manimlib/config.py,manimlib/config.py,37a05094ea446ef2c9fc423e5c63eb5f2b1dc707,2d7b9d579a72442ffdcf1afb93d3b489a9037111,Small comment changes,"[(79, '            help=""Render at 480p"",'), (84, '            help=""Render at 720p"",'), (168, '            metavar=""LINE_NUMBER"",'), (169, '            help=""Adds a breakpoint at the inputted file dropping into an "" + \\'), (170, '                 ""interactive iPython session at that point of the code.""')]","[(79, '            help=""Render at a low quality (for faster rendering)"",'), (84, '            help=""Render at a medium quality"",'), (168, '            help=""Creates a new file where the line `self.embed` is inserted "" + \\'), (169, '                 ""at the corresponding line number""')]",No
manimlib/default_config.yml,manimlib/default_config.yml,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,37a05094ea446ef2c9fc423e5c63eb5f2b1dc707,Update how tex configuration default is passed in,"[(59, '# Most of the scene configuration will come from CLI arguments,'), (60, '# but defaults can be set here'), (66, 'vmobject:'), (67, '  default_stroke_width: 4.0'), (68, 'tex:'), (69, '  # See tex_templates.yml'), (70, '  template: ""default""'), (71, 'style:  # TODO, change to `text`')]","[(60, '  # Most of the scene configuration will come from CLI arguments,'), (61, '  # but defaults can be set here'), (66, 'style:'), (67, '  tex_template: ""default""'), (92, 'vmobject:'), (93, '  # Default stroke width for VMobject'), (94, '  default_stroke_width: 4.0')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,37a05094ea446ef2c9fc423e5c63eb5f2b1dc707,Update how tex configuration default is passed in,"[(33, '@lru_cache'), (34, 'def get_tex_config(template: str = """") -> dict[str, str]:'), (43, '    template = template or get_global_config()[""tex""][""template""]'), (44, '    template_config = get_tex_template_config(template)'), (45, '    return {'), (46, '        ""template"": template,'), (47, '        ""compiler"": template_config[""compiler""],'), (48, '        ""preamble"": template_config[""preamble""]'), (49, '    }'), (92, '    tex_config = get_tex_config(template)')]","[(19, 'SAVED_TEX_CONFIG = {}'), (20, ''), (21, ''), (36, 'def get_tex_config() -> dict[str, str]:'), (45, '    # Only load once, then save thereafter'), (46, '    if not SAVED_TEX_CONFIG:'), (47, '        template_name = get_global_config()[""style""][""tex_template""]'), (48, '        template_config = get_tex_template_config(template_name)'), (49, '        SAVED_TEX_CONFIG.update({'), (50, '            ""template"": template_name,'), (51, '            ""compiler"": template_config[""compiler""],'), (52, '            ""preamble"": template_config[""preamble""]'), (53, '        })'), (54, '    return SAVED_TEX_CONFIG'), (97, '    tex_config = get_tex_config()'), (98, '    if template and template != tex_config[""template""]:'), (99, '        tex_config = get_tex_template_config(template)'), (100, '')]",No
docs/source/documentation/constants.rst,docs/source/documentation/constants.rst,1794e4d0bab7b83ca0b899f45a25bfd243033524,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,Better align docs description of configuration with the updated format,"[(11, 'These values will be determined based on the ``camera`` configuration in default_config.yml or custom_config.yml'), (12, ''), (15, '    ASPECT_RATIO'), (16, '    FRAME_HEIGHT'), (17, '    FRAME_WIDTH'), (18, '    FRAME_Y_RADIUS'), (19, '    FRAME_X_RADIUS'), (21, '    DEFAULT_PIXEL_HEIGHT'), (22, '    DEFAULT_PIXEL_WIDTH'), (23, '    DEFAULT_FPS'), (28, 'These values will be determined based on the ``size`` configuration in default_config.yml or custom_config.yml'), (33, '    SMALL_BUFF'), (34, '    MED_SMALL_BUFF'), (35, '    MED_LARGE_BUFF'), (36, '    LARGE_BUFF'), (37, ''), (38, '    DEFAULT_MOBJECT_TO_EDGE_BUFF'), (39, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFF'), (92, 'Color constants are determined based on the ``color`` configuration in default_config.yml or custom_config.yml'), (93, '')]","[(13, '    ASPECT_RATIO = 16.0 / 9.0'), (14, '    FRAME_HEIGHT = 8.0'), (15, '    FRAME_WIDTH = FRAME_HEIGHT * ASPECT_RATIO'), (16, '    FRAME_Y_RADIUS = FRAME_HEIGHT / 2'), (17, '    FRAME_X_RADIUS = FRAME_WIDTH / 2'), (19, '    DEFAULT_PIXEL_HEIGHT = 1080'), (20, '    DEFAULT_PIXEL_WIDTH = 1920'), (21, '    DEFAULT_FPS = 30'), (26, '.. code-block:: python'), (27, ''), (28, '    SMALL_BUFF = 0.1'), (29, '    MED_SMALL_BUFF = 0.25'), (30, '    MED_LARGE_BUFF = 0.5'), (31, '    LARGE_BUFF = 1'), (33, '    DEFAULT_MOBJECT_TO_EDGE_BUFF = MED_LARGE_BUFF    # Distance between object and edge'), (34, '    DEFAULT_MOBJECT_TO_MOBJECT_BUFF = MED_SMALL_BUFF # Distance between objects'), (35, ''), (36, 'Run times'), (37, '---------'), (41, '    DEFAULT_POINTWISE_FUNCTION_RUN_TIME = 3.0'), (42, '    DEFAULT_WAIT_TIME = 1.0'), (92, 'Stroke width'), (93, '------------'), (94, ''), (95, '.. code-block:: python'), (96, ''), (97, '    DEFAULT_STROKE_WIDTH = 4'), (98, '')]",No
docs/source/documentation/custom_config.rst,docs/source/documentation/custom_config.rst,1794e4d0bab7b83ca0b899f45a25bfd243033524,4d7f6093b4c5fe09c3639218196f7a4c9cff5cf0,Better align docs description of configuration with the updated format,"[(12, '- ``base``'), (13, '    The root directory that will hold files, such as video files manim renders,'), (14, '    or image resources that it pulls from'), (15, ''), (73, '- ``cache``'), (78, '``window``'), (79, '----------'), (81, '- ``position_string``'), (82, '    The relative position of the playback window on the display (two characters,'), (83, '    the first character means upper(U) / middle(O) / lower(D), the second character'), (84, '    means left(L) / middle(O) / right(R)).'), (86, '- ``monitor_index``'), (87, '    If using multiple monitors, which one should the window show up in?'), (89, '- ``full_screen``'), (90, '    Should the preview window be full screen. If not, it defaults to half the screen'), (92, '- ``position``'), (93, '    This is an option to more manually set the default window position, in pixel'), (94, '    coordinates, e.g. (500, 300)'), (96, '- ``size``'), (97, '    Option to more manually set the default window size, in pixel coordinates,'), (98, '    e.g. (1920, 1080)'), (101, '``camera``'), (102, '----------'), (104, '- ``resolution``'), (105, '    Resolution to render at, e.g. (1920, 1080)'), (107, '- ``background_color``'), (108, '    Default background color of scenes'), (110, '- ``fps``'), (111, '    Framerate'), (113, '- ``background_opacity``'), (114, '    Opacity of the background'), (117, '``file_writer``'), (119, 'Configuration specifying how files are written, e.g. what ffmpeg parameters to use'), (122, '``scene``'), (123, '-------'), (124, 'Some default configuration for the Scene class'), (127, '``text``'), (128, '-------'), (130, '- ``font``'), (131, '    Default font of Text'), (133, '- ``text_alignment``'), (134, '    Default text alignment for LaTeX'), (136, '``tex``'), (137, '-------'), (139, '- ``template``'), (140, '    Which configuration from the manimlib/tex_template.yml file should be used'), (141, '    to determine the latex compiler to use, and what preamble to include for'), (142, '    rendering tex.'), (145, '``sizes``'), (146, '---------'), (148, 'Valuess for various constants used in manimm to specify distances, like the height'), (149, 'of the frame, the value of SMALL_BUFF, LARGE_BUFF, etc.'), (152, '``colors``'), (153, '----------'), (154, ''), (155, 'Color pallete to use, determining values of color constants like RED, BLUE_E, TEAL, etc.'), (156, ''), (157, '``loglevel``'), (158, '------------'), (159, ''), (160, 'Can be DEBUG / INFO / WARNING / ERROR / CRITICAL'), (161, ''), (162, ''), (163, '``universal_import_line``'), (164, '-------------------------'), (165, ''), (166, 'Import line that need to execute when entering interactive mode directly.'), (167, ''), (168, ''), (169, '``ignore_manimlib_modules_on_reload``'), (170, '-------------------------------------'), (171, ''), (172, 'When calling ``reload`` during the interactive mode, imported modules are'), (173, 'by default reloaded, in case the user writing a scene which pulls from various'), (174, 'other files they have written. By default, modules withinn the manim library will'), (175, 'be ignored, but one developing manim may want to set this to be False so that'), (176, 'edits to the library are reloaded as well.')]","[(69, '- ``temporary_storage``'), (73, '``tex``'), (74, '-------'), (76, '- ``executable``'), (77, '    The executable program used to compile LaTeX (``latex`` or ``xelatex -no-pdf``'), (78, '    is recommended)'), (80, '- ``template_file``'), (81, '    LaTeX template used, in ``manimlib/tex_templates``'), (83, '- ``intermediate_filetype``'), (84, '    The type of intermediate vector file generated after compilation (``dvi`` if'), (85, '    ``latex`` is used, ``xdv`` if ``xelatex`` is used)'), (86, ''), (87, '- ``text_to_replace``'), (88, ""    The text to be replaced in the template (needn't to change)""), (90, '``universal_import_line``'), (91, '-------------------------'), (93, 'Import line that need to execute when entering interactive mode directly.'), (95, '``style``'), (96, '---------'), (98, '- ``font``'), (99, '    Default font of Text'), (101, '- ``text_alignment``'), (102, '    Default text alignment for LaTeX'), (104, '- ``background_color``'), (105, '    Default background color'), (107, '``window_position``'), (108, '-------------------'), (110, 'The relative position of the playback window on the display (two characters,'), (111, 'the first character means upper(U) / middle(O) / lower(D), the second character'), (112, 'means left(L) / middle(O) / right(R)).'), (114, '``window_monitor``'), (115, '------------------'), (117, 'The number of the monitor you want the preview window to pop up on. (default is 0)'), (119, '``full_screen``'), (122, 'Whether open the window in full screen. (default is false)'), (124, '``break_into_partial_movies``'), (125, '-----------------------------'), (127, 'If this is set to ``True``, then many small files will be written corresponding'), (128, 'to each ``Scene.play`` and ``Scene.wait`` call, and these files will then be combined'), (129, 'to form the full scene.'), (131, 'Sometimes video-editing is made easier when working with the broken up scene, which'), (132, 'effectively has cuts at all the places you might want.'), (134, '``camera_resolutions``'), (135, '----------------------'), (137, 'Export resolutions'), (139, '- ``low``'), (140, '    Low resolutions (default is 480p)'), (142, '- ``medium``'), (143, '    Medium resolutions (default is 720p)'), (145, '- ``high``'), (146, '    High resolutions (default is 1080p)'), (148, '- ``ultra_high``'), (149, '    Ultra high resolutions (default is 4K)'), (151, '- ``default_resolutions``'), (152, '    Default resolutions (one of the above four, default is high)'), (154, '``fps``'), (155, '-------'), (157, 'Export frame rate. (default is 30)')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,8246d0da5daf8f3d0bfab05791a0fd7732fd2c8d,1794e4d0bab7b83ca0b899f45a25bfd243033524,Fix bug with xelatex rendering,"[(112, '        Path(tex_path).write_text(full_tex)'), (117, '                compiler,'), (118, '                ""-no-pdf"",'), (121, '                f""-output-directory={temp_dir}"",'), (123, '            ],')]","[(96, '        program = ""latex""'), (99, '        program = ""xelatex -no-pdf""'), (114, '        with open(tex_path, ""w"", encoding=""utf-8"") as tex_file:'), (115, '            tex_file.write(full_tex)'), (120, '                program.split()[0],  # Split for xelatex case'), (123, '                ""-output-directory="" + temp_dir,'), (125, '            ] + ([""--no-pdf""] if compiler == ""xelatex"" else []),')]",No
manimlib/default_config.yml,manimlib/default_config.yml,4a6a12573998be1f50fe3d4c7f55a77b14f096dd,8246d0da5daf8f3d0bfab05791a0fd7732fd2c8d,"Change ""style"" in default config to ""text""","[(71, 'text:'), (73, '  alignment: ""LEFT""')]","[(71, 'style:  # TODO, change to `text`'), (73, '  text_alignment: ""LEFT""')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,4a6a12573998be1f50fe3d4c7f55a77b14f096dd,8246d0da5daf8f3d0bfab05791a0fd7732fd2c8d,"Change ""style"" in default config to ""text""","[(160, '        text_config = get_global_config()[""text""]'), (165, '        self.alignment = alignment or text_config[""alignment""]'), (167, '        self.font = font or text_config[""font""]')]","[(160, '        default_style = get_global_config()[""style""]'), (165, '        self.alignment = alignment or default_style[""text_alignment""]'), (167, '        self.font = font or default_style[""font""]')]",No
manimlib/window.py,manimlib/window.py,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,4a6a12573998be1f50fe3d4c7f55a77b14f096dd,Focus and sync window when initialized for a scene,"[(72, '        self.focus()'), (73, ''), (109, '        # This line seems to resync the viewport'), (110, '        self.on_resize(*self.size)')]","[(11, 'from manimlib.config import get_global_config')]",No
manimlib/__main__.py,manimlib/__main__.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(3, 'from manimlib.config import manim_config'), (22, '    # Create a new dict to be able to upate without'), (23, '    # altering global configuration'), (24, '    scene_config = dict(manim_config.scene)'), (25, '    run_config = manim_config.run'), (27, '    if run_config.show_in_window:'), (29, '        window = Window(**manim_config.window)')]","[(3, 'from manimlib.config import get_global_config'), (22, '    global_config = get_global_config()'), (23, '    scene_config = global_config[""scene""]'), (24, '    run_config = global_config[""run""]'), (26, '    if run_config[""show_in_window""]:'), (28, '        window = Window(**global_config[""window""])')]",No
manimlib/config.py,manimlib/config.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(11, 'from addict import Dict'), (23, 'def initialize_manim_config() -> Dict:'), (50, '    return Dict(config)'), (371, 'def get_output_directory(args: Namespace, config: dict) -> str:'), (372, '    dir_config = config[""directories""]'), (387, 'manim_config: Dict = initialize_manim_config()'), (395, '    return manim_config.window'), (400, '    return manim_config.camera'), (405, '    return manim_config.file_writer'), (410, '    return manim_config.scene'), (414, '    return manim_config.run')]","[(22, 'def initialize_global_config():'), (49, '    return config'), (370, 'def get_output_directory(args: Namespace, global_config: dict) -> str:'), (371, '    dir_config = global_config[""directories""]'), (386, 'GLOBAL_CONFIG = initialize_global_config()'), (387, ''), (388, ''), (389, 'def get_global_config():'), (390, '    global GLOBAL_CONFIG'), (391, '    return GLOBAL_CONFIG'), (399, '    return get_global_config()[""window""]'), (404, '    return get_global_config()[""camera""]'), (409, '    return get_global_config()[""file_writer""]'), (414, '    return get_global_config()[""scene""]'), (418, '    return get_global_config()[""run""]')]",No
manimlib/constants.py,manimlib/constants.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(10, 'from manimlib.config import manim_config'), (13, 'DEFAULT_RESOLUTION: tuple[int, int] = manim_config.camera.resolution'), (19, 'FRAME_HEIGHT: float = manim_config.sizes.frame_height'), (27, 'SMALL_BUFF: float = manim_config.sizes.small_buff'), (28, 'MED_SMALL_BUFF: float = manim_config.sizes.med_small_buff'), (29, 'MED_LARGE_BUFF: float = manim_config.sizes.med_large_buff'), (30, 'LARGE_BUFF: float = manim_config.sizes.large_buff'), (32, 'DEFAULT_MOBJECT_TO_EDGE_BUFF: float = manim_config.sizes.default_mobject_to_edge_buff'), (33, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFF: float = manim_config.sizes.default_mobject_to_mobject_buff'), (75, 'DEFAULT_STROKE_WIDTH: float = manim_config.vmobject.default_stroke_width'), (78, 'BLUE_E: ManimColor = manim_config.colors.blue_e'), (79, 'BLUE_D: ManimColor = manim_config.colors.blue_d'), (80, 'BLUE_C: ManimColor = manim_config.colors.blue_c'), (81, 'BLUE_B: ManimColor = manim_config.colors.blue_b'), (82, 'BLUE_A: ManimColor = manim_config.colors.blue_a'), (83, 'TEAL_E: ManimColor = manim_config.colors.teal_e'), (84, 'TEAL_D: ManimColor = manim_config.colors.teal_d'), (85, 'TEAL_C: ManimColor = manim_config.colors.teal_c'), (86, 'TEAL_B: ManimColor = manim_config.colors.teal_b'), (87, 'TEAL_A: ManimColor = manim_config.colors.teal_a'), (88, 'GREEN_E: ManimColor = manim_config.colors.green_e'), (89, 'GREEN_D: ManimColor = manim_config.colors.green_d'), (90, 'GREEN_C: ManimColor = manim_config.colors.green_c'), (91, 'GREEN_B: ManimColor = manim_config.colors.green_b'), (92, 'GREEN_A: ManimColor = manim_config.colors.green_a'), (93, 'YELLOW_E: ManimColor = manim_config.colors.yellow_e'), (94, 'YELLOW_D: ManimColor = manim_config.colors.yellow_d'), (95, 'YELLOW_C: ManimColor = manim_config.colors.yellow_c'), (96, 'YELLOW_B: ManimColor = manim_config.colors.yellow_b'), (97, 'YELLOW_A: ManimColor = manim_config.colors.yellow_a'), (98, 'GOLD_E: ManimColor = manim_config.colors.gold_e'), (99, 'GOLD_D: ManimColor = manim_config.colors.gold_d'), (100, 'GOLD_C: ManimColor = manim_config.colors.gold_c'), (101, 'GOLD_B: ManimColor = manim_config.colors.gold_b'), (102, 'GOLD_A: ManimColor = manim_config.colors.gold_a'), (103, 'RED_E: ManimColor = manim_config.colors.red_e'), (104, 'RED_D: ManimColor = manim_config.colors.red_d'), (105, 'RED_C: ManimColor = manim_config.colors.red_c'), (106, 'RED_B: ManimColor = manim_config.colors.red_b'), (107, 'RED_A: ManimColor = manim_config.colors.red_a'), (108, 'MAROON_E: ManimColor = manim_config.colors.maroon_e'), (109, 'MAROON_D: ManimColor = manim_config.colors.maroon_d'), (110, 'MAROON_C: ManimColor = manim_config.colors.maroon_c'), (111, 'MAROON_B: ManimColor = manim_config.colors.maroon_b'), (112, 'MAROON_A: ManimColor = manim_config.colors.maroon_a'), (113, 'PURPLE_E: ManimColor = manim_config.colors.purple_e'), (114, 'PURPLE_D: ManimColor = manim_config.colors.purple_d'), (115, 'PURPLE_C: ManimColor = manim_config.colors.purple_c'), (116, 'PURPLE_B: ManimColor = manim_config.colors.purple_b'), (117, 'PURPLE_A: ManimColor = manim_config.colors.purple_a'), (118, 'GREY_E: ManimColor = manim_config.colors.grey_e'), (119, 'GREY_D: ManimColor = manim_config.colors.grey_d'), (120, 'GREY_C: ManimColor = manim_config.colors.grey_c'), (121, 'GREY_B: ManimColor = manim_config.colors.grey_b'), (122, 'GREY_A: ManimColor = manim_config.colors.grey_a'), (123, 'WHITE: ManimColor = manim_config.colors.white'), (124, 'BLACK: ManimColor = manim_config.colors.black'), (125, 'GREY_BROWN: ManimColor = manim_config.colors.grey_brown'), (126, 'DARK_BROWN: ManimColor = manim_config.colors.dark_brown'), (127, 'LIGHT_BROWN: ManimColor = manim_config.colors.light_brown'), (128, 'PINK: ManimColor = manim_config.colors.pink'), (129, 'LIGHT_PINK: ManimColor = manim_config.colors.light_pink'), (130, 'GREEN_SCREEN: ManimColor = manim_config.colors.green_screen'), (131, 'ORANGE: ManimColor = manim_config.colors.orange'), (132, ''), (133, 'MANIM_COLORS: List[ManimColor] = list(manim_config.colors.values())')]","[(10, 'from manimlib.config import GLOBAL_CONFIG'), (13, 'DEFAULT_RESOLUTION: tuple[int, int] = GLOBAL_CONFIG[""camera""][""resolution""]'), (19, 'FRAME_HEIGHT: float = GLOBAL_CONFIG[""sizes""][""frame_height""]'), (27, 'SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""small_buff""]'), (28, 'MED_SMALL_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_small_buff""]'), (29, 'MED_LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""med_large_buff""]'), (30, 'LARGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""large_buff""]'), (32, 'DEFAULT_MOBJECT_TO_EDGE_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_edge_buff""]'), (33, 'DEFAULT_MOBJECT_TO_MOBJECT_BUFF: float = GLOBAL_CONFIG[""sizes""][""default_mobject_to_mobject_buff""]'), (75, 'DEFAULT_STROKE_WIDTH: float = GLOBAL_CONFIG[""vmobject""][""default_stroke_width""]'), (78, 'named_colors = GLOBAL_CONFIG[""colors""]'), (79, ''), (80, 'BLUE_E: ManimColor = named_colors[""blue_e""]'), (81, 'BLUE_D: ManimColor = named_colors[""blue_d""]'), (82, 'BLUE_C: ManimColor = named_colors[""blue_c""]'), (83, 'BLUE_B: ManimColor = named_colors[""blue_b""]'), (84, 'BLUE_A: ManimColor = named_colors[""blue_a""]'), (85, 'TEAL_E: ManimColor = named_colors[""teal_e""]'), (86, 'TEAL_D: ManimColor = named_colors[""teal_d""]'), (87, 'TEAL_C: ManimColor = named_colors[""teal_c""]'), (88, 'TEAL_B: ManimColor = named_colors[""teal_b""]'), (89, 'TEAL_A: ManimColor = named_colors[""teal_a""]'), (90, 'GREEN_E: ManimColor = named_colors[""green_e""]'), (91, 'GREEN_D: ManimColor = named_colors[""green_d""]'), (92, 'GREEN_C: ManimColor = named_colors[""green_c""]'), (93, 'GREEN_B: ManimColor = named_colors[""green_b""]'), (94, 'GREEN_A: ManimColor = named_colors[""green_a""]'), (95, 'YELLOW_E: ManimColor = named_colors[""yellow_e""]'), (96, 'YELLOW_D: ManimColor = named_colors[""yellow_d""]'), (97, 'YELLOW_C: ManimColor = named_colors[""yellow_c""]'), (98, 'YELLOW_B: ManimColor = named_colors[""yellow_b""]'), (99, 'YELLOW_A: ManimColor = named_colors[""yellow_a""]'), (100, 'GOLD_E: ManimColor = named_colors[""gold_e""]'), (101, 'GOLD_D: ManimColor = named_colors[""gold_d""]'), (102, 'GOLD_C: ManimColor = named_colors[""gold_c""]'), (103, 'GOLD_B: ManimColor = named_colors[""gold_b""]'), (104, 'GOLD_A: ManimColor = named_colors[""gold_a""]'), (105, 'RED_E: ManimColor = named_colors[""red_e""]'), (106, 'RED_D: ManimColor = named_colors[""red_d""]'), (107, 'RED_C: ManimColor = named_colors[""red_c""]'), (108, 'RED_B: ManimColor = named_colors[""red_b""]'), (109, 'RED_A: ManimColor = named_colors[""red_a""]'), (110, 'MAROON_E: ManimColor = named_colors[""maroon_e""]'), (111, 'MAROON_D: ManimColor = named_colors[""maroon_d""]'), (112, 'MAROON_C: ManimColor = named_colors[""maroon_c""]'), (113, 'MAROON_B: ManimColor = named_colors[""maroon_b""]'), (114, 'MAROON_A: ManimColor = named_colors[""maroon_a""]'), (115, 'PURPLE_E: ManimColor = named_colors[""purple_e""]'), (116, 'PURPLE_D: ManimColor = named_colors[""purple_d""]'), (117, 'PURPLE_C: ManimColor = named_colors[""purple_c""]'), (118, 'PURPLE_B: ManimColor = named_colors[""purple_b""]'), (119, 'PURPLE_A: ManimColor = named_colors[""purple_a""]'), (120, 'GREY_E: ManimColor = named_colors[""grey_e""]'), (121, 'GREY_D: ManimColor = named_colors[""grey_d""]'), (122, 'GREY_C: ManimColor = named_colors[""grey_c""]'), (123, 'GREY_B: ManimColor = named_colors[""grey_b""]'), (124, 'GREY_A: ManimColor = named_colors[""grey_a""]'), (125, 'WHITE: ManimColor = named_colors[""white""]'), (126, 'BLACK: ManimColor = named_colors[""black""]'), (127, 'GREY_BROWN: ManimColor = named_colors[""grey_brown""]'), (128, 'DARK_BROWN: ManimColor = named_colors[""dark_brown""]'), (129, 'LIGHT_BROWN: ManimColor = named_colors[""light_brown""]'), (130, 'PINK: ManimColor = named_colors[""pink""]'), (131, 'LIGHT_PINK: ManimColor = named_colors[""light_pink""]'), (132, 'GREEN_SCREEN: ManimColor = named_colors[""green_screen""]'), (133, 'ORANGE: ManimColor = named_colors[""orange""]'), (134, ''), (135, 'MANIM_COLORS: List[ManimColor] = list(named_colors.values())')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(9, 'from manimlib.config import manim_config'), (22, '        exec(manim_config.universal_import_line)'), (80, '    return int(total_time * manim_config.camera.fps)'), (84, '    fw_config = manim_config.file_writer'), (85, '    if fw_config.write_to_movie and run_config.prerun:'), (86, '        scene_config.file_writer_config.total_frames = compute_total_frames(scene_class, scene_config)')]","[(9, 'from manimlib.config import get_global_config'), (22, '        exec(get_global_config()[""universal_import_line""])'), (80, '    return int(total_time * get_global_config()[""camera""][""fps""])'), (84, '    fw_config = get_global_config()[""file_writer""]'), (85, '    if fw_config[""write_to_movie""] and run_config[""prerun""]:'), (86, '        scene_config[""file_writer_config""][""total_frames""] = compute_total_frames(scene_class, scene_config)')]",No
manimlib/mobject/shape_matchers.py,manimlib/mobject/shape_matchers.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(5, 'from manimlib.config import manim_config'), (60, '            color = manim_config.camera.background_color')]","[(5, 'from manimlib.config import get_global_config'), (60, ""            color = get_global_config()['style']['background_color']"")]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(15, 'from manimlib.config import manim_config'), (154, '        global_attrs: dict = {},'), (160, '        text_config = manim_config.text'), (165, '        self.alignment = alignment or text_config.alignment'), (167, '        self.font = font or text_config.font'), (178, '        self.global_attrs = global_attrs'), (365, '        global_attr_dict.update(self.global_attrs)')]","[(15, 'from manimlib.config import get_global_config'), (154, '        global_config: dict = {},'), (160, '        text_config = get_global_config()[""text""]'), (165, '        self.alignment = alignment or text_config[""alignment""]'), (167, '        self.font = font or text_config[""font""]'), (178, '        self.global_config = global_config'), (365, '        global_attr_dict.update(self.global_config)')]",No
manimlib/module_loader.py,manimlib/module_loader.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(9, 'from manimlib.config import manim_config'), (145, '        ignore_manimlib_modules = manim_config.ignore_manimlib_modules_on_reload')]","[(9, 'from manimlib.config import get_global_config'), (145, '        ignore_manimlib_modules = get_global_config()[""ignore_manimlib_modules_on_reload""]')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(10, 'from manimlib.config import manim_config'), (43, '    exception_mode = manim_config.embed.exception_mode'), (135, '    run_config = manim_config.run'), (136, '    run_config.is_reload = True'), (138, '        run_config.embed_line = embed_line')]","[(10, 'from manimlib.config import get_global_config'), (43, '    exception_mode = get_global_config()[""embed""][""exception_mode""]'), (135, '    run_config = get_global_config()[""run""]'), (136, '    run_config[""is_reload""] = True'), (138, '        run_config[""embed_line""] = embed_line')]",No
manimlib/utils/directories.py,manimlib/utils/directories.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(8, 'from manimlib.config import manim_config'), (14, '    return manim_config.directories')]","[(8, 'from manimlib.config import get_global_config'), (14, '    return get_global_config()[""directories""]')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,185f6428264f25dcdbd4faeb6062dbc75d8b1ed9,"Replace get_global_config() with manim_config, and make it an addict Dict","[(13, 'from manimlib.config import manim_config'), (43, '    template = template or manim_config.tex.template')]","[(13, 'from manimlib.config import get_global_config'), (43, '    template = template or get_global_config()[""tex""][""template""]')]",No
manimlib/config.py,manimlib/config.py,13fdc9629d62407111b12cca5023c91e83fd9078,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,No need for the shortcuts into the manim_config,"[(291, '        # Note, Scene.__init__ makes use of both manimlib.camera and'), (292, '        # manimlib.file_writer below, so the arguments here are just for')]","[(291, '        # Note, Scene.__init__ makes use of both get_camera_config() and'), (292, '        # get_file_writer_config() below, so the arguments here are just for'), (385, ''), (386, ''), (388, ''), (389, ''), (390, '# Shortcuts for retrieving portions of global configuration'), (391, ''), (392, ''), (393, 'def get_window_config() -> dict:'), (394, '    """""" Key word arguments for Window """"""'), (395, '    return manim_config.window'), (396, ''), (397, ''), (398, 'def get_camera_config() -> dict:'), (399, '    """""" Key word arguments for Camera """"""'), (400, '    return manim_config.camera'), (401, ''), (402, ''), (403, 'def get_file_writer_config() -> dict:'), (404, '    """""" Key word arguments for SceneFileWriter """"""'), (405, '    return manim_config.file_writer'), (406, ''), (407, ''), (408, 'def get_scene_config() -> dict:'), (409, '    """""" Key word arguments for Scene """"""'), (410, '    return manim_config.scene'), (411, ''), (412, ''), (413, 'def get_run_config():'), (414, '    return manim_config.run'), (415, '')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,13fdc9629d62407111b12cca5023c91e83fd9078,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,No need for the shortcuts into the manim_config,"[(18, 'from manimlib.config import manim_config'), (92, '            manim_config.camera,         # Global default'), (97, '            manim_config.file_writer,')]","[(18, 'from manimlib.config import get_camera_config'), (19, 'from manimlib.config import get_file_writer_config'), (93, '            get_camera_config(),         # Global default'), (98, '            get_file_writer_config(),')]",No
manimlib/shader_wrapper.py,manimlib/shader_wrapper.py,13fdc9629d62407111b12cca5023c91e83fd9078,fce92347fa1e847271b0ef5b68bd4c4f6dbd4234,No need for the shortcuts into the manim_config,"[(13, 'from manimlib.config import manim_config'), (413, '        size = manim_config.camera.resolution')]","[(13, 'from manimlib.config import get_camera_config'), (413, '        cam_config = get_camera_config()'), (414, '        size = cam_config[""resolution""]')]",No
manimlib/config.py,manimlib/config.py,b470a47da778fc11716e0c43305937b396edaaa9,13fdc9629d62407111b12cca5023c91e83fd9078,Remove unnecessary import,[],"[(15, 'from manimlib.utils.init_config import init_customization')]",No
requirements.txt,requirements.txt,7148d6bcedb57573504b7f390c5b01dd2a74bd0f,b470a47da778fc11716e0c43305937b396edaaa9,Add addict to requirements,"[(1, 'addict')]",[],No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,0b350e248bb58908f685189a2d3081d732a838ab,7148d6bcedb57573504b7f390c5b01dd2a74bd0f,Change global_attrs back to global_config in Text,"[(154, '        global_config: dict = {},'), (178, '        self.global_config = global_config'), (365, '        global_attr_dict.update(self.global_config)')]","[(154, '        global_attrs: dict = {},'), (178, '        self.global_attrs = global_attrs'), (365, '        global_attr_dict.update(self.global_attrs)')]",No
manimlib/__main__.py,manimlib/__main__.py,9ae5b4dee37108602b963b5f5624cec3de9b6cdf,0b350e248bb58908f685189a2d3081d732a838ab,Use addict.Dict for scene config,"[(2, 'from addict import Dict'), (3, ''), (26, '    scene_config = Dict(manim_config.scene)')]","[(24, '    scene_config = dict(manim_config.scene)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,6d753a297ae6e4c8251275757517104a6c873202,f9fc543b07cdee6367458dc450c7ec34b487cc4c,Remove stray imports,[],"[(9, 'from IPython.core.getipython import get_ipython')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,6d753a297ae6e4c8251275757517104a6c873202,f9fc543b07cdee6367458dc450c7ec34b487cc4c,Remove stray imports,[],"[(3, 'import os')]",No
setup.cfg,setup.cfg,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,6d753a297ae6e4c8251275757517104a6c873202,Update setup.cfg,"[(32, '    addict')]","[(56, '    tempfile')]",No
docs/source/getting_started/structure.rst,docs/source/getting_started/structure.rst,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.",[],"[(106, '        ├── init_config.py        # Configuration guide')]",No
manimlib/__main__.py,manimlib/__main__.py,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.",[],"[(7, 'import manimlib.utils.init_config'), (58, '    if args.config:'), (59, '        manimlib.utils.init_config.init_customization()'), (60, '        return')]",No
manimlib/config.py,manimlib/config.py,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.",[],"[(150, '        parser.add_argument('), (151, '            ""--config"",'), (152, '            action=""store_true"",'), (153, '            help=""Guide for automatic configuration"",'), (154, '        )')]",No
manimlib/default_config.yml,manimlib/default_config.yml,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.","[(1, '# This file determines the default configuration for how manim is'), (2, '# run, including names for directories it will write to, default'), (3, '# parameters for various classes, style choices, etc. To customize'), (4, '# your own, create a custom_config.yml file in whatever directory'), (5, '# you are running manim. For 3blue1brown, for instance, mind is'), (6, '# here: https://github.com/3b1b/videos/blob/master/custom_config.yml'), (7, ''), (8, '# Alternatively, you can create it whereever you like, and on running'), (9, '# manim, pass in `--config_file /path/to/custom/config/file.yml`'), (10, '')]",[],No
manimlib/utils/init_config.py,N/A,e2e785d6c99b629b63560fe145070c5726f10ae6,c6c1a49edea28dd0a46082a93b186fda64d3a7e9,"Remove init_config.py

It may become a bit unwieldy to make sure this matches the structure of default_config, given the amount of code repetition involved. It seems easier for a user to just create their own custom_config.yml file directly.",[],"[(1, 'from __future__ import annotations'), (2, ''), (3, 'import importlib'), (4, 'import inspect'), (5, 'import os'), (6, 'import yaml'), (7, ''), (8, 'from rich import box'), (9, 'from rich.console import Console'), (10, 'from rich.prompt import Confirm'), (11, 'from rich.prompt import Prompt'), (12, 'from rich.rule import Rule'), (13, 'from rich.table import Table'), (14, ''), (15, 'from typing import TYPE_CHECKING'), (16, ''), (17, 'if TYPE_CHECKING:'), (18, '    from typing import Any'), (19, ''), (20, ''), (21, 'def get_manim_dir() -> str:'), (22, '    manimlib_module = importlib.import_module(""manimlib"")'), (23, '    manimlib_dir = os.path.dirname(inspect.getabsfile(manimlib_module))'), (24, '    return os.path.abspath(os.path.join(manimlib_dir, ""..""))'), (25, ''), (26, ''), (27, 'def remove_empty_value(dictionary: dict[str, Any]) -> None:'), (28, '    for key in list(dictionary.keys()):'), (29, '        if dictionary[key] == """":'), (30, '            dictionary.pop(key)'), (31, '        elif isinstance(dictionary[key], dict):'), (32, '            remove_empty_value(dictionary[key])'), (33, ''), (34, ''), (35, 'def init_customization() -> None:'), (36, '    configuration = {'), (37, '        ""directories"": {'), (38, '            ""mirror_module_path"": False,'), (39, '            ""base"": """",'), (40, '            ""subdirs"": {'), (41, '                ""output"": ""videos"",'), (42, '                ""raster_images"": ""raster_images"",'), (43, '                ""vector_images"": ""vector_images"",'), (44, '                ""sounds"": ""sounds"",'), (45, '                ""data"": ""data"",'), (46, '                ""downloads"": ""downloads"",'), (47, '            }'), (48, '        },'), (49, '        ""universal_import_line"": ""from manimlib import *"",'), (50, '        ""style"": {'), (51, '            ""tex_template"": """",'), (52, '            ""font"": ""Consolas"",'), (53, '            ""background_color"": """",'), (54, '        },'), (55, '        ""window_position"": ""UR"",'), (56, '        ""window_monitor"": 0,'), (57, '        ""full_screen"": False,'), (58, '        ""break_into_partial_movies"": False,'), (59, '        ""camera_resolutions"": {'), (60, '            ""low"": ""854x480"",'), (61, '            ""medium"": ""1280x720"",'), (62, '            ""high"": ""1920x1080"",'), (63, '            ""4k"": ""3840x2160"",'), (64, '            ""default_resolution"": """",'), (65, '        },'), (66, '        ""fps"": 30,'), (67, '    }'), (68, ''), (69, '    console = Console()'), (70, '    console.print(Rule(""[bold]Configuration Guide[/bold]""))'), (71, '    # print(""Initialize configuration"")'), (72, '    try:'), (73, '        scope = Prompt.ask('), (74, '            ""  Select the scope of the configuration"",'), (75, '            choices=[""global"", ""local""],'), (76, '            default=""local""'), (77, '        )'), (78, ''), (79, '        console.print(""[bold]Directories:[/bold]"")'), (80, '        dir_config = configuration[""directories""]'), (81, '        dir_config[""base""] = Prompt.ask('), (82, '            ""  What base directory should manim use for reading/writing video and images? [prompt.default](optional, default is none)"",'), (83, '            default="""",'), (84, '            show_default=False'), (85, '        )'), (86, '        dir_config[""subdirs""][""output""] = Prompt.ask('), (87, '            ""  Within that base directory, which subdirectory should manim [bold]output[/bold] video and image files to?"" + \\'), (88, '            "" [prompt.default](optional, default is \\""videos\\"")"",'), (89, '            default=""videos"",'), (90, '            show_default=False'), (91, '        )'), (92, '        dir_config[""subdirs""][""raster_images""] = Prompt.ask('), (93, '            ""  Within that base directory, which subdirectory should manim look for raster images (.png, .jpg)"" + \\'), (94, '            "" [prompt.default](optional, default is \\""raster_images\\"")"",'), (95, '            default=""raster_images"",'), (96, '            show_default=False'), (97, '        )'), (98, '        dir_config[""subdirs""][""vector_images""] = Prompt.ask('), (99, '            ""  Within that base directory, which subdirectory should manim look for raster images (.svg, .xdv)"" + \\'), (100, '            "" [prompt.default](optional, default is \\""vector_images\\"")"",'), (101, '            default=""vector_images"",'), (102, '            show_default=False'), (103, '        )'), (104, '        dir_config[""subdirs""][""sounds""] = Prompt.ask('), (105, '            ""  Within that base directory, which subdirectory should manim look for sound files (.mp3, .wav)"" + \\'), (106, '            "" [prompt.default](optional, default is \\""sounds\\"")"",'), (107, '            default=""sounds"",'), (108, '            show_default=False'), (109, '        )'), (110, '        dir_config[""subdirs""][""downloads""] = Prompt.ask('), (111, '            ""  Within that base directory, which subdirectory should manim output downloaded files"" + \\'), (112, '            "" [prompt.default](optional, default is \\""downloads\\"")"",'), (113, '            default=""downloads"",'), (114, '            show_default=False'), (115, '        )'), (116, ''), (117, '        console.print(""[bold]Styles:[/bold]"")'), (118, '        style_config = configuration[""style""]'), (119, '        tex_template = Prompt.ask('), (120, '            ""  Select a TeX template to compile a LaTeX source file"",'), (121, '            default=""default""'), (122, '        )'), (123, '        style_config[""tex_template""] = tex_template'), (124, '        style_config[""background_color""] = Prompt.ask('), (125, '            ""  Which [bold]background color[/bold] do you want [italic](hex code)"",'), (126, '            default=""#333333""'), (127, '        )'), (128, ''), (129, '        console.print(""[bold]Camera qualities:[/bold]"")'), (130, '        table = Table('), (131, '            ""low"", ""medium"", ""high"", ""ultra_high"",'), (132, '            title=""Four defined qualities"",'), (133, '            box=box.ROUNDED'), (134, '        )'), (135, '        table.add_row(""480p15"", ""720p30"", ""1080p60"", ""2160p60"")'), (136, '        console.print(table)'), (137, '        configuration[""camera_resolutions""][""default_resolution""] = Prompt.ask('), (138, '            ""  Which one to choose as the default rendering quality"",'), (139, '            choices=[""low"", ""medium"", ""high"", ""ultra_high""],'), (140, '            default=""high""'), (141, '        )'), (142, ''), (143, '        write_to_file = Confirm.ask('), (144, '            ""\\n[bold]Are you sure to write these configs to file?[/bold]"",'), (145, '            default=True'), (146, '        )'), (147, '        if not write_to_file:'), (148, '            raise KeyboardInterrupt'), (149, ''), (150, '        global_file_name = os.path.join(get_manim_dir(), ""manimlib"", ""default_config.yml"")'), (151, '        if scope == ""global"":'), (152, '            file_name = global_file_name'), (153, '        else:'), (154, '            if os.path.exists(global_file_name):'), (155, '                remove_empty_value(configuration)'), (156, '            file_name = os.path.join(os.getcwd(), ""custom_config.yml"")'), (157, '        with open(file_name, ""w"", encoding=""utf-8"") as f:'), (158, '            yaml.dump(configuration, f)'), (159, ''), (160, '        console.print(f""\\n:rocket: You have successfully set up a {scope} configuration file!"")'), (161, '        console.print(f""You can manually modify it in: [cyan]`{file_name}`[/cyan]"")'), (162, ''), (163, '    except KeyboardInterrupt:'), (164, '        console.print(""\\n[green]Exit configuration guide[/green]"")')]",No
manimlib/module_loader.py,manimlib/module_loader.py,bafea89ac9d11dc168bce923a65501ec74312afe,eeb4fdf27009a582fb408feac16f85608168d8c2,"Update InteractiveSceneEmbed (#2267)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string","[(149, ""            # We don't want to reload global manim_config"")]","[(149, ""            # We don't want to reload global config"")]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,bafea89ac9d11dc168bce923a65501ec74312afe,eeb4fdf27009a582fb408feac16f85608168d8c2,"Update InteractiveSceneEmbed (#2267)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string","[(8, 'from contextlib import contextmanager'), (9, 'from contextlib import ExitStack'), (29, 'from manimlib.scene.scene_embed import InteractiveSceneEmbed'), (215, '        self.stop_skipping()'), (216, '        self.update_frame(force_draw=True)'), (218, '        InteractiveSceneEmbed(self).launch()'), (683, '    @contextmanager'), (684, '    def temp_skip(self):'), (685, '        prev_status = self.skip_animations'), (686, '        self.skip_animations = True'), (687, '        try:'), (688, '            yield'), (689, '        finally:'), (690, '            if not prev_status:'), (691, '                self.stop_skipping()'), (693, '    @contextmanager'), (694, '    def temp_progress_bar(self):'), (696, '        self.show_animation_progress = True'), (697, '        try:'), (698, '            yield'), (699, '        finally:'), (700, '            self.show_animation_progress = prev_progress'), (701, ''), (702, '    @contextmanager'), (703, '    def temp_record(self):'), (704, '        self.camera.use_window_fbo(False)'), (705, '        self.file_writer.begin_insert()'), (706, '        try:'), (707, '            yield'), (708, '        finally:'), (712, '    def temp_config_change(self, skip=False, record=False, progress_bar=False):'), (713, '        stack = ExitStack()'), (714, '        if skip:'), (715, '            stack.enter_context(self.temp_skip())'), (716, '        if record:'), (717, '            stack.enter_context(self.temp_record())'), (718, '        if progress_bar:'), (719, '            stack.enter_context(self.temp_progress_bar())'), (720, '        return stack')]","[(27, 'from manimlib.scene.scene_embed import interactive_scene_embed'), (125, '        self.checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()'), (126, '        self.checkpoint_manager: CheckpointManager = CheckpointManager()'), (216, '        interactive_scene_embed(self)'), (681, '    def checkpoint_paste('), (682, '        self,'), (683, '        skip: bool = False,'), (684, '        record: bool = False,'), (685, '        progress_bar: bool = True'), (686, '    ):'), (687, '        """"""'), (688, '        Used during interactive development to run (or re-run)'), (689, '        a block of scene code.'), (690, ''), (691, '        If the copied selection starts with a comment, this will'), (692, '        revert to the state of the scene the first time this function'), (693, '        was called on a block of code starting with that comment.'), (694, '        """"""'), (695, '        # Keep track of skipping and progress bar status'), (696, '        self.skip_animations = skip'), (699, '        self.show_animation_progress = progress_bar'), (700, ''), (701, '        if record:'), (702, '            self.camera.use_window_fbo(False)'), (703, '            self.file_writer.begin_insert()'), (704, ''), (705, '        self.checkpoint_manager.checkpoint_paste(self)'), (706, ''), (707, '        if record:'), (711, '        self.stop_skipping()'), (712, '        self.show_animation_progress = prev_progress'), (713, ''), (714, '    def clear_checkpoints(self):'), (715, '        self.checkpoint_manager.clear_checkpoints()')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,bafea89ac9d11dc168bce923a65501ec74312afe,eeb4fdf27009a582fb408feac16f85608168d8c2,"Update InteractiveSceneEmbed (#2267)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string","[(1, 'from __future__ import annotations'), (2, ''), (5, 'import traceback'), (18, 'from typing import TYPE_CHECKING'), (19, 'if TYPE_CHECKING:'), (20, '    from manimlib.scene.scene import Scene'), (21, ''), (22, ''), (23, 'class InteractiveSceneEmbed:'), (24, '    def __init__(self, scene: Scene):'), (25, '        self.scene = scene'), (26, '        self.checkpoint_manager = CheckpointManager()'), (27, ''), (28, '        self.shell = self.get_ipython_shell_for_embedded_scene()'), (29, '        self.enable_gui()'), (30, '        self.ensure_frame_update_post_cell()'), (31, '        self.ensure_flash_on_error()'), (32, ''), (33, '    def launch(self):'), (34, '        self.shell()'), (35, ''), (36, '    def get_ipython_shell_for_embedded_scene(self) -> InteractiveShellEmbed:'), (37, '        """"""'), (38, '        Create embedded IPython terminal configured to have access to'), (39, '        the local namespace of the caller'), (40, '        """"""'), (41, ""        # Triple back should take us to the context in a user's scene definition""), (42, '        # which is calling ""self.embed""'), (43, '        caller_frame = inspect.currentframe().f_back.f_back.f_back'), (44, ''), (45, ""        # Update the module's namespace to include local variables""), (46, '        module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (47, '        module.__dict__.update(caller_frame.f_locals)'), (48, '        module.__dict__.update(self.get_shortcuts())'), (49, '        exception_mode = manim_config.embed.exception_mode'), (50, ''), (51, '        return InteractiveShellEmbed('), (52, '            user_module=module,'), (53, '            display_banner=False,'), (54, '            xmode=exception_mode'), (55, '        )'), (56, ''), (57, '    def get_shortcuts(self):'), (58, '        """"""'), (59, '        A few custom shortcuts useful to have in the interactive shell namespace'), (60, '        """"""'), (61, '        scene = self.scene'), (62, '        return dict('), (63, '            play=scene.play,'), (64, '            wait=scene.wait,'), (65, '            add=scene.add,'), (66, '            remove=scene.remove,'), (67, '            clear=scene.clear,'), (68, '            focus=scene.focus,'), (69, '            save_state=scene.save_state,'), (70, '            undo=scene.undo,'), (71, '            redo=scene.redo,'), (72, '            i2g=scene.i2g,'), (73, '            i2m=scene.i2m,'), (74, '            checkpoint_paste=self.checkpoint_paste,'), (75, '            clear_checkpoints=self.checkpoint_manager.clear_checkpoints,'), (76, '            reload=self.reload_scene  # Defined below'), (77, '        )'), (78, ''), (79, '    def enable_gui(self):'), (80, '        """"""Enables gui interactions during the embed""""""'), (81, '        def inputhook(context):'), (82, '            while not context.input_is_ready():'), (83, '                if not self.scene.is_window_closing():'), (84, '                    self.scene.update_frame(dt=0)'), (85, '            if self.scene.is_window_closing():'), (86, '                self.shell.ask_exit()'), (87, ''), (88, '        pt_inputhooks.register(""manim"", inputhook)'), (89, '        self.shell.enable_gui(""manim"")'), (90, ''), (91, '    def ensure_frame_update_post_cell(self):'), (92, '        """"""Ensure the scene updates its frame after each ipython cell""""""'), (93, '        def post_cell_func(*args, **kwargs):'), (94, '            if not self.scene.is_window_closing():'), (95, '                self.scene.update_frame(dt=0, force_draw=True)'), (96, ''), (97, '        self.shell.events.register(""post_run_cell"", post_cell_func)'), (98, ''), (99, '    def ensure_flash_on_error(self):'), (100, '        """"""Flash border, and potentially play sound, on exceptions""""""'), (101, '        def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (102, ""            # Show the error don't just swallow it""), (103, ""            print(''.join(traceback.format_exception(etype, evalue, tb)))""), (104, '            rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (105, '            rect.fix_in_frame()'), (106, '            self.scene.play(VFadeInThenOut(rect, run_time=0.5))'), (107, ''), (108, '        self.shell.set_custom_exc((Exception,), custom_exc)'), (109, ''), (110, '    def reload_scene(self, embed_line: int | None = None) -> None:'), (111, '        """"""'), (112, '        Reloads the scene just like the `manimgl` command would do with the'), (113, '        same arguments that were provided for the initial startup. This allows'), (114, ""        for quick iteration during scene development since we don't have to exit""), (115, '        the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (116, '        open during the reload.'), (117, ''), (118, '        If `embed_line` is provided, the scene will be reloaded at that line'), (119, '        number. This corresponds to the `linemarker` param of the'), (120, '        `extract_scene.insert_embed_line_to_module()` method.'), (121, ''), (122, '        Before reload, the scene is cleared and the entire state is reset, such'), (123, '        that we can start from a clean slate. This is taken care of by the'), (124, '        run_scenes function in __main__.py, which will catch the error raised by the'), (125, '        `exit_raise` magic command that we invoke here.'), (126, ''), (127, '        Note that we cannot define a custom exception class for this error,'), (128, '        since the IPython kernel will swallow any exception. While we can catch'), (129, '        such an exception in our custom exception handler registered with the'), (130, '        `set_custom_exc` method, we cannot break out of the IPython shell by'), (131, '        this means.'), (132, '        """"""'), (133, '        # Update the global run configuration.'), (134, '        run_config = manim_config.run'), (135, '        run_config.is_reload = True'), (136, '        if embed_line:'), (137, '            run_config.embed_line = embed_line'), (138, ''), (139, '        print(""Reloading..."")'), (140, '        self.shell.run_line_magic(""exit_raise"", """")'), (141, ''), (142, '    def checkpoint_paste('), (143, '        self,'), (144, '        skip: bool = False,'), (145, '        record: bool = False,'), (146, '        progress_bar: bool = True'), (147, '    ):'), (148, '        with self.scene.temp_config_change(skip, record, progress_bar):'), (149, '            self.checkpoint_manager.checkpoint_paste(self.shell, self.scene)'), (155, '    def checkpoint_paste(self, shell, scene):'), (170, '    def get_leading_comment(code_string: str) -> str:'), (174, '        return """"'), (177, '        if not key:')]","[(4, 'from IPython.core.getipython import get_ipython'), (16, 'def interactive_scene_embed(scene):'), (17, '    scene.stop_skipping()'), (18, '    scene.update_frame(force_draw=True)'), (19, ''), (20, '    shell = get_ipython_shell_for_embedded_scene(scene)'), (21, '    enable_gui(shell, scene)'), (22, '    ensure_frame_update_post_cell(shell, scene)'), (23, '    ensure_flash_on_error(shell, scene)'), (24, ''), (25, '    # Launch shell'), (26, '    shell()'), (27, ''), (28, ''), (29, 'def get_ipython_shell_for_embedded_scene(scene):'), (30, '    """"""'), (31, '    Create embedded IPython terminal configured to have access to'), (32, '    the local namespace of the caller'), (33, '    """"""'), (34, ""    # Triple back should take us to the context in a user's scene definition""), (35, '    # which is calling ""self.embed""'), (36, '    caller_frame = inspect.currentframe().f_back.f_back.f_back'), (37, ''), (38, ""    # Update the module's namespace to include local variables""), (39, '    module = ModuleLoader.get_module(caller_frame.f_globals[""__file__""])'), (40, '    module.__dict__.update(caller_frame.f_locals)'), (41, '    module.__dict__.update(get_shortcuts(scene))'), (42, '    exception_mode = manim_config.embed.exception_mode'), (43, ''), (44, '    return InteractiveShellEmbed('), (45, '        user_module=module,'), (46, '        display_banner=False,'), (47, '        xmode=exception_mode'), (48, '    )'), (49, ''), (50, ''), (51, 'def get_shortcuts(scene):'), (52, '    """"""'), (53, '    A few custom shortcuts useful to have in the interactive shell namespace'), (54, '    """"""'), (55, '    return dict('), (56, '        play=scene.play,'), (57, '        wait=scene.wait,'), (58, '        add=scene.add,'), (59, '        remove=scene.remove,'), (60, '        clear=scene.clear,'), (61, '        focus=scene.focus,'), (62, '        save_state=scene.save_state,'), (63, '        undo=scene.undo,'), (64, '        redo=scene.redo,'), (65, '        i2g=scene.i2g,'), (66, '        i2m=scene.i2m,'), (67, '        checkpoint_paste=scene.checkpoint_paste,'), (68, '        reload=reload_scene  # Defined below'), (69, '    )'), (70, ''), (71, ''), (72, 'def enable_gui(shell, scene):'), (73, '    """"""Enables gui interactions during the embed""""""'), (74, '    def inputhook(context):'), (75, '        while not context.input_is_ready():'), (76, '            if not scene.is_window_closing():'), (77, '                scene.update_frame(dt=0)'), (78, '        if scene.is_window_closing():'), (79, '            shell.ask_exit()'), (80, ''), (81, '    pt_inputhooks.register(""manim"", inputhook)'), (82, '    shell.enable_gui(""manim"")'), (83, ''), (84, ''), (85, 'def ensure_frame_update_post_cell(shell, scene):'), (86, '    """"""Ensure the scene updates its frame after each ipython cell""""""'), (87, '    def post_cell_func(*args, **kwargs):'), (88, '        if not scene.is_window_closing():'), (89, '            scene.update_frame(dt=0, force_draw=True)'), (90, ''), (91, '    shell.events.register(""post_run_cell"", post_cell_func)'), (92, ''), (93, ''), (94, 'def ensure_flash_on_error(shell, scene):'), (95, '    """"""Flash border, and potentially play sound, on exceptions""""""'), (96, '    def custom_exc(shell, etype, evalue, tb, tb_offset=None):'), (97, ""        # Show the error don't just swallow it""), (98, '        shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)'), (99, '        rect = FullScreenRectangle().set_stroke(RED, 30).set_fill(opacity=0)'), (100, '        rect.fix_in_frame()'), (101, '        scene.play(VFadeInThenOut(rect, run_time=0.5))'), (102, ''), (103, '    shell.set_custom_exc((Exception,), custom_exc)'), (104, ''), (105, ''), (106, 'def reload_scene(embed_line: int | None = None) -> None:'), (107, '    """"""'), (108, '    Reloads the scene just like the `manimgl` command would do with the'), (109, '    same arguments that were provided for the initial startup. This allows'), (110, ""    for quick iteration during scene development since we don't have to exit""), (111, '    the IPython kernel and re-run the `manimgl` command again. The GUI stays'), (112, '    open during the reload.'), (113, ''), (114, '    If `embed_line` is provided, the scene will be reloaded at that line'), (115, '    number. This corresponds to the `linemarker` param of the'), (116, '    `extract_scene.insert_embed_line_to_module()` method.'), (117, ''), (118, '    Before reload, the scene is cleared and the entire state is reset, such'), (119, '    that we can start from a clean slate. This is taken care of by the'), (120, '    run_scenes function in __main__.py, which will catch the error raised by the'), (121, '    `exit_raise` magic command that we invoke here.'), (122, ''), (123, '    Note that we cannot define a custom exception class for this error,'), (124, '    since the IPython kernel will swallow any exception. While we can catch'), (125, '    such an exception in our custom exception handler registered with the'), (126, '    `set_custom_exc` method, we cannot break out of the IPython shell by'), (127, '    this means.'), (128, '    """"""'), (129, '    shell = get_ipython()'), (130, '    if not shell:'), (131, '        return'), (132, ''), (133, '    # Update the global run configuration.'), (134, '    run_config = manim_config.run'), (135, '    run_config.is_reload = True'), (136, '    if embed_line:'), (137, '        run_config.embed_line = embed_line'), (138, ''), (139, '    print(""Reloading..."")'), (140, '    shell.run_line_magic(""exit_raise"", """")'), (146, '    def checkpoint_paste(self, scene):'), (155, '        shell = get_ipython()'), (156, '        if shell is None:'), (157, '            return'), (158, ''), (160, ''), (166, '    def get_leading_comment(code_string: str):'), (170, '        return None'), (173, '        if key is None:')]",No
docs/source/getting_started/configuration.rst,docs/source/getting_started/configuration.rst,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(66, '``--autoreload``                                                  Automatically reload Python modules to pick up code changes across different files')]",[],No
manimlib/config.py,manimlib/config.py,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(48, '    update_embed_config(config, args)'), (213, '        parser.add_argument('), (214, '            ""--autoreload"",'), (215, '            action=""store_true"",'), (216, '            help=""Automatically reload Python modules to pick up code changes "" +'), (217, '                 ""across different files"",'), (218, '        )'), (321, 'def update_embed_config(config: dict, args: Namespace):'), (322, '    if args.autoreload:'), (323, '        config[""embed""][""autoreload""] = True'), (324, ''), (325, '')]",[],No
manimlib/default_config.yml,manimlib/default_config.yml,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(86, '  autoreload: False')]",[],No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,00b34f202044dd841c96c4bd60322d849226c8d7,bafea89ac9d11dc168bce923a65501ec74312afe,"Autoreload v2 (#2268)

* Add autoreload

* Typo correction

* Add --autoreload to configuration docts

Co-Authored-By: Splines <37160523+Splines@users.noreply.github.com>

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(32, '        if manim_config.embed.autoreload:'), (33, '            self.auto_reload()'), (144, '    def auto_reload(self):'), (145, '        """"""Enables IPython autoreload for automatic reloading of modules.""""""'), (146, '        self.shell.magic(""load_ext autoreload"")'), (147, '        self.shell.magic(""autoreload all"")'), (148, '')]",[],No
docs/source/documentation/constants.rst,docs/source/documentation/constants.rst,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(77, '   DEG = TAU / 360')]","[(77, '   DEGREES = TAU / 360')]",No
docs/source/getting_started/example_scenes.rst,docs/source/getting_started/example_scenes.rst,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(37, '            self.play(Rotate(circle, 90 * DEG))'), (224, '                    path_arc=90 * DEG,'), (602, '                theta=-30 * DEG,'), (603, '                phi=70 * DEG,'), (627, '                frame.animate.increment_phi(-10 * DEG),'), (628, '                frame.animate.increment_theta(-20 * DEG),')]","[(37, '            self.play(Rotate(circle, 90 * DEGREES))'), (224, '                    path_arc=90 * DEGREES,'), (602, '                theta=-30 * DEGREES,'), (603, '                phi=70 * DEGREES,'), (627, '                frame.animate.increment_phi(-10 * DEGREES),'), (628, '                frame.animate.increment_theta(-20 * DEGREES),')]",No
example_scenes.py,example_scenes.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(193, '                path_arc=90 * DEG,'), (206, '                path_arc=-30 * DEG,'), (619, '            self.frame.animate.increment_phi(-10 * DEG),'), (620, '            self.frame.animate.increment_theta(-20 * DEG),'), (669, '        self.play(Rotate(circle, 90 * DEG))')]","[(193, '                path_arc=90 * DEGREES,'), (206, '                path_arc=-30 * DEGREES,'), (619, '            self.frame.animate.increment_phi(-10 * DEGREES),'), (620, '            self.frame.animate.increment_theta(-20 * DEGREES),'), (669, '        self.play(Rotate(circle, 90 * DEGREES))')]",No
manimlib/animation/indication.py,manimlib/animation/indication.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(17, 'from manimlib.constants import DEG'), (398, '    def __init__(self, mobject: Mobject, path_arc: float = 90 * DEG, **kwargs):')]","[(17, 'from manimlib.constants import DEGREES'), (398, '    def __init__(self, mobject: Mobject, path_arc: float = 90 * DEGREES, **kwargs):')]",No
manimlib/animation/transform.py,manimlib/animation/transform.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(8, 'from manimlib.constants import DEG'), (317, '    def __init__(self, *mobjects: Mobject, path_arc=90 * DEG, **kwargs):')]","[(8, 'from manimlib.constants import DEGREES'), (317, '    def __init__(self, *mobjects: Mobject, path_arc=90 * DEGREES, **kwargs):')]",No
manimlib/camera/camera_frame.py,manimlib/camera/camera_frame.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(9, 'from manimlib.constants import DEG, RADIANS'), (29, '        fovy: float = 45 * DEG,'), (184, '        self.set_euler_angles(theta_degrees, phi_degrees, gamma_degrees, units=DEG)'), (212, '    def add_ambient_rotation(self, angular_speed=1 * DEG):')]","[(9, 'from manimlib.constants import DEGREES, RADIANS'), (29, '        fovy: float = 45 * DEGREES,'), (184, '        self.set_euler_angles(theta_degrees, phi_degrees, gamma_degrees, units=DEGREES)'), (212, '    def add_ambient_rotation(self, angular_speed=1 * DEGREES):')]",No
manimlib/config.py,manimlib/config.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(146, '        parser.add_argument('), (147, '            ""--subdivide"",'), (148, '            action=""store_true"",'), (149, '            help=""Divide the output animation into individual movie files "" +'), (150, '                 ""for each animation"",'), (151, '        )'), (265, '        subdivide_output=args.subdivide,')]","[(108, '        parser.add_argument('), (109, '            ""-g"", ""--save_pngs"",'), (110, '            action=""store_true"",'), (111, '            help=""Save each frame as a png"",'), (112, '        )'), (265, '        save_pngs=args.save_pngs,')]",No
manimlib/constants.py,manimlib/constants.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(64, 'DEG: float = TAU / 360'), (65, 'DEGREES = DEG  # Many older animations use teh full name'), (67, '# when juxtaposed with expressions like 30 * DEG')]","[(64, 'DEGREES: float = TAU / 360'), (66, '# when juxtaposed with expressions like 30 * DEGREES')]",No
manimlib/default_config.yml,manimlib/default_config.yml,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(67, '  # When skipping animations, should a single frame be rendered'), (68, '  # at the end of each play call?'), (69, '  preview_while_skipping: True'), (103, 'key_bindings:'), (104, ""  pan_3d: 'd'""), (105, ""  pan: 'f'""), (106, ""  reset: 'r'""), (107, ""  quit: 'q'  # Together with command""), (108, ""  select: 's'""), (109, ""  unselect: 'u'""), (110, ""  grab: 'g'""), (111, ""  x_grab: 'h'""), (112, ""  y_grab: 'v'""), (113, ""  resize: 't'""), (114, ""  color: 'c'""), (115, ""  information: 'i'""), (116, ""  cursor: 'k'"")]","[(55, '  # If break_into_partial_movies is set to True, then many small'), (56, '  # files will be written corresponding to each Scene.play and'), (57, '  # Scene.wait call, and these files will then be combined'), (58, '  # to form the full scene.  Sometimes video-editing is made'), (59, '  # easier when working with the broken up scene, which'), (60, '  # effectively has cuts at all the places you might want.'), (61, '  break_into_partial_movies: False')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(18, '    from addict import Dict'), (47, '        user_input = input(""\\nSelect which scene to render (by name or number): "")'), (80, 'def scene_from_class(scene_class, scene_config: Dict, run_config: Dict):'), (87, 'def note_missing_scenes(arg_names, module_names):'), (88, '    for name in arg_names:'), (89, '        if name not in module_names:'), (90, '            log.error(f""No scene named {name} found"")'), (93, 'def get_scenes_to_render(all_scene_classes: list, scene_config: Dict, run_config: Dict):'), (94, '    if run_config[""write_all""] or len(all_scene_classes) == 1:'), (95, '        classes_to_run = all_scene_classes'), (97, '        name_to_class = {sc.__name__: sc for sc in all_scene_classes}'), (98, '        classes_to_run = [name_to_class.get(name) for name in run_config.scene_names]'), (99, '        classes_to_run = list(filter(lambda x: x, classes_to_run))  # Remove Nones'), (100, '        note_missing_scenes(run_config.scene_names, name_to_class.keys())'), (101, ''), (102, '    if len(classes_to_run) == 0:'), (111, 'def get_scene_classes(module: Optional[Module]):'), (112, '    if module is None:'), (113, '        # If no module was passed in, just play the blank scene'), (114, '        return [BlankScene(**scene_config)]'), (165, 'def get_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (172, 'def main(scene_config: Dict, run_config: Dict):'), (173, '    module = get_module(run_config.file_name, run_config.embed_line, run_config.is_reload)'), (174, '    all_scene_classes = get_scene_classes(module)')]","[(46, '        user_input = input('), (47, '            ""\\nThat module has multiple scenes, "" + \\'), (48, '            ""which ones would you like to render?"" + \\'), (49, '            ""\\nScene Name or Number: ""'), (50, '        )'), (83, 'def scene_from_class(scene_class, scene_config, run_config):'), (90, 'def get_scenes_to_render(all_scene_classes, scene_config, run_config):'), (91, '    if run_config[""write_all""]:'), (92, '        return [sc(**scene_config) for sc in all_scene_classes]'), (94, '    names_to_classes = {sc.__name__: sc for sc in all_scene_classes}'), (95, '    scene_names = run_config[""scene_names""]'), (97, '    for name in set.difference(set(scene_names), names_to_classes):'), (98, '        log.error(f""No scene named {name} found"")'), (99, '        scene_names.remove(name)'), (100, ''), (101, '    if scene_names:'), (102, '        classes_to_run = [names_to_classes[name] for name in scene_names]'), (103, '    elif len(all_scene_classes) == 1:'), (104, '        classes_to_run = [all_scene_classes[0]]'), (114, 'def get_scene_classes_from_module(module):'), (165, 'def get_scene_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (172, 'def main(scene_config, run_config):'), (173, '    module = get_scene_module('), (174, '        run_config[""file_name""],'), (175, '        run_config[""embed_line""],'), (176, '        run_config[""is_reload""]'), (177, '    )'), (178, '    if module is None:'), (179, '        # If no module was passed in, just play the blank scene'), (180, '        return [BlankScene(**scene_config)]'), (181, ''), (182, '    all_scene_classes = get_scene_classes_from_module(module)')]",No
manimlib/mobject/coordinate_systems.py,manimlib/mobject/coordinate_systems.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(10, 'from manimlib.constants import DEG, PI'), (310, '        normal = rotate_vector(RIGHT, angle + 90 * DEG)'), (477, '        self.y_axis.rotate(90 * DEG, about_point=ORIGIN)')]","[(10, 'from manimlib.constants import DEGREES, PI'), (310, '        normal = rotate_vector(RIGHT, angle + 90 * DEGREES)'), (477, '        self.y_axis.rotate(90 * DEGREES, about_point=ORIGIN)')]",No
manimlib/mobject/geometry.py,manimlib/mobject/geometry.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(10, 'from manimlib.constants import DEG, PI, TAU'), (986, '            start_angle = (n % 2) * 90 * DEG')]","[(10, 'from manimlib.constants import DEGREES, PI, TAU'), (986, '            start_angle = (n % 2) * 90 * DEGREES')]",No
manimlib/mobject/matrix.py,manimlib/mobject/matrix.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(6, 'from manimlib.constants import DEG'), (199, '            rows[row_index][col_index].rotate(-45 * DEG)')]","[(6, 'from manimlib.constants import DEGREES'), (199, '            rows[row_index][col_index].rotate(-45 * DEGREES)')]",No
manimlib/mobject/mobject_update_utils.py,manimlib/mobject/mobject_update_utils.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(5, 'from manimlib.constants import DEG'), (74, '    rate: float = 20 * DEG,')]","[(5, 'from manimlib.constants import DEGREES'), (74, '    rate: float = 20 * DEGREES,')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(23, 'from manimlib.utils.simple_functions import hash_string'), (78, '    temp_file = Path(tempfile.gettempdir(), hash_string(markup_str)).with_suffix("".svg"")'), (79, '    manimpango.MarkupUtils.text2svg('), (80, '        text=markup_str,'), (81, '        font="""",                     # Already handled'), (82, '        slant=""NORMAL"",              # Already handled'), (83, '        weight=""NORMAL"",             # Already handled'), (84, '        size=1,                      # Already handled'), (85, '        _=0,                         # Empty parameter'), (86, '        disable_liga=False,'), (87, '        file_name=str(temp_file),'), (88, '        START_X=0,'), (89, '        START_Y=0,'), (90, '        width=DEFAULT_CANVAS_WIDTH,'), (91, '        height=DEFAULT_CANVAS_HEIGHT,'), (92, '        justify=justify,'), (93, '        indent=indent,'), (94, '        line_spacing=None,           # Already handled'), (95, '        alignment=alignment,'), (96, '        pango_width=pango_width'), (97, '    )'), (98, '    result = temp_file.read_text()'), (99, '    os.remove(temp_file)'), (100, '    return result')]","[(77, '    # TODO, better would be to have this not write to file at all'), (78, '    #'), (79, ""    # To avoid CAIRO_STATUS_WRITE_ERROR: b'error while writing to""), (80, ""    # output stream' on Windows, we need to pass 'delete=False'.""), (81, ""    with tempfile.NamedTemporaryFile(suffix='.svg', mode='r+', delete=False) as tmp:""), (82, '        manimpango.MarkupUtils.text2svg('), (83, '            text=markup_str,'), (84, '            font="""",                     # Already handled'), (85, '            slant=""NORMAL"",              # Already handled'), (86, '            weight=""NORMAL"",             # Already handled'), (87, '            size=1,                      # Already handled'), (88, '            _=0,                         # Empty parameter'), (89, '            disable_liga=False,'), (90, '            file_name=tmp.name,'), (91, '            START_X=0,'), (92, '            START_Y=0,'), (93, '            width=DEFAULT_CANVAS_WIDTH,'), (94, '            height=DEFAULT_CANVAS_HEIGHT,'), (95, '            justify=justify,'), (96, '            indent=indent,'), (97, '            line_spacing=None,           # Already handled'), (98, '            alignment=alignment,'), (99, '            pango_width=pango_width'), (100, '        )'), (101, ''), (102, '        # Read the contents'), (103, '        tmp.seek(0)'), (104, '        return tmp.read()')]",No
manimlib/mobject/types/vectorized_mobject.py,manimlib/mobject/types/vectorized_mobject.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(10, 'from manimlib.constants import DEG'), (493, '        if self.use_simple_quadratic_approx and angle < 45 * DEG:'), (619, '        angle_threshold: float = 30 * DEG,'), (659, '    def is_smooth(self, angle_tol=1 * DEG) -> bool:')]","[(10, 'from manimlib.constants import DEGREES'), (493, '        if self.use_simple_quadratic_approx and angle < 45 * DEGREES:'), (619, '        angle_threshold: float = 30 * DEGREES,'), (659, '    def is_smooth(self, angle_tol=1 * DEGREES) -> bool:')]",No
manimlib/scene/interactive_scene.py,manimlib/scene/interactive_scene.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(10, 'from manimlib.config import manim_config'), (14, 'from manimlib.constants import DEG'), (40, 'SELECT_KEY = manim_config.key_bindings.select'), (41, 'UNSELECT_KEY = manim_config.key_bindings.unselect'), (42, 'GRAB_KEY = manim_config.key_bindings.grab'), (43, 'X_GRAB_KEY = manim_config.key_bindings.x_grab'), (44, 'Y_GRAB_KEY = manim_config.key_bindings.y_grab'), (46, 'RESIZE_KEY = manim_config.key_bindings.resize  # TODO'), (47, 'COLOR_KEY = manim_config.key_bindings.color'), (48, 'INFORMATION_KEY = manim_config.key_bindings.information'), (49, 'CURSOR_KEY = manim_config.key_bindings.cursor'), (628, '        theta, phi, gamma = (angles / DEG).astype(int)')]","[(13, 'from manimlib.constants import DEGREES'), (39, ""SELECT_KEY = 's'""), (40, ""UNSELECT_KEY = 'u'""), (41, ""GRAB_KEY = 'g'""), (42, ""X_GRAB_KEY = 'h'""), (43, ""Y_GRAB_KEY = 'v'""), (45, ""RESIZE_KEY = 't'""), (46, ""COLOR_KEY = 'c'""), (47, ""INFORMATION_KEY = 'i'""), (48, ""CURSOR_KEY = 'k'""), (49, ""COPY_FRAME_POSITION_KEY = 'p'""), (628, '        theta, phi, gamma = (angles / DEGREES).astype(int)')]",No
manimlib/scene/scene.py,manimlib/scene/scene.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(74, '        preview_while_skipping: bool = True,'), (84, '        self.preview_while_skipping = preview_while_skipping'), (530, '        if self.preview_while_skipping and self.skip_animations and self.window is not None:'), (745, '        if self.window.is_key_pressed(ord(manim_config.key_bindings.pan_3d)):'), (751, '        elif self.window.is_key_pressed(ord(manim_config.key_bindings.pan)):'), (837, '        if char == manim_config.key_bindings.reset:'), (844, '        elif char == manim_config.key_bindings.quit and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):')]","[(51, ""PAN_3D_KEY = 'd'""), (52, ""FRAME_SHIFT_KEY = 'f'""), (53, ""RESET_FRAME_KEY = 'r'""), (54, ""QUIT_KEY = 'q'""), (55, ''), (56, ''), (534, '        if self.skip_animations and self.window is not None:'), (749, '        if self.window.is_key_pressed(ord(PAN_3D_KEY)):'), (755, '        elif self.window.is_key_pressed(ord(FRAME_SHIFT_KEY)):'), (841, '        if char == RESET_FRAME_KEY:'), (848, '        elif char == QUIT_KEY and (modifiers & (PygletWindowKeys.MOD_COMMAND | PygletWindowKeys.MOD_CTRL)):')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(105, '            shell.showtraceback((etype, evalue, tb), tb_offset=tb_offset)')]","[(105, ""            print(''.join(traceback.format_exception(etype, evalue, tb)))"")]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(33, '        subdivide_output: bool = False,'), (40, '        output_directory: str = """",'), (56, '        self.subdivide_output = subdivide_output'), (78, ''), (85, '            self.image_file_path = self.init_image_file_path()'), (87, '            self.movie_file_path = self.init_movie_file_path()'), (88, '        if self.subdivide_output:'), (89, '            self.partial_movie_directory = self.init_partial_movie_directory()'), (90, ''), (91, '    def init_image_file_path(self) -> Path:'), (92, '        return self.get_output_file_rootname().with_suffix("".png"")'), (94, '    def init_movie_file_path(self) -> Path:'), (95, '        return self.get_output_file_rootname().with_suffix(self.movie_file_extension)'), (97, '    def init_partial_movie_directory(self):'), (98, '        return guarantee_existence(self.get_output_file_rootname())'), (99, ''), (100, '    def get_output_file_rootname(self) -> Path:'), (101, '        return Path('), (102, '            guarantee_existence(self.output_directory),'), (103, '            self.get_output_file_name()'), (104, '        )'), (105, ''), (106, '    def get_output_file_name(self) -> str:'), (107, '        if self.file_name:'), (108, '            return self.file_name'), (109, '        # Otherwise, use the name of the scene, potentially'), (110, '        # appending animation numbers'), (125, '        result = Path(self.partial_movie_directory, f""{self.scene.num_plays:05}"")'), (126, '        return result.with_suffix(self.movie_file_extension)'), (182, '        if not self.subdivide_output and self.write_to_movie:'), (186, '        if self.subdivide_output and self.write_to_movie:'), (190, '        if self.subdivide_output and self.write_to_movie:'), (194, '        if not self.subdivide_output and self.write_to_movie:'), (195, '            self.close_movie_pipe()'), (225, ""            '-an',  # Tells ffmpeg not to expect any audio""), (252, '        guarantee_existence(insert_dir)'), (253, '        return Path(insert_dir, f""{scene_name}_{index}"").with_suffix(self.movie_file_extension)'), (262, '        self.inserted_file_path = insert_path')]","[(16, 'from manimlib.utils.file_ops import add_extension_if_not_present'), (17, 'from manimlib.utils.file_ops import get_sorted_integer_files'), (35, '        break_into_partial_movies: bool = False,'), (36, '        save_pngs: bool = False,  # TODO, this currently does nothing'), (43, '        output_directory: str | None = None,'), (45, '        subdirectory_for_videos: bool = False,'), (60, '        self.break_into_partial_movies = break_into_partial_movies'), (61, '        self.save_pngs = save_pngs'), (69, '        self.subdirectory_for_videos = subdirectory_for_videos'), (89, '        out_dir = self.output_directory or """"'), (90, '        scene_name = self.file_name or self.get_default_scene_name()'), (92, '            image_dir = guarantee_existence(os.path.join(out_dir, ""images""))'), (93, '            image_file = add_extension_if_not_present(scene_name, "".png"")'), (94, '            self.image_file_path = os.path.join(image_dir, image_file)'), (96, '            if self.subdirectory_for_videos:'), (97, '                movie_dir = guarantee_existence(os.path.join(out_dir, ""videos""))'), (98, '            else:'), (99, '                movie_dir = guarantee_existence(out_dir)'), (100, '            movie_file = add_extension_if_not_present(scene_name, self.movie_file_extension)'), (101, '            self.movie_file_path = os.path.join(movie_dir, movie_file)'), (102, '            if self.break_into_partial_movies:'), (103, '                self.partial_movie_directory = guarantee_existence(os.path.join('), (104, '                    movie_dir, ""partial_movie_files"", scene_name,'), (105, '                ))'), (106, '        # A place to save mobjects'), (107, '        self.saved_mobject_directory = os.path.join('), (108, '            out_dir, ""mobjects"", str(self.scene)'), (109, '        )'), (111, '    def get_default_module_directory(self) -> str:'), (112, '        path, _ = os.path.splitext(self.input_file_path)'), (113, '        if path.startswith(""_""):'), (114, '            path = path[1:]'), (115, '        return path'), (117, '    def get_default_scene_name(self) -> str:'), (127, '    def get_resolution_directory(self) -> str:'), (128, '        pixel_height = self.scene.camera.pixel_height'), (129, '        fps = self.scene.camera.fps'), (130, '        return ""{}p{}"".format('), (131, '            pixel_height, fps'), (132, '        )'), (133, ''), (139, '        result = os.path.join('), (140, '            self.partial_movie_directory,'), (141, '            ""{:05}{}"".format('), (142, '                self.scene.num_plays,'), (143, '                self.movie_file_extension,'), (144, '            )'), (145, '        )'), (146, '        return result'), (202, '        if not self.break_into_partial_movies and self.write_to_movie:'), (206, '        if self.break_into_partial_movies and self.write_to_movie:'), (210, '        if self.break_into_partial_movies and self.write_to_movie:'), (214, '        if self.write_to_movie:'), (215, '            if self.break_into_partial_movies:'), (216, '                self.combine_movie_files()'), (217, '            else:'), (218, '                self.close_movie_pipe()'), (237, '        # if self.pixel_format.startswith(""yuv""):'), (249, ""            '-an',  # Tells FFMPEG not to expect any audio""), (276, '        guarantee_existence(str(insert_dir))'), (277, '        return Path(insert_dir, f""{scene_name}_{index}{movie_path.suffix}"")'), (286, '        self.inserted_file_path = str(insert_path)'), (330, '    def combine_movie_files(self) -> None:'), (331, '        kwargs = {'), (332, '            ""remove_non_integer_files"": True,'), (333, '            ""extension"": self.movie_file_extension,'), (334, '        }'), (335, '        if self.scene.start_at_animation_number is not None:'), (336, '            kwargs[""min_index""] = self.scene.start_at_animation_number'), (337, '        if self.scene.end_at_animation_number is not None:'), (338, '            kwargs[""max_index""] = self.scene.end_at_animation_number'), (339, '        else:'), (340, '            kwargs[""remove_indices_greater_than""] = self.scene.num_plays - 1'), (341, '        partial_movie_files = get_sorted_integer_files('), (342, '            self.partial_movie_directory,'), (343, '            **kwargs'), (344, '        )'), (345, '        if len(partial_movie_files) == 0:'), (346, '            log.warning(""No animations in this scene"")'), (347, '            return'), (348, ''), (349, '        # Write a file partial_file_list.txt containing all'), (350, '        # partial movie files'), (351, '        file_list = os.path.join('), (352, '            self.partial_movie_directory,'), (353, '            ""partial_movie_file_list.txt""'), (354, '        )'), (355, ""        with open(file_list, 'w') as fp:""), (356, '            for pf_path in partial_movie_files:'), (357, ""                if os.name == 'nt':""), (358, ""                    pf_path = pf_path.replace('\\\\', '/')""), (359, '                fp.write(f""file \\\'{pf_path}\\\'\\n"")'), (360, ''), (361, '        movie_file_path = self.get_movie_file_path()'), (362, '        commands = ['), (363, '            self.ffmpeg_bin,'), (364, ""            '-y',  # overwrite output file if it exists""), (365, ""            '-f', 'concat',""), (366, ""            '-safe', '0',""), (367, ""            '-i', file_list,""), (368, ""            '-loglevel', 'error',""), (369, ""            '-c', 'copy',""), (370, '            movie_file_path'), (371, '        ]'), (372, '        if not self.includes_sound:'), (373, ""            commands.insert(-1, '-an')""), (374, ''), (375, '        combine_process = sp.Popen(commands)'), (376, '        combine_process.wait()'), (377, '')]",No
manimlib/utils/dict_ops.py,manimlib/utils/dict_ops.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG",[],"[(23, ''), (24, ''), (25, 'def soft_dict_update(d1, d2):'), (26, '    """"""'), (27, ""    Adds key values pairs of d2 to d1 only when d1 doesn't""), (28, '    already have that key'), (29, '    """"""'), (30, '    for key, value in list(d2.items()):'), (31, '        if key not in d1:'), (32, '            d1[key] = value'), (33, ''), (34, ''), (35, 'def dict_eq(d1, d2):'), (36, '    if len(d1) != len(d2):'), (37, '        return False'), (38, '    for key in d1:'), (39, '        value1 = d1[key]'), (40, '        value2 = d2[key]'), (41, '        if type(value1) != type(value2):'), (42, '            return False'), (43, '        if type(d1[key]) == np.ndarray:'), (44, '            if any(d1[key] != d2[key]):'), (45, '                return False'), (46, '        elif d1[key] != d2[key]:'), (47, '            return False'), (48, '    return True')]",No
manimlib/utils/file_ops.py,manimlib/utils/file_ops.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(20, 'def guarantee_existence(path: str | Path) -> Path:'), (21, '    path = Path(path)'), (22, '    path.mkdir(parents=True, exist_ok=True)'), (23, '    return path.absolute()'), (30, ') -> Path:'), (44, '        return Path(file_name)'), (50, '        Path(directory, file_name + extension)'), (55, '        if path.exists():')]","[(20, 'def add_extension_if_not_present(file_name: str, extension: str) -> str:'), (21, '    # This could conceivably be smarter about handling existing differing extensions'), (22, '    if(file_name[-len(extension):] != extension):'), (23, '        return file_name + extension'), (24, '    else:'), (25, '        return file_name'), (26, ''), (27, ''), (28, 'def guarantee_existence(path: str) -> str:'), (29, '    if not os.path.exists(path):'), (30, '        os.makedirs(path)'), (31, '    return os.path.abspath(path)'), (38, ') -> str:'), (52, '        return file_name'), (58, '        os.path.join(directory, file_name + extension)'), (63, '        if os.path.exists(path):'), (66, ''), (67, ''), (68, 'def get_sorted_integer_files('), (69, '    directory: str,'), (70, '    min_index: float = 0,'), (71, '    max_index: float = np.inf,'), (72, '    remove_non_integer_files: bool = False,'), (73, '    remove_indices_greater_than: float | None = None,'), (74, '    extension: str | None = None,'), (75, ') -> list[str]:'), (76, '    indexed_files = []'), (77, '    for file in os.listdir(directory):'), (78, ""        if '.' in file:""), (79, ""            index_str = file[:file.index('.')]""), (80, '        else:'), (81, '            index_str = file'), (82, ''), (83, '        full_path = os.path.join(directory, file)'), (84, '        if index_str.isdigit():'), (85, '            index = int(index_str)'), (86, '            if remove_indices_greater_than is not None:'), (87, '                if index > remove_indices_greater_than:'), (88, '                    os.remove(full_path)'), (89, '                    continue'), (90, '            if extension is not None and not file.endswith(extension):'), (91, '                continue'), (92, '            if index >= min_index and index < max_index:'), (93, '                indexed_files.append((index, file))'), (94, '        elif remove_non_integer_files:'), (95, '            os.remove(full_path)'), (96, '    indexed_files.sort(key=lambda p: p[0])'), (97, '    return list(map(lambda p: os.path.join(directory, p[1]), indexed_files))')]",No
manimlib/utils/simple_functions.py,manimlib/utils/simple_functions.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(55, '    """"""'), (56, '    Less heavyweight name for np.true_divide, enabling'), (57, '    default behavior for 0/0'), (58, '    """"""'), (69, 'def binary_search('), (70, '    function: Callable[[float], float],'), (71, '    target: float,'), (72, '    lower_bound: float,'), (73, '    upper_bound: float,'), (74, '    tolerance:float = 1e-4'), (75, ') -> float | None:')]","[(39, '# Just to have a less heavyweight name for this extremely common operation'), (40, '#'), (41, '# We may wish to have more fine-grained control over division by zero behavior'), (42, '# in the future (separate specifiable values for 0/0 and x/0 with x != 0),'), (43, '# but for now, we just allow the option to handle indeterminate 0/0.'), (44, ''), (71, 'def binary_search(function: Callable[[float], float],'), (72, '                  target: float,'), (73, '                  lower_bound: float,'), (74, '                  upper_bound: float,'), (75, '                  tolerance:float = 1e-4) -> float | None:')]",No
manimlib/utils/tex.py,manimlib/utils/tex.py,744e695340c5691551f2650d99db71964cb292c7,00b34f202044dd841c96c4bd60322d849226c8d7,"Misc. clean up (#2269)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG","[(4, 'from functools import lru_cache'), (9, '@lru_cache'), (11, '    tex = remove_tex_environments(tex)'), (12, '    commands_pattern = r""""""'), (13, '        (?P<sqrt>\\\\sqrt\\[[0-9]+\\])|    # Special sqrt with number'), (14, '        (?P<cmd>\\\\[a-zA-Z!,-/:;<>]+)   # Regular commands'), (17, '    pos = 0'), (18, '    for match in re.finditer(commands_pattern, tex, re.VERBOSE):'), (19, '        # Count normal characters up to this command'), (20, '        total += sum(1 for c in tex[pos:match.start()] if c not in ""^{} \\n\\t_$\\\\&"")'), (22, '        if match.group(""sqrt""):'), (23, '            total += len(match.group()) - 5'), (24, '        else:'), (25, '            total += TEX_TO_SYMBOL_COUNT.get(match.group(), 1)'), (26, '        pos = match.end()'), (29, '    total += sum(1 for c in tex[pos:] if c not in ""^{} \\n\\t_$\\\\&"")'), (31, ''), (32, ''), (33, 'def remove_tex_environments(tex: str) -> str:'), (34, '    # Handle \\phantom{...} with any content'), (35, '    tex = re.sub(r""\\\\phantom\\{[^}]*\\}"", """", tex)'), (36, '    # Handle other environment commands'), (37, '    tex = re.sub(r""\\\\(begin|end)(\\{\\w+\\})?(\\{\\w+\\})?(\\[\\w+\\])?"", """", tex)'), (38, '    return tex')]","[(10, '    This function attempts to estimate the number of symbols that'), (11, '    a given string of tex would produce.'), (12, ''), (13, '    Warning, it may not behave perfectly'), (14, '    """"""'), (15, '    # First, remove patterns like \\begin{align}, \\phantom{thing},'), (16, '    # \\begin{array}{cc}, etc.'), (17, '    pattern = ""|"".join('), (18, '        rf""(\\\\{s})"" + r""(\\{\\w+\\})?(\\{\\w+\\})?(\\[\\w+\\])?""'), (19, '        for s in [""begin"", ""end"", ""phantom""]'), (20, '    )'), (21, '    tex = re.sub(pattern, """", tex)'), (22, ''), (23, '    # Progressively count the symbols associated with certain tex commands,'), (24, '    # and remove those commands from the string, adding the number of symbols'), (25, '    # that command creates'), (28, '    # Start with the special case \\sqrt[number]'), (29, '    for substr in re.findall(r""\\\\sqrt\\[[0-9]+\\]"", tex):'), (30, '        total += len(substr) - 5  # e.g. \\sqrt[3] is 3 symbols'), (31, '        tex = tex.replace(substr, "" "")'), (32, ''), (33, '    general_command = r""\\\\[a-zA-Z!,-/:;<>]+""'), (34, '    for substr in re.findall(general_command, tex):'), (35, '        total += TEX_TO_SYMBOL_COUNT.get(substr, 1)'), (36, '        tex = tex.replace(substr, "" "")'), (39, '    total += sum(map(lambda c: c not in ""^{} \\n\\t_$\\\\&"", tex))')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,33dbf049856f0f9e42b6791d926fe04707128440,744e695340c5691551f2650d99db71964cb292c7,"Make checkpoint_states an instance variable of CheckpointManager (#2273)

As per https://github.com/3b1b/manim/issues/2272","[(160, '    def __init__(self):'), (161, '        self.checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()')]","[(160, '    checkpoint_states: dict[str, list[tuple[Mobject, Mobject]]] = dict()')]",No
manimlib/window.py,manimlib/window.py,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,33dbf049856f0f9e42b6791d926fe04707128440,"Move resizing out of Window.focus, and into Window.init_for_scene (#2274)","[(72, '        # This line seems to resync the viewport'), (73, '        self.on_resize(*self.size)')]","[(72, '        self.focus()'), (109, '        # This line seems to resync the viewport'), (110, '        self.on_resize(*self.size)')]",No
manimlib/__main__.py,manimlib/__main__.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","[(8, 'from manimlib.utils.cache import clear_cache'), (58, '    if args.clear_cache:'), (59, '        clear_cache()')]",[],No
manimlib/config.py,manimlib/config.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","[(10, 'from pathlib import Path'), (35, '    config = Dict(merge_dicts_recursively('), (39, '    ))'), (51, '    return config'), (215, '        parser.add_argument('), (216, '            ""--clear-cache"",'), (217, '            action=""store_true"",'), (218, '            help=""Erase the cache used for Tex and Text Mobjects""'), (219, '        )'), (234, 'def update_directory_config(config: Dict):'), (235, '    dir_config = config.directories'), (236, '    base = dir_config.base'), (237, '    for key, subdir in dir_config.subdirs.items():'), (241, 'def update_window_config(config: Dict, args: Namespace):'), (242, '    window_config = config.window'), (247, '        window_config.full_screen = True'), (250, 'def update_camera_config(config: Dict, args: Namespace):'), (251, '    camera_config = config.camera'), (252, '    arg_resolution = get_resolution_from_args(args, config.resolution_options)'), (253, '    camera_config.resolution = arg_resolution or literal_eval(camera_config.resolution)'), (255, '        camera_config.fps = args.fps'), (258, '            camera_config.background_color = colour.Color(args.color)'), (264, '        camera_config.background_opacity = 0.0'), (267, 'def update_file_writer_config(config: Dict, args: Namespace):'), (268, '    file_writer_config = config.file_writer'), (283, '        file_writer_config.video_codec = args.vcodec'), (285, ""        file_writer_config.video_codec = 'prores_ks'""), (286, ""        file_writer_config.pixel_format = ''""), (288, ""        file_writer_config.video_codec = ''""), (291, '        file_writer_config.pixel_format = args.pix_fmt'), (294, 'def update_scene_config(config: Dict, args: Namespace):'), (295, '    scene_config = config.scene'), (309, '        scene_config.leave_progress_bars = True'), (311, '        scene_config.show_animation_progress = True'), (314, 'def update_run_config(config: Dict, args: Namespace):'), (315, '    config.run = Dict('), (327, 'def update_embed_config(config: Dict, args: Namespace):'), (329, '        config.embed.autoreload = True'), (383, 'def get_output_directory(args: Namespace, config: Dict) -> str:'), (384, '    dir_config = config.directories'), (385, '    out_dir = args.video_dir or dir_config.output'), (386, '    if dir_config.mirror_module_path and args.file:'), (387, '        file_path = Path(args.file).absolute()'), (388, '        rel_path = file_path.relative_to(dir_config.removed_mirror_prefix)'), (389, '        rel_path = Path(str(rel_path).lstrip(""_""))'), (390, '        out_dir = Path(out_dir, rel_path).with_suffix("""")'), (391, '    return out_dir')]","[(34, '    config = merge_dicts_recursively('), (38, '    )'), (50, '    return Dict(config)'), (228, 'def update_directory_config(config: dict):'), (229, '    dir_config = config[""directories""]'), (230, ""    base = dir_config['base']""), (231, ""    for key, subdir in dir_config['subdirs'].items():""), (235, 'def update_window_config(config: dict, args: Namespace):'), (236, '    window_config = config[""window""]'), (241, '        window_config[""full_screen""] = True'), (244, 'def update_camera_config(config: dict, args: Namespace):'), (245, '    camera_config = config[""camera""]'), (246, '    arg_resolution = get_resolution_from_args(args, config[""resolution_options""])'), (247, '    camera_config[""resolution""] = arg_resolution or literal_eval(camera_config[""resolution""])'), (249, '        camera_config[""fps""] = args.fps'), (252, '            camera_config[""background_color""] = colour.Color(args.color)'), (258, '        camera_config[""background_opacity""] = 0.0'), (261, 'def update_file_writer_config(config: dict, args: Namespace):'), (262, '    file_writer_config = config[""file_writer""]'), (271, '        input_file_path=args.file or """",'), (278, '        file_writer_config[""video_codec""] = args.vcodec'), (280, '        file_writer_config[""video_codec""] = \'prores_ks\''), (281, '        file_writer_config[""pixel_format""] = \'\''), (283, '        file_writer_config[""video_codec""] = \'\''), (286, '        file_writer_config[""pixel_format""] = args.pix_fmt'), (289, 'def update_scene_config(config: dict, args: Namespace):'), (290, '    scene_config = config[""scene""]'), (304, '        scene_config[""leave_progress_bars""] = True'), (306, '        scene_config[""show_animation_progress""] = True'), (309, 'def update_run_config(config: dict, args: Namespace):'), (310, '    config[""run""] = dict('), (322, 'def update_embed_config(config: dict, args: Namespace):'), (324, '        config[""embed""][""autoreload""] = True'), (378, 'def get_output_directory(args: Namespace, config: dict) -> str:'), (379, '    dir_config = config[""directories""]'), (380, '    output_directory = args.video_dir or dir_config[""output""]'), (381, '    if dir_config[""mirror_module_path""] and args.file:'), (382, '        to_cut = dir_config[""removed_mirror_prefix""]'), (383, '        ext = os.path.abspath(args.file)'), (384, '        ext = ext.replace(to_cut, """").replace("".py"", """")'), (385, '        if ext.startswith(""_""):'), (386, '            ext = ext[1:]'), (387, '        output_directory = os.path.join(output_directory, ext)'), (388, '    return output_directory')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","[(114, '        return [BlankScene]')]","[(114, '        return [BlankScene(**scene_config)]')]",No
manimlib/scene/scene_file_writer.py,manimlib/scene/scene_file_writer.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","[(38, '        output_directory: str = ""."",')]","[(37, '        # What python file is generating this scene'), (38, '        input_file_path: str = """",'), (40, '        output_directory: str = """",'), (60, '        self.input_file_path = input_file_path')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,f427fc67df75513be0cd3f3329e327a9a19401c3,3d9a0cd25e4604625b9740a98c46f4c5e272a10d,"A few bug fixes (#2277)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble","[(34, 'def get_tex_config(template: str = """") -> tuple[str, str]:'), (36, '    Returns a compiler and preamble to use for rendering LaTeX'), (39, '    config = get_tex_template_config(template)'), (40, '    return config[""compiler""], config[""preamble""]'), (76, '        message = f""Writing {(short_tex or latex)[:70]}...""'), (77, '    else:'), (78, '        message = """"'), (79, ''), (80, '    compiler, preamble = get_tex_config(template)'), (81, ''), (82, '    preamble = ""\\n"".join([preamble, additional_preamble])'), (83, '    full_tex = get_full_tex(latex, preamble)'), (84, '    return full_tex_to_svg(full_tex, compiler, message)'), (86, ''), (87, '@cache_on_disk'), (88, 'def full_tex_to_svg(full_tex: str, compiler: str = ""latex"", message: str = """"):'), (89, '    if message:'), (90, '        print(message, end=""\\r"")'), (101, '        tex_path = Path(temp_dir, ""working"").with_suffix("".tex"")'), (102, '        dvi_path = tex_path.with_suffix(dvi_ext)'), (105, '        tex_path.write_text(full_tex)'), (124, '            log_path = tex_path.with_suffix("".log"")'), (125, '            if log_path.exists():'), (126, '                content = log_path.read_text()'), (127, '                error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (128, '                if error_match:'), (129, '                    error_str = error_match.group()'), (147, '    if message:')]","[(34, 'def get_tex_config(template: str = """") -> dict[str, str]:'), (36, '    Returns a dict which should look something like this:'), (37, '    {'), (38, '        ""template"": ""default"",'), (39, '        ""compiler"": ""latex"",'), (40, '        ""preamble"": ""...""'), (41, '    }'), (44, '    template_config = get_tex_template_config(template)'), (45, '    return {'), (46, '        ""template"": template,'), (47, '        ""compiler"": template_config[""compiler""],'), (48, '        ""preamble"": template_config[""preamble""]'), (49, '    }'), (63, '@cache_on_disk'), (86, '        max_message_len = 80'), (87, '        message = f""Writing {short_tex or latex}""'), (88, '        if len(message) > max_message_len:'), (89, '            message = message[:max_message_len - 3] + ""...""'), (90, '        print(message, end=""\\r"")'), (92, '    tex_config = get_tex_config(template)'), (93, '    compiler = tex_config[""compiler""]'), (102, '    preamble = tex_config[""preamble""] + ""\\n"" + additional_preamble'), (103, '    full_tex = get_full_tex(latex, preamble)'), (104, ''), (107, '        base_path = os.path.join(temp_dir, ""working"")'), (108, '        tex_path = base_path + "".tex""'), (109, '        dvi_path = base_path + dvi_ext'), (112, '        Path(tex_path).write_text(full_tex)'), (131, '            log_path = base_path + "".log""'), (132, '            if os.path.exists(log_path):'), (133, '                with open(log_path, ""r"", encoding=""utf-8"") as log_file:'), (134, '                    content = log_file.read()'), (135, '                    error_match = re.search(r""(?<=\\n! ).*\\n.*\\n"", content)'), (136, '                    if error_match:'), (137, '                        error_str = error_match.group()'), (155, '    if show_message_during_execution:')]",No
setup.cfg,setup.cfg,0c69ab6a32d4193f03ba9a604278eb3ce9699518,f427fc67df75513be0cd3f3329e327a9a19401c3,Update version number,"[(3, 'version = 1.7.2')]","[(3, 'version = 1.7.1')]",No
manimlib/constants.py,manimlib/constants.py,c13d2a946b1c2fc82596da3d2db251053aab32e9,0c69ab6a32d4193f03ba9a604278eb3ce9699518,fix typos (#2270),"[(65, 'DEGREES = DEG  # Many older animations use the full name')]","[(65, 'DEGREES = DEG  # Many older animations use teh full name')]",No
manimlib/default_config.yml,manimlib/default_config.yml,c13d2a946b1c2fc82596da3d2db251053aab32e9,0c69ab6a32d4193f03ba9a604278eb3ce9699518,fix typos (#2270),"[(16, '  # Manim may write to and read from the file system, e.g.'), (104, '  pan_3d: ""d""'), (105, '  pan: ""f""'), (106, '  reset: ""r""'), (107, '  quit: ""q"" # Together with command'), (108, '  select: ""s""'), (109, '  unselect: ""u""'), (110, '  grab: ""g""'), (111, '  x_grab: ""h""'), (112, '  y_grab: ""v""'), (113, '  resize: ""t""'), (114, '  color: ""c""'), (115, '  information: ""i""'), (116, '  cursor: ""k""')]","[(16, '  # Manim may write to and read from teh file system, e.g.'), (104, ""  pan_3d: 'd'""), (105, ""  pan: 'f'""), (106, ""  reset: 'r'""), (107, ""  quit: 'q'  # Together with command""), (108, ""  select: 's'""), (109, ""  unselect: 'u'""), (110, ""  grab: 'g'""), (111, ""  x_grab: 'h'""), (112, ""  y_grab: 'v'""), (113, ""  resize: 't'""), (114, ""  color: 'c'""), (115, ""  information: 'i'""), (116, ""  cursor: 'k'"")]",No
docs/source/getting_started/configuration.rst,docs/source/getting_started/configuration.rst,39fbb677dcc86fc32075249e66a3cbaba508aa7b,c13d2a946b1c2fc82596da3d2db251053aab32e9,"Have autoreload update shell namespace with reloaded module variables (#2278)

* Have autoreload update shell namespace with reloaded module variables

* Update comments","[(66, '``--autoreload``                                                  Automatically reload Python modules to pick up code changes across during an interactive embedding')]","[(66, '``--autoreload``                                                  Automatically reload Python modules to pick up code changes across different files')]",No
manimlib/scene/scene_embed.py,manimlib/scene/scene_embed.py,39fbb677dcc86fc32075249e66a3cbaba508aa7b,c13d2a946b1c2fc82596da3d2db251053aab32e9,"Have autoreload update shell namespace with reloaded module variables (#2278)

* Have autoreload update shell namespace with reloaded module variables

* Update comments","[(145, '        """"""Enables reload the shell\'s module before all calls""""""'), (146, '        def pre_cell_func(*args, **kwargs):'), (147, '            new_mod = ModuleLoader.get_module(self.shell.user_module.__file__, is_during_reload=True)'), (148, '            self.shell.user_ns.update(vars(new_mod))'), (149, ''), (150, '        self.shell.events.register(""pre_run_cell"", pre_cell_func)')]","[(145, '        """"""Enables IPython autoreload for automatic reloading of modules.""""""'), (146, '        self.shell.magic(""load_ext autoreload"")'), (147, '        self.shell.magic(""autoreload all"")')]",No
manimlib/mobject/changing.py,manimlib/mobject/changing.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","[(115, '        self.always.set_stroke(stroke_color, stroke_width)')]","[(115, '        self.set_stroke(stroke_color, stroke_width)')]",No
manimlib/mobject/mobject.py,manimlib/mobject/mobject.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","[(310, '    @affects_data'), (312, '        self.resize_points(len(mobject.data), resize_func=resize_preserving_order)'), (313, '        for key in self.pointlike_data_keys:'), (314, '            self.data[key][:] = mobject.data[key]'), (317, '    # Others related to points'), (318, ''), (848, '        self.update()')]","[(310, '    # Others related to points'), (311, ''), (313, '        self.set_points(mobject.get_points())')]",No
manimlib/mobject/number_line.py,manimlib/mobject/number_line.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","[(224, '        ),'), (225, '        **kwargs'), (232, '            **kwargs')]","[(224, '        )')]",No
manimlib/mobject/types/surface.py,manimlib/mobject/types/surface.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","[(11, 'from manimlib.utils.bezier import inverse_interpolate'), (15, 'from manimlib.utils.simple_functions import clip'), (101, '    def uv_to_point(self, u, v):'), (102, '        nu, nv = self.resolution'), (103, '        uv_grid = np.reshape(self.get_points(), (nu, nv, self.dim))'), (104, ''), (105, '        alpha1 = clip(inverse_interpolate(*self.u_range[:2], u), 0, 1)'), (106, '        alpha2 = clip(inverse_interpolate(*self.v_range[:2], v), 0, 1)'), (107, '        scaled_u = alpha1 * (nu - 1)'), (108, '        scaled_v = alpha2 * (nv - 1)'), (109, '        u_int = int(scaled_u)'), (110, '        v_int = int(scaled_v)'), (111, '        u_int_plus = min(u_int + 1, nu - 1)'), (112, '        v_int_plus = min(v_int + 1, nv - 1)'), (113, ''), (114, '        a = uv_grid[u_int, v_int, :]'), (115, '        b = uv_grid[u_int, v_int_plus, :]'), (116, '        c = uv_grid[u_int_plus, v_int, :]'), (117, '        d = uv_grid[u_int_plus, v_int_plus, :]'), (118, ''), (119, '        u_res = scaled_u % 1'), (120, '        v_res = scaled_v % 1'), (121, '        return interpolate('), (122, '            interpolate(a, b, v_res),'), (123, '            interpolate(c, d, v_res),'), (124, '            u_res'), (125, '        )'), (126, ''), (338, '    def set_opacity(self, opacity: float | Iterable[float], recurse=True) -> Self:')]","[(310, '    def set_opacity(self, opacity: float | Iterable[float]) -> Self:')]",No
manimlib/utils/space_ops.py,manimlib/utils/space_ops.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","[(51, 'def get_dist(vect1: VectN, vect2: VectN):'), (52, '    return get_norm(vect2 - vect1)'), (53, ''), (54, '')]",[],No
manimlib/utils/tex.py,manimlib/utils/tex.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","[(14, '        (?P<escaped_brace>\\\\[{}])|      # Escaped braces'), (15, '        (?P<cmd>\\\\[a-zA-Z!,-/:;<>]+)    # Regular commands'), (25, '        elif match.group(""escaped_brace""):'), (26, '            total += 1  # Count escaped brace as one symbol')]","[(14, '        (?P<cmd>\\\\[a-zA-Z!,-/:;<>]+)   # Regular commands')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,96d44bd560564882ddc6f0d81b92ca2a00b5954b,39fbb677dcc86fc32075249e66a3cbaba508aa7b,"Video work (#2284)

* Comment tweak

* Directly print traceback

Since the shell.showtraceback is giving some issues

* Make InteracrtiveSceneEmbed into a class

This way it can keep track of it's internal shell; use of get_ipython has a finicky relationship with reloading.

* Move remaining checkpoint_paste logic into scene_embed.py

This involved making a few context managers for Scene: temp_record, temp_skip, temp_progress_bar, which seem useful in and of themselves.

* Change null key to be the empty string

* Ensure temporary svg paths for Text are deleted

* Remove unused dict_ops.py functions

* Remove break_into_partial_movies from file_writer configuration

* Rewrite guarantee_existence using Path

* Clean up SceneFileWriter

It had a number of vestigial functions no longer used, and some setup that could be made more organized.

* Remove --save_pngs CLI arg (which did nothing)

* Add --subdivide CLI arg

* Remove add_extension_if_not_present

* Remove get_sorted_integer_files

* Have find_file return Path

* Minor clean up

* Clean up num_tex_symbols

* Fix find_file

* Minor cleanup for extract_scene.py

* Add preview_frame_while_skipping option to scene config

* Use shell.showtraceback function

* Move keybindings to config, instead of in-place constants

* Replace DEGREES -> DEG

* Add arg to clear the cache

* Separate out full_tex_to_svg from tex_to_svg

And only cache to disk the results of full_tex_to_svg.  Otherwise, making edits to the tex_templates would not show up without clearing the cache.

* Bug fix in handling BlankScene

* Make checkpoint_states an instance variable of CheckpointManager

As per https://github.com/3b1b/manim/issues/2272

* Move resizing out of Window.focus, and into Window.init_for_scene

* Make default output directory ""."" instead of """"

To address https://github.com/3b1b/manim/issues/2261

* Remove input_file_path arg from SceneFileWriter

* Use Dict syntax in place of dict for config more consistently across config.py

* Simplify get_output_directory

* Swap order of preamble and additional preamble

* Minor stylistic tweak

* Have UnitInterval pass on kwargs to NumberLine

* Add simple get_dist function

* Have TracedPath always update to the stroke configuration passed in

* Have Mobject.match_points apply to all parts of data in pointlike_data_key

* Always call Mobject.update upon adding an updater

* Add Surface.uv_to_point

* Make sure Surface.set_opacity takes in a recurse option

* Update num_tex_symbols to account for \{ and \}","[(25, '        log.warning(f""Cannot recognize template {name}, falling back to \'default\'."")')]","[(25, '        log.warning('), (26, '            ""Cannot recognize template \'%s\', falling back to \'default\'."",'), (27, '            name'), (28, '        )')]",No
manimlib/default_config.yml,manimlib/default_config.yml,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(8, '# Alternatively, you can create it wherever you like, and on running'), (14, '  # source code generating that video'), (47, '  # position: (500, 500)  # Specific position, in pixel coordinates, for upper right corner')]","[(8, '# Alternatively, you can create it whereever you like, and on running'), (14, '  # sourcecode generating that video'), (47, '  # position: (500, 500)  # Specific position, in pixel coordiantes, for upper right corner')]",No
manimlib/extract_scene.py,manimlib/extract_scene.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(15, ''), (146, 'def insert_embed_line_to_module(module: Module, run_config: Dict) -> None:'), (154, '    line_number = run_config.embed_line'), (161, '    # When the user executes the `-e <line_number>` command'), (162, '    # without specifying scene_names, the nearest class name above'), (163, ""    # `<line_number>` will be automatically used as 'scene_names'.""), (164, ''), (165, '    if not run_config.scene_names:'), (166, '        classes = list(filter(lambda line: line.startswith(""class""), lines[:line_number]))'), (167, '        if classes:'), (168, '            from re import search'), (169, ''), (170, '            scene_name = search(r""(\\w+)\\("", classes[-1])'), (171, '            run_config.update(scene_names=[scene_name.group(1)])'), (172, '        else:'), (173, '            log.error(f""No \'class\' found above {line_number}!"")'), (174, ''), (181, 'def get_module(run_config: Dict) -> Module:'), (182, '    module = ModuleLoader.get_module(run_config.file_name, run_config.is_reload)'), (183, '    if run_config.embed_line:'), (184, '        insert_embed_line_to_module(module, run_config)'), (189, '    module = get_module(run_config)')]","[(145, 'def insert_embed_line_to_module(module: Module, line_number: int):'), (165, 'def get_module(file_name: Optional[str], embed_line: Optional[int], is_reload: bool = False) -> Module:'), (166, '    module = ModuleLoader.get_module(file_name, is_reload)'), (167, '    if embed_line:'), (168, '        insert_embed_line_to_module(module, embed_line)'), (173, '    module = get_module(run_config.file_name, run_config.embed_line, run_config.is_reload)')]",No
manimlib/mobject/probability.py,manimlib/mobject/probability.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(46, '            **kwargs')]",[],No
manimlib/mobject/svg/string_mobject.py,manimlib/mobject/svg/string_mobject.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>","[(125, '        labelled_file = self.get_svg_string_by_content(labelled_content)'), (126, '        labelled_submobs = super().mobjects_from_svg_string(labelled_file)')]","[(125, '        labelled_file = self.get_file_path_by_content(labelled_content)'), (126, '        labelled_submobs = super().mobjects_from_file(labelled_file)')]",No
manimlib/mobject/svg/text_mobject.py,manimlib/mobject/svg/text_mobject.py,24eefef5bf185f7523799b5fcf71b4a90fca8c24,96d44bd560564882ddc6f0d81b92ca2a00b5954b,"Automatically identify the class name based on the specified line number. (#2280)

* identify the scene name based on the line number

* resolving a minor bug in string_mobject

* removing bug of string validation

* Update manimlib/default_config.yml

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* Update manimlib/extract_scene.py

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>

* update search scene names

---------

Co-authored-by: Splines <37160523+Splines@users.noreply.github.com>",[],"[(179, '        if not isinstance(self, Text):'), (180, '            self.validate_markup_string(text)'), (181, '')]",No
manimlib/utils/tex_file_writing.py,manimlib/utils/tex_file_writing.py,7a7bf83f117034b5cdf60ae85511c1b004769651,24eefef5bf185f7523799b5fcf71b4a90fca8c24,Only use -no-pdf for xelatex rendering (#2298),"[(108, '                *([\'-no-pdf\'] if compiler == ""xelatex"" else []),')]","[(108, '                ""-no-pdf"",')]",No
